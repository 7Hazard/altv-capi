TYPEDEF CLASS alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout = alt::VectorLayout
ClassTemplateSpecializationDecl 0x28557fd49d8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:16:5, line:55:5> line:17:11 class VectorLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-CXXRecordDecl 0x285580111d0 prev 0x28557fd49d8 <col:5, col:11> col:11 implicit class VectorLayout
|-AccessSpecDecl 0x28558011260 <line:19:5, col:11> col:5 public
|-TypeAliasDecl 0x285580112c8 <line:20:9, col:25> col:15 Element 'float':'float'
| `-SubstTemplateTypeParmType 0x28558011290 'float' sugar
|   |-TemplateTypeParmType 0x28557fcd8d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x28557fcd880 'T'
|   `-BuiltinType 0x28556ddc600 'float'
|-VarDecl 0x28558011328 <line:22:9, col:42> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-SubstNonTypeTemplateParmExpr 0x285580113c8 <col:42> 'unsigned long long'
|   `-IntegerLiteral 0x285580113a0 <col:42> 'unsigned long long' 4
|-CXXConstructorDecl 0x28558011468 <line:24:9, col:42> col:9 used VectorLayout 'void ()'
| |-CXXCtorInitializer Field 0x28558012eb8 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-InitListExpr 0x2855886af40 <col:34, col:38> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-array_filler: ImplicitValueInitExpr 0x2855886afa0 <<invalid sloc>> 'alt::VectorLayout<float, 4>::Element':'float'
| |   `-ImplicitCastExpr 0x2855886af80 <col:36> 'alt::VectorLayout<float, 4>::Element':'float' <IntegralToFloating>
| |     `-IntegerLiteral 0x2855886ae48 <col:36> 'int' 0
| `-CompoundStmt 0x2855886aee8 <col:40, col:42>
|-CXXConstructorDecl 0x285580117f8 <line:25:9, col:55> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element (&)[4])'
| `-ParmVarDecl 0x285580116e8 <col:22, col:54> col:38 _elements 'const alt::VectorLayout<float, 4>::Element (&)[4]'
|-CXXConstructorDecl 0x28558011a08 <line:26:9, col:39> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element &)'
| `-ParmVarDecl 0x285580118f8 <col:22, col:37> col:37 el 'const alt::VectorLayout<float, 4>::Element &'
|-FunctionTemplateDecl 0x285580120d0 <line:28:9, line:29:41> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x28558011ac8 <line:28:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x28558011b48 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x28558012028 <line:29:9, col:41> col:9 VectorLayout 'void (const Args &...)'
|   `-ParmVarDecl 0x28558011f10 <col:22, col:37> col:37 args 'const Args &...' pack
|-FunctionTemplateDecl 0x285580126e0 <line:31:9, line:32:44> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x285580121b0 <line:31:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x28558012228 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x28558012638 <line:32:9, col:44> col:9 VectorLayout 'void (const ULayout &)'
| | `-ParmVarDecl 0x28558012558 <col:22, col:37> col:37 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x28558017d98 <col:9, col:44> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4> &)'
|   |-TemplateArgument type 'alt::VectorLayout<float, 4>'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x28558017cd8 <col:22, col:37> col:37 _layout 'const alt::VectorLayout<float, 4> &'
|-CXXMethodDecl 0x285580128a8 <line:37:9, col:44> col:18 operator[] 'alt::VectorLayout<float, 4>::Element &(std::size_t)'
| `-ParmVarDecl 0x285580127e8 <col:29, col:41> col:41 key 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x28558012a28 <line:38:9, col:52> col:24 operator[] 'const alt::VectorLayout<float, 4>::Element &(std::size_t) const'
| `-ParmVarDecl 0x28558012960 <col:35, col:47> col:47 key 'std::size_t':'unsigned long long'
|-FriendDecl 0x28558012d80 <line:40:9, line:51:9> line:40:30
| `-FunctionDecl 0x28558012cb0 parent 0x28557fcd5a0 <col:9, line:51:9> line:40:30 used operator<< 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|   |-ParmVarDecl 0x28558012ae0 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x28558012b88 <col:63, col:83> col:83 used layout 'const alt::VectorLayout<float, 4> &'
|   `-CompoundStmt 0x285588c2648 <line:41:9, line:51:9>
|     |-CXXOperatorCallExpr 0x285588c10d8 <line:42:13, col:79> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | |-ImplicitCastExpr 0x285588c10c0 <col:76> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x285588c10a0 <col:76> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | |-CXXOperatorCallExpr 0x285588c1050 <col:13, col:70> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | |-ImplicitCastExpr 0x285588c1038 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(*)(unsigned long long)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x285588c1018 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)' lvalue CXXMethod 0x28557fe49a8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)'
|     | | |-CXXOperatorCallExpr 0x285588c0f88 <col:13, col:62> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | |-ImplicitCastExpr 0x285588c0f70 <col:59> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | `-DeclRefExpr 0x285588c0f50 <col:59> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | |-CXXOperatorCallExpr 0x285588c0f00 <col:13, col:57> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | |-ImplicitCastExpr 0x285588c0ee8 <col:33> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | `-DeclRefExpr 0x285588c0ec8 <col:33> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | |-CXXOperatorCallExpr 0x285588c0e10 <col:13, col:23> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | | |-ImplicitCastExpr 0x285588c0df8 <col:20> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | | `-DeclRefExpr 0x285588c0dd8 <col:20> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | | |-DeclRefExpr 0x285588c0da0 <col:13> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x28558012ae0 'stream' 'std::ostream &'
|     | | | | | `-ImplicitCastExpr 0x285588c0dc0 <col:23> 'const char *' <ArrayToPointerDecay>
|     | | | | |   `-StringLiteral 0x285588b6ed8 <col:23> 'const char [8]' lvalue "Vector<"
|     | | | | `-CXXMemberCallExpr 0x285588c0ea8 <col:36, col:57> 'const char *'
|     | | | |   `-MemberExpr 0x285588c0e78 <col:36, col:52> '<bound member function type>' .name 0x28557c21538
|     | | | |     `-CXXTypeidExpr 0x285588c0e58 <col:36, col:50> 'const type_info' lvalue
|     | | | `-ImplicitCastExpr 0x285588c0f38 <col:62> 'const char *' <ArrayToPointerDecay>
|     | | |   `-StringLiteral 0x285588b90a0 <col:62> 'const char [3]' lvalue ", "
|     | | `-ImplicitCastExpr 0x285588c1000 <col:70> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x285588c0fe0 <col:70> 'const std::size_t':'const unsigned long long' lvalue Var 0x28558011328 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | `-ImplicitCastExpr 0x285588c1088 <col:79> 'const char *' <ArrayToPointerDecay>
|     |   `-StringLiteral 0x285588bd768 <col:79> 'const char [4]' lvalue ">{ "
|     |-ForStmt 0x285588c2558 <line:44:13, line:48:13>
|     | |-DeclStmt 0x285588c1190 <line:44:18, col:35>
|     | | `-VarDecl 0x285588c1110 <col:18, col:34> col:30 used i 'std::size_t':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x285588c1178 <col:34> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x285588be8f0 <col:34> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x285588c1238 <col:37, col:41> 'bool' '<'
|     | | |-ImplicitCastExpr 0x285588c11e8 <col:37> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | | | `-DeclRefExpr 0x285588c11a8 <col:37> 'std::size_t':'unsigned long long' lvalue Var 0x285588c1110 'i' 'std::size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x285588c1220 <col:41> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x285588c1200 <col:41> 'const std::size_t':'const unsigned long long' lvalue Var 0x28558011328 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | |-UnaryOperator 0x285588c1278 <col:48, col:50> 'std::size_t':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x285588c1258 <col:50> 'std::size_t':'unsigned long long' lvalue Var 0x285588c1110 'i' 'std::size_t':'unsigned long long'
|     | `-CompoundStmt 0x285588c2538 <line:45:13, line:48:13>
|     |   |-IfStmt 0x285588c13a8 <line:46:17, col:39>
|     |   | |-BinaryOperator 0x285588c12e0 <col:21, col:26> 'bool' '!='
|     |   | | |-ImplicitCastExpr 0x285588c12b0 <col:21> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |   | | | `-DeclRefExpr 0x285588c1290 <col:21> 'std::size_t':'unsigned long long' lvalue Var 0x285588c1110 'i' 'std::size_t':'unsigned long long'
|     |   | | `-ImplicitCastExpr 0x285588c12c8 <col:26> 'unsigned long long' <IntegralCast>
|     |   | |   `-IntegerLiteral 0x285588bea30 <col:26> 'int' 0
|     |   | `-CXXOperatorCallExpr 0x285588c1370 <col:29, col:39> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |   |   |-ImplicitCastExpr 0x285588c1358 <col:36> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x285588c1338 <col:36> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     |   |   |-DeclRefExpr 0x285588c1300 <col:29> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x28558012ae0 'stream' 'std::ostream &'
|     |   |   `-ImplicitCastExpr 0x285588c1320 <col:39> 'const char *' <ArrayToPointerDecay>
|     |   |     `-StringLiteral 0x285588beac8 <col:39> 'const char [3]' lvalue ", "
|     |   `-CXXOperatorCallExpr 0x285588c2500 <line:47:17, col:44> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |     |-ImplicitCastExpr 0x285588c24e8 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(*)(float)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x285588c24c8 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(float)' lvalue CXXMethod 0x28557fe4b28 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(float)'
|     |     |-DeclRefExpr 0x285588c13c0 <col:17> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x28558012ae0 'stream' 'std::ostream &'
|     |     `-ImplicitCastExpr 0x285588c24b0 <col:27, col:44> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x285588c1480 <col:27, col:44> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
|     |         |-ImplicitCastExpr 0x285588c1450 <col:27, col:34> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
|     |         | `-MemberExpr 0x285588c1400 <col:27, col:34> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x28558012eb8
|     |         |   `-DeclRefExpr 0x285588c13e0 <col:27> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x28558012b88 'layout' 'const alt::VectorLayout<float, 4> &'
|     |         `-ImplicitCastExpr 0x285588c1468 <col:43> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |           `-DeclRefExpr 0x285588c1430 <col:43> 'std::size_t':'unsigned long long' lvalue Var 0x285588c1110 'i' 'std::size_t':'unsigned long long'
|     `-ReturnStmt 0x285588c2638 <line:50:13, col:30>
|       `-CXXOperatorCallExpr 0x285588c2600 <col:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|         |-ImplicitCastExpr 0x285588c25e8 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285588c25c8 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285588c2590 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x28558012ae0 'stream' 'std::ostream &'
|         `-ImplicitCastExpr 0x285588c25b0 <col:30> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x285588bfcd0 <col:30> 'const char [3]' lvalue " }"
|-AccessSpecDecl 0x28558012dc0 <line:53:5, col:12> col:5 private
|-FieldDecl 0x28558012eb8 <line:54:9, col:31> col:17 referenced elements 'alt::VectorLayout<float, 4>::Element [4]'
|-CXXDestructorDecl 0x28558014e38 <line:17:11> col:11 implicit ~VectorLayout 'void ()' inline default trivial noexcept-unevaluated 0x28558014e38
|-CXXConstructorDecl 0x285580174e0 <col:11> col:11 implicit used constexpr VectorLayout 'void (const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| |-ParmVarDecl 0x285580175c8 <col:11> col:11 used 'const alt::VectorLayout<float, 4> &'
| |-CXXCtorInitializer Field 0x28558012eb8 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-ArrayInitLoopExpr 0x2855801a458 <col:11> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-OpaqueValueExpr 0x2855801a3b8 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |   | `-MemberExpr 0x2855801a370 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x28558012eb8
| |   |   `-DeclRefExpr 0x2855801a350 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x285580175c8 '' 'const alt::VectorLayout<float, 4> &'
| |   `-ImplicitCastExpr 0x2855801a440 <col:11> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x2855801a420 <col:11> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
| |       |-ImplicitCastExpr 0x2855801a408 <col:11> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x2855801a3b8 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |       |   `-MemberExpr 0x2855801a370 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x28558012eb8
| |       |     `-DeclRefExpr 0x2855801a350 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x285580175c8 '' 'const alt::VectorLayout<float, 4> &'
| |       `-ArrayInitIndexExpr 0x2855801a3d0 <<invalid sloc>> 'unsigned long long'
| `-CompoundStmt 0x2855801a4a8 <col:11>
|-CXXConstructorDecl 0x28558017668 <col:11> col:11 implicit constexpr VectorLayout 'void (alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x28558017668
| `-ParmVarDecl 0x28558017778 <col:11> col:11 'alt::VectorLayout<float, 4> &&'
|-CXXMethodDecl 0x28558882c18 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| `-ParmVarDecl 0x28558882d28 <col:11> col:11 'const alt::VectorLayout<float, 4> &'
`-CXXMethodDecl 0x28558882d98 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x28558882d98
  `-ParmVarDecl 0x28558882ea8 <col:11> col:11 'alt::VectorLayout<float, 4> &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2f = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd23f0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<float, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2i = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd30a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<int, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3f = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd3b20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<float, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3i = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd4110 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<int, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4f = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd4b90 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x28558012f58 prev 0x28557fd4b90 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x28558012fe8 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x28558013028 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x28558011130 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x28557fcfd70 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x28557fcfd18 '_Layout'
|   `-RecordType 0x28557fd4ad0 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x28557fd49d8 'VectorLayout'
|-TypeAliasDecl 0x28558013098 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x28557fd2190 'float' sugar
|   |-TemplateTypeParmType 0x28557fcfb20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x28557fcfad0 'T'
|   `-BuiltinType 0x28556ddc600 'float'
|-VarDecl 0x285580130f8 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x28558013228 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x285580131f8 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x28558011328 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x285580132c0 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x28558018918 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x28558018980 <col:26>
|-CXXConstructorDecl 0x28558013588 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x285580134a8 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x28558013798 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x28558013688 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x28558013dd0 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x28558013858 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x285580138d8 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x28558013d28 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x28558013c40 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x285580143e0 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x28558013eb0 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x28558013f28 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x28558014338 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x28558014258 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x28558019d78 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x28558019cb8 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x28558014538 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x28558014608 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x28558014938 <line:91:9, col:65> col:24
| `-FunctionDecl 0x28558014868 parent 0x28557fcd5a0 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x285580146f8 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x28558014798 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x28558014ba8 <line:99:9, col:69> col:23
| `-FunctionDecl 0x28558014ad8 parent 0x28557fcd5a0 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x28558014988 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x28558014a00 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x285580173f8 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x285580173f8
|-CXXConstructorDecl 0x28558017eb8 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x28558017f98 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x2855801a4b8 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x28558019f20 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x28558019f00 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x28558017f98 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x2855801a528 <col:11>
|-CXXConstructorDecl 0x28558018450 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x28558018450
| `-ParmVarDecl 0x28558018568 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x28558882a68 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x28558882b78 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x28558882f18 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x28558882f18
  `-ParmVarDecl 0x28558883028 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4i = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd5180 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::VectorLayout<int, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::DXMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x28557fdad30 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::MatrixLayout<float, 4, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::Point = alt::Vector
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PointPadded = alt::Vector
ClassTemplateSpecializationDecl 0x28557ffdfd8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Position = alt::Vector
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PositionPadded = alt::Vector
ClassTemplateSpecializationDecl 0x28557ffdfd8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Rotation = alt::Vector
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::RotationPadded = alt::Vector
ClassTemplateSpecializationDecl 0x28558010b38 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Row = alt::Vector
ClassTemplateSpecializationDecl 0x28557fd4b90 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x28558012f58 prev 0x28557fd4b90 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x28558012fe8 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x28558013028 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x28558011130 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x28557fcfd70 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x28557fcfd18 '_Layout'
|   `-RecordType 0x28557fd4ad0 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x28557fd49d8 'VectorLayout'
|-TypeAliasDecl 0x28558013098 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x28557fd2190 'float' sugar
|   |-TemplateTypeParmType 0x28557fcfb20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x28557fcfad0 'T'
|   `-BuiltinType 0x28556ddc600 'float'
|-VarDecl 0x285580130f8 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x28558013228 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x285580131f8 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x28558011328 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x285580132c0 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x28558018918 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x28558018980 <col:26>
|-CXXConstructorDecl 0x28558013588 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x285580134a8 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x28558013798 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x28558013688 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x28558013dd0 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x28558013858 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x285580138d8 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x28558013d28 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x28558013c40 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x285580143e0 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x28558013eb0 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x28558013f28 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x28558014338 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x28558014258 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x28558019d78 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x28558019cb8 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x28558014538 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x28558014608 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x28558014938 <line:91:9, col:65> col:24
| `-FunctionDecl 0x28558014868 parent 0x28557fcd5a0 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x285580146f8 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x28558014798 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x28558014ba8 <line:99:9, col:69> col:23
| `-FunctionDecl 0x28558014ad8 parent 0x28557fcd5a0 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x28558014988 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x28558014a00 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x285580173f8 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x285580173f8
|-CXXConstructorDecl 0x28558017eb8 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x28558017f98 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x2855801a4b8 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x28558019f20 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x28558019f00 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x28558017f98 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x2855801a528 <col:11>
|-CXXConstructorDecl 0x28558018450 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x28558018450
| `-ParmVarDecl 0x28558018568 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x28558882a68 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x28558882b78 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x28558882f18 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x28558882f18
  `-ParmVarDecl 0x28558883028 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Transposed = alt::ViewMatrixLayout
CXXRecordDecl 0x28558010e00 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:318:5, line:360:5> line:318:11 referenced class ViewMatrixLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x28558010f18 <col:5, col:11> col:11 implicit referenced class ViewMatrixLayout
|-AccessSpecDecl 0x28558010fa8 <line:320:5, col:11> col:5 public
|-TypeAliasDecl 0x28558011010 <line:321:9, col:21> col:15 referenced Row 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| `-TypedefType 0x28558010fe0 'alt::Vector4f' sugar
|   |-TypeAlias 0x28557fd4e08 'Vector4f'
|   `-TemplateSpecializationType 0x28557fd4d60 'Vector4<float>' sugar alias Vector4
|     |-TemplateArgument type 'float'
|     |-TemplateSpecializationType 0x28557fd4cc0 'Vector<float, 4>' sugar Vector
|     | |-TemplateArgument type 'float':'float'
|     | |-TemplateArgument expr
|     | | `-ConstantExpr 0x28557fd4940 <line:114:49> 'std::size_t':'unsigned long long' 4
|     | |   `-ImplicitCastExpr 0x28557fd4928 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x28557fd4490 <col:49> 'int' 4
|     | `-RecordType 0x28557fd4ca0 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|     |   `-ClassTemplateSpecialization 0x28557fd4b90 'Vector'
|     `-TemplateSpecializationType 0x28557fd4cc0 'Vector<float, 4>' sugar Vector
|       |-TemplateArgument type 'float':'float'
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x28557fd4940 <col:49> 'std::size_t':'unsigned long long' 4
|       |   `-ImplicitCastExpr 0x28557fd4928 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|       |     `-IntegerLiteral 0x28557fd4490 <col:49> 'int' 4
|       `-RecordType 0x28557fd4ca0 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|         `-ClassTemplateSpecialization 0x28557fd4b90 'Vector'
|-TypeAliasDecl 0x28558014fb0 <line:322:9, col:39> col:15 referenced Element 'typename Row::Element':'float'
| `-ElaboratedType 0x28558014f40 'typename Row::Element' sugar
|   `-TypedefType 0x28558014f20 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element' sugar
|     |-TypeAlias 0x28558013098 'Element'
|     `-SubstTemplateTypeParmType 0x28557fd2190 'float' sugar
|       |-TemplateTypeParmType 0x28557fcfb20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x28557fcfad0 'T'
|       `-BuiltinType 0x28556ddc600 'float'
|-TypeAliasDecl 0x28558015020 <line:323:9, col:28> col:15 Transposed 'alt::ViewMatrixLayout'
| `-RecordType 0x28558010e90 'alt::ViewMatrixLayout'
|   `-CXXRecord 0x28558010e00 'ViewMatrixLayout'
|-VarDecl 0x285580150d0 <line:325:9, col:47> col:34 referenced Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x285580151d0 <col:42, col:47> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x285580151a0 <col:42, col:47> 'const std::size_t':'const unsigned long long' lvalue Var 0x285580130f8 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-VarDecl 0x28558015280 <line:326:9, col:43> col:34 used Height 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x28558015310 <col:43> 'const std::size_t':'const unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x285580152e8 <col:43> 'int' 4
|-CXXConstructorDecl 0x285580153d0 <line:328:9, col:36> col:9 ViewMatrixLayout 'void ()' default noexcept-unevaluated 0x285580153d0
|-CXXConstructorDecl 0x28558015898 <line:329:9, col:98> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row (&)[4])'
| |-ParmVarDecl 0x285580157a8 <col:26, col:51> col:38 used _rows 'const alt::ViewMatrixLayout::Row (&)[4]'
| |-CXXCtorInitializer Field 0x28558017020 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x28558018990 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x28558017088 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x28558018b58 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x285580170f0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x28558018d28 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x28558017158 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x28558018ef8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x28558019750 <col:54, col:98>
|   `-CallExpr 0x28558019700 <col:56, col:95> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x285580196e8 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x28558019650 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x28558019528 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x285573c0ba8 'copy')
|     |-ImplicitCastExpr 0x28558019738 <col:66> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x28558018fd8 <col:66> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x285580157a8 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |-UnaryOperator 0x28558019108 <col:73, col:86> 'const alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x285580190e8 <col:74, col:86> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ImplicitCastExpr 0x28558019098 <col:74> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     |   | `-DeclRefExpr 0x28558018ff8 <col:74> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x285580157a8 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |   `-ImplicitCastExpr 0x285580190d0 <col:80> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x285580190b0 <col:80> 'const std::size_t':'const unsigned long long' lvalue Var 0x28558015280 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x285580191b8 <col:89, col:90> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x28558019130 <col:90> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x28558017020
|         `-CXXThisExpr 0x28558019120 <col:90> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x28558015a78 <line:331:9, col:59> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row &)'
| |-ParmVarDecl 0x28558015988 <col:26, col:37> col:37 used row 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x28558017020 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801a538 <col:44, col:55> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x28558019768 <col:51> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x28558015988 'row' 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x28558017088 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801a708 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x285580170f0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801a8d8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x28558017158 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801aaa8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x2855801ab18 <col:57, col:59>
|-CXXConstructorDecl 0x28558015e68 <line:333:9, line:336:9> line:333:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Element (&)[16])'
| |-ParmVarDecl 0x28558015d78 <col:26, col:66> col:42 used elements 'const alt::ViewMatrixLayout::Element (&)[16]'
| |-CXXCtorInitializer Field 0x28558017020 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801aca8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x28558017088 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801ae78 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x285580170f0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801b048 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x28558017158 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801b218 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x2855801ba58 <line:334:9, line:336:9>
|   `-CallExpr 0x2855801ba20 <line:335:13, col:72> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x2855801ba08 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2855801b970 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x2855801b848 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x285573c0ba8 'copy')
|     |-CStyleCastExpr 0x2855801b3a0 <col:23, col:29> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     | `-ImplicitCastExpr 0x2855801b388 <col:29> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2855801b2f8 <col:29> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x28558015d78 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |-UnaryOperator 0x2855801b4d0 <col:39, col:63> 'alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x2855801b4b0 <col:40, col:63> 'alt::ViewMatrixLayout::Row':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ParenExpr 0x2855801b438 <col:40, col:55> 'alt::ViewMatrixLayout::Row *'
|     |   | `-CStyleCastExpr 0x2855801b410 <col:41, col:47> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     |   |   `-ImplicitCastExpr 0x2855801b3f8 <col:47> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x2855801b3c8 <col:47> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x28558015d78 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |   `-ImplicitCastExpr 0x2855801b498 <col:57> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x2855801b478 <col:57> 'const std::size_t':'const unsigned long long' lvalue Var 0x28558015280 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x2855801b528 <col:66, col:67> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x2855801b4f8 <col:67> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x28558017020
|         `-CXXThisExpr 0x2855801b4e8 <col:67> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x28558016208 <line:338:9, col:184> col:9 ViewMatrixLayout 'void (const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &)'
| |-ParmVarDecl 0x28558015f58 <col:26, col:42> col:42 used _right 'const alt::Vector4f &'
| |-ParmVarDecl 0x28558015fd0 <col:50, col:66> col:66 used _up 'const alt::Vector4f &'
| |-ParmVarDecl 0x28558016048 <col:71, col:87> col:87 used _forward 'const alt::Vector4f &'
| |-ParmVarDecl 0x285580160c0 <col:97, col:113> col:113 used _pos 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x28558017020 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801bef0 <col:121, col:135> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2855801ba70 <col:128> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x28558015f58 '_right' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x28558017088 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801c3c0 <col:138, col:146> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2855801bf48 <col:142> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x28558015fd0 '_up' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x285580170f0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801c890 <col:149, col:167> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2855801c418 <col:158> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x28558016048 '_forward' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x28558017158 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2855801cd60 <col:170, col:180> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2855801c8e8 <col:175> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x285580160c0 '_pos' 'const alt::Vector4f &'
| `-CompoundStmt 0x2855801cdd8 <col:182, col:184>
|-FunctionTemplateDecl 0x28558016820 <line:340:9, line:341:48> col:9 ViewMatrixLayout
| |-TemplateTypeParmDecl 0x285580162d0 <line:340:18, col:24> col:24 referenced class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x285580165e0 <col:33, col:96> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Height == Height>::type'
| `-CXXConstructorDecl 0x28558016778 <line:341:9, col:48> col:9 ViewMatrixLayout 'void (const ULayout &)'
|   |-ParmVarDecl 0x285580166b8 <col:26, col:41> col:41 _layout 'const ULayout &'
|   `-<<<NULL>>>
|-CXXMethodDecl 0x285580169f8 <line:346:9, col:66> col:14 operator[] 'alt::ViewMatrixLayout::Row &(std::size_t)'
| |-ParmVarDecl 0x285580168d0 <col:25, col:37> col:37 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x2855801cec8 <col:42, col:66>
|   `-ReturnStmt 0x2855801ceb8 <col:44, col:63>
|     `-ArraySubscriptExpr 0x2855801ce98 <col:51, col:63> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x2855801ce40 <col:51, col:58> 'alt::Vector4f *'
|       | `-UnaryOperator 0x2855801ce28 <col:52, col:53> 'alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x2855801cdf8 <col:53> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x28558017020
|       |     `-CXXThisExpr 0x2855801cde8 <col:53> 'alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x2855801ce80 <col:60> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2855801ce60 <col:60> 'std::size_t':'unsigned long long' lvalue ParmVar 0x285580168d0 'key' 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x28558016c18 <line:347:9, col:78> col:20 operator[] 'const alt::ViewMatrixLayout::Row &(std::size_t) const'
| |-ParmVarDecl 0x28558016af0 <col:31, col:43> col:43 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x2855801cfe8 <col:54, col:78>
|   `-ReturnStmt 0x2855801cfd8 <col:56, col:75>
|     `-ArraySubscriptExpr 0x2855801cfb8 <col:63, col:75> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x2855801cf60 <col:63, col:70> 'const alt::Vector4f *'
|       | `-UnaryOperator 0x2855801cf48 <col:64, col:65> 'const alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x2855801cef0 <col:65> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x28558017020
|       |     `-CXXThisExpr 0x2855801cee0 <col:65> 'const alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x2855801cfa0 <col:72> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2855801cf80 <col:72> 'std::size_t':'unsigned long long' lvalue ParmVar 0x28558016af0 'key' 'std::size_t':'unsigned long long'
|-FriendDecl 0x28558016fd0 <line:349:9, line:357:9> line:349:30
| `-FunctionDecl 0x28558016f10 parent 0x28557fcd5a0 <col:9, line:357:9> line:349:30 operator<< 'std::ostream &(std::ostream &, const alt::ViewMatrixLayout &)'
|   |-ParmVarDecl 0x28558016d48 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x28558016de8 <col:63, col:87> col:87 used layout 'const alt::ViewMatrixLayout &'
|   `-CompoundStmt 0x2855804d0a8 <line:350:9, line:357:9>
|     `-ReturnStmt 0x2855804d098 <line:351:13, line:356:20>
|       `-CXXOperatorCallExpr 0x2855804d060 <line:351:20, line:356:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x2855804d048 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x2855804d028 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-CXXOperatorCallExpr 0x28558029938 <line:351:20, line:355:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | |-ImplicitCastExpr 0x28558029920 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x28558029900 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x28558012cb0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | |-CXXOperatorCallExpr 0x28558028940 <line:351:20, line:355:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | |-ImplicitCastExpr 0x28558028928 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x28558028908 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | |-CXXOperatorCallExpr 0x285580278d8 <line:351:20, line:354:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | |-ImplicitCastExpr 0x285580278c0 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | `-DeclRefExpr 0x285580278a0 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x28558012cb0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | |-CXXOperatorCallExpr 0x285580268e0 <line:351:20, line:354:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | |-ImplicitCastExpr 0x285580268c8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | `-DeclRefExpr 0x285580268a8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | |-CXXOperatorCallExpr 0x28558025878 <line:351:20, line:353:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | |-ImplicitCastExpr 0x28558025860 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | `-DeclRefExpr 0x28558025840 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x28558012cb0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | |-CXXOperatorCallExpr 0x28558024880 <line:351:20, line:353:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | |-ImplicitCastExpr 0x28558024868 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | `-DeclRefExpr 0x28558024848 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | |-CXXOperatorCallExpr 0x28558023810 <line:351:20, line:352:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | |-ImplicitCastExpr 0x285580237f8 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | | | `-DeclRefExpr 0x28558023780 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x28558012cb0 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | | | |-CXXOperatorCallExpr 0x285580200e0 <line:351:20, line:352:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | |-ImplicitCastExpr 0x285580200c8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | `-DeclRefExpr 0x285580200a8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | |-CXXOperatorCallExpr 0x2855801f070 <line:351:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | | |-ImplicitCastExpr 0x2855801f058 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | | `-DeclRefExpr 0x2855801f038 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | | |-DeclRefExpr 0x2855801d000 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x28558016d48 'stream' 'std::ostream &'
|         | | | | | | | | | `-ImplicitCastExpr 0x2855801f020 <col:30> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | | |   `-StringLiteral 0x2855801d020 <col:30> 'const char [13]' lvalue "\nViewMatrix{"
|         | | | | | | | | `-ImplicitCastExpr 0x28558020090 <line:352:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | |   `-StringLiteral 0x2855801f0a8 <col:20> 'const char [13]' lvalue "\n  right:   "
|         | | | | | | | `-ImplicitCastExpr 0x28558023760 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | | | |   `-MemberExpr 0x28558020138 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .right 0x28558017020
|         | | | | | | |     `-DeclRefExpr 0x28558020118 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x28558016de8 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | | | `-ImplicitCastExpr 0x28558024830 <line:353:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | |   `-StringLiteral 0x28558023848 <col:20> 'const char [13]' lvalue "\n  up:      "
|         | | | | | `-ImplicitCastExpr 0x28558025820 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | |   `-MemberExpr 0x285580248d8 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .up 0x28558017088
|         | | | | |     `-DeclRefExpr 0x285580248b8 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x28558016de8 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | `-ImplicitCastExpr 0x28558026890 <line:354:20> 'const char *' <ArrayToPointerDecay>
|         | | | |   `-StringLiteral 0x285580258b0 <col:20> 'const char [13]' lvalue "\n  forward: "
|         | | | `-ImplicitCastExpr 0x28558027880 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | |   `-MemberExpr 0x28558026938 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .forward 0x285580170f0
|         | | |     `-DeclRefExpr 0x28558026918 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x28558016de8 'layout' 'const alt::ViewMatrixLayout &'
|         | | `-ImplicitCastExpr 0x285580288f0 <line:355:20> 'const char *' <ArrayToPointerDecay>
|         | |   `-StringLiteral 0x28558027910 <col:20> 'const char [13]' lvalue "\n  pos:     "
|         | `-ImplicitCastExpr 0x285580298e0 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         |   `-MemberExpr 0x28558028998 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .pos 0x28558017158
|         |     `-DeclRefExpr 0x28558028978 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x28558016de8 'layout' 'const alt::ViewMatrixLayout &'
|         `-ImplicitCastExpr 0x2855804d010 <line:356:20> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x28558029970 <col:20> 'const char [4]' lvalue "\n}\n"
|-FieldDecl 0x28558017020 <line:359:9, col:18> col:18 referenced right 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x28558017088 <col:9, col:25> col:25 referenced up 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x285580170f0 <col:9, col:29> col:29 referenced forward 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
`-FieldDecl 0x28558017158 <col:9, col:38> col:38 referenced pos 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x2855804d1a8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::ViewMatrixLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::String = alt::String
CXXRecordDecl 0x285582cc778 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/String.h:13:2, line:142:2> line:13:8 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285582cc898 <col:2, col:8> col:8 implicit referenced class String
|-AccessSpecDecl 0x285582cc928 <line:15:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582ccb18 <line:16:3, line:22:3> line:16:3 used String 'void (alt::Size, char)'
| |-ParmVarDecl 0x285582cc990 <col:10, col:15> col:15 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x285582cca08 <col:22, col:34> col:27 used fill 'char' cinit
| | `-CharacterLiteral 0x285582d0158 <col:34> 'char' 0
| |-CXXCtorInitializer Field 0x285582cfc00 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582d01b0 <line:17:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582d0170 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cc990 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582d0660 <line:18:3, line:22:3>
|   |-BinaryOperator 0x285582d0368 <line:19:4, col:28> 'char *' lvalue '='
|   | |-MemberExpr 0x285582d0208 <col:4> 'char *' lvalue ->data 0x285582cfb98
|   | | `-CXXThisExpr 0x285582d01f8 <col:4> 'alt::String *' implicit this
|   | `-CXXNewExpr 0x285582d0328 <col:11, col:28> 'char *' array Function 0x28556fe40a8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|   |   `-BinaryOperator 0x285582d02d0 <col:20, col:27> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x285582d02a0 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x285582d0248 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|   |     |   `-CXXThisExpr 0x285582d0238 <col:20> 'alt::String *' implicit this
|   |     `-ImplicitCastExpr 0x285582d02b8 <col:27> 'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x285582d0278 <col:27> 'int' 1
|   |-CallExpr 0x285582d04a8 <line:20:4, col:27> 'void *'
|   | |-ImplicitCastExpr 0x285582d0490 <col:4> 'void *(*)(void *, int, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x285582d0470 <col:4> 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)' lvalue Function 0x2855709ede8 'memset' 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)'
|   | |-ImplicitCastExpr 0x285582d04f8 <col:11> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x285582d04e0 <col:11> 'char *' <LValueToRValue>
|   | |   `-MemberExpr 0x285582d03e0 <col:11> 'char *' lvalue ->data 0x285582cfb98
|   | |     `-CXXThisExpr 0x285582d03d0 <col:11> 'alt::String *' implicit this
|   | |-ImplicitCastExpr 0x285582d0528 <col:17> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x285582d0510 <col:17> 'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285582d0410 <col:17> 'char' lvalue ParmVar 0x285582cca08 'fill' 'char'
|   | `-ImplicitCastExpr 0x285582d0540 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x285582d0440 <col:23> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|   |     `-CXXThisExpr 0x285582d0430 <col:23> 'alt::String *' implicit this
|   `-BinaryOperator 0x285582d0640 <line:21:4, col:17> 'char' lvalue '='
|     |-ArraySubscriptExpr 0x285582d0608 <col:4, col:13> 'char' lvalue
|     | |-ImplicitCastExpr 0x285582d05d8 <col:4> 'char *' <LValueToRValue>
|     | | `-MemberExpr 0x285582d0568 <col:4> 'char *' lvalue ->data 0x285582cfb98
|     | |   `-CXXThisExpr 0x285582d0558 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x285582d05f0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-MemberExpr 0x285582d05a8 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|     |     `-CXXThisExpr 0x285582d0598 <col:9> 'alt::String *' implicit this
|     `-CharacterLiteral 0x285582d0628 <col:17> 'char' 0
|-FunctionTemplateDecl 0x285582cce60 <line:24:3, line:35:3> line:25:3 String
| |-TemplateTypeParmDecl 0x285582ccbd0 <line:24:12, col:18> col:18 referenced class depth 0 index 0 Iter
| |-CXXConstructorDecl 0x285582ccdb8 <line:25:3, line:35:3> line:25:3 String 'void (Iter, Iter)'
| | |-ParmVarDecl 0x285582ccc70 <col:10, col:15> col:15 referenced first 'Iter'
| | |-ParmVarDecl 0x285582ccce8 <col:22, col:27> col:27 referenced last 'Iter'
| | `-CompoundStmt 0x28558989250 <line:26:3, line:35:3>
| |   |-BinaryOperator 0x28558988cb8 <line:27:4, col:36> '<dependent type>' '='
| |   | |-MemberExpr 0x28558988bb0 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
| |   | | `-CXXThisExpr 0x28558988ba0 <col:4> 'alt::String *' implicit this
| |   | `-CallExpr 0x28558988c88 <col:11, col:36> '<dependent type>'
| |   |   |-UnresolvedLookupExpr 0x28558988c00 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = 'distance' 0x28557957f68
| |   |   |-DeclRefExpr 0x28558988c48 <col:25> 'Iter' lvalue ParmVar 0x285582ccc70 'first' 'Iter'
| |   |   `-DeclRefExpr 0x28558988c68 <col:32> 'Iter' lvalue ParmVar 0x285582ccce8 'last' 'Iter'
| |   |-BinaryOperator 0x28558988e20 <line:29:4, col:28> 'char *' lvalue '='
| |   | |-MemberExpr 0x28558988ce8 <col:4> 'char *' lvalue ->data 0x285582cfb98
| |   | | `-CXXThisExpr 0x28558988cd8 <col:4> 'alt::String *' implicit this
| |   | `-CXXNewExpr 0x28558988de0 <col:11, col:28> 'char *' array Function 0x28556fe40a8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |   `-BinaryOperator 0x28558988db0 <col:20, col:27> 'unsigned long long' '+'
| |   |     |-ImplicitCastExpr 0x28558988d80 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |     | `-MemberExpr 0x28558988d28 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
| |   |     |   `-CXXThisExpr 0x28558988d18 <col:20> 'alt::String *' implicit this
| |   |     `-ImplicitCastExpr 0x28558988d98 <col:27> 'unsigned long long' <IntegralCast>
| |   |       `-IntegerLiteral 0x28558988d58 <col:27> 'int' 1
| |   |-ForStmt 0x28558989110 <line:31:4, line:32:24>
| |   | |-DeclStmt 0x28558988ef8 <line:31:9, col:19>
| |   | | `-VarDecl 0x28558988e50 <col:9, col:18> col:14 referenced i 'alt::Size':'unsigned long long' cinit
| |   | |   `-ImplicitCastExpr 0x28558988ee0 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
| |   | |     `-IntegerLiteral 0x28558988eb8 <col:18> 'int' 0
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x28558988f50 <col:21, col:30> '<dependent type>' '!='
| |   | | |-DeclRefExpr 0x28558988f10 <col:21> 'Iter' lvalue ParmVar 0x285582ccc70 'first' 'Iter'
| |   | | `-DeclRefExpr 0x28558988f30 <col:30> 'Iter' lvalue ParmVar 0x285582ccce8 'last' 'Iter'
| |   | |-UnaryOperator 0x28558988f90 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
| |   | | `-DeclRefExpr 0x28558988f70 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x28558988e50 'i' 'alt::Size':'unsigned long long'
| |   | `-BinaryOperator 0x285589890f0 <line:32:5, col:24> '<dependent type>' '='
| |   |   |-ArraySubscriptExpr 0x28558989038 <col:5, col:11> 'char' lvalue
| |   |   | |-ImplicitCastExpr 0x28558989008 <col:5> 'char *' <LValueToRValue>
| |   |   | | `-MemberExpr 0x28558988fb8 <col:5> 'char *' lvalue ->data 0x285582cfb98
| |   |   | |   `-CXXThisExpr 0x28558988fa8 <col:5> 'alt::String *' implicit this
| |   |   | `-ImplicitCastExpr 0x28558989020 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |   |   `-DeclRefExpr 0x28558988fe8 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x28558988e50 'i' 'alt::Size':'unsigned long long'
| |   |   `-UnaryOperator 0x285589890d8 <col:15, col:24> '<dependent type>' prefix '*' cannot overflow
| |   |     `-ParenExpr 0x285589890b8 <col:16, col:24> '<dependent type>'
| |   |       `-UnaryOperator 0x285589890a0 <col:17, col:22> '<dependent type>' postfix '++' cannot overflow
| |   |         `-DeclRefExpr 0x28558989058 <col:17> 'Iter' lvalue ParmVar 0x285582ccc70 'first' 'Iter'
| |   `-BinaryOperator 0x28558989230 <line:34:4, col:17> 'char' lvalue '='
| |     |-ArraySubscriptExpr 0x285589891f8 <col:4, col:13> 'char' lvalue
| |     | |-ImplicitCastExpr 0x285589891c8 <col:4> 'char *' <LValueToRValue>
| |     | | `-MemberExpr 0x28558989158 <col:4> 'char *' lvalue ->data 0x285582cfb98
| |     | |   `-CXXThisExpr 0x28558989148 <col:4> 'alt::String *' implicit this
| |     | `-ImplicitCastExpr 0x285589891e0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     |   `-MemberExpr 0x28558989198 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
| |     |     `-CXXThisExpr 0x28558989188 <col:9> 'alt::String *' implicit this
| |     `-CharacterLiteral 0x28558989218 <col:17> 'char' 0
| `-CXXConstructorDecl 0x285582d09f8 <line:25:3, line:35:3> line:25:3 used String 'void (const char *, const char *)'
|   |-TemplateArgument type 'const char *'
|   |-ParmVarDecl 0x285582d0868 <col:10, col:15> col:15 used first 'const char *':'const char *'
|   |-ParmVarDecl 0x285582d08e0 <col:22, col:27> col:27 used last 'const char *':'const char *'
|   `-CompoundStmt 0x2855899b1d8 <line:26:3, line:35:3>
|     |-BinaryOperator 0x2855899ade8 <line:27:4, col:36> 'alt::Size':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558988bb0 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|     | | `-CXXThisExpr 0x28558988ba0 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x2855899add0 <col:11, col:36> 'alt::Size':'unsigned long long' <IntegralCast>
|     |   `-CallExpr 0x2855899ad70 <col:11, col:36> '_Iter_diff_t<const char *>':'long long'
|     |     |-ImplicitCastExpr 0x2855899ad58 <col:11, col:16> '_Iter_diff_t<const char *> (*)(const char *, const char *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x28558999b90 <col:11, col:16> '_Iter_diff_t<const char *> (const char *, const char *)' lvalue Function 0x28558999a48 'distance' '_Iter_diff_t<const char *> (const char *, const char *)' (FunctionTemplate 0x28557957f68 'distance')
|     |     |-ImplicitCastExpr 0x2855899ada0 <col:25> 'const char *':'const char *' <LValueToRValue>
|     |     | `-DeclRefExpr 0x285589892c8 <col:25> 'const char *':'const char *' lvalue ParmVar 0x285582d0868 'first' 'const char *':'const char *'
|     |     `-ImplicitCastExpr 0x2855899adb8 <col:32> 'const char *':'const char *' <LValueToRValue>
|     |       `-DeclRefExpr 0x285589892e8 <col:32> 'const char *':'const char *' lvalue ParmVar 0x285582d08e0 'last' 'const char *':'const char *'
|     |-BinaryOperator 0x2855899ae98 <line:29:4, col:11> 'char *' lvalue '='
|     | |-MemberExpr 0x28558988ce8 <col:4> 'char *' lvalue ->data 0x285582cfb98
|     | | `-CXXThisExpr 0x28558988cd8 <col:4> 'alt::String *' implicit this
|     | `-CXXNewExpr 0x2855899ae58 <col:11> 'char *' array Function 0x28556fe40a8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |   `-BinaryOperator 0x2855899ae38 <col:20, col:27> 'unsigned long long' '+'
|     |     |-ImplicitCastExpr 0x2855899ae08 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |     | `-MemberExpr 0x28558988d28 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|     |     |   `-CXXThisExpr 0x28558988d18 <col:20> 'alt::String *' implicit this
|     |     `-ImplicitCastExpr 0x2855899ae20 <col:27> 'unsigned long long' <IntegralCast>
|     |       `-IntegerLiteral 0x28558988d58 <col:27> 'int' 1
|     |-ForStmt 0x2855899b130 <line:31:4, line:32:24>
|     | |-DeclStmt 0x2855899af38 <line:31:9, col:19>
|     | | `-VarDecl 0x2855899aeb8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x2855899af20 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x28558988eb8 <col:18> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x2855899afc0 <col:21, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x2855899af90 <col:21> 'const char *':'const char *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x2855899af50 <col:21> 'const char *':'const char *' lvalue ParmVar 0x285582d0868 'first' 'const char *':'const char *'
|     | | `-ImplicitCastExpr 0x2855899afa8 <col:30> 'const char *':'const char *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x2855899af70 <col:30> 'const char *':'const char *' lvalue ParmVar 0x285582d08e0 'last' 'const char *':'const char *'
|     | |-UnaryOperator 0x2855899b000 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x2855899afe0 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x2855899aeb8 'i' 'alt::Size':'unsigned long long'
|     | `-BinaryOperator 0x2855899b110 <line:32:5, col:24> 'char' lvalue '='
|     |   |-ArraySubscriptExpr 0x2855899b068 <col:5, col:11> 'char' lvalue
|     |   | |-ImplicitCastExpr 0x2855899b038 <col:5> 'char *' <LValueToRValue>
|     |   | | `-MemberExpr 0x28558988fb8 <col:5> 'char *' lvalue ->data 0x285582cfb98
|     |   | |   `-CXXThisExpr 0x28558988fa8 <col:5> 'alt::String *' implicit this
|     |   | `-ImplicitCastExpr 0x2855899b050 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x2855899b018 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x2855899aeb8 'i' 'alt::Size':'unsigned long long'
|     |   `-ImplicitCastExpr 0x2855899b0f8 <col:15, col:24> 'char' <LValueToRValue>
|     |     `-UnaryOperator 0x2855899b0e0 <col:15, col:24> 'const char' lvalue prefix '*' cannot overflow
|     |       `-ParenExpr 0x2855899b0c0 <col:16, col:24> 'const char *':'const char *'
|     |         `-UnaryOperator 0x2855899b0a8 <col:17, col:22> 'const char *':'const char *' postfix '++'
|     |           `-DeclRefExpr 0x2855899b088 <col:17> 'const char *':'const char *' lvalue ParmVar 0x285582d0868 'first' 'const char *':'const char *'
|     `-BinaryOperator 0x2855899b1b8 <line:34:4, col:17> 'char' lvalue '='
|       |-ArraySubscriptExpr 0x2855899b198 <col:4, col:13> 'char' lvalue
|       | |-ImplicitCastExpr 0x2855899b168 <col:4> 'char *' <LValueToRValue>
|       | | `-MemberExpr 0x28558989158 <col:4> 'char *' lvalue ->data 0x285582cfb98
|       | |   `-CXXThisExpr 0x28558989148 <col:4> 'alt::String *' implicit this
|       | `-ImplicitCastExpr 0x2855899b180 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x28558989198 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|       |     `-CXXThisExpr 0x28558989188 <col:9> 'alt::String *' implicit this
|       `-CharacterLiteral 0x28558989218 <col:17> 'char' 0
|-CXXConstructorDecl 0x285582cd028 <line:37:3, line:41:3> line:37:3 used String 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582ccee0 <col:10, col:22> col:22 used _data 'const char *'
| |-ParmVarDecl 0x285582ccf58 <col:29, col:34> col:34 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x285582d0b20 <line:38:4, col:30> 'alt::String' 'void (const char *, const char *)'
| |   |-ImplicitCastExpr 0x285582d0b08 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582d0688 <col:11> 'const char *' lvalue ParmVar 0x285582ccee0 '_data' 'const char *'
| |   `-BinaryOperator 0x285582d0718 <col:18, col:26> 'const char *' '+'
| |     |-ImplicitCastExpr 0x285582d06e8 <col:18> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x285582d06a8 <col:18> 'const char *' lvalue ParmVar 0x285582ccee0 '_data' 'const char *'
| |     `-ImplicitCastExpr 0x285582d0700 <col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x285582d06c8 <col:26> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582ccf58 'size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582d0b88 <line:39:3, line:41:3>
|-CXXConstructorDecl 0x285582cd100 <line:43:3, line:47:3> line:43:3 used String 'void ()'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x285582d0c70 <line:44:4, col:21> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582d0c40 <col:11> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582d0b98 <col:11> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582d0c58 <col:20> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582d0ba8 <col:20> 'int' 0
| `-CompoundStmt 0x285582d0cd8 <line:45:3, line:47:3>
|-CXXConstructorDecl 0x285582cd250 <line:49:3, line:53:3> line:49:3 used String 'void (const char *)'
| |-ParmVarDecl 0x285582cd1c0 <col:10, col:22> col:22 used _str 'const char *'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x285582d0e70 <line:50:4, col:29> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582d0e58 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582d0ce8 <col:11> 'const char *' lvalue ParmVar 0x285582cd1c0 '_str' 'const char *'
| |   `-CallExpr 0x285582d0da8 <col:17, col:28> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582d0d90 <col:17> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582d0d70 <col:17> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582d0dd0 <col:24> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582d0d50 <col:24> 'const char *' lvalue ParmVar 0x285582cd1c0 '_str' 'const char *'
| `-CompoundStmt 0x285582d0ed8 <line:51:3, line:53:3>
|-FunctionTemplateDecl 0x285582cd610 <line:55:3, line:56:34> col:3 String
| |-NonTypeTemplateParmDecl 0x285582cd310 <line:55:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582cd568 <line:56:3, col:34> col:3 String 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582cd478 <col:10, col:33> col:22 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x2855856f9e8 <col:3, col:34> col:3 String 'void (const char (&)[9])'
|   |-TemplateArgument integral 9
|   `-ParmVarDecl 0x2855856f8f8 <col:10, col:33> col:22 _data 'const char (&)[9]'
|-CXXConstructorDecl 0x285582cd808 <line:62:3, line:66:3> line:62:3 used String 'void (const std::string &)'
| |-ParmVarDecl 0x285582cd740 <col:10, col:29> col:29 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x285582d1098 <line:63:4, col:35> 'alt::String' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582d0f98 <col:11, col:21> 'const char *'
| |   | `-MemberExpr 0x285582d0f68 <col:11, col:16> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582d0ee8 <col:11> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582cd740 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582d1008 <col:24, col:34> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582d0fd8 <col:24, col:29> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582d0fb8 <col:24> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582cd740 '_str' 'const std::string &'
| `-CompoundStmt 0x285582d1100 <line:64:3, line:66:3>
|-CXXConstructorDecl 0x285582cd9b8 <line:68:3, line:72:3> line:68:3 used String 'void (const alt::String &)'
| |-ParmVarDecl 0x285582cd8f8 <col:10, col:24> col:24 used that 'const alt::String &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x285582d1268 <line:69:4, col:31> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582d1238 <col:11, col:16> 'const char *' <NoOp>
| |   | `-ImplicitCastExpr 0x285582d1220 <col:11, col:16> 'char *' <LValueToRValue>
| |   |   `-MemberExpr 0x285582d1130 <col:11, col:16> 'char *const' lvalue .data 0x285582cfb98
| |   |     `-DeclRefExpr 0x285582d1110 <col:11> 'const alt::String' lvalue ParmVar 0x285582cd8f8 'that' 'const alt::String &'
| |   `-ImplicitCastExpr 0x285582d1250 <col:22, col:27> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x285582d1180 <col:22, col:27> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582cfc00
| |       `-DeclRefExpr 0x285582d1160 <col:22> 'const alt::String' lvalue ParmVar 0x285582cd8f8 'that' 'const alt::String &'
| `-CompoundStmt 0x285582d12d0 <line:70:3, line:72:3>
|-CXXConstructorDecl 0x285582cdb68 <line:74:3, line:80:3> line:74:3 used String 'void (alt::String &&)'
| |-ParmVarDecl 0x285582cdaa8 <col:10, col:19> col:19 used that 'alt::String &&'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x285582d1308 <line:75:4, col:11> 'alt::String' 'void ()'
| `-CompoundStmt 0x285582d1538 <line:76:3, line:80:3>
|   |-DeclStmt 0x285582d1400 <line:77:4, col:14>
|   | `-VarDecl 0x285582d1370 <col:4, col:11> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x285582d13d8 <col:11> 'alt::String' 'void ()'
|   |-CXXMemberCallExpr 0x285582d1488 <line:78:4, col:17> 'void'
|   | |-MemberExpr 0x285582d1438 <col:4, col:8> '<bound member function type>' .Swap 0x285582cfd28
|   | | `-DeclRefExpr 0x285582d1418 <col:4> 'alt::String' lvalue Var 0x285582d1370 'tmp' 'alt::String'
|   | `-DeclRefExpr 0x285582d1468 <col:13> 'alt::String' lvalue ParmVar 0x285582cdaa8 'that' 'alt::String &&'
|   `-CXXMemberCallExpr 0x285582d1510 <line:79:4, col:12> 'void'
|     |-MemberExpr 0x285582d14c0 <col:4> '<bound member function type>' ->Swap 0x285582cfd28
|     | `-CXXThisExpr 0x285582d14b0 <col:4> 'alt::String *' implicit this
|     `-DeclRefExpr 0x285582d14f0 <col:9> 'alt::String' lvalue Var 0x285582d1370 'tmp' 'alt::String'
|-CXXDestructorDecl 0x285582cdc60 <line:82:3, col:30> col:3 used ~String 'void () noexcept'
| `-CompoundStmt 0x285582d15d8 <col:13, col:30>
|   `-CXXDeleteExpr 0x285582d15b8 <col:15, col:24> 'void' array Function 0x28556fe49b8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x285582d15a0 <col:24> 'char *' <LValueToRValue>
|       `-MemberExpr 0x285582d1570 <col:24> 'char *' lvalue ->data 0x285582cfb98
|         `-CXXThisExpr 0x285582d1560 <col:24> 'alt::String *' implicit this
|-CXXMethodDecl 0x285582cde20 <line:84:3, col:50> col:9 used operator[] 'char &(alt::Size)'
| |-ParmVarDecl 0x285582cdd50 <col:20, col:25> col:25 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582d16b0 <col:30, col:50>
|   `-ReturnStmt 0x285582d16a0 <col:32, col:47>
|     `-ArraySubscriptExpr 0x285582d1680 <col:39, col:47> 'char' lvalue
|       |-ImplicitCastExpr 0x285582d1650 <col:39> 'char *' <LValueToRValue>
|       | `-MemberExpr 0x285582d1600 <col:39> 'char *' lvalue ->data 0x285582cfb98
|       |   `-CXXThisExpr 0x285582d15f0 <col:39> 'alt::String *' implicit this
|       `-ImplicitCastExpr 0x285582d1668 <col:44> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x285582d1630 <col:44> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cdd50 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582cdff8 <line:85:3, col:55> col:8 used operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582cded8 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582d17a0 <col:35, col:55>
|   `-ReturnStmt 0x285582d1790 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582d1778 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582d1758 <col:44, col:52> 'char' lvalue
|         |-ImplicitCastExpr 0x285582d1728 <col:44> 'char *' <LValueToRValue>
|         | `-MemberExpr 0x285582d16d8 <col:44> 'char *const' lvalue ->data 0x285582cfb98
|         |   `-CXXThisExpr 0x285582d16c8 <col:44> 'const alt::String *' implicit this
|         `-ImplicitCastExpr 0x285582d1740 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582d1708 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cded8 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582ce1a8 <line:87:3, line:92:3> line:87:11 used operator= 'alt::String &(const alt::String &)'
| |-ParmVarDecl 0x285582ce0b0 <col:21, col:35> col:35 used that 'const alt::String &'
| `-CompoundStmt 0x285582d19a8 <line:88:3, line:92:3>
|   |-DeclStmt 0x285582d18d0 <line:89:4, col:20>
|   | `-VarDecl 0x285582d17e8 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x285582d18a0 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-DeclRefExpr 0x285582d17b8 <col:15> 'const alt::String' lvalue ParmVar 0x285582ce0b0 'that' 'const alt::String &'
|   |-CXXMemberCallExpr 0x285582d1948 <line:90:4, col:12> 'void'
|   | |-MemberExpr 0x285582d18f8 <col:4> '<bound member function type>' ->Swap 0x285582cfd28
|   | | `-CXXThisExpr 0x285582d18e8 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x285582d1928 <col:9> 'alt::String' lvalue Var 0x285582d17e8 'tmp' 'alt::String'
|   `-ReturnStmt 0x285582d1998 <line:91:4, col:12>
|     `-UnaryOperator 0x285582d1980 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x285582d1970 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x285582ce328 <line:94:3, line:99:3> line:94:11 used operator= 'alt::String &(alt::String &&)'
| |-ParmVarDecl 0x285582ce260 <col:21, col:30> col:30 used that 'alt::String &&'
| `-CompoundStmt 0x285582d1bd8 <line:95:3, line:99:3>
|   |-DeclStmt 0x285582d1b00 <line:96:4, col:20>
|   | `-VarDecl 0x285582d1a00 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x285582d1ad0 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-ImplicitCastExpr 0x285582d1ab8 <col:15> 'const alt::String' lvalue <NoOp>
|   |       `-DeclRefExpr 0x285582d19d0 <col:15> 'alt::String' lvalue ParmVar 0x285582ce260 'that' 'alt::String &&'
|   |-CXXMemberCallExpr 0x285582d1b78 <line:97:4, col:12> 'void'
|   | |-MemberExpr 0x285582d1b28 <col:4> '<bound member function type>' ->Swap 0x285582cfd28
|   | | `-CXXThisExpr 0x285582d1b18 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x285582d1b58 <col:9> 'alt::String' lvalue Var 0x285582d1a00 'tmp' 'alt::String'
|   `-ReturnStmt 0x285582d1bc8 <line:98:4, col:12>
|     `-UnaryOperator 0x285582d1bb0 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x285582d1ba0 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x285582ce3f0 <line:101:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582d1cc8 <col:24, col:44>
|   `-ReturnStmt 0x285582d1cb8 <col:26, col:41>
|     `-BinaryOperator 0x285582d1c98 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582d1c68 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582d1c10 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582cfc00
|       |   `-CXXThisExpr 0x285582d1c00 <col:33> 'const alt::String *' implicit this
|       `-ImplicitCastExpr 0x285582d1c80 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582d1c40 <col:41> 'int' 0
|-CXXMethodDecl 0x285582ce4b8 <line:103:3, col:46> col:15 used GetData 'const char *() const'
| `-CompoundStmt 0x285582d1d60 <col:31, col:46>
|   `-ReturnStmt 0x285582d1d50 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582d1d38 <col:40> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x285582d1d20 <col:40> 'char *' <LValueToRValue>
|         `-MemberExpr 0x285582d1cf0 <col:40> 'char *const' lvalue ->data 0x285582cfb98
|           `-CXXThisExpr 0x285582d1ce0 <col:40> 'const alt::String *' implicit this
|-CXXMethodDecl 0x285582ce580 <line:104:3, col:34> col:9 GetData 'char *()'
| `-CompoundStmt 0x285582d1de0 <col:19, col:34>
|   `-ReturnStmt 0x285582d1dd0 <col:21, col:28>
|     `-ImplicitCastExpr 0x285582d1db8 <col:28> 'char *' <LValueToRValue>
|       `-MemberExpr 0x285582d1d88 <col:28> 'char *' lvalue ->data 0x285582cfb98
|         `-CXXThisExpr 0x285582d1d78 <col:28> 'alt::String *' implicit this
|-CXXMethodDecl 0x285582ce698 <line:105:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582d1e60 <col:24, col:39>
|   `-ReturnStmt 0x285582d1e50 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582d1e38 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582d1e08 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582cfc00
|         `-CXXThisExpr 0x285582d1df8 <col:33> 'const alt::String *' implicit this
|-CXXMethodDecl 0x285582ce808 <line:107:3, col:104> col:8 used operator== 'bool (alt::String) const'
| |-ParmVarDecl 0x285582ce748 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x285582d22f8 <col:38, col:104>
|   `-ReturnStmt 0x285582d22e8 <col:40, col:101>
|     `-BinaryOperator 0x285582d21f8 <col:47, col:101> 'bool' '&&'
|       |-BinaryOperator 0x285582d1f38 <col:47, col:60> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582d1f08 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582d1e88 <col:47> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582cfc00
|       | |   `-CXXThisExpr 0x285582d1e78 <col:47> 'const alt::String *' implicit this
|       | `-ImplicitCastExpr 0x285582d1f20 <col:55, col:60> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582d1ed8 <col:55, col:60> 'alt::Size':'unsigned long long' lvalue .size 0x285582cfc00
|       |     `-DeclRefExpr 0x285582d1eb8 <col:55> 'alt::String' lvalue ParmVar 0x285582ce748 'that' 'alt::String'
|       `-BinaryOperator 0x285582d21d8 <col:68, col:101> 'bool' '=='
|         |-CallExpr 0x285582d2100 <col:68, col:96> 'int'
|         | |-ImplicitCastExpr 0x285582d20e8 <col:68> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582d2070 <col:68> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582d2150 <col:75> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582d2138 <col:75> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582d1fb0 <col:75> 'char *const' lvalue ->data 0x285582cfb98
|         | |     `-CXXThisExpr 0x285582d1fa0 <col:75> 'const alt::String *' implicit this
|         | |-ImplicitCastExpr 0x285582d2180 <col:81, col:86> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582d2168 <col:81, col:86> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582d2000 <col:81, col:86> 'char *' lvalue .data 0x285582cfb98
|         | |     `-DeclRefExpr 0x285582d1fe0 <col:81> 'alt::String' lvalue ParmVar 0x285582ce748 'that' 'alt::String'
|         | `-ImplicitCastExpr 0x285582d2198 <col:92> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582d2040 <col:92> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582cfc00
|         |     `-CXXThisExpr 0x285582d2030 <col:92> 'const alt::String *' implicit this
|         `-IntegerLiteral 0x285582d21b0 <col:101> 'int' 0
|-CXXMethodDecl 0x285582ce950 <line:108:3, col:65> col:8 operator!= 'bool (alt::String) const'
| |-ParmVarDecl 0x285582ce8c0 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x285582d24f8 <col:38, col:65>
|   `-ReturnStmt 0x285582d24e8 <col:40, col:62>
|     `-ExprWithCleanups 0x285582d24d0 <col:47, col:62> 'bool'
|       `-UnaryOperator 0x285582d24b8 <col:47, col:62> 'bool' prefix '!' cannot overflow
|         `-ParenExpr 0x285582d2498 <col:48, col:62> 'bool'
|           `-CXXOperatorCallExpr 0x285582d2460 <col:49, col:58> 'bool'
|             |-ImplicitCastExpr 0x285582d2448 <col:55> 'bool (*)(alt::String) const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x285582d23f8 <col:55> 'bool (alt::String) const' lvalue CXXMethod 0x285582ce808 'operator==' 'bool (alt::String) const'
|             |-UnaryOperator 0x285582d2320 <col:49, col:50> 'const alt::String' lvalue prefix '*' cannot overflow
|             | `-CXXThisExpr 0x285582d2310 <col:50> 'const alt::String *' this
|             `-CXXBindTemporaryExpr 0x285582d23d8 <col:58> 'alt::String' (CXXTemporary 0x285582d23d0)
|               `-CXXConstructExpr 0x285582d23a0 <col:58> 'alt::String' 'void (const alt::String &)'
|                 `-ImplicitCastExpr 0x285582d2388 <col:58> 'const alt::String' lvalue <NoOp>
|                   `-DeclRefExpr 0x285582d2338 <col:58> 'alt::String' lvalue ParmVar 0x285582ce8c0 'that' 'alt::String'
|-CXXMethodDecl 0x285582cea88 <line:110:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582d7ff8 <col:32, col:66>
|   `-ReturnStmt 0x285582d7fe8 <col:34, col:63>
|     `-ExprWithCleanups 0x285582d7fd0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582d7fb0 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582d7fa8)
|         `-CXXTemporaryObjectExpr 0x285582d7f68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582d7f38 <col:53> 'const char *' <NoOp>
|           | `-ImplicitCastExpr 0x285582d7f20 <col:53> 'char *' <LValueToRValue>
|           |   `-MemberExpr 0x285582d2568 <col:53> 'char *const' lvalue ->data 0x285582cfb98
|           |     `-CXXThisExpr 0x285582d2558 <col:53> 'const alt::String *' implicit this
|           `-ImplicitCastExpr 0x285582d7f50 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582d25a8 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582cfc00
|               `-CXXThisExpr 0x285582d2598 <col:59> 'const alt::String *' implicit this
|-CXXMethodDecl 0x285582ceb50 <line:111:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582d8090 <col:28, col:43>
|   `-ReturnStmt 0x285582d8080 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582d8068 <col:37> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x285582d8050 <col:37> 'char *' <LValueToRValue>
|         `-MemberExpr 0x285582d8020 <col:37> 'char *const' lvalue ->data 0x285582cfb98
|           `-CXXThisExpr 0x285582d8010 <col:37> 'const alt::String *' implicit this
|-FriendDecl 0x285582cee08 <line:113:3, col:139> col:17
| `-FunctionDecl 0x285582ced48 parent 0x285582cc708 <col:3, col:139> col:17 operator+ 'alt::String (const alt::String &, const alt::String &)'
|   |-ParmVarDecl 0x285582cec00 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x285582cec78 <col:46, col:60> col:60 used rhs 'const alt::String &'
|   `-CompoundStmt 0x285582d83f0 <col:65, col:139>
|     `-ReturnStmt 0x285582d83e0 <col:67, col:136>
|       `-ExprWithCleanups 0x285582d83c8 <col:74, col:136> 'alt::String'
|         `-CXXBindTemporaryExpr 0x285582d83a8 <col:74, col:136> 'alt::String' (CXXTemporary 0x285582d83a0)
|           `-CallExpr 0x285582d8360 <col:74, col:136> 'alt::String'
|             |-ImplicitCastExpr 0x285582d8348 <col:74> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x285582d80a8 <col:74> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x285582d0098 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x285582d8118 <col:81, col:90> 'const char *'
|             | `-MemberExpr 0x285582d80e8 <col:81, col:85> '<bound member function type>' .CStr 0x285582ceb50
|             |   `-DeclRefExpr 0x285582d80c8 <col:81> 'const alt::String' lvalue ParmVar 0x285582cec00 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x285582d8188 <col:93, col:105> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x285582d8158 <col:93, col:97> '<bound member function type>' .GetSize 0x285582ce698
|             |   `-DeclRefExpr 0x285582d8138 <col:93> 'const alt::String' lvalue ParmVar 0x285582cec00 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x285582d8258 <col:108, col:120> 'const char *'
|             | `-MemberExpr 0x285582d8228 <col:108, col:112> '<bound member function type>' .GetData 0x285582ce4b8
|             |   `-DeclRefExpr 0x285582d81a8 <col:108> 'const alt::String' lvalue ParmVar 0x285582cec78 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x285582d82c8 <col:123, col:135> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x285582d8298 <col:123, col:127> '<bound member function type>' .GetSize 0x285582ce698
|                 `-DeclRefExpr 0x285582d8278 <col:123> 'const alt::String' lvalue ParmVar 0x285582cec78 'rhs' 'const alt::String &'
|-FriendDecl 0x285582cf068 <line:115:3, col:125> col:17
| `-FunctionDecl 0x285582cefa8 parent 0x285582cc708 <col:3, col:125> col:17 operator+ 'alt::String (const alt::String &, const char *)'
|   |-ParmVarDecl 0x285582cee58 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x285582ceed8 <col:46, col:58> col:58 used rhs 'const char *'
|   `-CompoundStmt 0x285582d86c8 <col:63, col:125>
|     `-ReturnStmt 0x285582d86b8 <col:65, col:122>
|       `-ExprWithCleanups 0x285582d86a0 <col:72, col:122> 'alt::String'
|         `-CXXBindTemporaryExpr 0x285582d8680 <col:72, col:122> 'alt::String' (CXXTemporary 0x285582d8678)
|           `-CallExpr 0x285582d8620 <col:72, col:122> 'alt::String'
|             |-ImplicitCastExpr 0x285582d8608 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x285582d8408 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x285582d0098 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x285582d8478 <col:79, col:88> 'const char *'
|             | `-MemberExpr 0x285582d8448 <col:79, col:83> '<bound member function type>' .CStr 0x285582ceb50
|             |   `-DeclRefExpr 0x285582d8428 <col:79> 'const alt::String' lvalue ParmVar 0x285582cee58 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x285582d84e8 <col:91, col:103> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x285582d84b8 <col:91, col:95> '<bound member function type>' .GetSize 0x285582ce698
|             |   `-DeclRefExpr 0x285582d8498 <col:91> 'const alt::String' lvalue ParmVar 0x285582cee58 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x285582d8660 <col:106> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x285582d8508 <col:106> 'const char *' lvalue ParmVar 0x285582ceed8 'rhs' 'const char *'
|             `-CallExpr 0x285582d85c8 <col:111, col:121> 'size_t':'unsigned long long'
|               |-ImplicitCastExpr 0x285582d85b0 <col:111> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x285582d8590 <col:111> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|               `-ImplicitCastExpr 0x285582d85f0 <col:118> 'const char *' <LValueToRValue>
|                 `-DeclRefExpr 0x285582d8570 <col:118> 'const char *' lvalue ParmVar 0x285582ceed8 'rhs' 'const char *'
|-FriendDecl 0x285582cf2c8 <line:116:3, col:128> col:17
| `-FunctionDecl 0x285582cf208 parent 0x285582cc708 <col:3, col:128> col:17 operator+ 'alt::String (const char *, const alt::String &)'
|   |-ParmVarDecl 0x285582cf0c0 <col:27, col:39> col:39 used lhs 'const char *'
|   |-ParmVarDecl 0x285582cf138 <col:44, col:58> col:58 used rhs 'const alt::String &'
|   `-CompoundStmt 0x285582d8a00 <col:63, col:128>
|     `-ReturnStmt 0x285582d89f0 <col:65, col:125>
|       `-ExprWithCleanups 0x285582d89d8 <col:72, col:125> 'alt::String'
|         `-CXXBindTemporaryExpr 0x285582d89b8 <col:72, col:125> 'alt::String' (CXXTemporary 0x285582d89b0)
|           `-CallExpr 0x285582d8958 <col:72, col:125> 'alt::String'
|             |-ImplicitCastExpr 0x285582d8940 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x285582d86e0 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x285582d0098 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x285582d8998 <col:79> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x285582d8700 <col:79> 'const char *' lvalue ParmVar 0x285582cf0c0 'lhs' 'const char *'
|             |-CallExpr 0x285582d87c0 <col:84, col:94> 'size_t':'unsigned long long'
|             | |-ImplicitCastExpr 0x285582d87a8 <col:84> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x285582d8788 <col:84> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|             | `-ImplicitCastExpr 0x285582d87e8 <col:91> 'const char *' <LValueToRValue>
|             |   `-DeclRefExpr 0x285582d8768 <col:91> 'const char *' lvalue ParmVar 0x285582cf0c0 'lhs' 'const char *'
|             |-CXXMemberCallExpr 0x285582d88b0 <col:97, col:109> 'const char *'
|             | `-MemberExpr 0x285582d8880 <col:97, col:101> '<bound member function type>' .GetData 0x285582ce4b8
|             |   `-DeclRefExpr 0x285582d8800 <col:97> 'const alt::String' lvalue ParmVar 0x285582cf138 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x285582d8920 <col:112, col:124> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x285582d88f0 <col:112, col:116> '<bound member function type>' .GetSize 0x285582ce698
|                 `-DeclRefExpr 0x285582d88d0 <col:112> 'const alt::String' lvalue ParmVar 0x285582cf138 'rhs' 'const alt::String &'
|-FriendDecl 0x285582cf528 <line:118:3, col:109> col:17
| `-FunctionDecl 0x285582cf468 parent 0x285582cc708 <col:3, col:109> col:17 operator+ 'alt::String (const alt::String &, char)'
|   |-ParmVarDecl 0x285582cf318 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x285582cf390 <col:46, col:51> col:51 used rhs 'char'
|   `-CompoundStmt 0x285582d8c50 <col:56, col:109>
|     `-ReturnStmt 0x285582d8c40 <col:58, col:106>
|       `-ExprWithCleanups 0x285582d8c28 <col:65, col:106> 'alt::String'
|         `-CXXBindTemporaryExpr 0x285582d8c08 <col:65, col:106> 'alt::String' (CXXTemporary 0x285582d8c00)
|           `-CallExpr 0x285582d8b90 <col:65, col:106> 'alt::String'
|             |-ImplicitCastExpr 0x285582d8b78 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x285582d8a18 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x285582d0098 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x285582d8a88 <col:72, col:81> 'const char *'
|             | `-MemberExpr 0x285582d8a58 <col:72, col:76> '<bound member function type>' .CStr 0x285582ceb50
|             |   `-DeclRefExpr 0x285582d8a38 <col:72> 'const alt::String' lvalue ParmVar 0x285582cf318 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x285582d8af8 <col:84, col:96> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x285582d8ac8 <col:84, col:88> '<bound member function type>' .GetSize 0x285582ce698
|             |   `-DeclRefExpr 0x285582d8aa8 <col:84> 'const alt::String' lvalue ParmVar 0x285582cf318 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x285582d8bd0 <col:99, col:100> 'const char *' <NoOp>
|             | `-UnaryOperator 0x285582d8b38 <col:99, col:100> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x285582d8b18 <col:100> 'char' lvalue ParmVar 0x285582cf390 'rhs' 'char'
|             `-ImplicitCastExpr 0x285582d8be8 <col:105> 'alt::Size':'unsigned long long' <IntegralCast>
|               `-IntegerLiteral 0x285582d8b50 <col:105> 'int' 1
|-FriendDecl 0x285582cf788 <line:119:3, col:112> col:17
| `-FunctionDecl 0x285582cf6c8 parent 0x285582cc708 <col:3, col:112> col:17 operator+ 'alt::String (char, const alt::String &)'
|   |-ParmVarDecl 0x285582cf578 <col:27, col:32> col:32 used lhs 'char'
|   |-ParmVarDecl 0x285582cf5f0 <col:37, col:51> col:51 used rhs 'const alt::String &'
|   `-CompoundStmt 0x285582d8f00 <col:56, col:112>
|     `-ReturnStmt 0x285582d8ef0 <col:58, col:109>
|       `-ExprWithCleanups 0x285582d8ed8 <col:65, col:109> 'alt::String'
|         `-CXXBindTemporaryExpr 0x285582d8eb8 <col:65, col:109> 'alt::String' (CXXTemporary 0x285582d8eb0)
|           `-CallExpr 0x285582d8e40 <col:65, col:109> 'alt::String'
|             |-ImplicitCastExpr 0x285582d8e28 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x285582d8c68 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x285582d0098 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x285582d8e80 <col:72, col:73> 'const char *' <NoOp>
|             | `-UnaryOperator 0x285582d8ca8 <col:72, col:73> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x285582d8c88 <col:73> 'char' lvalue ParmVar 0x285582cf578 'lhs' 'char'
|             |-ImplicitCastExpr 0x285582d8e98 <col:78> 'alt::Size':'unsigned long long' <IntegralCast>
|             | `-IntegerLiteral 0x285582d8cc0 <col:78> 'int' 1
|             |-CXXMemberCallExpr 0x285582d8d98 <col:81, col:93> 'const char *'
|             | `-MemberExpr 0x285582d8d68 <col:81, col:85> '<bound member function type>' .GetData 0x285582ce4b8
|             |   `-DeclRefExpr 0x285582d8ce8 <col:81> 'const alt::String' lvalue ParmVar 0x285582cf5f0 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x285582d8e08 <col:96, col:108> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x285582d8dd8 <col:96, col:100> '<bound member function type>' .GetSize 0x285582ce698
|                 `-DeclRefExpr 0x285582d8db8 <col:96> 'const alt::String' lvalue ParmVar 0x285582cf5f0 'rhs' 'const alt::String &'
|-FriendDecl 0x285582cfb10 <line:121:3, col:100> col:24
| `-FunctionDecl 0x285582cfa50 parent 0x285582cc708 <col:3, col:100> col:24 operator<< 'std::ostream &(std::ostream &, alt::String)'
|   |-ParmVarDecl 0x285582cf8b0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582cf928 <col:57, col:64> col:64 used str 'alt::String'
|   `-CompoundStmt 0x285582db050 <col:69, col:100>
|     `-ReturnStmt 0x285582db040 <col:71, col:97>
|       `-CXXOperatorCallExpr 0x285582db008 <col:78, col:97> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582daff0 <col:85> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582dafd0 <col:85> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582d8f18 <col:78> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582cf8b0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582d8f88 <col:88, col:97> 'const char *'
|           `-MemberExpr 0x285582d8f58 <col:88, col:92> '<bound member function type>' .CStr 0x285582ceb50
|             `-ImplicitCastExpr 0x285582d8fa8 <col:88> 'const alt::String' lvalue <NoOp>
|               `-DeclRefExpr 0x285582d8f38 <col:88> 'alt::String' lvalue ParmVar 0x285582cf928 'str' 'alt::String'
|-AccessSpecDecl 0x285582cfb50 <line:123:2, col:9> col:2 private
|-FieldDecl 0x285582cfb98 <line:124:3, col:9> col:9 referenced data 'char *'
|-FieldDecl 0x285582cfc00 <line:125:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582cfd28 <line:127:3, line:131:3> line:127:8 used Swap 'void (alt::String &)'
| |-ParmVarDecl 0x285582cfc68 <col:13, col:21> col:21 used that 'alt::String &'
| `-CompoundStmt 0x285582dfb70 <line:128:3, line:131:3>
|   |-CallExpr 0x285582dd5c0 <line:129:4, col:29> 'void'
|   | |-ImplicitCastExpr 0x285582dd5a8 <col:4, col:9> 'void (*)(char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x285582dd510 <col:4, col:9> 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' lvalue Function 0x285582dc6c8 'swap' 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' (FunctionTemplate 0x2855787ccf8 'swap')
|   | |-MemberExpr 0x285582db120 <col:14> 'char *' lvalue ->data 0x285582cfb98
|   | | `-CXXThisExpr 0x285582db110 <col:14> 'alt::String *' implicit this
|   | `-MemberExpr 0x285582db170 <col:20, col:25> 'char *' lvalue .data 0x285582cfb98
|   |   `-DeclRefExpr 0x285582db150 <col:20> 'alt::String' lvalue ParmVar 0x285582cfc68 'that' 'alt::String &'
|   `-CallExpr 0x285582dfb40 <line:130:4, col:29> 'void'
|     |-ImplicitCastExpr 0x285582dfb28 <col:4, col:9> 'void (*)(unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x285582dfa90 <col:4, col:9> 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' lvalue Function 0x285582dec48 'swap' 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' (FunctionTemplate 0x2855787ccf8 'swap')
|     |-MemberExpr 0x285582dd6a8 <col:14> 'alt::Size':'unsigned long long' lvalue ->size 0x285582cfc00
|     | `-CXXThisExpr 0x285582dd698 <col:14> 'alt::String *' implicit this
|     `-MemberExpr 0x285582dd6f8 <col:20, col:25> 'alt::Size':'unsigned long long' lvalue .size 0x285582cfc00
|       `-DeclRefExpr 0x285582dd6d8 <col:20> 'alt::String' lvalue ParmVar 0x285582cfc68 'that' 'alt::String &'
`-CXXMethodDecl 0x285582d0098 <line:133:3, line:141:3> line:133:17 used Concat 'alt::String (const char *, alt::Size, const char *, alt::Size)' static
  |-ParmVarDecl 0x285582cfde8 <col:24, col:36> col:36 used lData 'const char *'
  |-ParmVarDecl 0x285582cfe60 <col:43, col:48> col:48 used lSize 'alt::Size':'unsigned long long'
  |-ParmVarDecl 0x285582cfee0 <col:55, col:67> col:67 used rData 'const char *'
  |-ParmVarDecl 0x285582cff58 <col:74, col:79> col:79 used rSize 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x285582e03f0 <line:134:3, line:141:3>
    |-DeclStmt 0x285582dfda0 <line:135:4, col:29>
    | `-VarDecl 0x285582dfbc0 <col:4, col:28> col:11 used res 'alt::String' nrvo callinit
    |   `-CXXConstructExpr 0x285582dfd68 <col:11, col:28> 'alt::String' 'void (alt::Size, char)'
    |     |-BinaryOperator 0x285582dfc78 <col:15, col:23> 'unsigned long long' '+'
    |     | |-ImplicitCastExpr 0x285582dfc48 <col:15> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x285582dfb90 <col:15> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cfe60 'lSize' 'alt::Size':'unsigned long long'
    |     | `-ImplicitCastExpr 0x285582dfc60 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     |   `-DeclRefExpr 0x285582dfc28 <col:23> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cff58 'rSize' 'alt::Size':'unsigned long long'
    |     `-CXXDefaultArgExpr 0x285582dfd48 <<invalid sloc>> 'char'
    |-ForStmt 0x285582e0308 <line:137:4, line:138:52>
    | |-DeclStmt 0x285582dfe70 <line:137:9, col:19>
    | | `-VarDecl 0x285582dfdc8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x285582dfe58 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x285582dfe30 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x285582dff50 <col:21, col:33> 'bool' '<'
    | | |-ImplicitCastExpr 0x285582dff38 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x285582dfe88 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x285582dfdc8 'i' 'alt::Size':'unsigned long long'
    | | `-BinaryOperator 0x285582dff18 <col:25, col:33> 'unsigned long long' '+'
    | |   |-ImplicitCastExpr 0x285582dfee8 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x285582dfea8 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cfe60 'lSize' 'alt::Size':'unsigned long long'
    | |   `-ImplicitCastExpr 0x285582dff00 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |     `-DeclRefExpr 0x285582dfec8 <col:33> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cff58 'rSize' 'alt::Size':'unsigned long long'
    | |-UnaryOperator 0x285582dff90 <col:40, col:42> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x285582dff70 <col:42> 'alt::Size':'unsigned long long' lvalue Var 0x285582dfdc8 'i' 'alt::Size':'unsigned long long'
    | `-BinaryOperator 0x285582e02e8 <line:138:5, col:52> 'char' lvalue '='
    |   |-CXXOperatorCallExpr 0x285582e0060 <col:5, col:10> 'char' lvalue
    |   | |-ImplicitCastExpr 0x285582e0048 <col:8, col:10> 'char &(*)(alt::Size)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x285582e0000 <col:8, col:10> 'char &(alt::Size)' lvalue CXXMethod 0x285582cde20 'operator[]' 'char &(alt::Size)'
    |   | |-DeclRefExpr 0x285582dffa8 <col:5> 'alt::String' lvalue Var 0x285582dfbc0 'res' 'alt::String'
    |   | `-ImplicitCastExpr 0x285582dffe8 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x285582dffc8 <col:9> 'alt::Size':'unsigned long long' lvalue Var 0x285582dfdc8 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x285582e02d0 <col:14, col:52> 'char' <LValueToRValue>
    |     `-ConditionalOperator 0x285582e02a0 <col:14, col:52> 'const char' lvalue
    |       |-BinaryOperator 0x285582e0108 <col:14, col:18> 'bool' '<'
    |       | |-ImplicitCastExpr 0x285582e00d8 <col:14> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       | | `-DeclRefExpr 0x285582e0098 <col:14> 'alt::Size':'unsigned long long' lvalue Var 0x285582dfdc8 'i' 'alt::Size':'unsigned long long'
    |       | `-ImplicitCastExpr 0x285582e00f0 <col:18> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x285582e00b8 <col:18> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cfe60 'lSize' 'alt::Size':'unsigned long long'
    |       |-ArraySubscriptExpr 0x285582e0198 <col:26, col:33> 'const char' lvalue
    |       | |-ImplicitCastExpr 0x285582e0168 <col:26> 'const char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x285582e0128 <col:26> 'const char *' lvalue ParmVar 0x285582cfde8 'lData' 'const char *'
    |       | `-ImplicitCastExpr 0x285582e0180 <col:32> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x285582e0148 <col:32> 'alt::Size':'unsigned long long' lvalue Var 0x285582dfdc8 'i' 'alt::Size':'unsigned long long'
    |       `-ArraySubscriptExpr 0x285582e0280 <col:37, col:52> 'const char' lvalue
    |         |-ImplicitCastExpr 0x285582e0268 <col:37> 'const char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x285582e01b8 <col:37> 'const char *' lvalue ParmVar 0x285582cfee0 'rData' 'const char *'
    |         `-BinaryOperator 0x285582e0248 <col:43, col:47> 'unsigned long long' '-'
    |           |-ImplicitCastExpr 0x285582e0218 <col:43> 'alt::Size':'unsigned long long' <LValueToRValue>
    |           | `-DeclRefExpr 0x285582e01d8 <col:43> 'alt::Size':'unsigned long long' lvalue Var 0x285582dfdc8 'i' 'alt::Size':'unsigned long long'
    |           `-ImplicitCastExpr 0x285582e0230 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
    |             `-DeclRefExpr 0x285582e01f8 <col:47> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582cfe60 'lSize' 'alt::Size':'unsigned long long'
    `-ReturnStmt 0x285582e03d8 <line:140:4, col:11>
      `-CXXConstructExpr 0x285582e03a8 <col:11> 'alt::String' 'void (alt::String &&)' elidable
        `-ImplicitCastExpr 0x285582e0390 <col:11> 'alt::String' xvalue <NoOp>
          `-DeclRefExpr 0x285582e0340 <col:11> 'alt::String' lvalue Var 0x285582dfbc0 'res' 'alt::String'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::List = alt::Array
ClassTemplateSpecializationDecl 0x285584faed8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::MValue'
|-CXXRecordDecl 0x285585711f0 prev 0x285584faed8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x28558571280 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x285585712e8 <line:13:3, col:19> col:3 used constexpr Array 'void () noexcept' default
| |-CXXCtorInitializer Field 0x28558572f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x28558573260 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x28558572f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x285585732a8 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x28558572fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x285585732f0 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x28558573350 <col:19>
|-FunctionTemplateDecl 0x28558571650 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x285585713a0 <line:15:12, col:18> col:18 class depth 0 index 0 It
| |-CXXConstructorDecl 0x285585715a8 <line:16:3, col:25> col:3 Array 'void (It, It)'
| | |-ParmVarDecl 0x28558571440 <col:9, col:12> col:12 begin 'It'
| | `-ParmVarDecl 0x285585714b8 <col:19, col:22> col:22 end 'It'
| `-CXXConstructorDecl 0x28558b640b8 <col:3, line:29:3> line:16:3 used Array 'void (const alt::MValue *, const alt::MValue *)'
|   |-TemplateArgument type 'const alt::MValue *'
|   |-ParmVarDecl 0x28558b63f28 <col:9, col:12> col:12 used begin 'const alt::MValue *':'const alt::MValue *'
|   |-ParmVarDecl 0x28558b63fa0 <col:19, col:22> col:22 used end 'const alt::MValue *':'const alt::MValue *'
|   |-CXXCtorInitializer Field 0x28558572f08 'data' 'alt::MValue *'
|   | `-CXXDefaultInitExpr 0x28558b648b0 <col:3> 'alt::MValue *'
|   |-CXXCtorInitializer Field 0x28558572f60 'size' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x28558b648f8 <col:3> 'alt::Size':'unsigned long long'
|   |-CXXCtorInitializer Field 0x28558572fb8 'capacity' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x28558b64940 <col:3> 'alt::Size':'unsigned long long'
|   `-CompoundStmt 0x28558b6a8d0 <line:17:3, line:29:3>
|     |-DeclStmt 0x28558b6a238 <line:18:4, col:42>
|     | `-VarDecl 0x28558b649a0 <col:4, col:41> col:9 used _size 'alt::Size':'unsigned long long' cinit
|     |   `-ImplicitCastExpr 0x28558b6a220 <col:17, col:41> 'alt::Size':'unsigned long long' <IntegralCast>
|     |     `-CallExpr 0x28558b6a1c0 <col:17, col:41> '_Iter_diff_t<const alt::MValue *>':'long long'
|     |       |-ImplicitCastExpr 0x28558b6a1a8 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (*)(const alt::MValue *, const alt::MValue *)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x28558b69100 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' lvalue Function 0x28558b68fb8 'distance' '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' (FunctionTemplate 0x28557957f68 'distance')
|     |       |-ImplicitCastExpr 0x28558b6a1f0 <col:31> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       | `-DeclRefExpr 0x28558b64a50 <col:31> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x28558b63f28 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |       `-ImplicitCastExpr 0x28558b6a208 <col:38> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |         `-DeclRefExpr 0x28558b64a70 <col:38> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x28558b63fa0 'end' 'const alt::MValue *':'const alt::MValue *'
|     |-CXXMemberCallExpr 0x28558b6a2b0 <line:20:4, col:17> 'void'
|     | |-MemberExpr 0x28558b6a260 <col:4> '<bound member function type>' ->Realloc 0x285585730a0
|     | | `-CXXThisExpr 0x28558b6a250 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     | `-ImplicitCastExpr 0x28558b6a2d8 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b6a290 <col:12> 'alt::Size':'unsigned long long' lvalue Var 0x28558b649a0 '_size' 'alt::Size':'unsigned long long'
|     |-DeclStmt 0x28558b6a438 <line:22:4, col:21>
|     | `-VarDecl 0x28558b6a2f0 <col:4, col:16> col:9 used from 'const alt::MValue *':'const alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x28558b6a420 <col:16> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |     `-DeclRefExpr 0x28558b6a358 <col:16> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x28558b63f28 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |-DeclStmt 0x28558b6a5b8 <line:23:4, col:18>
|     | `-VarDecl 0x28558b6a450 <col:4, col:14> col:9 used to 'alt::MValue *':'alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x28558b6a5a0 <col:14> 'alt::MValue *' <LValueToRValue>
|     |     `-MemberExpr 0x28558b6a4c8 <col:14> 'alt::MValue *' lvalue ->data 0x28558572f08
|     |       `-CXXThisExpr 0x28558b6a4b8 <col:14> 'alt::Array<alt::MValue> *' implicit this
|     |-ForStmt 0x28558b6a800 <line:25:4, line:26:12>
|     | |-<<<NULL>>>
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x28558b6a640 <line:25:11, col:19> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558b6a610 <col:11> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558b6a5d0 <col:11> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x28558b6a2f0 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-ImplicitCastExpr 0x28558b6a628 <col:19> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b6a5f0 <col:19> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x28558b63fa0 'end' 'const alt::MValue *':'const alt::MValue *'
|     | |-BinaryOperator 0x28558b6a6d0 <col:24, col:34> 'alt::MValue *':'alt::MValue *' lvalue ','
|     | | |-UnaryOperator 0x28558b6a680 <col:24, col:26> 'const alt::MValue *':'const alt::MValue *' lvalue prefix '++'
|     | | | `-DeclRefExpr 0x28558b6a660 <col:26> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x28558b6a2f0 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-UnaryOperator 0x28558b6a6b8 <col:32, col:34> 'alt::MValue *':'alt::MValue *' lvalue prefix '++'
|     | |   `-DeclRefExpr 0x28558b6a698 <col:34> 'alt::MValue *':'alt::MValue *' lvalue Var 0x28558b6a450 'to' 'alt::MValue *':'alt::MValue *'
|     | `-CXXOperatorCallExpr 0x28558b6a7c8 <line:26:5, col:12> 'alt::MValue' lvalue
|     |   |-ImplicitCastExpr 0x28558b6a7b0 <col:9> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x28558b6a790 <col:9> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |   |-UnaryOperator 0x28558b6a728 <col:5, col:6> 'alt::MValue' lvalue prefix '*' cannot overflow
|     |   | `-ImplicitCastExpr 0x28558b6a710 <col:6> 'alt::MValue *':'alt::MValue *' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x28558b6a6f0 <col:6> 'alt::MValue *':'alt::MValue *' lvalue Var 0x28558b6a450 'to' 'alt::MValue *':'alt::MValue *'
|     |   `-UnaryOperator 0x28558b6a778 <col:11, col:12> 'const alt::MValue' lvalue prefix '*' cannot overflow
|     |     `-ImplicitCastExpr 0x28558b6a760 <col:12> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       `-DeclRefExpr 0x28558b6a740 <col:12> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x28558b6a2f0 'from' 'const alt::MValue *':'const alt::MValue *'
|     `-BinaryOperator 0x28558b6a8b0 <line:28:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|       |-MemberExpr 0x28558b6a848 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
|       | `-CXXThisExpr 0x28558b6a838 <col:4> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x28558b6a898 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x28558b6a878 <col:11> 'alt::Size':'unsigned long long' lvalue Var 0x28558b649a0 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x28558571948 <line:31:3, line:35:3> line:31:3 used Array 'void (const alt::MValue *, alt::Size)'
| |-ParmVarDecl 0x285585717a8 <col:9, col:18> col:18 used _data 'const alt::MValue *'
| |-ParmVarDecl 0x28558571810 <col:25, col:30> col:30 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x28558b641e0 <line:32:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, const alt::MValue *)'
| |   |-ImplicitCastExpr 0x28558b641c8 <col:10> 'const alt::MValue *' <LValueToRValue>
| |   | `-DeclRefExpr 0x28558b63dc8 <col:10> 'const alt::MValue *' lvalue ParmVar 0x285585717a8 '_data' 'const alt::MValue *'
| |   `-BinaryOperator 0x28558b63e58 <col:17, col:25> 'const alt::MValue *' '+'
| |     |-ImplicitCastExpr 0x28558b63e28 <col:17> 'const alt::MValue *' <LValueToRValue>
| |     | `-DeclRefExpr 0x28558b63de8 <col:17> 'const alt::MValue *' lvalue ParmVar 0x285585717a8 '_data' 'const alt::MValue *'
| |     `-ImplicitCastExpr 0x28558b63e40 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x28558b63e08 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558571810 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x28558b63db8 <line:33:3, line:35:3>
|-CXXConstructorDecl 0x28558571be8 <line:37:3, line:45:3> line:37:3 used Array 'void (alt::Size, const alt::MValue &)'
| |-ParmVarDecl 0x28558571a10 <col:9, col:14> col:14 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x28558571ab8 <col:21, col:39> col:30 used fill 'const alt::MValue &' cinit
| | `-ExprWithCleanups 0x2855863ee98 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |   `-MaterializeTemporaryExpr 0x2855863ee80 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |     `-ImplicitCastExpr 0x2855863ee68 <col:37, col:39> 'const alt::MValue':'const alt::MValue' <NoOp>
| |       `-CXXBindTemporaryExpr 0x2855863ee48 <col:37, col:39> 'alt::MValue':'alt::MValue' (CXXTemporary 0x2855863ee40)
| |         `-CXXTemporaryObjectExpr 0x2855863ee10 <col:37, col:39> 'alt::MValue':'alt::MValue' 'void ()'
| |-CXXCtorInitializer Field 0x28558572f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x28558b62dd8 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x28558572f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x28558b62e20 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x28558572fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x28558b62e68 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x28558b632d8 <line:38:3, line:45:3>
|   |-CXXMemberCallExpr 0x28558b62f28 <line:39:4, col:17> 'void'
|   | |-MemberExpr 0x28558b62ed8 <col:4> '<bound member function type>' ->Realloc 0x285585730a0
|   | | `-CXXThisExpr 0x28558b62ec8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x28558b62f50 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b62f08 <col:12> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558571a10 '_size' 'alt::Size':'unsigned long long'
|   |-ForStmt 0x28558b63208 <line:41:4, line:42:15>
|   | |-DeclStmt 0x28558b62fe8 <line:41:9, col:19>
|   | | `-VarDecl 0x28558b62f68 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x28558b62fd0 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x28558b62b18 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x28558b63070 <col:21, col:25> 'bool' '<'
|   | | |-ImplicitCastExpr 0x28558b63040 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x28558b63000 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x28558b62f68 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x28558b63058 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b63020 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558571a10 '_size' 'alt::Size':'unsigned long long'
|   | |-UnaryOperator 0x28558b630b0 <col:32, col:34> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x28558b63090 <col:34> 'alt::Size':'unsigned long long' lvalue Var 0x28558b62f68 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x28558b631d0 <line:42:5, col:15> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x28558b631b8 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x28558b63198 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x28558b63158 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x28558b63128 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x28558b630d8 <col:5> 'alt::MValue *' lvalue ->data 0x28558572f08
|   |   | |   `-CXXThisExpr 0x28558b630c8 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x28558b63140 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x28558b63108 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x28558b62f68 'i' 'alt::Size':'unsigned long long'
|   |   `-DeclRefExpr 0x28558b63178 <col:15> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x28558571ab8 'fill' 'const alt::MValue &'
|   `-BinaryOperator 0x28558b632b8 <line:44:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|     |-MemberExpr 0x28558b63250 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
|     | `-CXXThisExpr 0x28558b63240 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     `-ImplicitCastExpr 0x28558b632a0 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x28558b63280 <col:11> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558571a10 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x28558571d70 <line:47:3, line:51:3> line:47:3 used Array 'void (const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x28558571cc0 <col:9, col:22> col:22 used that 'const alt::Array<alt::MValue> &'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x28558b63c68 <line:48:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, alt::Size)'
| |   |-ImplicitCastExpr 0x28558b63c38 <col:10, col:15> 'const alt::MValue *' <NoOp>
| |   | `-ImplicitCastExpr 0x28558b63c20 <col:10, col:15> 'alt::MValue *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b63b30 <col:10, col:15> 'alt::MValue *const' lvalue .data 0x28558572f08
| |   |     `-DeclRefExpr 0x28558b63b10 <col:10> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558571cc0 'that' 'const alt::Array<alt::MValue> &'
| |   `-ImplicitCastExpr 0x28558b63c50 <col:21, col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x28558b63b80 <col:21, col:26> 'const alt::Size':'const unsigned long long' lvalue .size 0x28558572f60
| |       `-DeclRefExpr 0x28558b63b60 <col:21> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558571cc0 'that' 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x28558b63b00 <line:49:3, line:51:3>
|-CXXConstructorDecl 0x28558571f48 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x28558571e68 <col:9, col:17> col:17 that 'alt::Array<alt::MValue> &&'
|-CXXDestructorDecl 0x28558572030 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x28558b62a00 <col:12, col:29>
|   `-CXXDeleteExpr 0x28558b629e0 <col:14, col:23> 'void' array Function 0x28556fe49b8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x28558b629c8 <col:23> 'alt::MValue *' <LValueToRValue>
|       `-MemberExpr 0x28558b62998 <col:23> 'alt::MValue *' lvalue ->data 0x28558572f08
|         `-CXXThisExpr 0x28558b62988 <col:23> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x28558572218 <line:62:3, line:71:3> line:62:10 used operator= 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x28558572158 <col:20, col:33> col:33 used that 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x285589c1488 <line:63:3, line:71:3>
|   |-CXXMemberCallExpr 0x285589c0f88 <line:64:4, col:21> 'void'
|   | |-MemberExpr 0x285589c0f08 <col:4> '<bound member function type>' ->Realloc 0x285585730a0
|   | | `-CXXThisExpr 0x285589c0ef8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x285589c0fb0 <col:12, col:17> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x285589c0f58 <col:12, col:17> 'const alt::Size':'const unsigned long long' lvalue .size 0x28558572f60
|   |     `-DeclRefExpr 0x285589c0f38 <col:12> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558572158 'that' 'const alt::Array<alt::MValue> &'
|   |-ForStmt 0x285589c1350 <line:66:4, line:67:26>
|   | |-DeclStmt 0x285589c1048 <line:66:9, col:19>
|   | | `-VarDecl 0x285589c0fc8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x285589c1030 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x285589c0b10 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x285589c1100 <col:21, col:30> 'bool' '<'
|   | | |-ImplicitCastExpr 0x285589c10d0 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x285589c1060 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x285589c0fc8 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589c10e8 <col:25, col:30> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x285589c10a0 <col:25, col:30> 'const alt::Size':'const unsigned long long' lvalue .size 0x28558572f60
|   | |     `-DeclRefExpr 0x285589c1080 <col:25> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558572158 'that' 'const alt::Array<alt::MValue> &'
|   | |-UnaryOperator 0x285589c1140 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x285589c1120 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x285589c0fc8 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x285589c1318 <line:67:5, col:26> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x285589c1300 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x285589c12e0 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x285589c11e8 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x285589c11b8 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x285589c1168 <col:5> 'alt::MValue *' lvalue ->data 0x28558572f08
|   |   | |   `-CXXThisExpr 0x285589c1158 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x285589c11d0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x285589c1198 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x285589c0fc8 'i' 'alt::Size':'unsigned long long'
|   |   `-ImplicitCastExpr 0x285589c12c8 <col:15, col:26> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
|   |     `-ArraySubscriptExpr 0x285589c12a8 <col:15, col:26> 'alt::MValue':'alt::MValue' lvalue
|   |       |-ImplicitCastExpr 0x285589c1278 <col:15, col:20> 'alt::MValue *' <LValueToRValue>
|   |       | `-MemberExpr 0x285589c1228 <col:15, col:20> 'alt::MValue *const' lvalue .data 0x28558572f08
|   |       |   `-DeclRefExpr 0x285589c1208 <col:15> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558572158 'that' 'const alt::Array<alt::MValue> &'
|   |       `-ImplicitCastExpr 0x285589c1290 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x285589c1258 <col:25> 'alt::Size':'unsigned long long' lvalue Var 0x285589c0fc8 'i' 'alt::Size':'unsigned long long'
|   |-BinaryOperator 0x285589c1430 <line:69:4, col:16> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x285589c1398 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
|   | | `-CXXThisExpr 0x285589c1388 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x285589c1418 <col:11, col:16> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x285589c13e8 <col:11, col:16> 'const alt::Size':'const unsigned long long' lvalue .size 0x28558572f60
|   |     `-DeclRefExpr 0x285589c13c8 <col:11> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558572158 'that' 'const alt::Array<alt::MValue> &'
|   `-ReturnStmt 0x285589c1478 <line:70:4, col:12>
|     `-UnaryOperator 0x285589c1460 <col:11, col:12> 'alt::Array<alt::MValue>' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x285589c1450 <col:12> 'alt::Array<alt::MValue> *' this
|-CXXMethodDecl 0x285585723a8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::MValue> &(alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x285585722e0 <col:20, col:28> col:28 that 'alt::Array<alt::MValue> &&'
|-CXXMethodDecl 0x28558572538 <line:86:3, line:91:3> line:86:8 used Push 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558572470 <col:13, col:22> col:22 used el 'const alt::MValue &'
| `-CompoundStmt 0x28558b6ae10 <line:87:3, line:91:3>
|   |-CXXMemberCallExpr 0x28558b6ac30 <line:88:4, col:20> 'void'
|   | |-MemberExpr 0x28558b6ab70 <col:4> '<bound member function type>' ->Realloc 0x285585730a0
|   | | `-CXXThisExpr 0x28558b6ab60 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-BinaryOperator 0x28558b6ac10 <col:12, col:19> 'unsigned long long' '+'
|   |   |-ImplicitCastExpr 0x28558b6abe0 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   | `-MemberExpr 0x28558b6abb0 <col:12> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
|   |   |   `-CXXThisExpr 0x28558b6aba0 <col:12> 'alt::Array<alt::MValue> *' implicit this
|   |   `-ImplicitCastExpr 0x28558b6abf8 <col:19> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x28558b6a990 <col:19> 'int' 1
|   |-CXXOperatorCallExpr 0x28558b6ad80 <line:89:4, col:17> 'alt::MValue' lvalue
|   | |-ImplicitCastExpr 0x28558b6ad68 <col:15> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x28558b6ad48 <col:15> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|   | |-ArraySubscriptExpr 0x28558b6ad08 <col:4, col:13> 'alt::MValue':'alt::MValue' lvalue
|   | | |-ImplicitCastExpr 0x28558b6acd8 <col:4> 'alt::MValue *' <LValueToRValue>
|   | | | `-MemberExpr 0x28558b6ac68 <col:4> 'alt::MValue *' lvalue ->data 0x28558572f08
|   | | |   `-CXXThisExpr 0x28558b6ac58 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | | `-ImplicitCastExpr 0x28558b6acf0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x28558b6aca8 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
|   | |     `-CXXThisExpr 0x28558b6ac98 <col:9> 'alt::Array<alt::MValue> *' implicit this
|   | `-DeclRefExpr 0x28558b6ad28 <col:17> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x28558572470 'el' 'const alt::MValue &'
|   `-UnaryOperator 0x28558b6adf8 <line:90:4, col:6> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     `-MemberExpr 0x28558b6adc8 <col:6> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
|       `-CXXThisExpr 0x28558b6adb8 <col:6> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x285585725f0 <line:93:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x28558b63830 <col:24, col:39>
|   `-ReturnStmt 0x28558b63820 <col:26, col:33>
|     `-ImplicitCastExpr 0x28558b63808 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x28558b637d8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x28558572f60
|         `-CXXThisExpr 0x28558b637c8 <col:33> 'const alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x285585726a0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x28558572838 <line:96:3, col:47> col:6 used operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x28558572778 <col:17, col:22> col:22 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x28558b639b0 <col:27, col:47>
|   `-ReturnStmt 0x28558b639a0 <col:29, col:44>
|     `-ArraySubscriptExpr 0x28558b63980 <col:36, col:44> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x28558b63950 <col:36> 'alt::MValue *' <LValueToRValue>
|       | `-MemberExpr 0x28558b63900 <col:36> 'alt::MValue *' lvalue ->data 0x28558572f08
|       |   `-CXXThisExpr 0x28558b638f0 <col:36> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x28558b63968 <col:41> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x28558b63930 <col:41> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558572778 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285585729e8 <line:97:3, col:33> col:12 operator[] 'const alt::MValue &(alt::Size) const'
| `-ParmVarDecl 0x285585728f0 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x28558572b48 <line:99:3, col:12> col:6 begin 'alt::MValue *()'
|-CXXMethodDecl 0x28558572c78 <line:100:3, col:20> col:12 begin 'const alt::MValue *() const'
|-CXXMethodDecl 0x28558572d48 <line:101:3, col:10> col:6 end 'alt::MValue *()'
|-CXXMethodDecl 0x28558572e18 <line:102:3, col:18> col:12 end 'const alt::MValue *() const'
|-AccessSpecDecl 0x28558572ec8 <line:104:2, col:9> col:2 private
|-FieldDecl 0x28558572f08 <line:105:3, col:13> col:6 referenced data 'alt::MValue *'
| `-ImplicitCastExpr 0x285585731b8 <col:13> 'alt::MValue *' <NullToPointer>
|   `-CXXNullPtrLiteralExpr 0x285582f9fc0 <col:13> 'nullptr_t'
|-FieldDecl 0x28558572f60 <line:106:3, col:15> col:8 referenced size 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x285585731f0 <col:15> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x285582f9fd0 <col:15> 'int' 0
|-FieldDecl 0x28558572fb8 <line:107:3, col:19> col:8 referenced capacity 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x28558573228 <col:19> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x285582fa010 <col:19> 'int' 0
`-CXXMethodDecl 0x285585730a0 <line:109:3, line:127:3> line:109:8 used Realloc 'void (alt::Size)'
  |-ParmVarDecl 0x28558573010 <col:16, col:21> col:21 used least 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x285589c2660 <line:110:3, line:127:3>
    |-IfStmt 0x285589c1d80 <line:111:4, line:112:5>
    | |-BinaryOperator 0x285589c1d50 <line:111:8, col:20> 'bool' '>='
    | | |-ImplicitCastExpr 0x285589c1d20 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x285589c1cd0 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x28558572fb8
    | | |   `-CXXThisExpr 0x285589c1cc0 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x285589c1d38 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x285589c1d00 <col:20> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558573010 'least' 'alt::Size':'unsigned long long'
    | `-ReturnStmt 0x285589c1d70 <line:112:5>
    |-IfStmt 0x285589c1ea0 <line:114:4, line:115:16>
    | |-BinaryOperator 0x285589c1e08 <line:114:8, col:20> 'bool' '=='
    | | |-ImplicitCastExpr 0x285589c1dd8 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x285589c1da8 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x28558572fb8
    | | |   `-CXXThisExpr 0x285589c1d98 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x285589c1df0 <col:20> 'unsigned long long' <IntegralCast>
    | |   `-IntegerLiteral 0x285589c15a0 <col:20> 'int' 0
    | `-BinaryOperator 0x285589c1e80 <line:115:5, col:16> 'alt::Size':'unsigned long long' lvalue '='
    |   |-MemberExpr 0x285589c1e38 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x28558572fb8
    |   | `-CXXThisExpr 0x285589c1e28 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-ImplicitCastExpr 0x285589c1e68 <col:16> 'alt::Size':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x285589c1628 <col:16> 'int' 1
    |-WhileStmt 0x285589c1ff0 <line:117:4, line:118:18>
    | |-BinaryOperator 0x285589c1f48 <line:117:11, col:22> 'bool' '<'
    | | |-ImplicitCastExpr 0x285589c1f18 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x285589c1ec8 <col:11> 'alt::Size':'unsigned long long' lvalue ->capacity 0x28558572fb8
    | | |   `-CXXThisExpr 0x285589c1eb8 <col:11> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x285589c1f30 <col:22> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x285589c1ef8 <col:22> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558573010 'least' 'alt::Size':'unsigned long long'
    | `-CompoundAssignOperator 0x285589c1fc0 <line:118:5, col:18> 'alt::Size':'unsigned long long' lvalue '<<=' ComputeLHSTy='alt::Size':'unsigned long long' ComputeResultTy='alt::Size':'unsigned long long'
    |   |-MemberExpr 0x285589c1f78 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x28558572fb8
    |   | `-CXXThisExpr 0x285589c1f68 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-IntegerLiteral 0x285589c1748 <col:18> 'int' 1
    |-DeclStmt 0x285589c21b8 <line:120:4, col:32>
    | `-VarDecl 0x285589c2018 <col:4, col:17> col:7 used newData 'alt::MValue *' cinit
    |   `-CXXNewExpr 0x285589c2170 <col:17> 'alt::MValue *' array Function 0x28556fe40a8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
    |     |-ImplicitCastExpr 0x285589c20d0 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | `-MemberExpr 0x285589c20a0 <col:23> 'alt::Size':'unsigned long long' lvalue ->capacity 0x28558572fb8
    |     |   `-CXXThisExpr 0x285589c2090 <col:23> 'alt::Array<alt::MValue> *' implicit this
    |     `-CXXConstructExpr 0x285589c2148 <col:21> 'alt::MValue []' 'void ()'
    |-ForStmt 0x285589c2518 <line:122:4, line:123:24>
    | |-DeclStmt 0x285589c2250 <line:122:9, col:19>
    | | `-VarDecl 0x285589c21d0 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x285589c2238 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x285589c1950 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x285589c22f8 <col:21, col:25> 'bool' '<'
    | | |-ImplicitCastExpr 0x285589c22c8 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x285589c2268 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x285589c21d0 'i' 'alt::Size':'unsigned long long'
    | | `-ImplicitCastExpr 0x285589c22e0 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-MemberExpr 0x285589c2298 <col:25> 'alt::Size':'unsigned long long' lvalue ->size 0x28558572f60
    | |     `-CXXThisExpr 0x285589c2288 <col:25> 'alt::Array<alt::MValue> *' implicit this
    | |-UnaryOperator 0x285589c2338 <col:31, col:33> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x285589c2318 <col:33> 'alt::Size':'unsigned long long' lvalue Var 0x285589c21d0 'i' 'alt::Size':'unsigned long long'
    | `-CXXOperatorCallExpr 0x285589c24e0 <line:123:5, col:24> 'alt::MValue' lvalue
    |   |-ImplicitCastExpr 0x285589c24c8 <col:16> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x285589c24a8 <col:16> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
    |   |-ArraySubscriptExpr 0x285589c23c0 <col:5, col:14> 'alt::MValue':'alt::MValue' lvalue
    |   | |-ImplicitCastExpr 0x285589c2390 <col:5> 'alt::MValue *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x285589c2350 <col:5> 'alt::MValue *' lvalue Var 0x285589c2018 'newData' 'alt::MValue *'
    |   | `-ImplicitCastExpr 0x285589c23a8 <col:13> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x285589c2370 <col:13> 'alt::Size':'unsigned long long' lvalue Var 0x285589c21d0 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x285589c2490 <col:18, col:24> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
    |     `-ArraySubscriptExpr 0x285589c2470 <col:18, col:24> 'alt::MValue':'alt::MValue' lvalue
    |       |-ImplicitCastExpr 0x285589c2440 <col:18> 'alt::MValue *' <LValueToRValue>
    |       | `-MemberExpr 0x285589c23f0 <col:18> 'alt::MValue *' lvalue ->data 0x28558572f08
    |       |   `-CXXThisExpr 0x285589c23e0 <col:18> 'alt::Array<alt::MValue> *' implicit this
    |       `-ImplicitCastExpr 0x285589c2458 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |         `-DeclRefExpr 0x285589c2420 <col:23> 'alt::Size':'unsigned long long' lvalue Var 0x285589c21d0 'i' 'alt::Size':'unsigned long long'
    |-CXXDeleteExpr 0x285589c25a8 <line:125:4, col:13> 'void' array Function 0x28556fe49b8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
    | `-ImplicitCastExpr 0x285589c2590 <col:13> 'alt::MValue *' <LValueToRValue>
    |   `-MemberExpr 0x285589c2560 <col:13> 'alt::MValue *' lvalue ->data 0x28558572f08
    |     `-CXXThisExpr 0x285589c2550 <col:13> 'alt::Array<alt::MValue> *' implicit this
    `-BinaryOperator 0x285589c2640 <line:126:4, col:11> 'alt::MValue *' lvalue '='
      |-MemberExpr 0x285589c25d8 <col:4> 'alt::MValue *' lvalue ->data 0x28558572f08
      | `-CXXThisExpr 0x285589c25c8 <col:4> 'alt::Array<alt::MValue> *' implicit this
      `-ImplicitCastExpr 0x285589c2628 <col:11> 'alt::MValue *' <LValueToRValue>
        `-DeclRefExpr 0x285589c2608 <col:11> 'alt::MValue *' lvalue Var 0x285589c2018 'newData' 'alt::MValue *'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::Dict = std::unordered_map
ClassTemplateSpecializationDecl 0x285584fb760 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:89:1, line:511:2> line:94:8 class unordered_map definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial
|-public '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|-TemplateArgument type 'alt::String'
|-TemplateArgument type 'alt::MValue'
|-TemplateArgument type 'std::hash<alt::String>'
|-TemplateArgument type 'std::equal_to<alt::String>'
|-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|-MaxFieldAlignmentAttr 0x28558573418 <<invalid sloc>> Implicit 64
|-CXXRecordDecl 0x28558631ac0 prev 0x285584fb760 <col:2, col:8> col:8 implicit class unordered_map
|-AccessSpecDecl 0x28558631b50 <line:98:1, col:7> col:1 public
|-StaticAssertDecl 0x28558631e70 <line:99:2, line:100:110> line:99:2
| |-BinaryOperator 0x28558631e38 <col:16, col:109> 'bool' '||'
| | |-UnaryOperator 0x28558631b98 <col:16, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:207:23> 'bool' prefix '!' cannot overflow
| | | `-ImplicitCastExpr 0x28558631b80 <col:23> 'bool' <IntegralToBoolean>
| | |   `-IntegerLiteral 0x28558439110 <col:23> 'int' 1
| | `-ImplicitCastExpr 0x28558631e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:99:49, col:109> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x28558631d90 <col:49, col:109> 'const bool' lvalue VarTemplateSpecialization 0x285585cbbc0 'is_same_v' 'const bool' non_odr_use_constant
| `-StringLiteral 0x285584394b8 <line:100:33, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:428:2> 'const char [291]' lvalue "unordered_map<Key, Value, Hasher, Eq, Allocator> requires that Allocator's value_type match pair<const Key, Value> (See N4659 26.2.1 [container.requirements.general]/16 allocator_type) Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this diagnostic."
|-TypeAliasDecl 0x28558631fb0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:102:2, col:56> col:8 _Mytraits '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TemplateSpecializationType 0x28558631ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|   |-TemplateArgument type 'alt::String':'alt::String'
|   |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|   |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|   `-RecordType 0x28558573680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|     `-ClassTemplateSpecialization 0x28558573568 '_Uhash_compare'
|-TypeAliasDecl 0x28558632230 <line:103:2, col:73> col:8 _Mybase '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| `-TemplateSpecializationType 0x285586321c0 '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' sugar _Hash
|   |-TemplateArgument type '_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false>':'std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false>'
|   `-RecordType 0x28558573b40 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|     `-ClassTemplateSpecialization 0x28558573a60 '_Hash'
|-TypeAliasDecl 0x285586322a0 <line:104:2, col:17> col:8 hasher 'std::hash<alt::String>':'std::hash<alt::String>'
| `-SubstTemplateTypeParmType 0x285585734f0 'std::hash<alt::String>' sugar
|   |-TemplateTypeParmType 0x28558438300 '_Hasher' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x285584382b0 '_Hasher'
|   `-RecordType 0x285582e0ab0 'std::hash<alt::String>'
|     `-ClassTemplateSpecialization 0x285582e09c8 'hash'
|-TypeAliasDecl 0x28558632310 <line:105:2, col:19> col:8 key_type 'alt::String':'alt::String'
| `-SubstTemplateTypeParmType 0x285584fb1c0 'alt::String' sugar
|   |-TemplateTypeParmType 0x28558438150 '_Kty' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x28558438100 '_Kty'
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x28558632380 <line:106:2, col:22> col:8 mapped_type 'alt::MValue':'alt::MValue'
| `-SubstTemplateTypeParmType 0x285584fb400 'alt::MValue' sugar
|   |-TemplateTypeParmType 0x285584381d0 '_Ty' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x28558438178 '_Ty'
|   `-RecordType 0x285584fa5c0 'alt::MValue'
|     `-CXXRecord 0x285584fa530 'MValue'
|-TypeAliasDecl 0x285586323f0 <line:107:2, col:20> col:8 key_equal 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| `-SubstTemplateTypeParmType 0x28558573530 'std::equal_to<alt::String>' sugar
|   |-TemplateTypeParmType 0x28558438430 '_Keyeq' dependent depth 0 index 3
|   | `-TemplateTypeParm 0x285584383e0 '_Keyeq'
|   `-RecordType 0x285584fb360 'std::equal_to<alt::String>'
|     `-ClassTemplateSpecialization 0x285584fb280 'equal_to'
|-TypeAliasDecl 0x28558632460 <line:108:2, col:22> col:8 key_compare 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TypedefType 0x28558632030 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits' sugar
|   |-TypeAlias 0x28558631fb0 '_Mytraits'
|   `-TemplateSpecializationType 0x28558631ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|     |-TemplateArgument type 'alt::String':'alt::String'
|     |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|     |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|     `-RecordType 0x28558573680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|       `-ClassTemplateSpecialization 0x28558573568 '_Uhash_compare'
|-TypeAliasDecl 0x28558632570 <line:110:2, col:39> col:8 value_type 'typename _Mybase::value_type':'std::pair<const alt::String, alt::MValue>'
| `-ElaboratedType 0x28558632520 'typename _Mybase::value_type' sugar
|   `-TypedefType 0x285585fcdb0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|     |-TypeAlias 0x285585fc8e0 'value_type'
|     `-ElaboratedType 0x285585fc890 'typename _Mylist::value_type' sugar
|       `-TypedefType 0x285585cced0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|         |-TypeAlias 0x285585cca60 'value_type'
|         `-ElaboratedType 0x285585cca10 'typename _Mybase::value_type' sugar
|           `-TypedefType 0x285585a0050 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|             |-TypeAlias 0x2855859fc30 'value_type'
|             `-ElaboratedType 0x2855859fbe0 'typename _Val_types::value_type' sugar
|               `-TypedefType 0x2855859f7d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                 |-TypeAlias 0x2855859f6a8 'value_type'
|                 `-SubstTemplateTypeParmType 0x2855859f670 'std::pair<const alt::String, alt::MValue>' sugar
|                   |-TemplateTypeParmType 0x28557a5ab20 '_Value_type' dependent depth 0 index 0
|                   | `-TemplateTypeParm 0x28557a5aac8 '_Value_type'
|                   `-RecordType 0x285584fb530 'std::pair<const alt::String, alt::MValue>'
|                     `-ClassTemplateSpecialization 0x285584fb438 'pair'
|-TypeAliasDecl 0x28558632640 <line:111:2, col:43> col:8 allocator_type 'typename _Mybase::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >'
| `-ElaboratedType 0x285586325f0 'typename _Mybase::allocator_type' sugar
|   `-TypedefType 0x285585ffae0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type' sugar
|     |-TypeAlias 0x285585fc9b0 'allocator_type'
|     `-ElaboratedType 0x285585fc960 'typename _Mylist::allocator_type' sugar
|       `-TypedefType 0x285585d47e0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type' sugar
|         |-TypeAlias 0x285585ccad0 'allocator_type'
|         `-SubstTemplateTypeParmType 0x28558592b80 'std::allocator<std::pair<const alt::String, alt::MValue> >' sugar
|           |-TemplateTypeParmType 0x285583193f0 '_Alloc' dependent depth 0 index 1
|           | `-TemplateTypeParm 0x285583193a0 '_Alloc'
|           `-RecordType 0x285584fb6d0 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|             `-ClassTemplateSpecialization 0x285584fb5f0 'allocator'
|-TypeAliasDecl 0x28558632710 <line:112:2, col:38> col:8 size_type 'typename _Mybase::size_type':'unsigned long long'
| `-ElaboratedType 0x285586326c0 'typename _Mybase::size_type' sugar
|   `-TypedefType 0x28558602e70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::size_type' sugar
|     |-TypeAlias 0x285585fca80 'size_type'
|     `-ElaboratedType 0x285585fca30 'typename _Mylist::size_type' sugar
|       `-TypedefType 0x285585cdb70 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type' sugar
|         |-TypeAlias 0x285585ccba0 'size_type'
|         `-ElaboratedType 0x285585ccb50 'typename _Mybase::size_type' sugar
|           `-TypedefType 0x285585a2ff0 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::size_type' sugar
|             |-TypeAlias 0x2855859fd20 'size_type'
|             `-ElaboratedType 0x2855859fcd0 'typename _Val_types::size_type' sugar
|               `-TypedefType 0x2855859fcb0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::size_type' sugar
|                 |-TypeAlias 0x2855859f708 'size_type'
|                 `-TypedefType 0x28556f55c10 'size_t' sugar
|                   |-Typedef 0x28556f55958 'size_t'
|                   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x28558632800 <line:113:2, col:44> col:8 difference_type 'typename _Mybase::difference_type':'long long'
| `-ElaboratedType 0x285586327b0 'typename _Mybase::difference_type' sugar
|   `-TypedefType 0x28558632790 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::difference_type' sugar
|     |-TypeAlias 0x285585fcb70 'difference_type'
|     `-ElaboratedType 0x285585fcb20 'typename _Mylist::difference_type' sugar
|       `-TypedefType 0x285585fcb00 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::difference_type' sugar
|         |-TypeAlias 0x285585ccc90 'difference_type'
|         `-ElaboratedType 0x285585ccc40 'typename _Mybase::difference_type' sugar
|           `-TypedefType 0x285585ccc20 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::difference_type' sugar
|             |-TypeAlias 0x2855859fe10 'difference_type'
|             `-ElaboratedType 0x2855859fdc0 'typename _Val_types::difference_type' sugar
|               `-TypedefType 0x2855859fda0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::difference_type' sugar
|                 |-TypeAlias 0x2855859f768 'difference_type'
|                 `-TypedefType 0x2855792faf0 'ptrdiff_t' sugar
|                   |-Typedef 0x28556f559f0 'ptrdiff_t'
|                   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285586328f0 <line:114:2, col:36> col:8 pointer 'typename _Mybase::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x285586328a0 'typename _Mybase::pointer' sugar
|   `-TypedefType 0x28558632880 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::pointer' sugar
|     |-TypeAlias 0x285585fcc60 'pointer'
|     `-ElaboratedType 0x285585fcc10 'typename _Mylist::pointer' sugar
|       `-TypedefType 0x285585fcbf0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::pointer' sugar
|         |-TypeAlias 0x285585ccd80 'pointer'
|         `-ElaboratedType 0x285585ccd30 'typename _Mybase::pointer' sugar
|           `-TypedefType 0x285585ccd10 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::pointer' sugar
|             |-TypeAlias 0x2855859ff00 'pointer'
|             `-ElaboratedType 0x2855859feb0 'typename _Val_types::pointer' sugar
|               `-TypedefType 0x2855859fe90 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::pointer' sugar
|                 |-TypeAlias 0x2855859f828 'pointer'
|                 `-PointerType 0x2855859f7f0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-TypedefType 0x2855859f7d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x2855859f6a8 'value_type'
|                     `-SubstTemplateTypeParmType 0x2855859f670 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x28557a5ab20 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x28557a5aac8 '_Value_type'
|                       `-RecordType 0x285584fb530 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x285584fb438 'pair'
|-TypeAliasDecl 0x285586329e0 <line:115:2, col:42> col:8 const_pointer 'typename _Mybase::const_pointer':'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x28558632990 'typename _Mybase::const_pointer' sugar
|   `-TypedefType 0x28558632970 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_pointer' sugar
|     |-TypeAlias 0x285585fcd50 'const_pointer'
|     `-ElaboratedType 0x285585fcd00 'typename _Mylist::const_pointer' sugar
|       `-TypedefType 0x285585fcce0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_pointer' sugar
|         |-TypeAlias 0x285585cce70 'const_pointer'
|         `-ElaboratedType 0x285585cce20 'typename _Mybase::const_pointer' sugar
|           `-TypedefType 0x285585cce00 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_pointer' sugar
|             |-TypeAlias 0x2855859fff0 'const_pointer'
|             `-ElaboratedType 0x2855859ffa0 'typename _Val_types::const_pointer' sugar
|               `-TypedefType 0x2855859ff80 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::const_pointer' sugar
|                 |-TypeAlias 0x2855859f8c8 'const_pointer'
|                 `-PointerType 0x2855859f890 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-QualType 0x2855859f7d1 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' const
|                     `-TypedefType 0x2855859f7d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x2855859f6a8 'value_type'
|                       `-SubstTemplateTypeParmType 0x2855859f670 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x28557a5ab20 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x28557a5aac8 '_Value_type'
|                         `-RecordType 0x285584fb530 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x285584fb438 'pair'
|-TypeAliasDecl 0x28558632a98 <line:116:2, col:30> col:8 reference 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x28558632a60 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-TypedefType 0x28558632a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|     |-TypeAlias 0x28558632570 'value_type'
|     `-ElaboratedType 0x28558632520 'typename _Mybase::value_type' sugar
|       `-TypedefType 0x285585fcdb0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|         |-TypeAlias 0x285585fc8e0 'value_type'
|         `-ElaboratedType 0x285585fc890 'typename _Mylist::value_type' sugar
|           `-TypedefType 0x285585cced0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|             |-TypeAlias 0x285585cca60 'value_type'
|             `-ElaboratedType 0x285585cca10 'typename _Mybase::value_type' sugar
|               `-TypedefType 0x285585a0050 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                 |-TypeAlias 0x2855859fc30 'value_type'
|                 `-ElaboratedType 0x2855859fbe0 'typename _Val_types::value_type' sugar
|                   `-TypedefType 0x2855859f7d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x2855859f6a8 'value_type'
|                     `-SubstTemplateTypeParmType 0x2855859f670 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x28557a5ab20 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x28557a5aac8 '_Value_type'
|                       `-RecordType 0x285584fb530 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x285584fb438 'pair'
|-TypeAliasDecl 0x28558632b38 <line:117:2, col:42> col:8 const_reference 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x28558632b00 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-QualType 0x28558632a41 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' const
|     `-TypedefType 0x28558632a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|       |-TypeAlias 0x28558632570 'value_type'
|       `-ElaboratedType 0x28558632520 'typename _Mybase::value_type' sugar
|         `-TypedefType 0x285585fcdb0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|           |-TypeAlias 0x285585fc8e0 'value_type'
|           `-ElaboratedType 0x285585fc890 'typename _Mylist::value_type' sugar
|             `-TypedefType 0x285585cced0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|               |-TypeAlias 0x285585cca60 'value_type'
|               `-ElaboratedType 0x285585cca10 'typename _Mybase::value_type' sugar
|                 `-TypedefType 0x285585a0050 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                   |-TypeAlias 0x2855859fc30 'value_type'
|                   `-ElaboratedType 0x2855859fbe0 'typename _Val_types::value_type' sugar
|                     `-TypedefType 0x2855859f7d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x2855859f6a8 'value_type'
|                       `-SubstTemplateTypeParmType 0x2855859f670 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x28557a5ab20 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x28557a5aac8 '_Value_type'
|                         `-RecordType 0x285584fb530 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x285584fb438 'pair'
|-TypeAliasDecl 0x28558632c10 <line:118:2, col:37> col:8 iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x28558632bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x285585ff350 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x285585fdfa8 'iterator'
|     `-TemplateSpecializationType 0x285585fded0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x285585fd878 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x285585fd860 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x285585fd6f0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x285585fcf50 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x285585fde80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x285585fde60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x285585fdde8 'type'
|       |   `-SubstTemplateTypeParmType 0x285585fddb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x28556f9dbb0 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x28556f9db28 '_Ty2'
|       |     `-RecordType 0x285585a0410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x285585a0330 '_List_iterator'
|       `-ElaboratedType 0x285585fde80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x285585fde60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x285585fdde8 'type'
|           `-SubstTemplateTypeParmType 0x285585fddb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x28556f9dbb0 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x28556f9db28 '_Ty2'
|             `-RecordType 0x285585a0410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x285585a0330 '_List_iterator'
|-TypeAliasDecl 0x28558632ce0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:119:2, col:43> col:8 const_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x28558632c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x285585ff7e0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x285585fe048 'const_iterator'
|     `-ElaboratedType 0x285585fd7a0 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x285585cd630 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x285585cd1b0 'const_iterator'
|         `-ElaboratedType 0x285585cd160 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x285585cd140 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x285585a06f0 'const_iterator'
|             `-TemplateSpecializationType 0x285585a0680 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x285585a0660 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x285585a0580 '_List_const_iterator'
|-TypeAliasDecl 0x28558632d80 <line:121:2, col:43> col:8 local_iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x28558632bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x285585ff350 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x285585fdfa8 'iterator'
|     `-TemplateSpecializationType 0x285585fded0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x285585fd878 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x285585fd860 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x285585fd6f0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x285585fcf50 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x285585fde80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x285585fde60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x285585fdde8 'type'
|       |   `-SubstTemplateTypeParmType 0x285585fddb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x28556f9dbb0 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x28556f9db28 '_Ty2'
|       |     `-RecordType 0x285585a0410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x285585a0330 '_List_iterator'
|       `-ElaboratedType 0x285585fde80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x285585fde60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x285585fdde8 'type'
|           `-SubstTemplateTypeParmType 0x285585fddb0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x28556f9dbb0 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x28556f9db28 '_Ty2'
|             `-RecordType 0x285585a0410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x285585a0330 '_List_iterator'
|-TypeAliasDecl 0x28558632e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:122:2, col:49> col:8 const_local_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x28558632c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x285585ff7e0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x285585fe048 'const_iterator'
|     `-ElaboratedType 0x285585fd7a0 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x285585cd630 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x285585cd1b0 'const_iterator'
|         `-ElaboratedType 0x285585cd160 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x285585cd140 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x285585a06f0 'const_iterator'
|             `-TemplateSpecializationType 0x285585a0680 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x285585a0660 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x285585a0580 '_List_const_iterator'
|-TypeAliasDecl 0x28558632ef0 <line:124:2, col:36> col:8 _Alnode 'typename _Mybase::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
| `-ElaboratedType 0x28558632ea0 'typename _Mybase::_Alnode' sugar
|   `-TypedefType 0x285585feb20 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode' sugar
|     |-TypeAlias 0x285585fc720 '_Alnode'
|     `-ElaboratedType 0x285585fc6d0 'typename _Mylist::_Alnode' sugar
|       `-TypedefType 0x285585fc6b0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|         |-TypeAlias 0x285585cc8a0 '_Alnode'
|         `-ElaboratedType 0x285585cc850 'typename _Mybase::_Alnode' sugar
|           `-TypedefType 0x2855859ea50 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode' sugar
|             |-TypeAlias 0x2855859e920 '_Alnode'
|             `-ElaboratedType 0x2855859e8d0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode' sugar
|               `-TypedefType 0x285585942a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|                 |-TypeAlias 0x28558594238 '_Alnode'
|                 `-TemplateSpecializationType 0x28558594190 '_Rebind_alloc_t<std::allocator<std::pair<const alt::String, alt::MValue> >, std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node>' sugar alias _Rebind_alloc_t
|                   |-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >':'std::allocator<std::pair<const alt::String, alt::MValue> >'
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |-ElaboratedType 0x28558594120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                   | `-TemplateSpecializationType 0x285585940d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                   |   |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   |-TemplateSpecializationType 0x28558594060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |   | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   | `-RecordType 0x28558594040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |   |   `-ClassTemplateSpecialization 0x28558593f58 'allocator'
|                   |   `-TemplateSpecializationType 0x28558594060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |     |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |     `-RecordType 0x28558594040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |       `-ClassTemplateSpecialization 0x28558593f58 'allocator'
|                   `-ElaboratedType 0x28558594120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                     `-TemplateSpecializationType 0x285585940d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                       |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       |-TemplateSpecializationType 0x28558594060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                       | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       | `-RecordType 0x28558594040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                       |   `-ClassTemplateSpecialization 0x28558593f58 'allocator'
|                       `-TemplateSpecializationType 0x28558594060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                         |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                         `-RecordType 0x28558594040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                           `-ClassTemplateSpecialization 0x28558593f58 'allocator'
|-TypeAliasDecl 0x28558632fe0 <line:125:2, col:43> col:8 _Alnode_traits 'typename _Mybase::_Alnode_traits':'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
| `-ElaboratedType 0x28558632f90 'typename _Mybase::_Alnode_traits' sugar
|   `-TypedefType 0x28558632f70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode_traits' sugar
|     |-TypeAlias 0x285585fc810 '_Alnode_traits'
|     `-ElaboratedType 0x285585fc7c0 'typename _Mylist::_Alnode_traits' sugar
|       `-TypedefType 0x285585fc7a0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|         |-TypeAlias 0x285585cc990 '_Alnode_traits'
|         `-ElaboratedType 0x285585cc940 'typename _Mybase::_Alnode_traits' sugar
|           `-TypedefType 0x285585cc920 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode_traits' sugar
|             |-TypeAlias 0x2855859e9f0 '_Alnode_traits'
|             `-ElaboratedType 0x2855859e9a0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode_traits' sugar
|               `-TypedefType 0x285585944a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|                 |-TypeAlias 0x28558594440 '_Alnode_traits'
|                 `-TemplateSpecializationType 0x285585943d0 'allocator_traits<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode>' sugar allocator_traits
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   `-RecordType 0x285585943b0 'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
|                     `-ClassTemplateSpecialization 0x285585942d0 'allocator_traits'
|-TypeAliasDecl 0x285586330b0 <line:126:2, col:36> col:8 _Pairib 'typename _Mybase::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
| `-ElaboratedType 0x28558633060 'typename _Mybase::_Pairib' sugar
|   `-TypedefType 0x285586017c0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib' sugar
|     |-TypeAlias 0x285585ff540 '_Pairib'
|     `-TemplateSpecializationType 0x285585ff4a0 'pair<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator, bool>' sugar pair
|       |-TemplateArgument type 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'bool'
|       `-RecordType 0x285585ff480 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-ClassTemplateSpecialization 0x285585ff380 'pair'
|-TypeAliasDecl 0x28558633370 <line:129:2, col:86> col:8 insert_return_type '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>':'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
| `-TemplateSpecializationType 0x285586332d0 '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>' sugar _Insert_return_type
|   |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-TemplateArgument type 'typename _Mybase::node_type':'std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue>'
|   `-RecordType 0x285586332b0 'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
|     `-ClassTemplateSpecialization 0x285586331b0 '_Insert_return_type'
|-CXXConstructorDecl 0x28558633408 <line:132:2, line:135:3> line:132:2 used unordered_map 'void ()'
| |-CXXCtorInitializer 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| | `-ExprWithCleanups 0x28558b6b350 <line:133:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| |   `-CXXConstructExpr 0x28558b6b318 <col:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' 'void (const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_compare &, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type &)'
| |     |-MaterializeTemporaryExpr 0x28558b6b2d0 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' lvalue
| |     | `-ImplicitCastExpr 0x28558b6b2b8 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' <NoOp>
| |     |   `-CXXTemporaryObjectExpr 0x28558b6b1f0 <col:13, col:25> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' 'void (std::hash<alt::String>, std::equal_to<alt::String>)'
| |     |     |-CXXDefaultArgExpr 0x28558b6b090 <<invalid sloc>> 'std::hash<alt::String>':'std::hash<alt::String>'
| |     |     `-CXXDefaultArgExpr 0x28558b6b1d0 <<invalid sloc>> 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| |     `-MaterializeTemporaryExpr 0x28558b6b300 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' lvalue
| |       `-ImplicitCastExpr 0x28558b6b2e8 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' <NoOp>
| |         `-CXXTemporaryObjectExpr 0x28558b6b240 <col:28, col:43> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >' 'void () noexcept'
| `-CompoundStmt 0x28558b6af28 <line:134:3, line:135:3>
|-CXXConstructorDecl 0x285586335f8 <line:137:2, col:50> col:11 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| `-ParmVarDecl 0x28558633518 <col:25, col:47> col:47 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x28558633778 <line:142:2, col:43> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| `-ParmVarDecl 0x285586336c8 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-CXXConstructorDecl 0x285586339f8 <line:147:2, col:70> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x28558633848 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-ParmVarDecl 0x285586338c0 <col:45, col:67> col:67 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x28558633bd8 <line:152:2, col:43> col:11 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| `-ParmVarDecl 0x28558633af0 <col:25, col:35> col:35 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x28558633e18 <line:158:2, col:61> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x28558633ca8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x28558633d20 <col:36, col:58> col:58 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x285586340e8 <line:164:2, col:58> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x28558633ef0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x28558633fb8 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x285586343f8 <line:170:2, line:171:28> line:170:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x285586341c0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x28558634238 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x285586342b0 <line:171:3, col:25> col:25 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x28558634738 <line:177:2, line:178:26> line:177:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x285586344d8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x28558634550 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x285586345f8 <line:178:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x28558634ae8 <line:184:2, line:185:53> line:184:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x28558634818 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x28558634890 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x28558634908 <line:185:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x28558634980 <col:28, col:50> col:50 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x28558634e70 <line:191:2, line:192:42> col:3 unordered_map
| |-TemplateTypeParmDecl 0x28558634bc0 <line:191:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x28558634dc8 <line:192:3, col:42> col:3 unordered_map 'void (_Iter, _Iter)'
|   |-ParmVarDecl 0x28558634c60 <col:17, col:23> col:23 _First '_Iter'
|   `-ParmVarDecl 0x28558634cd8 <col:31, col:37> col:37 _Last '_Iter'
|-FunctionTemplateDecl 0x285586352a0 <line:198:2, line:199:69> col:3 unordered_map
| |-TemplateTypeParmDecl 0x28558634f58 <line:198:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x285586351f8 <line:199:3, col:69> col:3 unordered_map 'void (_Iter, _Iter, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x28558635000 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x28558635078 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x285586350f0 <col:44, col:66> col:66 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x28558635710 <line:205:2, line:207:22> line:206:3 unordered_map
| |-TemplateTypeParmDecl 0x28558635390 <line:205:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x28558635668 <line:206:3, line:207:22> line:206:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
|   |-ParmVarDecl 0x28558635430 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x285586354a8 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x28558635520 <line:207:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-FunctionTemplateDecl 0x28558635c10 <line:214:2, line:216:49> line:215:3 unordered_map
| |-TemplateTypeParmDecl 0x28558635800 <line:214:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x28558635b68 <line:215:3, line:216:49> line:215:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x285586358a0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x28558635918 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x28558635990 <line:216:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x28558635a08 <col:24, col:46> col:46 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x28558636120 <line:223:2, line:225:46> line:224:3 unordered_map
| |-TemplateTypeParmDecl 0x28558635d08 <line:223:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x28558636078 <line:224:3, line:225:46> line:224:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
|   |-ParmVarDecl 0x28558635db0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x28558635e28 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x28558635ea0 <line:225:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x28558635f18 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-FunctionTemplateDecl 0x285586366c0 <line:232:2, line:235:29> line:233:3 unordered_map
| |-TemplateTypeParmDecl 0x28558636218 <line:232:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x28558636618 <line:233:3, line:235:29> line:233:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x285586362c0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x28558636338 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x285586363b0 <line:234:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x28558636428 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x285586364a0 <line:235:4, col:26> col:26 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x28558636c60 <line:242:2, line:245:27> line:243:3 unordered_map
| |-TemplateTypeParmDecl 0x285586367c0 <line:242:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x28558636bb8 <line:243:3, line:245:27> line:243:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
|   |-ParmVarDecl 0x28558636860 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x285586368d8 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x28558636950 <line:244:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x285586369c8 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x28558636a40 <line:245:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-FunctionTemplateDecl 0x28558637290 <line:252:2, line:255:54> line:253:3 unordered_map
| |-TemplateTypeParmDecl 0x28558636d60 <line:252:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x285586371e8 <line:253:3, line:255:54> line:253:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x28558636e00 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x28558636e78 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x28558636ef0 <line:254:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x28558636f68 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   |-ParmVarDecl 0x28558636fe0 <line:255:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|   `-ParmVarDecl 0x28558637058 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x28558637498 <line:262:2, line:266:3> line:262:17 used operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |-ParmVarDecl 0x285586373d8 <col:27, col:48> col:48 used _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-CompoundStmt 0x285589c90a0 <line:263:3, line:266:3>
|   |-CXXMemberCallExpr 0x285589c8fb8 <line:264:3, col:28> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue
|   | |-MemberExpr 0x285589c8f70 <col:3, col:20> '<bound member function type>' ->operator= 0x28558601fa8
|   | | `-ImplicitCastExpr 0x285589c9008 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|   | |   `-CXXThisExpr 0x285589c8f60 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|   | `-ImplicitCastExpr 0x285589c9028 <col:22> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue <DerivedToBase (_Hash)>
|   |   `-DeclRefExpr 0x285589c8f40 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x285586373d8 '_Right' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|   `-ReturnStmt 0x285589c9090 <line:265:3, col:16>
|     `-ParenExpr 0x285589c9070 <col:10, col:16> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
|       `-UnaryOperator 0x285589c9058 <col:11, col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x285589c9048 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' this
|-CXXConstructorDecl 0x28558637668 <line:268:2, col:38> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)'
| `-ParmVarDecl 0x28558637588 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXConstructorDecl 0x285586378e8 <line:273:2, col:65> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x28558637738 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
| `-ParmVarDecl 0x285586377b0 <col:40, col:62> col:62 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x28558637a98 <line:278:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:278:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)' noexcept-uninstantiated 0x2855843f160
| `-ParmVarDecl 0x285586379c0 <col:27, col:43> col:43 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXMethodDecl 0x28558637d58 <line:287:2, col:44> col:15 operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&)'
| `-ParmVarDecl 0x28558637c68 <col:26, col:37> col:37 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|-CXXMethodDecl 0x28558637ef8 <line:292:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:292:7 swap 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' noexcept-uninstantiated 0x2855843f560
| `-ParmVarDecl 0x28558637e20 <col:12, col:27> col:27 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-UsingDecl 0x28558638040 <line:298:2, col:17> col:17 _Mybase::insert
|-UsingShadowDecl 0x28558638098 <col:17> col:17 implicit FunctionTemplate 0x28558605398 'insert'
|-UsingShadowDecl 0x285586380e8 <col:17> col:17 implicit FunctionTemplate 0x28558605a58 'insert'
|-UsingShadowDecl 0x28558638138 <col:17> col:17 implicit FunctionTemplate 0x285586060c8 'insert'
|-UsingShadowDecl 0x28558638188 <col:17> col:17 implicit FunctionTemplate 0x285586066e8 'insert'
|-UsingShadowDecl 0x285586381d8 <col:17> col:17 implicit CXXMethod 0x28558606928 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &)'
|-UsingShadowDecl 0x28558638228 <col:17> col:17 implicit CXXMethod 0x28558606b48 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &&)'
|-UsingShadowDecl 0x28558638278 <col:17> col:17 implicit FunctionTemplate 0x28558606e98 'insert'
|-UsingShadowDecl 0x285586382c8 <col:17> col:17 implicit CXXMethod 0x285586070c8 'insert' 'void (initializer_list<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>)'
|-UsingShadowDecl 0x28558638318 <col:17> col:17 implicit CXXMethod 0x2855860a2c8 'insert' 'auto (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-UsingShadowDecl 0x28558638368 <col:17> col:17 implicit CXXMethod 0x2855860a518 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-FunctionTemplateDecl 0x28558638a98 <line:300:2, line:302:31> col:11 insert
| |-TemplateTypeParmDecl 0x285586383b8 <line:300:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x28558638438 <line:301:3, <scratch space>:333:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:301:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x285586389f8 <line:302:3, col:31> col:11 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Valty &&)'
|   `-ParmVarDecl 0x28558638908 <col:18, col:27> col:27 _Val '_Valty &&'
|-FunctionTemplateDecl 0x285586392b0 <line:307:2, line:309:55> col:12 insert
| |-TemplateTypeParmDecl 0x28558638b78 <line:307:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x28558638bf8 <line:308:3, <scratch space>:335:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:308:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x285586391b8 <line:309:3, col:55> col:12 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, _Valty &&)'
|   |-ParmVarDecl 0x28558639000 <col:19, col:34> col:34 _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   `-ParmVarDecl 0x285586390a8 <col:42, col:51> col:51 _Val '_Valty &&'
|-FunctionTemplateDecl 0x28558639798 <line:314:2, line:317:26> line:316:11 _Try_emplace
| |-TemplateTypeParmDecl 0x28558639398 <line:314:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x28558639418 <line:315:3, col:12> col:12 class depth 0 index 1 ... _Mappedty
| |-CXXMethodDecl 0x285586396f8 <line:316:3, line:317:26> line:316:11 _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&...)'
| | |-ParmVarDecl 0x285586394f8 <col:24, col:33> col:33 _Keyval '_Keyty &&'
| | `-ParmVarDecl 0x285586395e0 <line:317:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x28558b74758 <line:316:3, line:327:3> line:316:11 used _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const alt::String &)'
|   |-TemplateArgument type 'const alt::String &'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x28558b74698 <col:24, col:33> col:33 used _Keyval 'const alt::String &'
|   `-CompoundStmt 0x28558be59d0 <line:318:3, line:327:3>
|     |-DeclStmt 0x28558b754e8 <line:319:3, col:43>
|     | `-VarDecl 0x28558b75320 <col:3, col:42> col:12 used _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' cinit
|     |   `-CXXMemberCallExpr 0x28558b754a0 <col:21, col:42> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|     |     |-MemberExpr 0x28558b75458 <col:21, col:30> '<bound member function type>' ->find 0x28558608018
|     |     | `-ImplicitCastExpr 0x28558b754c8 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|     |     |   `-CXXThisExpr 0x28558b75448 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|     |     `-DeclRefExpr 0x28558b75428 <col:35> 'const alt::String' lvalue ParmVar 0x28558b74698 '_Keyval' 'const alt::String &'
|     `-IfStmt 0x28558be59a8 <line:320:3, line:326:34> has_else
|       |-ExprWithCleanups 0x28558b76a80 <line:320:7, col:30> 'bool'
|       | `-CXXOperatorCallExpr 0x28558b76a48 <col:7, col:30> 'bool'
|       |   |-ImplicitCastExpr 0x28558b76a30 <col:14> 'bool (*)(const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x28558b76a10 <col:14> 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' lvalue CXXMethod 0x28558a2a108 'operator==' 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const'
|       |   |-ImplicitCastExpr 0x28558b769f0 <col:7> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <UncheckedDerivedToBase (_List_const_iterator)>
|       |   | `-DeclRefExpr 0x28558b75640 <col:7> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x28558b75320 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |   `-ImplicitCastExpr 0x28558b769d0 <col:17, col:30> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <DerivedToBase (_List_const_iterator)>
|       |     `-MaterializeTemporaryExpr 0x28558b769b8 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue
|       |       `-ImplicitCastExpr 0x28558b769a0 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' <NoOp>
|       |         `-CXXMemberCallExpr 0x28558b75768 <col:17, col:30> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |           `-MemberExpr 0x28558b75720 <col:17, col:26> '<bound member function type>' ->end 0x28558602338
|       |             `-ImplicitCastExpr 0x28558b75788 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |               `-CXXThisExpr 0x28558b75710 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |-ReturnStmt 0x28558bdbc80 <line:321:4, line:324:64>
|       | `-ExprWithCleanups 0x28558bdbc68 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |   `-ParenExpr 0x28558bdbc48 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |     `-CXXMemberCallExpr 0x28558bdbbc0 <line:321:12, line:324:63> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |       |-MemberExpr 0x28558bdbb78 <line:321:12, col:21> '<bound member function type>' ->emplace 0x28558bdba58
|       |       | `-ImplicitCastExpr 0x28558bdbbf8 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |       |   `-CXXThisExpr 0x28558bdbb68 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |       |-DeclRefExpr 0x28558b74de0 <line:322:5> 'const std::piecewise_construct_t' lvalue Var 0x2855787d560 'piecewise_construct' 'const std::piecewise_construct_t'
|       |       |-MaterializeTemporaryExpr 0x28558bdbc18 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>' xvalue
|       |       | `-CallExpr 0x28558bdb1d0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>'
|       |       |   |-ImplicitCastExpr 0x28558bdb1b8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (*)(const alt::String &) noexcept' <FunctionToPointerDecay>
|       |       |   | `-DeclRefExpr 0x28558b78260 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (const alt::String &) noexcept' lvalue Function 0x28558b78120 'forward_as_tuple' 'tuple<const alt::String &> (const alt::String &) noexcept' (FunctionTemplate 0x28558119a30 'forward_as_tuple')
|       |       |   `-CallExpr 0x28558b77d10 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:55> 'const alt::String' lvalue
|       |       |     |-ImplicitCastExpr 0x28558b77cf8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(*)(remove_reference_t<const alt::String &> &) noexcept' <FunctionToPointerDecay>
|       |       |     | `-DeclRefExpr 0x28558b77b78 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' lvalue Function 0x28558b776f0 'forward' 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' (FunctionTemplate 0x285576806f0 'forward')
|       |       |     `-DeclRefExpr 0x28558b76c48 <col:48> 'const alt::String' lvalue ParmVar 0x28558b74698 '_Keyval' 'const alt::String &'
|       |       `-MaterializeTemporaryExpr 0x28558bdbc30 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>' xvalue
|       |         `-CallExpr 0x28558bdb5f0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>'
|       |           `-ImplicitCastExpr 0x28558bdb5d8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> (*)() noexcept' <FunctionToPointerDecay>
|       |             `-DeclRefExpr 0x28558bdb470 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> () noexcept' lvalue Function 0x28558bdb338 'forward_as_tuple' 'tuple<> () noexcept' (FunctionTemplate 0x28558119a30 'forward_as_tuple')
|       `-ReturnStmt 0x28558be5998 <line:326:4, col:34>
|         `-ExprWithCleanups 0x28558be5980 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           `-ParenExpr 0x28558be5960 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|             `-CXXTemporaryObjectExpr 0x28558be5920 <col:12, col:33> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' 'void (std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &, bool &&) noexcept(is_nothrow_constructible_v<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &> && is_nothrow_constructible_v<bool, bool>)'
|               |-DeclRefExpr 0x28558bdbca0 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x28558b75320 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-MaterializeTemporaryExpr 0x28558be37d8 <col:28> 'bool' xvalue
|                 `-CXXBoolLiteralExpr 0x28558b75258 <col:28> 'bool' false
|-FunctionTemplateDecl 0x28558639be8 <line:329:2, line:331:26> line:330:11 try_emplace
| |-TemplateTypeParmDecl 0x28558639880 <line:329:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| |-CXXMethodDecl 0x28558639b48 <line:330:3, line:331:26> line:330:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
| | |-ParmVarDecl 0x28558639948 <col:23, col:39> col:39 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| | `-ParmVarDecl 0x28558639a30 <line:331:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x28558b73fb8 <line:330:3, line:334:3> line:330:11 used try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x28558b73ec8 <col:23, col:39> col:39 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-CompoundStmt 0x28558b74920 <line:332:3, line:334:3>
|     `-ReturnStmt 0x28558b74910 <line:333:3, col:69>
|       `-ParenExpr 0x28558b748f0 <col:10, col:69> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-CXXMemberCallExpr 0x28558b748c8 <col:11, col:68> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           |-MemberExpr 0x28558b74880 <col:11> '<bound member function type>' ->_Try_emplace 0x28558b74758
|           | `-CXXThisExpr 0x28558b74870 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|           `-DeclRefExpr 0x28558b745b8 <col:24> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x28558b73ec8 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-FunctionTemplateDecl 0x2855863a098 <line:336:2, line:338:26> line:337:12 try_emplace
| |-TemplateTypeParmDecl 0x28558639cd0 <line:336:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x28558639ff8 <line:337:3, line:338:26> line:337:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
|   |-ParmVarDecl 0x28558639d70 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x28558639de8 <col:40, col:56> col:56 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x28558639ed0 <line:338:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x2855863a4d8 <line:344:2, line:346:26> line:345:11 try_emplace
| |-TemplateTypeParmDecl 0x2855863a188 <line:344:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x2855863a438 <line:345:3, line:346:26> line:345:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x2855863a230 <col:23, col:34> col:34 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x2855863a320 <line:346:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x2855863a988 <line:352:2, line:354:26> line:353:12 try_emplace
| |-TemplateTypeParmDecl 0x2855863a5c0 <line:352:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x2855863a8e8 <line:353:3, line:354:26> line:353:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x2855863a660 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x2855863a6d8 <col:40, col:51> col:51 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x2855863a7c0 <line:354:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x2855863ae28 <line:360:2, line:363:23> line:362:11 _Insert_or_assign
| |-TemplateTypeParmDecl 0x2855863aa78 <line:360:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x2855863aaf8 <line:361:3, col:9> col:9 class depth 0 index 1 _Mappedty
| `-CXXMethodDecl 0x2855863ad88 <line:362:3, line:363:23> line:362:11 _Insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&)'
|   |-ParmVarDecl 0x2855863abd8 <col:29, col:38> col:38 _Keyval '_Keyty &&'
|   `-ParmVarDecl 0x2855863ac78 <line:363:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x2855863b208 <line:377:2, line:379:23> line:378:11 insert_or_assign
| |-TemplateTypeParmDecl 0x2855863af10 <line:377:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x2855863b168 <line:378:3, line:379:23> line:378:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x2855863afb0 <col:28, col:44> col:44 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x2855863b058 <line:379:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x2855863b668 <line:385:2, line:387:23> line:386:12 insert_or_assign
| |-TemplateTypeParmDecl 0x2855863b2f0 <line:385:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x2855863b5c8 <line:386:3, line:387:23> line:386:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x2855863b390 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x2855863b408 <col:45, col:61> col:61 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x2855863b4a8 <line:387:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x2855863ba58 <line:393:2, line:395:23> line:394:11 insert_or_assign
| |-TemplateTypeParmDecl 0x2855863b758 <line:393:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x2855863b9b8 <line:394:3, line:395:23> line:394:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x2855863b800 <col:28, col:39> col:39 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x2855863b8a8 <line:395:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x2855863beb8 <line:401:2, line:403:23> line:402:12 insert_or_assign
| |-TemplateTypeParmDecl 0x2855863bb40 <line:401:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x2855863be18 <line:402:3, line:403:23> line:402:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x2855863bbe0 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x2855863bc58 <col:45, col:56> col:56 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x2855863bcf8 <line:403:4, col:16> col:16 _Mapval '_Mappedty &&'
|-CXXConstructorDecl 0x2855863c118 <line:409:2, col:51> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x2855863c030 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXConstructorDecl 0x2855863c3c8 <line:415:2, col:78> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x2855863c260 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x2855863c2d8 <col:53, col:75> col:75 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x2855863c6b8 <line:421:2, line:422:21> line:421:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| |-ParmVarDecl 0x2855863c510 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x2855863c588 <line:422:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x2855863ca38 <line:429:2, line:430:48> line:429:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x2855863c800 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x2855863c878 <line:430:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x2855863c8f0 <col:23, col:45> col:45 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x2855863cdc8 <line:437:2, line:438:45> line:437:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x2855863cb90 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x2855863cc08 <line:438:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x2855863cc80 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x2855863d1e8 <line:445:2, line:446:72> line:445:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x2855863cf20 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x2855863cf98 <line:446:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x2855863d010 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x2855863d088 <col:47, col:69> col:69 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x2855863d608 <line:453:2, line:455:27> line:453:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x2855863d340 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x2855863d3b8 <line:454:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x2855863d430 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x2855863d4a8 <line:455:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x2855863dab8 <line:462:2, line:464:54> line:462:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x2855863d760 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x2855863d7d8 <line:463:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x2855863d850 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x2855863d8c8 <line:464:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x2855863d940 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x2855863dd18 <line:471:2, col:62> col:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x2855863dc20 <col:27, col:56> col:56 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXMethodDecl 0x2855863de48 <line:478:13, col:36> col:20 hash_function 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher () const'
| `-WarnUnusedResultAttr 0x2855863df28 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x2855863e008 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:483:13, col:32> col:23 key_eq 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_equal () const'
| `-WarnUnusedResultAttr 0x2855863e0b8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x2855863e1f8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:488:2, line:491:3> line:488:15 used operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x2855863e108 <col:26, col:42> col:42 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-CompoundStmt 0x28558b742d8 <line:489:3, line:491:3>
|   `-ReturnStmt 0x28558b742c8 <line:490:3, col:45>
|     `-ExprWithCleanups 0x28558b742b0 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|       `-ParenExpr 0x28558b74290 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|         `-MemberExpr 0x28558b74260 <col:11, col:39> 'alt::MValue':'alt::MValue' lvalue ->second 0x285589e51b8
|           `-CXXOperatorCallExpr 0x28558b74230 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|             |-ImplicitCastExpr 0x28558b74218 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer (*)() const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x28558b74198 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const' lvalue CXXMethod 0x28558a37d88 'operator->' 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const'
|             `-ImplicitCastExpr 0x28558b74180 <col:11, col:32> 'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue <NoOp>
|               `-MemberExpr 0x28558b74150 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue .first 0x28558aef570
|                 `-MaterializeTemporaryExpr 0x28558b74138 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' xvalue
|                   `-CXXMemberCallExpr 0x28558b74110 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|                     |-MemberExpr 0x28558b740c8 <col:11> '<bound member function type>' ->try_emplace 0x28558b73fb8
|                     | `-CXXThisExpr 0x28558b740b8 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|                     `-DeclRefExpr 0x28558b73e80 <col:23> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x2855863e108 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-CXXMethodDecl 0x2855863e350 <line:493:13, col:52> col:26 at 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x2855863e2c0 <col:29, col:45> col:45 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x2855863e408 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x2855863e578 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:501:13, col:60> col:32 at 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &) const'
| |-ParmVarDecl 0x2855863e488 <col:35, col:51> col:51 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x2855863e630 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-UsingDecl 0x2855863e690 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:509:2, col:17> col:17 _Mybase::_Unchecked_begin
|-UsingShadowDecl 0x2855863e6e8 <col:17> col:17 implicit CXXMethod 0x28558602588 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x2855863e738 <col:17> col:17 implicit CXXMethod 0x285586026a8 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
|-UsingDecl 0x2855863e7a8 <line:510:2, col:17> col:17 _Mybase::_Unchecked_end
|-UsingShadowDecl 0x2855863e800 <col:17> col:17 implicit CXXMethod 0x28558602778 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x2855863e850 <col:17> col:17 implicit CXXMethod 0x28558602848 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
`-CXXDestructorDecl 0x28558641448 <line:94:8> col:8 implicit used ~unordered_map 'void () noexcept' inline default
  `-CompoundStmt 0x28558641540 <col:8>

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::TypeTag = alt::MValue::_TypeTag
ClassTemplateSpecializationDecl 0x285584ffb20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:52:3, line:72:3> line:53:10 struct _TypeTag definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument pack
| |-TemplateArgument type 'void'
| |-TemplateArgument type 'bool'
| |-TemplateArgument type 'long long'
| |-TemplateArgument type 'unsigned long long'
| |-TemplateArgument type 'double'
| |-TemplateArgument type 'alt::String'
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |-TemplateArgument type 'alt::IBaseObject *'
| `-TemplateArgument type 'alt::MValue::Function'
|-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
| |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
| |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
| `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
| |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
| `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
| |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
| |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
| |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
| |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
| |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
| |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
| |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
| |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
| |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
| |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
| |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
| |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
| `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument integral 9
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument pack
|   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
| |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
| |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
| |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'bool'
| | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'long long'
| | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'unsigned long long'
| | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'double'
| | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::String'
| | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::IBaseObject *'
| | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'bool'
| `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'long long'
| `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'unsigned long long'
| `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'double'
| `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::String'
| `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::IBaseObject *'
| `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
`-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
  |-TemplateArgument type 'alt::MValue::Function'
  `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
    `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_MValueList_Push
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_MValueList_Push
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_MValueList_Push
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IResource_MakeClient
TemplateSpecializationType 0x28558645b60 'Array<class alt::String>' sugar Array
|-TemplateArgument type 'class alt::String'
`-RecordType 0x285586429a0 'class alt::Array<class alt::String>'
  `-ClassTemplateSpecialization 0x285586428b8 'Array'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IResource_MakeClient
RecordType 0x285586429a0 'class alt::Array<class alt::String>'
`-ClassTemplateSpecialization 0x285586428b8 'Array'

--- END OF NODE ---

Record param FROM FUNCTION alt_IResource_MakeClient
ClassTemplateSpecializationDecl 0x285586428b8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::String'
|-CXXRecordDecl 0x28558642ac8 prev 0x285586428b8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x28558642b58 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558642bc0 <line:13:3, col:19> col:3 constexpr Array 'void ()' default noexcept-unevaluated 0x28558642bc0
|-FunctionTemplateDecl 0x28558642f30 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x28558642c78 <line:15:12, col:18> col:18 class depth 0 index 0 It
| `-CXXConstructorDecl 0x28558642e88 <line:16:3, col:25> col:3 Array 'void (It, It)'
|   |-ParmVarDecl 0x28558642d20 <col:9, col:12> col:12 begin 'It'
|   `-ParmVarDecl 0x28558642d98 <col:19, col:22> col:22 end 'It'
|-CXXConstructorDecl 0x28558643228 <line:31:3, col:35> col:3 Array 'void (const alt::String *, alt::Size)'
| |-ParmVarDecl 0x28558643088 <col:9, col:18> col:18 _data 'const alt::String *'
| `-ParmVarDecl 0x285586430f0 <col:25, col:30> col:30 _size 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x285586434c8 <line:37:3, col:40> col:3 Array 'void (alt::Size, const alt::String &)'
| |-ParmVarDecl 0x285586432f0 <col:9, col:14> col:14 _size 'alt::Size':'unsigned long long'
| `-ParmVarDecl 0x28558643398 <col:21, col:39> col:30 fill 'const alt::String &'
|-CXXConstructorDecl 0x285586436a8 <line:47:3, col:26> col:3 Array 'void (const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x285586435c8 <col:9, col:22> col:22 that 'const alt::Array<alt::String> &'
|-CXXConstructorDecl 0x28558643888 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x285586437a8 <col:9, col:17> col:17 that 'alt::Array<alt::String> &&'
|-CXXDestructorDecl 0x28558643970 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x28558c10ea0 <col:12, col:29>
|   `-CXXDeleteExpr 0x28558c10e80 <col:14, col:23> 'void' array Function 0x28556fe49b8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x28558c10e68 <col:23> 'alt::String *' <LValueToRValue>
|       `-MemberExpr 0x28558c10e38 <col:23> 'alt::String *' lvalue ->data 0x28558644878
|         `-CXXThisExpr 0x28558c10e28 <col:23> 'alt::Array<alt::String> *' implicit this
|-CXXMethodDecl 0x28558643b58 <line:62:3, col:37> col:10 operator= 'alt::Array<alt::String> &(const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x28558643a98 <col:20, col:33> col:33 that 'const alt::Array<alt::String> &'
|-CXXMethodDecl 0x28558643ce8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::String> &(alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x28558643c20 <col:20, col:28> col:28 that 'alt::Array<alt::String> &&'
|-CXXMethodDecl 0x28558643e78 <line:86:3, col:24> col:8 Push 'void (const alt::String &)'
| `-ParmVarDecl 0x28558643db0 <col:13, col:22> col:22 el 'const alt::String &'
|-CXXMethodDecl 0x28558643f30 <line:93:3, col:18> col:8 GetSize 'alt::Size () const'
|-CXXMethodDecl 0x28558643fe0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x285586441a8 <line:96:3, col:25> col:6 operator[] 'alt::String &(alt::Size)'
| `-ParmVarDecl 0x285586440b8 <col:17, col:22> col:22 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x28558644358 <line:97:3, col:33> col:12 operator[] 'const alt::String &(alt::Size) const'
| `-ParmVarDecl 0x28558644260 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285586444b8 <line:99:3, col:12> col:6 begin 'alt::String *()'
|-CXXMethodDecl 0x285586445e8 <line:100:3, col:20> col:12 begin 'const alt::String *() const'
|-CXXMethodDecl 0x285586446b8 <line:101:3, col:10> col:6 end 'alt::String *()'
|-CXXMethodDecl 0x28558644788 <line:102:3, col:18> col:12 end 'const alt::String *() const'
|-AccessSpecDecl 0x28558644838 <line:104:2, col:9> col:2 private
|-FieldDecl 0x28558644878 <line:105:3, col:6> col:6 referenced data 'alt::String *'
|-FieldDecl 0x285586448d0 <line:106:3, col:8> col:8 size 'alt::Size':'unsigned long long'
|-FieldDecl 0x28558644928 <line:107:3, col:8> col:8 capacity 'alt::Size':'unsigned long long'
`-CXXMethodDecl 0x28558644a10 <line:109:3, col:26> col:8 Realloc 'void (alt::Size)'
  `-ParmVarDecl 0x28558644980 <col:16, col:21> col:21 least 'alt::Size':'unsigned long long'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IResource_MakeClient
ClassTemplateSpecializationDecl 0x285586428b8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::String'
|-CXXRecordDecl 0x28558642ac8 prev 0x285586428b8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x28558642b58 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558642bc0 <line:13:3, col:19> col:3 constexpr Array 'void ()' default noexcept-unevaluated 0x28558642bc0
|-FunctionTemplateDecl 0x28558642f30 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x28558642c78 <line:15:12, col:18> col:18 class depth 0 index 0 It
| `-CXXConstructorDecl 0x28558642e88 <line:16:3, col:25> col:3 Array 'void (It, It)'
|   |-ParmVarDecl 0x28558642d20 <col:9, col:12> col:12 begin 'It'
|   `-ParmVarDecl 0x28558642d98 <col:19, col:22> col:22 end 'It'
|-CXXConstructorDecl 0x28558643228 <line:31:3, col:35> col:3 Array 'void (const alt::String *, alt::Size)'
| |-ParmVarDecl 0x28558643088 <col:9, col:18> col:18 _data 'const alt::String *'
| `-ParmVarDecl 0x285586430f0 <col:25, col:30> col:30 _size 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x285586434c8 <line:37:3, col:40> col:3 Array 'void (alt::Size, const alt::String &)'
| |-ParmVarDecl 0x285586432f0 <col:9, col:14> col:14 _size 'alt::Size':'unsigned long long'
| `-ParmVarDecl 0x28558643398 <col:21, col:39> col:30 fill 'const alt::String &'
|-CXXConstructorDecl 0x285586436a8 <line:47:3, col:26> col:3 Array 'void (const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x285586435c8 <col:9, col:22> col:22 that 'const alt::Array<alt::String> &'
|-CXXConstructorDecl 0x28558643888 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x285586437a8 <col:9, col:17> col:17 that 'alt::Array<alt::String> &&'
|-CXXDestructorDecl 0x28558643970 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x28558c10ea0 <col:12, col:29>
|   `-CXXDeleteExpr 0x28558c10e80 <col:14, col:23> 'void' array Function 0x28556fe49b8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x28558c10e68 <col:23> 'alt::String *' <LValueToRValue>
|       `-MemberExpr 0x28558c10e38 <col:23> 'alt::String *' lvalue ->data 0x28558644878
|         `-CXXThisExpr 0x28558c10e28 <col:23> 'alt::Array<alt::String> *' implicit this
|-CXXMethodDecl 0x28558643b58 <line:62:3, col:37> col:10 operator= 'alt::Array<alt::String> &(const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x28558643a98 <col:20, col:33> col:33 that 'const alt::Array<alt::String> &'
|-CXXMethodDecl 0x28558643ce8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::String> &(alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x28558643c20 <col:20, col:28> col:28 that 'alt::Array<alt::String> &&'
|-CXXMethodDecl 0x28558643e78 <line:86:3, col:24> col:8 Push 'void (const alt::String &)'
| `-ParmVarDecl 0x28558643db0 <col:13, col:22> col:22 el 'const alt::String &'
|-CXXMethodDecl 0x28558643f30 <line:93:3, col:18> col:8 GetSize 'alt::Size () const'
|-CXXMethodDecl 0x28558643fe0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x285586441a8 <line:96:3, col:25> col:6 operator[] 'alt::String &(alt::Size)'
| `-ParmVarDecl 0x285586440b8 <col:17, col:22> col:22 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x28558644358 <line:97:3, col:33> col:12 operator[] 'const alt::String &(alt::Size) const'
| `-ParmVarDecl 0x28558644260 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285586444b8 <line:99:3, col:12> col:6 begin 'alt::String *()'
|-CXXMethodDecl 0x285586445e8 <line:100:3, col:20> col:12 begin 'const alt::String *() const'
|-CXXMethodDecl 0x285586446b8 <line:101:3, col:10> col:6 end 'alt::String *()'
|-CXXMethodDecl 0x28558644788 <line:102:3, col:18> col:12 end 'const alt::String *() const'
|-AccessSpecDecl 0x28558644838 <line:104:2, col:9> col:2 private
|-FieldDecl 0x28558644878 <line:105:3, col:6> col:6 referenced data 'alt::String *'
|-FieldDecl 0x285586448d0 <line:106:3, col:8> col:8 size 'alt::Size':'unsigned long long'
|-FieldDecl 0x28558644928 <line:107:3, col:8> col:8 capacity 'alt::Size':'unsigned long long'
`-CXXMethodDecl 0x28558644a10 <line:109:3, col:26> col:8 Realloc 'void (alt::Size)'
  `-ParmVarDecl 0x28558644980 <col:16, col:21> col:21 least 'alt::Size':'unsigned long long'

--- END OF NODE ---

ClassTemplateSpecialization DEF param FROM FUNCTION alt_IResource_MakeClient
ClassTemplateSpecializationDecl 0x285586428b8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::String'
|-CXXRecordDecl 0x28558642ac8 prev 0x285586428b8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x28558642b58 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558642bc0 <line:13:3, col:19> col:3 constexpr Array 'void ()' default noexcept-unevaluated 0x28558642bc0
|-FunctionTemplateDecl 0x28558642f30 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x28558642c78 <line:15:12, col:18> col:18 class depth 0 index 0 It
| `-CXXConstructorDecl 0x28558642e88 <line:16:3, col:25> col:3 Array 'void (It, It)'
|   |-ParmVarDecl 0x28558642d20 <col:9, col:12> col:12 begin 'It'
|   `-ParmVarDecl 0x28558642d98 <col:19, col:22> col:22 end 'It'
|-CXXConstructorDecl 0x28558643228 <line:31:3, col:35> col:3 Array 'void (const alt::String *, alt::Size)'
| |-ParmVarDecl 0x28558643088 <col:9, col:18> col:18 _data 'const alt::String *'
| `-ParmVarDecl 0x285586430f0 <col:25, col:30> col:30 _size 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x285586434c8 <line:37:3, col:40> col:3 Array 'void (alt::Size, const alt::String &)'
| |-ParmVarDecl 0x285586432f0 <col:9, col:14> col:14 _size 'alt::Size':'unsigned long long'
| `-ParmVarDecl 0x28558643398 <col:21, col:39> col:30 fill 'const alt::String &'
|-CXXConstructorDecl 0x285586436a8 <line:47:3, col:26> col:3 Array 'void (const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x285586435c8 <col:9, col:22> col:22 that 'const alt::Array<alt::String> &'
|-CXXConstructorDecl 0x28558643888 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x285586437a8 <col:9, col:17> col:17 that 'alt::Array<alt::String> &&'
|-CXXDestructorDecl 0x28558643970 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x28558c10ea0 <col:12, col:29>
|   `-CXXDeleteExpr 0x28558c10e80 <col:14, col:23> 'void' array Function 0x28556fe49b8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x28558c10e68 <col:23> 'alt::String *' <LValueToRValue>
|       `-MemberExpr 0x28558c10e38 <col:23> 'alt::String *' lvalue ->data 0x28558644878
|         `-CXXThisExpr 0x28558c10e28 <col:23> 'alt::Array<alt::String> *' implicit this
|-CXXMethodDecl 0x28558643b58 <line:62:3, col:37> col:10 operator= 'alt::Array<alt::String> &(const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x28558643a98 <col:20, col:33> col:33 that 'const alt::Array<alt::String> &'
|-CXXMethodDecl 0x28558643ce8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::String> &(alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x28558643c20 <col:20, col:28> col:28 that 'alt::Array<alt::String> &&'
|-CXXMethodDecl 0x28558643e78 <line:86:3, col:24> col:8 Push 'void (const alt::String &)'
| `-ParmVarDecl 0x28558643db0 <col:13, col:22> col:22 el 'const alt::String &'
|-CXXMethodDecl 0x28558643f30 <line:93:3, col:18> col:8 GetSize 'alt::Size () const'
|-CXXMethodDecl 0x28558643fe0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x285586441a8 <line:96:3, col:25> col:6 operator[] 'alt::String &(alt::Size)'
| `-ParmVarDecl 0x285586440b8 <col:17, col:22> col:22 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x28558644358 <line:97:3, col:33> col:12 operator[] 'const alt::String &(alt::Size) const'
| `-ParmVarDecl 0x28558644260 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285586444b8 <line:99:3, col:12> col:6 begin 'alt::String *()'
|-CXXMethodDecl 0x285586445e8 <line:100:3, col:20> col:12 begin 'const alt::String *() const'
|-CXXMethodDecl 0x285586446b8 <line:101:3, col:10> col:6 end 'alt::String *()'
|-CXXMethodDecl 0x28558644788 <line:102:3, col:18> col:12 end 'const alt::String *() const'
|-AccessSpecDecl 0x28558644838 <line:104:2, col:9> col:2 private
|-FieldDecl 0x28558644878 <line:105:3, col:6> col:6 referenced data 'alt::String *'
|-FieldDecl 0x285586448d0 <line:106:3, col:8> col:8 size 'alt::Size':'unsigned long long'
|-FieldDecl 0x28558644928 <line:107:3, col:8> col:8 capacity 'alt::Size':'unsigned long long'
`-CXXMethodDecl 0x28558644a10 <line:109:3, col:26> col:8 Realloc 'void (alt::Size)'
  `-ParmVarDecl 0x28558644980 <col:16, col:21> col:21 least 'alt::Size':'unsigned long long'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_MValueFunction_Invoker_Invoke
RecordType 0x2855856fd80 'class alt::MValueList'
`-CXXRecord 0x2855856fce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_MValueFunction_Invoker_Invoke
RecordType 0x2855856fd80 'class alt::MValueList'
`-CXXRecord 0x2855856fce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_MValueFunction_Invoker_Invoke
CXXRecordDecl 0x2855856fce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x2855856fe48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x2855856fed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x2855856ff70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x2855863ed18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x2855863ece8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x2855863ecd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x2855863ecb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x28558573398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x28558573390)
| |           `-CXXTemporaryObjectExpr 0x28558573360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x2855863ed60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x285585700b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x28558570028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x2855863f018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x2855863efe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x2855863efd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x2855863efb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x2855863ef30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x2855863ef10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x2855863ef08)
| |             `-CXXConstructExpr 0x2855863eed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x2855863ede8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x2855863edc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558570028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x2855863eeb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x2855863f060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x285585702f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x28558570230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x2855863f0f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x2855863f070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558570230 'list' 'const MValue::List &'
| `-CompoundStmt 0x2855863f150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x28558570478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x285585703b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x2855863f160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x2855863f768 <line:29:3, line:34:3>
|   |-IfStmt 0x2855863f5f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x2855863f2b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x2855863f218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x2855863f1e8 <col:8, col:12> '<bound member function type>' .GetType 0x28558503148
|   | | |   `-ImplicitCastExpr 0x2855863f238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x2855863f1c8 <col:8> 'alt::MValue' lvalue ParmVar 0x285585703b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x2855863f288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x285584fa9f0 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x2855863f5e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x2855863f5c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x2855863f498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x2855863f490)
|   |       `-CXXTemporaryObjectExpr 0x2855863f460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x2855863f730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x2855863f718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2855863f6c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x2855863f678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x2855863f650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x2855863f630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x2855863f610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x2855863f6b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x2855863f690 <col:21> 'alt::MValue' lvalue ParmVar 0x285585703b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x28558570578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x2855863fc20 <col:18, col:50>
|   `-ReturnStmt 0x2855863fc10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x2855863fba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x2855863fb78 <col:27, col:39> '<bound member function type>' .GetSize 0x285585725f0
|         `-ImplicitCastExpr 0x2855863fbf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x2855863fb38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x2855863fab0 <col:27, col:35> '<bound member function type>' ->Get 0x2855863f9a8
|               `-ImplicitCastExpr 0x2855863fb58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x2855863faa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x28558570718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x28558570628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x2855863ff68 <col:32, col:59>
|   `-ReturnStmt 0x2855863ff58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x2855863ff20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x2855863ff08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x2855863fe90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x28558572838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x2855863fe18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x2855863fd90 <col:41, col:49> '<bound member function type>' ->Get 0x2855863f9a8
|       |   `-ImplicitCastExpr 0x2855863fe38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x2855863fd80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x2855863fe78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2855863fe58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558570628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x28558570938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x285586401f8 <col:32, col:54>
|   `-ReturnStmt 0x285586401e8 <col:34, col:51>
|     `-CXXConstructExpr 0x285586401b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x285586401a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x28558640160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x285586400d8 <col:41, col:49> '<bound member function type>' ->Get 0x2855863f9a8
|             `-ImplicitCastExpr 0x28558640180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x285586400c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x28558570a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x285585709f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x285586404d0 <col:25, col:57>
|   `-ReturnStmt 0x285586404c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x28558640480 <col:34, col:54> 'void'
|       |-MemberExpr 0x28558640430 <col:34, col:46> '<bound member function type>' .Push 0x28558572538
|       | `-CXXMemberCallExpr 0x285586403f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x28558640368 <col:34, col:42> '<bound member function type>' ->Get 0x2855863f9a8
|       |     `-ImplicitCastExpr 0x28558640410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x28558640358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x285586404a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x28558640460 <col:51> 'alt::MValue' lvalue ParmVar 0x285585709f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x28558570b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x28558570c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x285586dbbc8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x285586dbb78 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x285586dbb58 <col:8> 'const alt::MValueList' lvalue ParmVar 0x28558570c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x285586dbc38 <col:8>
|-CXXConstructorDecl 0x28558570d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x28558570d08
| `-ParmVarDecl 0x28558570e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x28558570eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x28558570eb8
| `-ParmVarDecl 0x28558570fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x28558571050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x285586db820 <col:8>
`-CXXMethodDecl 0x285586db428 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x285586db428
  `-ParmVarDecl 0x285586db538 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_GetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_GetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_GetMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_SetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_SetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_SetMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_SetMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_SetMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_SetMetaData
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_GetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_GetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_GetMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetMetaData
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetPosition
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetPosition
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IWorldObject_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetPosition
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetPosition
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IEntity_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetRotation
TypedefType 0x2855864ca90 'alt::Rotation' sugar
|-TypeAlias 0x28558010a50 'Rotation'
`-TemplateSpecializationType 0x28558010920 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x285580107c8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x285580107b0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x28558010778 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetRotation
RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetRotation
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IEntity_SetRotation
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_GetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_GetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_GetSyncedMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetSyncedMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetSyncedMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetSyncedMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetSyncedMetaData
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetRotation
TypedefType 0x2855864ca90 'alt::Rotation' sugar
|-TypeAlias 0x28558010a50 'Rotation'
`-TemplateSpecializationType 0x28558010920 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x285580107c8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x285580107b0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x28558010778 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetRotation
RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetRotation
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IPlayer_SetRotation
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_GetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_GetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_GetSyncedMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetSyncedMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetSyncedMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetSyncedMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetSyncedMetaData
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_Spawn
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_Spawn
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_Spawn
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IPlayer_Spawn
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetName
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetName
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetName
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_Kick
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_Kick
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_Kick
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetRotation
TypedefType 0x2855864ca90 'alt::Rotation' sugar
|-TypeAlias 0x28558010a50 'Rotation'
`-TemplateSpecializationType 0x28558010920 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x285580107c8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x285580107b0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x28558010778 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetRotation
RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetRotation
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IVehicle_SetRotation
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_GetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_GetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_GetSyncedMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSyncedMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSyncedMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSyncedMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSyncedMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSyncedMetaData
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetPrimaryColorRGB
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetPrimaryColorRGB
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetPrimaryColorRGB
CXXRecordDecl 0x285582eb228 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x285582eb348 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x285582eb410 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebdf8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebdd0 <col:15> 'int' 0
|-FieldDecl 0x285582eb478 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe38 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe10 <col:15> 'int' 0
|-FieldDecl 0x285582eb4e0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe78 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe50 <col:15> 'int' 0
|-FieldDecl 0x285582eb548 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebeb8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe90 <col:15> 'int' 0
|-CXXConstructorDecl 0x285582eb600 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x285582eb600
|-CXXConstructorDecl 0x285582eb968 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x285582eb6b8 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb730 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb7a8 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb820 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb410 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf10 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebed0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb6b8 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb478 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf90 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebf50 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb730 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb4e0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec010 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebfd0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb7a8 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb548 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec090 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ec050 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb820 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x285582ec0f0 <line:22:3, line:24:3>
`-FriendDecl 0x285582ebd40 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x285582ebc80 parent 0x285582eb1b8 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x285582ebab8 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x285582ebb58 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x285582f7d78 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x285582f7d10 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x285582f7cf8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x285582f7cd8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x285582f6c78 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x285582f6c60 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x285582f6c40 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x285582f5a50 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x285582f5a38 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x285582f5a18 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x285582f49b8 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x285582f49a0 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x285582f4980 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x285582f3790 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x285582f3778 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x285582f3758 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x285582f26f8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x285582f26e0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x285582f26c0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x285582f14d0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x285582f14b8 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x285582f1498 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x285582f0440 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x285582f0428 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x285582f03e0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x285582ee1a0 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x285582ee188 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x285582ee168 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x285582ec100 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x285582ee150 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x285582ec120 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x285582ee270 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x285582ee258 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x285582ee240 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x285582ee1f8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x285582eb410
      | | | | | | | |         `-DeclRefExpr 0x285582ee1d8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x285582f1480 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x285582f0478 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x285582f15a0 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x285582f1588 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x285582f1570 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x285582f1528 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x285582eb478
      | | | | | |         `-DeclRefExpr 0x285582f1508 <col:54> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x285582f3740 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x285582f2730 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x285582f3860 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x285582f3848 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x285582f3830 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x285582f37e8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x285582eb4e0
      | | | |         `-DeclRefExpr 0x285582f37c8 <col:77> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x285582f5a00 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x285582f49f0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x285582f5b20 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x285582f5b08 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x285582f5af0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x285582f5aa8 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x285582eb548
      | |         `-DeclRefExpr 0x285582f5a88 <col:100> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x285582f7cc0 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x285582f6cb0 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x285582f7d68 <line:29:4, col:11>
        `-DeclRefExpr 0x285582f7d48 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSecondaryColorRGB
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSecondaryColorRGB
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSecondaryColorRGB
CXXRecordDecl 0x285582eb228 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x285582eb348 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x285582eb410 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebdf8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebdd0 <col:15> 'int' 0
|-FieldDecl 0x285582eb478 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe38 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe10 <col:15> 'int' 0
|-FieldDecl 0x285582eb4e0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe78 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe50 <col:15> 'int' 0
|-FieldDecl 0x285582eb548 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebeb8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe90 <col:15> 'int' 0
|-CXXConstructorDecl 0x285582eb600 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x285582eb600
|-CXXConstructorDecl 0x285582eb968 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x285582eb6b8 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb730 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb7a8 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb820 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb410 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf10 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebed0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb6b8 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb478 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf90 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebf50 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb730 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb4e0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec010 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebfd0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb7a8 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb548 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec090 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ec050 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb820 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x285582ec0f0 <line:22:3, line:24:3>
`-FriendDecl 0x285582ebd40 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x285582ebc80 parent 0x285582eb1b8 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x285582ebab8 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x285582ebb58 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x285582f7d78 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x285582f7d10 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x285582f7cf8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x285582f7cd8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x285582f6c78 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x285582f6c60 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x285582f6c40 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x285582f5a50 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x285582f5a38 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x285582f5a18 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x285582f49b8 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x285582f49a0 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x285582f4980 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x285582f3790 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x285582f3778 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x285582f3758 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x285582f26f8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x285582f26e0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x285582f26c0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x285582f14d0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x285582f14b8 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x285582f1498 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x285582f0440 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x285582f0428 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x285582f03e0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x285582ee1a0 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x285582ee188 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x285582ee168 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x285582ec100 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x285582ee150 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x285582ec120 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x285582ee270 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x285582ee258 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x285582ee240 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x285582ee1f8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x285582eb410
      | | | | | | | |         `-DeclRefExpr 0x285582ee1d8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x285582f1480 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x285582f0478 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x285582f15a0 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x285582f1588 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x285582f1570 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x285582f1528 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x285582eb478
      | | | | | |         `-DeclRefExpr 0x285582f1508 <col:54> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x285582f3740 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x285582f2730 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x285582f3860 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x285582f3848 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x285582f3830 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x285582f37e8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x285582eb4e0
      | | | |         `-DeclRefExpr 0x285582f37c8 <col:77> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x285582f5a00 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x285582f49f0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x285582f5b20 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x285582f5b08 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x285582f5af0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x285582f5aa8 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x285582eb548
      | |         `-DeclRefExpr 0x285582f5a88 <col:100> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x285582f7cc0 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x285582f6cb0 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x285582f7d68 <line:29:4, col:11>
        `-DeclRefExpr 0x285582f7d48 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetTireSmokeColor
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetTireSmokeColor
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetTireSmokeColor
CXXRecordDecl 0x285582eb228 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x285582eb348 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x285582eb410 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebdf8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebdd0 <col:15> 'int' 0
|-FieldDecl 0x285582eb478 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe38 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe10 <col:15> 'int' 0
|-FieldDecl 0x285582eb4e0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe78 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe50 <col:15> 'int' 0
|-FieldDecl 0x285582eb548 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebeb8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe90 <col:15> 'int' 0
|-CXXConstructorDecl 0x285582eb600 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x285582eb600
|-CXXConstructorDecl 0x285582eb968 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x285582eb6b8 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb730 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb7a8 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb820 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb410 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf10 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebed0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb6b8 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb478 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf90 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebf50 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb730 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb4e0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec010 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebfd0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb7a8 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb548 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec090 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ec050 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb820 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x285582ec0f0 <line:22:3, line:24:3>
`-FriendDecl 0x285582ebd40 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x285582ebc80 parent 0x285582eb1b8 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x285582ebab8 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x285582ebb58 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x285582f7d78 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x285582f7d10 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x285582f7cf8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x285582f7cd8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x285582f6c78 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x285582f6c60 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x285582f6c40 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x285582f5a50 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x285582f5a38 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x285582f5a18 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x285582f49b8 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x285582f49a0 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x285582f4980 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x285582f3790 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x285582f3778 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x285582f3758 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x285582f26f8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x285582f26e0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x285582f26c0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x285582f14d0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x285582f14b8 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x285582f1498 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x285582f0440 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x285582f0428 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x285582f03e0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x285582ee1a0 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x285582ee188 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x285582ee168 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x285582ec100 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x285582ee150 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x285582ec120 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x285582ee270 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x285582ee258 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x285582ee240 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x285582ee1f8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x285582eb410
      | | | | | | | |         `-DeclRefExpr 0x285582ee1d8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x285582f1480 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x285582f0478 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x285582f15a0 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x285582f1588 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x285582f1570 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x285582f1528 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x285582eb478
      | | | | | |         `-DeclRefExpr 0x285582f1508 <col:54> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x285582f3740 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x285582f2730 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x285582f3860 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x285582f3848 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x285582f3830 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x285582f37e8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x285582eb4e0
      | | | |         `-DeclRefExpr 0x285582f37c8 <col:77> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x285582f5a00 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x285582f49f0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x285582f5b20 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x285582f5b08 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x285582f5af0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x285582f5aa8 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x285582eb548
      | |         `-DeclRefExpr 0x285582f5a88 <col:100> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x285582f7cc0 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x285582f6cb0 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x285582f7d68 <line:29:4, col:11>
        `-DeclRefExpr 0x285582f7d48 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetNumberplateText
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetNumberplateText
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetNumberplateText
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetNeonColor
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetNeonColor
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetNeonColor
CXXRecordDecl 0x285582eb228 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x285582eb348 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x285582eb410 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebdf8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebdd0 <col:15> 'int' 0
|-FieldDecl 0x285582eb478 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe38 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe10 <col:15> 'int' 0
|-FieldDecl 0x285582eb4e0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe78 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe50 <col:15> 'int' 0
|-FieldDecl 0x285582eb548 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebeb8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe90 <col:15> 'int' 0
|-CXXConstructorDecl 0x285582eb600 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x285582eb600
|-CXXConstructorDecl 0x285582eb968 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x285582eb6b8 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb730 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb7a8 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb820 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb410 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf10 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebed0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb6b8 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb478 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf90 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebf50 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb730 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb4e0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec010 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebfd0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb7a8 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb548 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec090 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ec050 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb820 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x285582ec0f0 <line:22:3, line:24:3>
`-FriendDecl 0x285582ebd40 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x285582ebc80 parent 0x285582eb1b8 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x285582ebab8 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x285582ebb58 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x285582f7d78 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x285582f7d10 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x285582f7cf8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x285582f7cd8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x285582f6c78 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x285582f6c60 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x285582f6c40 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x285582f5a50 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x285582f5a38 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x285582f5a18 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x285582f49b8 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x285582f49a0 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x285582f4980 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x285582f3790 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x285582f3778 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x285582f3758 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x285582f26f8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x285582f26e0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x285582f26c0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x285582f14d0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x285582f14b8 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x285582f1498 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x285582f0440 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x285582f0428 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x285582f03e0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x285582ee1a0 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x285582ee188 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x285582ee168 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x285582ec100 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x285582ee150 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x285582ec120 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x285582ee270 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x285582ee258 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x285582ee240 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x285582ee1f8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x285582eb410
      | | | | | | | |         `-DeclRefExpr 0x285582ee1d8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x285582f1480 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x285582f0478 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x285582f15a0 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x285582f1588 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x285582f1570 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x285582f1528 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x285582eb478
      | | | | | |         `-DeclRefExpr 0x285582f1508 <col:54> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x285582f3740 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x285582f2730 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x285582f3860 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x285582f3848 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x285582f3830 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x285582f37e8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x285582eb4e0
      | | | |         `-DeclRefExpr 0x285582f37c8 <col:77> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x285582f5a00 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x285582f49f0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x285582f5b20 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x285582f5b08 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x285582f5af0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x285582f5aa8 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x285582eb548
      | |         `-DeclRefExpr 0x285582f5a88 <col:100> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x285582f7cc0 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x285582f6cb0 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x285582f7d68 <line:29:4, col:11>
        `-DeclRefExpr 0x285582f7d48 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadAppearanceDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadAppearanceDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadAppearanceDataFromBase64
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadGameStateFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadGameStateFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadGameStateFromBase64
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadHealthDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadHealthDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadHealthDataFromBase64
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadDamageDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadDamageDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadDamageDataFromBase64
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadScriptDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadScriptDataFromBase64
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadScriptDataFromBase64
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_ICheckpoint_SetPosition
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_ICheckpoint_SetPosition
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_ICheckpoint_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_ICheckpoint_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBlip_SetPosition
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBlip_SetPosition
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBlip_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IBlip_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_GetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_GetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_GetMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_SetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_SetMetaData
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_SetMetaData
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_SetMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_SetMetaData
RecordType 0x285584fa5c0 'class alt::MValue'
`-CXXRecord 0x285584fa530 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_SetMetaData
CXXRecordDecl 0x285584fa530 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x285584fa648 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x285584fa6d8 <line:16:2, col:8> col:2 public
|-EnumDecl 0x285584fa718 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x285584fa7e0 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa838 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa890 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa8e8 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa940 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa998 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584fa9f0 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faa48 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x285584faaa0 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x285584faaf8 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x285584fab60 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x28556ddc460 'void'
|-TypeAliasDecl 0x285584fabd0 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x28556ddc480 'bool'
|-TypeAliasDecl 0x285584fac60 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x285584fac30 'int64_t' sugar
|   |-Typedef 0x2855773dee0 'int64_t'
|   `-BuiltinType 0x28556ddc540 'long long'
|-TypeAliasDecl 0x285584facd0 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x2855804d540 'uint64_t' sugar
|   |-Typedef 0x2855773e0a0 'uint64_t'
|   `-BuiltinType 0x28556ddc5e0 'unsigned long long'
|-TypeAliasDecl 0x285584fad48 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x28556ddc620 'double'
|-TypeAliasDecl 0x285584fae40 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x285584fadd0 'alt::String' sugar
|   `-RecordType 0x285582cc810 'alt::String'
|     `-CXXRecord 0x285582cc778 'String'
|-TypeAliasDecl 0x285584fb0d8 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x285584fb020 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x285584fafe0 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fafc0 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x285584faed8 'Array'
|-TypeAliasDecl 0x285584fba38 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x285584fb920 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x285584fb8c0 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x285584fb8a0 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x285584fb760 'unordered_map'
|-TypeAliasDecl 0x285584fbb80 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x285584fbb30 'alt::IBaseObject *'
|   `-ElaboratedType 0x285584fbab0 'alt::IBaseObject' sugar
|     `-RecordType 0x285584fa460 'alt::IBaseObject'
|       `-CXXRecord 0x2855864a948 'IBaseObject'
|-CXXRecordDecl 0x285584fbbe0 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x285584fbcf8 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x285584fbda0 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x2855863e8d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x28558b60900 <col:10>
| |-CXXConstructorDecl 0x2855863e9b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x2855863e9b0
| | `-ParmVarDecl 0x2855863ea98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x2855863eb38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x2855863eb38
| | `-ParmVarDecl 0x2855863ec48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x28558649cb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x28558b60058 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x28558b60168 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x28558b60d70 <col:10>
| |   |-BinaryOperator 0x28558b60d18 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x28558b60cd0 <col:10> 'void *' lvalue ->invoker 0x285584fbda0
| |   | | `-CXXThisExpr 0x28558b60cc0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x28558b60d00 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x28558b60c90 <col:10> 'void *const' lvalue .invoker 0x285584fbda0
| |   |     `-DeclRefExpr 0x28558b60c70 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x28558b60168 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x28558b60d60 <col:10>
| |     `-UnaryOperator 0x28558b60d48 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x28558b60d38 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x28558b601d8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x28558b601d8
|   `-ParmVarDecl 0x28558b602e8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x285584fbe10 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x285584fbfd8 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x285584fc068 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x285584fc0f8 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x285573ce5e0 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x28558506e58 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x28558506e48 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x28558506e30 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x28558506e08 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x285584fc198 <line:45:38>
| |-CXXConstructorDecl 0x285584fc220 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x285584fc338 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x2855863f530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x2855863f510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x2855863f4f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x285584fc338 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x2855863f5b8 <col:9>
| |-CXXConstructorDecl 0x285584fc3d8 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc3d8
| | `-ParmVarDecl 0x285584fc4e8 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x285584fc588 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x285584fc588
| | `-ParmVarDecl 0x285584fc698 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x285584fc708 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x285584fc708
| | `-ParmVarDecl 0x285584fc818 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x285584fc8a0 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x285573ce4a8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x2855863f3c0 <col:9>
| `-CXXConstructorDecl 0x2855863f2e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x2855863f3d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x2855863f450 <col:9>
|-AccessSpecDecl 0x285584fca40 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x285584fcb90 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x285584fca70 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x285584fcb00 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x285584fce40 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x285584fd0f0 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x285584fcee0 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fcf40 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x285584fcfb8 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x285584fd060 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x285584fd5f0 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x285584fda20 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x285584fd698 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x285584fd718 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x285584fdcc8 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x285584fdd68 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x285584fd6f0 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x285584fd698 '_T'
| | |-TypeAliasTemplateDecl 0x285584fe1c0 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x285584fde90 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x285584fe160 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x285584fe0f0 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x285584fe4c8 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x285584fe228 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584fe288 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fe308 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x285584fe388 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x285584fe438 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x285584fea90 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x285584fef78 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x285584fecd0 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x285584feb48 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x285584feba8 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x285584fec28 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x285584ff268 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x285584ff358 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x285584ff438 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x285584ff3f8 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x285584feb48 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x285584ff5d8 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x285584ff478 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x285584ff570 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x285584ff840 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x285584ffb20 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558503308 prev 0x285584ffb20 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x285585035b0 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x28558503398 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x285585033f8 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x28558503478 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x28558503520 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x285585047a0 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x28558503ec0 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x28558504740 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x285585046f0 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x28558504aa8 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x28558504808 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x28558504868 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x285585048e8 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x28558504968 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x28558504a18 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589a4640 prev 0x285589a3218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589a3a98 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589a44f0 prev 0x285589a3a98 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589a4580 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589a4760 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589a4740 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589a4718 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x285589ae248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af9a0 prev 0x285589ae248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ae918 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589af8c8 prev 0x285589ae918 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589aef38 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589af778 prev 0x285589aef38 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589af808 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589afac0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589afaa0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589afa78 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x285589b1268 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2fd0 prev 0x285589b1268 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1938 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2ef8 prev 0x285589b1938 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b1f58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b2e20 prev 0x285589b1f58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b2520 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b2cd0 prev 0x285589b2520 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b2d60 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b30f0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b30d0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b30a8 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x285589b4898 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ba0 prev 0x285589b4898 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b4f68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6ac8 prev 0x285589b4f68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5588 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b69f0 prev 0x285589b5588 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b5b50 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589b6918 prev 0x285589b5b50 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b60c8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589b67c8 prev 0x285589b60c8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589b6858 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589b6cc0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589b6ca0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589b6c78 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x285589b8468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bacd0 prev 0x285589b8468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b8b38 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589babf8 prev 0x285589b8b38 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9158 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bab20 prev 0x285589b9158 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9720 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589baa48 prev 0x285589b9720 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589b9c98 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589ba970 prev 0x285589b9c98 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589ba1b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589ba820 prev 0x285589ba1b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589ba8b0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589badf0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589badd0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bada8 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x285589bc688 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf450 prev 0x285589bc688 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bcd58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf378 prev 0x285589bcd58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf2a0 prev 0x285589bd378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bd940 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf1c8 prev 0x285589bd940 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589bdf10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf0f0 prev 0x285589bdf10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be430 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589bf018 prev 0x285589be430 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589be8f8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589beec8 prev 0x285589be8f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589bef58 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589bf570 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589bf550 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589bf528 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x285589c2b78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5d90 prev 0x285589c2b78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5cb8 prev 0x285589c3248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3868 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5be0 prev 0x285589c3868 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c3e30 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5b08 prev 0x285589c3e30 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c43a8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5a30 prev 0x285589c43a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c48c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5958 prev 0x285589c48c0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c4d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x285589c5880 prev 0x285589c4d88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x285589c51f0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x285589c5730 prev 0x285589c51f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x285589c57c0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x285589c5eb0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x285589c5e90 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x285589c5e68 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x28558b56a18 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5a080 prev 0x28558b56a18 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b570e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59fa8 prev 0x28558b570e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59ed0 prev 0x28558b57708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b57cd0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59df8 prev 0x28558b57cd0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58248 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59d20 prev 0x28558b58248 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58760 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59c48 prev 0x28558b58760 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b58c28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59b70 prev 0x28558b58c28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b59090 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b59a98 prev 0x28558b59090 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b594a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x28558b59948 prev 0x28558b594a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x28558b599d8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x28558b5a1a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x28558b5a180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x28558b5a158 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x28558b5b948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f4c0 prev 0x28558b5b948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f3e8 prev 0x28558b5c018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5c748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f310 prev 0x28558b5c748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5cd10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f238 prev 0x28558b5cd10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d288 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f160 prev 0x28558b5d288 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5d7a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5f088 prev 0x28558b5d7a0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5dc68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5efb0 prev 0x28558b5dc68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e0d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5eed8 prev 0x28558b5e0d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x28558b5e4e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x28558b5ee00 prev 0x28558b5e4e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x28558b5e8a0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x28558b5ecb0 prev 0x28558b5e8a0 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x28558b5ed40 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x28558b5f5e0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x28558b5f5c0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x28558b5f598 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x285585055d8 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x285585054d8 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x28558505570 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589a2d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x285589a4800 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589a47d0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589a4580 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589add90 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x285589afb60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589afb30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589af808 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b0da8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x285589b3190 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b3160 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b2d60 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b43d8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x285589b6d60 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589b6d30 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589b6858 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589b7fa8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x285589bae90 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bae60 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589ba8b0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589bc1c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x285589bf610 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589bf5e0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589bef58 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x285589c26b8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x285589c5f50 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x285589c5f20 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x285589c57c0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x28558b56558 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x28558b5a240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x28558b5a210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b599d8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x28558b5b488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x28558b5f680 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x28558b5f650 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x28558b5ed40 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x285584fff48 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x285584ffc20 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x285584ffc00 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x285584ffb20 '_TypeTag'
|-CXXRecordDecl 0x285584fffa8 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x285585000c8 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x28558500168 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x28558506df0 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x28558506dc8 <col:41> 'int' 1
| |-CXXDestructorDecl 0x28558500230 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x285585075d8 <col:72>
| |-CXXMethodDecl 0x28558500368 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x28558500368
| | `-ParmVarDecl 0x28558500478 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x285589a4cf0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x285589a4cf0
| | `-ParmVarDecl 0x285589a4e08 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x285589a57f0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x28558500168 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x285589a58e0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x285589a5930 <col:10>
|-ClassTemplateDecl 0x285585006d0 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x285585005b0 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x28558500640 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x28558500960 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x28558500a00 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x285589a4980 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x285589a4b88 prev 0x285589a4980 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589a4c58 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x285589a4e90 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a4e90
| | | `-ParmVarDecl 0x285589a4fa8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x285589a5048 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5048
| | | `-ParmVarDecl 0x285589a5158 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x285589a51f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x285589a51f8
| | | `-ParmVarDecl 0x285589a5308 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x285589a5378 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x285589a5378
| | | `-ParmVarDecl 0x285589a5488 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x285589a5510 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589a58d0 <col:10>
| | `-CXXConstructorDecl 0x285589a5718 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589a5940 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589a59a8 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589afce0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x285589afee8 prev 0x285589afce0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589affb8 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x285589b0050 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b0050
| | | `-ParmVarDecl 0x285589b0168 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x285589b0208 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0208
| | | `-ParmVarDecl 0x285589b0318 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x285589b03b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x285589b03b8
| | | `-ParmVarDecl 0x285589b04c8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x285589b0538 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x285589b0538
| | | `-ParmVarDecl 0x285589b0648 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x285589b06d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b09b0 <col:10>
| | `-CXXConstructorDecl 0x285589b08d8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b09c0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b0a28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b3310 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x285589b3518 prev 0x285589b3310 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b35e8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x285589b3680 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b3680
| | | `-ParmVarDecl 0x285589b3798 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x285589b3838 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3838
| | | `-ParmVarDecl 0x285589b3948 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x285589b39e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x285589b39e8
| | | `-ParmVarDecl 0x285589b3af8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x285589b3b68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x285589b3b68
| | | `-ParmVarDecl 0x285589b3c78 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x285589b3d00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b3fe0 <col:10>
| | `-CXXConstructorDecl 0x285589b3f08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b3ff0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b4058 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589b6ee0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x285589b70e8 prev 0x285589b6ee0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589b71b8 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x285589b7250 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b7250
| | | `-ParmVarDecl 0x285589b7368 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x285589b7408 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7408
| | | `-ParmVarDecl 0x285589b7518 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x285589b75b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x285589b75b8
| | | `-ParmVarDecl 0x285589b76c8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x285589b7738 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x285589b7738
| | | `-ParmVarDecl 0x285589b7848 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x285589b78d0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589b7bb0 <col:10>
| | `-CXXConstructorDecl 0x285589b7ad8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589b7bc0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x285589b7c28 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bb010 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x285589bb218 prev 0x285589bb010 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bb2e8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x285589bb380 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb380
| | | `-ParmVarDecl 0x285589bb498 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x285589bb538 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb538
| | | `-ParmVarDecl 0x285589bb648 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x285589bb6e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x285589bb6e8
| | | `-ParmVarDecl 0x285589bb7f8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x285589bb868 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x285589bb868
| | | `-ParmVarDecl 0x285589bb978 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x285589bba00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589bbd20 <col:10>
| | `-CXXConstructorDecl 0x285589bbc08 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589bbd30 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bb2e8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x285589bbd90 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x285589bbdf0 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589bf790 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x285589bf998 prev 0x285589bf790 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589bfa68 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x285589bfb00 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfb00
| | | `-ParmVarDecl 0x285589bfc18 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x285589bfcb8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bfcb8
| | | `-ParmVarDecl 0x285589bfdc8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x285589bfe68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x285589bfe68
| | | `-ParmVarDecl 0x285589bff78 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x285589bffe8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x285589bffe8
| | | `-ParmVarDecl 0x285589c00f8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x285589c0180 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c0530 <col:10>
| | `-CXXConstructorDecl 0x285589c0458 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c0540 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589bfa68 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x285589c05a0 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x285589c0600 <col:10>
| |-ClassTemplateSpecializationDecl 0x285589c60d0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x285589c62d8 prev 0x285589c60d0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x285589c63a8 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x285589c6440 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c6440
| | | `-ParmVarDecl 0x285589c6558 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x285589c65f8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c65f8
| | | `-ParmVarDecl 0x285589c6708 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x285589c67a8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x285589c67a8
| | | `-ParmVarDecl 0x285589c68b8 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x285589c6928 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x285589c6928
| | | `-ParmVarDecl 0x285589c6a38 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x285589c6ac0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x285589c78c0 <col:10>
| | `-CXXConstructorDecl 0x285589c77a8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x285589c78d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x285589c63a8 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x285589c7930 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x285589c7990 <col:10>
| |-ClassTemplateSpecializationDecl 0x28558b5a3c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x28558b5a5c8 prev 0x28558b5a3c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x28558b5a698 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x28558b5a730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5a730
| | | `-ParmVarDecl 0x28558b5a848 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x28558b5a8e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5a8e8
| | | `-ParmVarDecl 0x28558b5a9f8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x28558b5aa98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x28558b5aa98
| | | `-ParmVarDecl 0x28558b5aba8 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x28558b5ac18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x28558b5ac18
| | | `-ParmVarDecl 0x28558b5ad28 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x28558b5adb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x28558b5b090 <col:10>
| | `-CXXConstructorDecl 0x28558b5afb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x28558b5b0a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x28558b5b108 <col:10>
| `-ClassTemplateSpecializationDecl 0x28558b5f800 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x28558b5fa08 prev 0x28558b5f800 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x28558b5fad8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x28558b5fb70 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fb70
|   | `-ParmVarDecl 0x28558b5fc88 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x28558b5fd28 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b5fd28
|   | `-ParmVarDecl 0x28558b5fe38 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x28558b5fed8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x28558b5fed8
|   | `-ParmVarDecl 0x28558b5ffe8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x28558b60358 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x28558b60358
|   | `-ParmVarDecl 0x28558b60468 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x28558b604f0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x28558500230 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x28558b60890 <col:10>
|   `-CXXConstructorDecl 0x28558b607b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x28558b608a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x28558b5fad8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x28558b60910 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x28558b60970 <col:10>
|-FunctionTemplateDecl 0x28558500cc8 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x28558500a70 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558500c28 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x28558500b38 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x285589a2d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a2948 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x285589a28c0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   |-DeclStmt 0x285589a2b20 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a2978 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x285589a2ae8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x285589a2bc8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2b58 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x285589a2b38 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a2c70 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x285589a2c08 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x285589a2be8 <col:4> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |   | `-DeclRefExpr 0x285589a2c50 <col:22> 'const T' lvalue ParmVar 0x28558500b38 'val' 'const T &'
| |   `-BinaryOperator 0x285589a2cf0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x285589a2cd0 <col:14> 'auto' lvalue Var 0x285589a2978 '_storage' 'auto'
| |-CXXMethodDecl 0x28558507928 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x28558507868 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x285589add48 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589a48e8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589a48d0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a4860 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589a5ad0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589a4908 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x285589a59e0 <col:20> 'Storage<bool> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589a59b8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x285589a5b88 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589a5b40 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589a5b20 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589a5b08 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589a5ae8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5b70 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589a5c48 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x285589a5be0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x285589a4c58
| |   | | `-ImplicitCastExpr 0x285589a5bc8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589a5ba8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x285589a5c30 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589a5c10 <col:22> 'const bool':'const bool' lvalue ParmVar 0x28558507868 'val' 'const bool &'
| |   `-BinaryOperator 0x285589add28 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589add08 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589adcf0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589adcd0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x285589a4908 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x285585692b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x285585691f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x285589b0d60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589afc48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589afc30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589afbc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b0b50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589afc68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b0a60 <col:20> 'Storage<long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b0a38 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b0c08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b0bc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b0ba0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b0b88 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b0b68 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0bf0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b0cc8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x285589b0c60 <col:4, col:14> 'long long':'long long' lvalue ->value 0x285589affb8
| |   | | `-ImplicitCastExpr 0x285589b0c48 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b0c28 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x285589b0cb0 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b0c90 <col:22> 'const long long':'const long long' lvalue ParmVar 0x285585691f8 'val' 'const long long &'
| |   `-BinaryOperator 0x285589b0d40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b0d20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b0d08 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b0ce8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x285589afc68 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x28558569648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x28558569588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x285589b4390 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b3278 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b3260 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b31f0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b4180 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b3298 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x285589b4090 <col:20> 'Storage<unsigned long long> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b4068 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b4238 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b41f0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b41d0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b41b8 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b4198 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b4220 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b42f8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b4290 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |   | | `-ImplicitCastExpr 0x285589b4278 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b4258 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x285589b42e0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b42c0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x28558569588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x285589b4370 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b4350 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b4338 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b4318 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x285589b3298 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x285585699d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x28558569918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x285589b7f60 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589b6e48 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589b6e30 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b6dc0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589b7d50 <line:85:4, col:34>
| |   | `-VarDecl 0x285589b6e68 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x285589b7c60 <col:20> 'Storage<double> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589b7c38 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x285589b7e08 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589b7dc0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589b7da0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589b7d88 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589b7d68 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7df0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x285589b7ec8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x285589b7e60 <col:4, col:14> 'double':'double' lvalue ->value 0x285589b71b8
| |   | | `-ImplicitCastExpr 0x285589b7e48 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589b7e28 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x285589b7eb0 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589b7e90 <col:22> 'const double':'const double' lvalue ParmVar 0x28558569918 'val' 'const double &'
| |   `-BinaryOperator 0x285589b7f40 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589b7f20 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589b7f08 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589b7ee8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x285589b6e68 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x28558569d58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x28558569c98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x285589bc180 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589baf78 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589baf60 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589baef0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589bbf10 <line:85:4, col:34>
| |   | `-VarDecl 0x285589baf98 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x285589bbe28 <col:20> 'Storage<alt::String> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589bbe00 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589bbfc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589bbf80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589bbf60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589bbf48 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589bbf28 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x285589bbfb0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589bc0d0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x285589bc0b8 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589bc070 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x285582ce1a8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x285589bc020 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |   | | `-ImplicitCastExpr 0x285589bc008 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589bbfe8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x285589bc050 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x28558569c98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x285589bc160 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589bc140 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589bc128 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589bc108 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x285589baf98 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855856a0d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x2855856a018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x285589c0990 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589bf6f8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589bf6e0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589bf670 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c0720 <line:85:4, col:34>
| |   | `-VarDecl 0x285589bf718 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x285589c0638 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c0610 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x285589c07d8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c0790 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c0770 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c0758 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c0738 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x285589c07c0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c08e0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x285589c08c8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c0880 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x28558572218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x285589c0830 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |   | | `-ImplicitCastExpr 0x285589c0818 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c07f8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x285589c0860 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x2855856a018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x285589c0970 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c0950 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c0938 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c0918 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x285589bf718 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x2855856a458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x2855856a398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x285589c8d10 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x285589c6038 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x285589c6020 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x285589c5fb0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x285589c7ab0 <line:85:4, col:34>
| |   | `-VarDecl 0x285589c6058 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x285589c79c8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x285589c79a0 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x285589c7b68 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x285589c7b20 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x285589c7b00 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x285589c7ae8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x285589c7ac8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x285589c7b50 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x285589c8c60 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x285589c8c48 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x285589c8bf8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x28558637498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x285589c7bc0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |   | | `-ImplicitCastExpr 0x285589c7ba8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x285589c7b88 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x285589c7bf0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x2855856a398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x285589c8cf0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x285589c8cd0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x285589c8cb8 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x285589c8c98 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x285589c6058 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x2855856a7d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x2855856a718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x28558b5b440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x28558b5a328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x28558b5a310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5a2a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b56558 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x28558b5b230 <line:85:4, col:34>
| |   | `-VarDecl 0x28558b5a348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x28558b5b140 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x28558b5b118 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x28558b5b2e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x28558b5b2a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
| |   | | `-ImplicitCastExpr 0x28558b5b280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x28558b5b268 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x28558b5b248 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b2d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
| |   |-BinaryOperator 0x28558b5b3a8 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x28558b5b340 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x28558b5a698
| |   | | `-ImplicitCastExpr 0x28558b5b328 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x28558b5b308 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x28558b5b390 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x28558b5b370 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x2855856a718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x28558b5b420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |     | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x28558b5b400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x28558b5b3e8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b5b3c8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x28558b5a348 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x2855856ab58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x2855856aa98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x28558b60e80 <line:83:3, line:91:3>
|     |-BinaryOperator 0x28558b5f768 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x285589a2830 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | | `-CXXThisExpr 0x285589a2820 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558b5f750 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x28558b5f6e0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x28558b60a90 <line:85:4, col:34>
|     | `-VarDecl 0x28558b5f788 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x28558b609a8 <col:20> 'Storage<alt::MValue::Function> *' Function 0x28556fe7e08 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x28558b60980 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x28558b60b48 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x28558b60b00 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | | `-ImplicitCastExpr 0x28558b60ae0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x28558b60ac8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x28558b60aa8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x28558b60b30 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x285589a2ba0 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x28558b60dd0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x28558b60db8 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x28558b60c50 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x28558b60058 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x28558b60ba0 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|     | | `-ImplicitCastExpr 0x28558b60b88 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x28558b60b68 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x28558b60bd0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x2855856aa98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x28558b60e60 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x285589a2ca0 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|       | `-CXXThisExpr 0x285589a2c90 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x28558b60e40 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x28558b60e28 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558b60e08 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558b5f788 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x28558500d48 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x28558507030 <line:94:3, line:97:3>
|   |-BinaryOperator 0x28558506f88 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558506e80 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558506e70 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x28558506f00 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x285584fa7e0 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x28558507010 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x28558506fb8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | `-CXXThisExpr 0x28558506fa8 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x28558506ff8 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x28558506fe8 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x28558500ee8 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x28558500e28 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x28558507308 <line:100:3, line:106:3>
|   |-BinaryOperator 0x285585070f8 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x28558507060 <col:4> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | | `-CXXThisExpr 0x28558507050 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585070e0 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x285585070b0 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x28558501060
|   |     `-DeclRefExpr 0x28558507090 <col:11> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x285585071c0 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x28558507128 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | | `-CXXThisExpr 0x28558507118 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x285585071a8 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x28558507178 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x285585010c8
|   |     `-DeclRefExpr 0x28558507158 <col:14> 'const alt::MValue' lvalue ParmVar 0x28558500e28 'that' 'const alt::MValue &'
|   `-IfStmt 0x285585072f0 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x28558507238 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x28558507220 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x285585071f0 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |     `-CXXThisExpr 0x285585071e0 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x285585072d8 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x285585072a8 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|         `-ImplicitCastExpr 0x28558507290 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x28558507260 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|             `-CXXThisExpr 0x28558507250 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x28558500fb0 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x28558507620 <line:109:3, line:117:3>
|   |-IfStmt 0x285585073c8 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x285585073a0 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x28558507388 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x28558507370 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x28558507340 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   | |       `-CXXThisExpr 0x28558507330 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x285585073b8 <line:111:5>
|   |-UnaryOperator 0x28558507468 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x28558507438 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|   |   `-ImplicitCastExpr 0x28558507420 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x285585073f0 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|   |       `-CXXThisExpr 0x285585073e0 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x28558507608 <line:115:4, line:116:12>
|     |-BinaryOperator 0x28558507560 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x28558507530 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x285585074d8 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x28558500168
|     | |   `-ImplicitCastExpr 0x285585074c0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x28558507490 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     | |       `-CXXThisExpr 0x28558507480 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x28558507548 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x28558507508 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x285585075e8 <line:116:5, col:12> 'void' Function 0x28556fe4518 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x285585075c0 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x28558507590 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|           `-CXXThisExpr 0x28558507580 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x28558501060 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x285585010c8 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x28558501120 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x28558501188 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x285585076a8 <col:12, col:27>
|   `-CXXMemberCallExpr 0x28558507688 <col:14, col:24> 'void'
|     `-MemberExpr 0x28558507658 <col:14> '<bound member function type>' ->CreateNil 0x28558500d48
|       `-CXXThisExpr 0x28558507648 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x28558501328 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x28558501268 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x285585690b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x28558569088 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569040 <col:29> '<bound member function type>' ->Create 0x28558507928
|     | `-CXXThisExpr 0x28558507a28 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558507728 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x28558501268 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x28558501538 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x28558501448 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x28558569438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x28558569410 <col:28, col:38> 'void'
|     |-MemberExpr 0x285585693c8 <col:28> '<bound member function type>' ->Create 0x285585692b8
|     | `-CXXThisExpr 0x285585693b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x28558501448 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x28558501718 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x28558501628 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x285585697c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x285585697a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x28558569758 <col:29> '<bound member function type>' ->Create 0x28558569648
|     | `-CXXThisExpr 0x28558569748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x285585694b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x28558501628 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x285585018f8 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x28558501808 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x28558569b58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569b30 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569ae8 <col:31> '<bound member function type>' ->Create 0x285585699d8
|     | `-CXXThisExpr 0x28558569ad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x28558501808 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x28558501aa8 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x285585019e8 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x28558569ed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x28558569eb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x28558569e68 <col:31> '<bound member function type>' ->Create 0x28558569d58
|     | `-CXXThisExpr 0x28558569e58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569bd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x285585019e8 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x28558501cb8 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x28558501bc8 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x2855856a258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a230 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a1e8 <col:29> '<bound member function type>' ->Create 0x2855856a0d8
|     | `-CXXThisExpr 0x2855856a1d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x28558569f58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558501bc8 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x28558501ec8 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x28558501dd8 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x2855856a5d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x2855856a5b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x2855856a568 <col:29> '<bound member function type>' ->Create 0x2855856a458
|     | `-CXXThisExpr 0x2855856a558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a2d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x28558501dd8 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x285585020d8 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x28558501fe8 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x2855856a958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x2855856a930 <col:31, col:41> 'void'
|     |-MemberExpr 0x2855856a8e8 <col:31> '<bound member function type>' ->Create 0x2855856a7d8
|     | `-CXXThisExpr 0x2855856a8d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x28558501fe8 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x28558502288 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x285585021c8 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x2855856acd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x2855856acb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x2855856ac68 <col:33> '<bound member function type>' ->Create 0x2855856ab58
|     | `-CXXThisExpr 0x2855856ac58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856a9d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x285585021c8 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x28558502438 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x28558502370 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x2855856afb0 <col:23, col:43>
|   `-ExprWithCleanups 0x2855856af98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x2855856af28 <col:25, col:40> 'void'
|       |-MemberExpr 0x2855856aea0 <col:25, col:35> '<bound member function type>' ->Create 0x285585692b8
|       | `-CXXThisExpr 0x2855856ae90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856af80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x2855856af68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856af50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856ada8 <col:37> 'int32_t':'int' lvalue ParmVar 0x28558502370 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x285585025b8 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x285585024f8 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x2855856b288 <col:24, col:45>
|   `-ExprWithCleanups 0x2855856b270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x2855856b200 <col:26, col:42> 'void'
|       |-MemberExpr 0x2855856b178 <col:26, col:37> '<bound member function type>' ->Create 0x28558569648
|       | `-CXXThisExpr 0x2855856b168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x2855856b240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x2855856b228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x2855856b080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x285585024f8 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x28558502710 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x28558502680 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x2855856b600 <col:27, col:50>
|   `-ExprWithCleanups 0x2855856b5e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x2855856b508 <col:29, col:47> 'void'
|       |-MemberExpr 0x2855856b480 <col:29, col:42> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b5d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x2855856b5b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x2855856b5a8)
|           `-CXXConstructExpr 0x2855856b578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x2855856b560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x2855856b358 <col:44> 'const char *' lvalue ParmVar 0x28558502680 'val' 'const char *'
|-CXXConstructorDecl 0x28558502938 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x28558502870 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x2855856b990 <col:34, col:57>
|   `-ExprWithCleanups 0x2855856b978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x2855856b880 <col:36, col:54> 'void'
|       |-MemberExpr 0x2855856b7f8 <col:36, col:49> '<bound member function type>' ->Create 0x28558569d58
|       | `-CXXThisExpr 0x2855856b7e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x2855856b960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x2855856b948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x2855856b928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x2855856b920)
|             `-ImplicitCastExpr 0x2855856b908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x2855856b8d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x2855856b6d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x28558502870 'val' 'const std::string &'
|-CXXConstructorDecl 0x28558502a88 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x285585029f8 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856ba30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x2855856ba08 <col:32, col:41> 'void'
|     |-MemberExpr 0x2855856b9b8 <col:32> '<bound member function type>' ->Copy 0x28558500ee8
|     | `-CXXThisExpr 0x2855856b9a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x2855856b9e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x285585029f8 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x28558502c38 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x28558502b48 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x2855856bb68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x2855856ba88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x2855856ba58 <col:4> '<bound member function type>' ->Destroy 0x28558500fb0
|   |   `-CXXThisExpr 0x2855856ba48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x2855856bb08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x2855856bab8 <col:4> '<bound member function type>' ->Copy 0x28558500ee8
|   | | `-CXXThisExpr 0x2855856baa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x2855856bae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x28558502b48 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x2855856bb58 <line:146:4, col:12>
|     `-UnaryOperator 0x2855856bb40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x2855856bb30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x28558502d28 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x2855856bc60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x2855856bc50 <line:151:4, col:22>
|     `-BinaryOperator 0x2855856bc30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x2855856bbd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x2855856bba0 <col:11> '<bound member function type>' ->ToInt 0x28558502e18
|       |   `-CXXThisExpr 0x2855856bb90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x2855856bc18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x2855856bbf0 <col:22> 'int' 0
|-CXXMethodDecl 0x28558502e18 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x2855856d0c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x2855856bcd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x2855856bcb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856bc88 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856bc78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856d048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x2855856bd78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x2855856bd58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856bd28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856c200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856c1e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856c1c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856c140 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856c130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c2b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x2855856c290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856c260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856c6c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856c6a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856c688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x2855856c600 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |         `-CXXThisExpr 0x2855856c5f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856c758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x2855856c738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856c708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856cb78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856cb60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856cb48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856cb28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x2855856caa0 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |           `-CXXThisExpr 0x2855856ca90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856cc10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x2855856cbf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856cbc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856d038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856d020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856d008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856cfe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856cf60 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856cf50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856d0b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x2855856d0a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856d078 <col:11> 'int' 0
|-CXXMethodDecl 0x28558502f08 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x2855856dd88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x2855856d140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x2855856d128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856d0f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856d0e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856dd08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x2855856d1e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x2855856d1c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856d198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d3f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x2855856d368 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |           `-CXXThisExpr 0x2855856d358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d4d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x2855856d4b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856d488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856d730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x2855856d718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x2855856d700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x2855856d6e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x2855856d658 <col:12, col:19> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |           `-CXXThisExpr 0x2855856d648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856d7c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x2855856d7a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856d778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856da08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x2855856d9f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x2855856d9d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x2855856d948 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c998
|   |   |         `-CXXThisExpr 0x2855856d938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856daa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x2855856da80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x2855856da50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856dcf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x2855856dce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x2855856dcc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x2855856dca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x2855856dc20 <col:12, col:22> '<bound member function type>' ->Get 0x2855856ce58
|   |               `-CXXThisExpr 0x2855856dc10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856dd78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x2855856dd60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x2855856dd38 <col:11> 'int' 0
|-CXXMethodDecl 0x28558503028 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x2855856fb60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x2855856de00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x2855856dde8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x2855856ddb8 <col:12> 'alt::MValue::Type' lvalue ->type 0x28558501060
|   | |   `-CXXThisExpr 0x2855856dda8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x2855856f650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x2855856dea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x2855856de88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x2855856de58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa838 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x2855856e1e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x2855856e1b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x2855856e158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x2855856e110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x2855856e0b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x2855856e028 <col:12, col:20> '<bound member function type>' ->Get 0x2855856c038
|   |   |         |     `-CXXThisExpr 0x2855856e018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x2855856e128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x2855856e0d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x2855856e140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x2855856e0f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x2855856e298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x2855856e278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x2855856e248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa890 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856e708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x2855856e6f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856e6d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856e6a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856e690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856e678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856e628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856e620)
|   |   |               `-CallExpr 0x2855856e5e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856e5c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856e568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x285581ef4f8 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856e608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856e548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e4c0 <col:27, col:34> '<bound member function type>' ->Get 0x2855856c4f8
|   |   |                       `-CXXThisExpr 0x2855856e4b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856e7a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x2855856e780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x2855856e750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa8e8 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856ec08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x2855856ebf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856ebd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856eba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856eb90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856eb78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856eb28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856eb20)
|   |   |               `-CallExpr 0x2855856eae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ea70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x285581eff88 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x2855856eb08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ea50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x2855856e9c8 <col:27, col:35> '<bound member function type>' ->Get 0x2855856c998
|   |   |                       `-CXXThisExpr 0x2855856e9b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x2855856eca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x2855856ec80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x2855856ec50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa940 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x2855856f138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x2855856f120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x2855856f108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x2855856f0d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x2855856f0c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x2855856f0a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x2855856f058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x2855856f050)
|   |   |               `-CallExpr 0x2855856f010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x2855856eff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x2855856ef70 <col:12, col:17> 'std::string (double)' lvalue Function 0x285581f1198 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x2855856f038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x2855856ef50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x2855856eec8 <col:27, col:37> '<bound member function type>' ->Get 0x2855856ce58
|   |   |                       `-CXXThisExpr 0x2855856eeb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x2855856f1d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x2855856f1b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x2855856f180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x285584fa998 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x2855856f640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x2855856f610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x2855856f5f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x2855856f5a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x2855856f520 <col:12, col:22> '<bound member function type>' ->Get 0x2855856f418
|   |               `-CXXThisExpr 0x2855856f510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x2855856fb50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x2855856fb38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x2855856fb08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x2855856faf0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2855856f688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x28558503148 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x2855856fbe8 <col:24, col:39>
|   `-ReturnStmt 0x2855856fbd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x2855856fbc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x2855856fb90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x28558501060
|         `-CXXThisExpr 0x2855856fb80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x28558506a10 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x285585031f8 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x28558506010 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x28558506970 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x28558506c18 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x28558506a68 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x28558506b78 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x28558b61310 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61098 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b60fe0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x28558b60f18 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x285585055d8
| |   | | `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |   `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61080 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61068 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61048 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61040)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61280 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b610c0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61250 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |       `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61300 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x28558b612b8 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x28558b61298 <col:11> 'auto' lvalue Var 0x28558b610c0 '_storage' 'auto'
| |-CXXMethodDecl 0x2855856c038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x28558b61768 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b614d0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61458 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61428 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b613b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589a2d58 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61440 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b614b8 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b614a0 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61480 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61478)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b616d8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b614e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61618 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61600 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61758 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61728 <col:11, col:21> 'bool':'bool' lvalue ->value 0x285589a4c58
| |       `-ImplicitCastExpr 0x28558b61710 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b616f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x28558b614e8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x2855856c4f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x28558b61bc8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61928 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b618b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61880 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61810 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589add90 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61898 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61910 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b618f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b618d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b618d0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61b38 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61940 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61a78 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61a60 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b61bb8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61b88 <col:11, col:21> 'long long':'long long' lvalue ->value 0x285589affb8
| |       `-ImplicitCastExpr 0x28558b61b70 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61b50 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x28558b61940 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x2855856c998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x28558b62028 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b61d88 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b61d10 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b61ce0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b61c70 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b0da8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b61cf8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b61d70 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b61d58 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b61d38 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b61d30)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b61f98 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b61da0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b61ed8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b61ec0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62018 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b61fe8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x285589b35e8
| |       `-ImplicitCastExpr 0x28558b61fd0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b61fb0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x28558b61da0 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x2855856ce58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x28558b62488 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b621e8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b62170 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b62140 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b620d0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b43d8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b62158 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b621d0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b621b8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b62198 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b62190)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b623f8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62200 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62338 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62320 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b62478 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b62448 <col:11, col:21> 'double':'double' lvalue ->value 0x285589b71b8
| |       `-ImplicitCastExpr 0x28558b62430 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62410 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x28558b62200 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x2855856f418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x28558b628e8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b62648 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b625d0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b625a0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b62530 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589b7fa8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b625b8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b62630 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b62618 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b625f8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b625f0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b62858 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b62660 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b62798 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b62780 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b628d8 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b628a8 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x285589bb2e8
| |       `-ImplicitCastExpr 0x28558b62890 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b62870 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x28558b62660 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x2855863f9a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x28558b63738 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b63498 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b63420 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b633f0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b63380 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589bc1c8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b63408 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b63480 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b63468 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b63448 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b63440)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b636a8 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b634b0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b635e8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b635d0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b63728 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b636f8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x285589bfa68
| |       `-ImplicitCastExpr 0x28558b636e0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b636c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x28558b634b0 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x28558641d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x28558b73aa8 <line:217:3, line:223:3>
| |   |-IfStmt 0x28558b73808 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x28558b73790 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x28558b73760 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x28558b736f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x285589c26b8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x28558b73778 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
| |   | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x28558b737f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x28558b737d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x28558b737b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558b737b0)
| |   |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x28558b73a18 <line:221:4, col:53>
| |   | `-VarDecl 0x28558b73820 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x28558b73958 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x28558b73940 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
| |   |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x28558b73a98 <line:222:4, col:21>
| |     `-MemberExpr 0x28558b73a68 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x285589c63a8
| |       `-ImplicitCastExpr 0x28558b73a50 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x28558b73a30 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x28558b73820 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x2855864a5b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x28558c112e8 <line:217:3, line:223:3>
|     |-IfStmt 0x28558c11050 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x28558c10fd8 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x28558c10fa8 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x28558c10f38 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x28558b5b488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x28558c10fc0 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x28558b60fb0 <col:30> 'alt::MValue::Type' lvalue ->type 0x28558501060
|     | |     `-CXXThisExpr 0x28558b60fa0 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x28558c11038 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x28558c11020 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x28558c11000 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x28558c10ff8)
|     |       `-CXXTemporaryObjectExpr 0x28558b61010 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x28558c11258 <line:221:4, col:53>
|     | `-VarDecl 0x28558c11068 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x28558c11198 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x28558c11180 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x28558b611c0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x285585010c8
|     |         `-CXXThisExpr 0x28558b611b0 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x28558c112d8 <line:222:4, col:21>
|       `-MemberExpr 0x28558c112a8 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x28558b5fad8
|         `-ImplicitCastExpr 0x28558c11290 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x28558c11270 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x28558c11068 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x28558506cb8 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x2855856fc60 <col:13, col:26>
    `-CXXMemberCallExpr 0x2855856fc40 <col:15, col:23> 'void'
      `-MemberExpr 0x2855856fc10 <col:15> '<bound member function type>' ->Destroy 0x28558500fb0
        `-CXXThisExpr 0x2855856fc00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_CPlayerConnectEvent_Cancel1
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_CPlayerConnectEvent_Cancel1
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_CPlayerConnectEvent_Cancel1
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPackage_FileExists
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPackage_FileExists
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPackage_FileExists
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPackage_OpenFile
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPackage_OpenFile
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPackage_OpenFile
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IColShape_SetPosition
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IColShape_SetPosition
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IColShape_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IColShape_SetPosition
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_GetResource
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_GetResource
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_GetResource
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogInfo
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogInfo
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogInfo
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogDebug
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogDebug
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogDebug
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogWarning
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogWarning
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogWarning
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogError
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogError
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogError
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogColored
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogColored
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogColored
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_Hash
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_Hash
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_Hash
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_RegisterScriptRuntime
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_RegisterScriptRuntime
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_RegisterScriptRuntime
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_SubscribeCommand
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_SubscribeCommand
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_SubscribeCommand
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerServerEvent
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerServerEvent
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerServerEvent
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerServerEvent
RecordType 0x2855856fd80 'class alt::MValueList'
`-CXXRecord 0x2855856fce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerServerEvent
RecordType 0x2855856fd80 'class alt::MValueList'
`-CXXRecord 0x2855856fce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerServerEvent
CXXRecordDecl 0x2855856fce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x2855856fe48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x2855856fed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x2855856ff70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x2855863ed18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x2855863ece8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x2855863ecd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x2855863ecb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x28558573398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x28558573390)
| |           `-CXXTemporaryObjectExpr 0x28558573360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x2855863ed60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x285585700b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x28558570028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x2855863f018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x2855863efe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x2855863efd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x2855863efb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x2855863ef30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x2855863ef10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x2855863ef08)
| |             `-CXXConstructExpr 0x2855863eed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x2855863ede8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x2855863edc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558570028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x2855863eeb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x2855863f060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x285585702f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x28558570230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x2855863f0f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x2855863f070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558570230 'list' 'const MValue::List &'
| `-CompoundStmt 0x2855863f150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x28558570478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x285585703b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x2855863f160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x2855863f768 <line:29:3, line:34:3>
|   |-IfStmt 0x2855863f5f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x2855863f2b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x2855863f218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x2855863f1e8 <col:8, col:12> '<bound member function type>' .GetType 0x28558503148
|   | | |   `-ImplicitCastExpr 0x2855863f238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x2855863f1c8 <col:8> 'alt::MValue' lvalue ParmVar 0x285585703b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x2855863f288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x285584fa9f0 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x2855863f5e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x2855863f5c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x2855863f498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x2855863f490)
|   |       `-CXXTemporaryObjectExpr 0x2855863f460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x2855863f730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x2855863f718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2855863f6c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x2855863f678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x2855863f650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x2855863f630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x2855863f610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x2855863f6b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x2855863f690 <col:21> 'alt::MValue' lvalue ParmVar 0x285585703b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x28558570578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x2855863fc20 <col:18, col:50>
|   `-ReturnStmt 0x2855863fc10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x2855863fba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x2855863fb78 <col:27, col:39> '<bound member function type>' .GetSize 0x285585725f0
|         `-ImplicitCastExpr 0x2855863fbf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x2855863fb38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x2855863fab0 <col:27, col:35> '<bound member function type>' ->Get 0x2855863f9a8
|               `-ImplicitCastExpr 0x2855863fb58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x2855863faa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x28558570718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x28558570628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x2855863ff68 <col:32, col:59>
|   `-ReturnStmt 0x2855863ff58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x2855863ff20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x2855863ff08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x2855863fe90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x28558572838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x2855863fe18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x2855863fd90 <col:41, col:49> '<bound member function type>' ->Get 0x2855863f9a8
|       |   `-ImplicitCastExpr 0x2855863fe38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x2855863fd80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x2855863fe78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2855863fe58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558570628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x28558570938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x285586401f8 <col:32, col:54>
|   `-ReturnStmt 0x285586401e8 <col:34, col:51>
|     `-CXXConstructExpr 0x285586401b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x285586401a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x28558640160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x285586400d8 <col:41, col:49> '<bound member function type>' ->Get 0x2855863f9a8
|             `-ImplicitCastExpr 0x28558640180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x285586400c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x28558570a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x285585709f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x285586404d0 <col:25, col:57>
|   `-ReturnStmt 0x285586404c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x28558640480 <col:34, col:54> 'void'
|       |-MemberExpr 0x28558640430 <col:34, col:46> '<bound member function type>' .Push 0x28558572538
|       | `-CXXMemberCallExpr 0x285586403f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x28558640368 <col:34, col:42> '<bound member function type>' ->Get 0x2855863f9a8
|       |     `-ImplicitCastExpr 0x28558640410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x28558640358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x285586404a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x28558640460 <col:51> 'alt::MValue' lvalue ParmVar 0x285585709f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x28558570b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x28558570c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x285586dbbc8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x285586dbb78 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x285586dbb58 <col:8> 'const alt::MValueList' lvalue ParmVar 0x28558570c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x285586dbc38 <col:8>
|-CXXConstructorDecl 0x28558570d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x28558570d08
| `-ParmVarDecl 0x28558570e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x28558570eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x28558570eb8
| `-ParmVarDecl 0x28558570fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x28558571050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x285586db820 <col:8>
`-CXXMethodDecl 0x285586db428 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x285586db428
  `-ParmVarDecl 0x285586db538 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerClientEvent
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerClientEvent
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerClientEvent
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerClientEvent
RecordType 0x2855856fd80 'class alt::MValueList'
`-CXXRecord 0x2855856fce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerClientEvent
RecordType 0x2855856fd80 'class alt::MValueList'
`-CXXRecord 0x2855856fce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerClientEvent
CXXRecordDecl 0x2855856fce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x2855856fe48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x2855856fed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x2855856ff70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x2855863ed18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x2855863ece8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x2855863ecd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x2855863ecb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x28558573398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x28558573390)
| |           `-CXXTemporaryObjectExpr 0x28558573360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x2855863ed60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x285585700b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x28558570028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x2855863f018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x2855863efe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x2855863efd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x2855863efb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x2855863ef30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x2855863ef10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x2855863ef08)
| |             `-CXXConstructExpr 0x2855863eed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x2855863ede8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x2855863edc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558570028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x2855863eeb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x2855863f060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x285585702f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x28558570230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x2855863f0f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x2855863f070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x28558570230 'list' 'const MValue::List &'
| `-CompoundStmt 0x2855863f150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x28558570478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x285585703b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x2855863f160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x2855863f768 <line:29:3, line:34:3>
|   |-IfStmt 0x2855863f5f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x2855863f2b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x2855863f218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x2855863f1e8 <col:8, col:12> '<bound member function type>' .GetType 0x28558503148
|   | | |   `-ImplicitCastExpr 0x2855863f238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x2855863f1c8 <col:8> 'alt::MValue' lvalue ParmVar 0x285585703b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x2855863f288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x285584fa9f0 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x2855863f5e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x2855863f5c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x2855863f498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x2855863f490)
|   |       `-CXXTemporaryObjectExpr 0x2855863f460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x2855863f730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x2855863f718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2855863f6c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x28558502c38 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x2855863f678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x2855863f650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x2855863f630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x2855863f610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x2855863f6b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x2855863f690 <col:21> 'alt::MValue' lvalue ParmVar 0x285585703b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x28558570578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x2855863fc20 <col:18, col:50>
|   `-ReturnStmt 0x2855863fc10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x2855863fba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x2855863fb78 <col:27, col:39> '<bound member function type>' .GetSize 0x285585725f0
|         `-ImplicitCastExpr 0x2855863fbf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x2855863fb38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x2855863fab0 <col:27, col:35> '<bound member function type>' ->Get 0x2855863f9a8
|               `-ImplicitCastExpr 0x2855863fb58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x2855863faa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x28558570718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x28558570628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x2855863ff68 <col:32, col:59>
|   `-ReturnStmt 0x2855863ff58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x2855863ff20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x2855863ff08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x2855863fe90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x28558572838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x2855863fe18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x2855863fd90 <col:41, col:49> '<bound member function type>' ->Get 0x2855863f9a8
|       |   `-ImplicitCastExpr 0x2855863fe38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x2855863fd80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x2855863fe78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x2855863fe58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x28558570628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x28558570938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x285586401f8 <col:32, col:54>
|   `-ReturnStmt 0x285586401e8 <col:34, col:51>
|     `-CXXConstructExpr 0x285586401b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x285586401a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x28558640160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x285586400d8 <col:41, col:49> '<bound member function type>' ->Get 0x2855863f9a8
|             `-ImplicitCastExpr 0x28558640180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x285586400c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x28558570a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x285585709f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x285586404d0 <col:25, col:57>
|   `-ReturnStmt 0x285586404c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x28558640480 <col:34, col:54> 'void'
|       |-MemberExpr 0x28558640430 <col:34, col:46> '<bound member function type>' .Push 0x28558572538
|       | `-CXXMemberCallExpr 0x285586403f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x28558640368 <col:34, col:42> '<bound member function type>' ->Get 0x2855863f9a8
|       |     `-ImplicitCastExpr 0x28558640410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x28558640358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x285586404a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x28558640460 <col:51> 'alt::MValue' lvalue ParmVar 0x285585709f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x28558570b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x28558570c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x285586dbbc8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x285586dbb78 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x285586dbb58 <col:8> 'const alt::MValueList' lvalue ParmVar 0x28558570c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x285586dbc38 <col:8>
|-CXXConstructorDecl 0x28558570d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x28558570d08
| `-ParmVarDecl 0x28558570e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x28558570eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x28558570eb8
| `-ParmVarDecl 0x28558570fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x28558571050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x285586db820 <col:8>
`-CXXMethodDecl 0x285586db428 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x285586db428
  `-ParmVarDecl 0x285586db538 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateVehicle
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateVehicle
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateVehicle
TypedefType 0x2855864ca90 'alt::Rotation' sugar
|-TypeAlias 0x28558010a50 'Rotation'
`-TemplateSpecializationType 0x28558010920 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x285580107c8 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x285580107b0 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x28558010778 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateVehicle
RecordType 0x28558010900 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x285580107e8 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x285580107e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateCheckpoint
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateCheckpoint
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateCheckpoint
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateCheckpoint
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateCheckpoint
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateCheckpoint
RecordType 0x285582eb2c0 'struct alt::RGBA'
`-CXXRecord 0x285582eb228 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateCheckpoint
CXXRecordDecl 0x285582eb228 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x285582eb348 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x285582eb410 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebdf8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebdd0 <col:15> 'int' 0
|-FieldDecl 0x285582eb478 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe38 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe10 <col:15> 'int' 0
|-FieldDecl 0x285582eb4e0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebe78 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe50 <col:15> 'int' 0
|-FieldDecl 0x285582eb548 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x285582ebeb8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x285582ebe90 <col:15> 'int' 0
|-CXXConstructorDecl 0x285582eb600 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x285582eb600
|-CXXConstructorDecl 0x285582eb968 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x285582eb6b8 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb730 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb7a8 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x285582eb820 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb410 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf10 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebed0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb6b8 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb478 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ebf90 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebf50 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb730 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb4e0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec010 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ebfd0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb7a8 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x285582eb548 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x285582ec090 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x285582ec050 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x285582eb820 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x285582ec0f0 <line:22:3, line:24:3>
`-FriendDecl 0x285582ebd40 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x285582ebc80 parent 0x285582eb1b8 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x285582ebab8 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x285582ebb58 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x285582f7d78 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x285582f7d10 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x285582f7cf8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x285582f7cd8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x285582f6c78 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x285582f6c60 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x285582f6c40 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x285582f5a50 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x285582f5a38 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x285582f5a18 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x285582f49b8 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x285582f49a0 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x285582f4980 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x285582f3790 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x285582f3778 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x285582f3758 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x285582f26f8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x285582f26e0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x285582f26c0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x285582f14d0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x285582f14b8 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x285582f1498 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x285582f0440 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x285582f0428 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x285582f03e0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x28557fe4228 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x285582ee1a0 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x285582ee188 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x285582ee168 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x285582ec100 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x285582ee150 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x285582ec120 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x285582ee270 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x285582ee258 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x285582ee240 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x285582ee1f8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x285582eb410
      | | | | | | | |         `-DeclRefExpr 0x285582ee1d8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x285582f1480 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x285582f0478 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x285582f15a0 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x285582f1588 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x285582f1570 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x285582f1528 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x285582eb478
      | | | | | |         `-DeclRefExpr 0x285582f1508 <col:54> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x285582f3740 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x285582f2730 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x285582f3860 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x285582f3848 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x285582f3830 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x285582f37e8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x285582eb4e0
      | | | |         `-DeclRefExpr 0x285582f37c8 <col:77> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x285582f5a00 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x285582f49f0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x285582f5b20 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x285582f5b08 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x285582f5af0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x285582f5aa8 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x285582eb548
      | |         `-DeclRefExpr 0x285582f5a88 <col:100> 'const alt::RGBA' lvalue ParmVar 0x285582ebb58 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x285582f7cc0 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x285582f6cb0 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x285582f7d68 <line:29:4, col:11>
        `-DeclRefExpr 0x285582f7d48 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582ebab8 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateBlip
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateBlip
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateBlip
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateBlip
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCylinder
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCylinder
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCylinder
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCylinder
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeSphere
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeSphere
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeSphere
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeSphere
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCircle
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCircle
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCircle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCircle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCube
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCube
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCube
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCube
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeRectangle
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeRectangle
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeRectangle
TypedefType 0x2855864b970 'alt::Position' sugar
|-TypeAlias 0x28557ffe2d0 'Position'
`-TypedefType 0x28557ffe2a0 'alt::Point' sugar
  |-TypeAlias 0x28557ffdef0 'Point'
  `-TemplateSpecializationType 0x28557ffddc0 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x28557ffdc68 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x28557ffdc50 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x28557ffdc18 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeRectangle
RecordType 0x28557ffdda0 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x28557ffdc88 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x28557ffdc88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_GetPlayersByName
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_GetPlayersByName
RecordType 0x285582e1ab0 'class alt::StringView'
`-CXXRecord 0x285582e1a20 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_GetPlayersByName
CXXRecordDecl 0x285582e1a20 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x285582e1b38 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x285582e1be0 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x285582e1c48 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x285582e1ca0 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x285582e1e40 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x285582e1ce8 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x285582e1d60 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e3798 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e3758 <col:9> 'const char *' lvalue ParmVar 0x285582e1ce8 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e3818 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x285582e37d8 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e1d60 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e3868 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x285582e1f18 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3c78 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3c48 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x285582e3878 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x285582e3c60 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x285582e3888 <col:24> 'int' 0
| `-CompoundStmt 0x285582e3dc0 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x285582e2068 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x285582e1fd8 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e3f20 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x285582e3f08 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x285582e3dd0 <col:15> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| |   `-CallExpr 0x285582e3e90 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x285582e3e78 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x285582e3e58 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2855712acd0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x285582e3eb8 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x285582e3e38 <col:28> 'const char *' lvalue ParmVar 0x285582e1fd8 '_str' 'const char *'
| `-CompoundStmt 0x285582e3f88 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x285582e23f0 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x285582e2128 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x285582e2348 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x285582e2288 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x28558651af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x28558651a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x285582e25e8 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x285582e2520 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4110 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4048 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x285582e4018 <col:15, col:20> '<bound member function type>' .data 0x28557c06f08
| |   |   `-DeclRefExpr 0x285582e3f98 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x285582e40b8 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e4088 <col:28, col:33> '<bound member function type>' .size 0x28557c07278
| |       `-DeclRefExpr 0x285582e4068 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x285582e2520 '_str' 'const std::string &'
| `-CompoundStmt 0x285582e4178 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x285582e2738 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x285582e26a8 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4300 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4238 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x285582e4208 <col:15, col:20> '<bound member function type>' .GetData 0x285582ce4b8
| |   |   `-DeclRefExpr 0x285582e4188 <col:15> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x285582e42a8 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x285582e4278 <col:31, col:36> '<bound member function type>' .GetSize 0x285582ce698
| |       `-DeclRefExpr 0x285582e4258 <col:31> 'const alt::String' lvalue ParmVar 0x285582e26a8 '_str' 'const alt::String &'
| `-CompoundStmt 0x285582e4368 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x285582e2978 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x285582e2888 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x285582e4630 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x285582e4498 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x285582e4398 <col:15, col:20> '<bound member function type>' .data 0x28557d74110
| |   |   `-ImplicitCastExpr 0x285582e44b8 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x285582e4378 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x285582e45c0 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x285582e44f0 <col:28, col:33> '<bound member function type>' .size 0x28557d73e18
| |       `-ImplicitCastExpr 0x285582e45e0 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x285582e44d0 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x285582e2888 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x285582e4698 <line:60:3, line:62:3>
|-CXXMethodDecl 0x285582e2a78 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x285582e4770 <col:24, col:44>
|   `-ReturnStmt 0x285582e4760 <col:26, col:41>
|     `-BinaryOperator 0x285582e4740 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x285582e4710 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x285582e46b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       |   `-CXXThisExpr 0x285582e46a8 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x285582e4728 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x285582e46e8 <col:41> 'int' 0
|-CXXMethodDecl 0x285582e2b40 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x285582e47f0 <col:31, col:46>
|   `-ReturnStmt 0x285582e47e0 <col:33, col:40>
|     `-ImplicitCastExpr 0x285582e47c8 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e4798 <col:40> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e4788 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2c00 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x285582e4870 <col:24, col:39>
|   `-ReturnStmt 0x285582e4860 <col:26, col:33>
|     `-ImplicitCastExpr 0x285582e4848 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x285582e4818 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         `-CXXThisExpr 0x285582e4808 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e2d40 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x285582e2cb0 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x285582e4960 <col:35, col:55>
|   `-ReturnStmt 0x285582e4950 <col:37, col:52>
|     `-ImplicitCastExpr 0x285582e4938 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x285582e4918 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x285582e48e8 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x285582e4898 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|         |   `-CXXThisExpr 0x285582e4888 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x285582e4900 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x285582e48c8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x285582e2cb0 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x285582e2eb8 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2df8 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e4da0 <col:42, col:108>
|   `-ReturnStmt 0x285582e4d90 <col:44, col:105>
|     `-BinaryOperator 0x285582e4ca0 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x285582e4a38 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x285582e4a08 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x285582e4988 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|       | |   `-CXXThisExpr 0x285582e4978 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x285582e4a20 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x285582e49d8 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x285582e1c48
|       |     `-DeclRefExpr 0x285582e49b8 <col:59> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|       `-BinaryOperator 0x285582e4c80 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x285582e4ba8 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x285582e4b90 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x285582e4b70 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x2855709e4e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x285582e4bf8 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4be0 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4ab0 <col:79> 'const char *const' lvalue ->data 0x285582e1be0
|         | |     `-CXXThisExpr 0x285582e4aa0 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x285582e4c28 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x285582e4c10 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x285582e4b00 <col:85, col:90> 'const char *' lvalue .data 0x285582e1be0
|         | |     `-DeclRefExpr 0x285582e4ae0 <col:85> 'alt::StringView' lvalue ParmVar 0x285582e2df8 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x285582e4c40 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x285582e4b40 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|         |     `-CXXThisExpr 0x285582e4b30 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x285582e4c58 <col:105> 'int' 0
|-CXXMethodDecl 0x285582e3000 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x285582e2f70 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x285582e5120 <col:42, col:69>
|   `-ReturnStmt 0x285582e5110 <col:44, col:66>
|     `-UnaryOperator 0x285582e50f8 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x285582e50d8 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x285582e50a0 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x285582e5088 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x285582e5040 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x285582e2eb8 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x285582e4dc8 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x285582e4db8 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x285582e5010 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x285582e4e58 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e4de0 <col:62> 'alt::StringView' lvalue ParmVar 0x285582e2f70 'that' 'alt::StringView'
|-CXXMethodDecl 0x285582e3138 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x285582e5d90 <col:32, col:66>
|   `-ReturnStmt 0x285582e5d80 <col:34, col:63>
|     `-ExprWithCleanups 0x285582e5d68 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x285582e5d48 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x285582e5d40)
|         `-CXXTemporaryObjectExpr 0x285582e5d00 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x285582e5cd0 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5190 <col:53> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5180 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ce8 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e51d0 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e51c0 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x285582e3248 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x285582e5f80 <col:27, col:58>
|   `-ReturnStmt 0x285582e5f70 <col:29, col:55>
|     `-ExprWithCleanups 0x285582e5f58 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x285582e5f38 <col:36, col:55> 'alt::String' (CXXTemporary 0x285582e5f30)
|         `-CXXTemporaryObjectExpr 0x285582e5ef0 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x285582e5ec0 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x285582e5dc8 <col:44> 'const char *const' lvalue ->data 0x285582e1be0
|           |   `-CXXThisExpr 0x285582e5db8 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x285582e5ed8 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x285582e5e08 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x285582e1c48
|               `-CXXThisExpr 0x285582e5df8 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x285582e3320 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x285582e6000 <col:28, col:43>
|   `-ReturnStmt 0x285582e5ff0 <col:30, col:37>
|     `-ImplicitCastExpr 0x285582e5fd8 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x285582e5fa8 <col:37> 'const char *const' lvalue ->data 0x285582e1be0
|         `-CXXThisExpr 0x285582e5f98 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x285582e3700 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x285582e3640 parent 0x285582e19b0 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x285582e34a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x285582e3518 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x285582eb1a0 <line:79:3, line:81:3>
|     `-ReturnStmt 0x285582eb190 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x285582eb158 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x285582eb140 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x285582eb120 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x28557fe7dd8 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x285582e6018 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x285582e34a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x285582e6088 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x285582e6058 <col:21, col:26> '<bound member function type>' .CStr 0x285582e3320
|             `-ImplicitCastExpr 0x285582e60a8 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x285582e6038 <col:21> 'alt::StringView' lvalue ParmVar 0x285582e3518 'view' 'alt::StringView'
|-CXXConstructorDecl 0x285582e3918 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285582e3a28 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x285582e4f08 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x285582e4ec0 <col:8> 'const char *const' lvalue .data 0x285582e1be0
| |     `-DeclRefExpr 0x285582e4ea0 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x285582e1c48 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x285582e4fb0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x285582e4f68 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
| |     `-DeclRefExpr 0x285582e4f48 <col:8> 'const alt::StringView' lvalue ParmVar 0x285582e3a28 '' 'const alt::StringView &'
| `-CompoundStmt 0x285582e5000 <col:8>
|-CXXConstructorDecl 0x285582e3ac8 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285582e3ac8
| `-ParmVarDecl 0x285582e3bd8 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x285582e3ce0 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x285586f1ba8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x285586f1cb8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x28558c1fbc8 <col:8>
|   |-BinaryOperator 0x28558c1faa8 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x28558c1fa60 <col:8> 'const char *' lvalue ->data 0x285582e1be0
|   | | `-CXXThisExpr 0x28558c1fa50 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fa90 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fa20 <col:8> 'const char *const' lvalue .data 0x285582e1be0
|   |     `-DeclRefExpr 0x28558c1fa00 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x28558c1fb70 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x28558c1fb28 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x285582e1c48
|   | | `-CXXThisExpr 0x28558c1fb18 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x28558c1fb58 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x28558c1fae8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x285582e1c48
|   |     `-DeclRefExpr 0x28558c1fac8 <col:8> 'const alt::StringView' lvalue ParmVar 0x285586f1cb8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x28558c1fbb8 <col:8>
|     `-UnaryOperator 0x28558c1fba0 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x28558c1fb90 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x285586f1d28 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x285586f1d28
  `-ParmVarDecl 0x285586f1e38 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

