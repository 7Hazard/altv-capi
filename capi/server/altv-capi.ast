TYPEDEF CLASS alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout = alt::VectorLayout
ClassTemplateSpecializationDecl 0x252eb94fe88 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:16:5, line:55:5> line:17:11 class VectorLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-CXXRecordDecl 0x252eb992680 prev 0x252eb94fe88 <col:5, col:11> col:11 implicit class VectorLayout
|-AccessSpecDecl 0x252eb992710 <line:19:5, col:11> col:5 public
|-TypeAliasDecl 0x252eb992778 <line:20:9, col:25> col:15 Element 'float':'float'
| `-SubstTemplateTypeParmType 0x252eb992740 'float' sugar
|   |-TemplateTypeParmType 0x252eb9488f0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x252eb9488a0 'T'
|   `-BuiltinType 0x252ea4ee210 'float'
|-VarDecl 0x252eb9927d8 <line:22:9, col:42> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-SubstNonTypeTemplateParmExpr 0x252eb992878 <col:42> 'unsigned long long'
|   `-IntegerLiteral 0x252eb992850 <col:42> 'unsigned long long' 4
|-CXXConstructorDecl 0x252eb992918 <line:24:9, col:42> col:9 used VectorLayout 'void ()'
| |-CXXCtorInitializer Field 0x252eb994368 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-InitListExpr 0x252ec2114d0 <col:34, col:38> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-array_filler: ImplicitValueInitExpr 0x252ec211530 <<invalid sloc>> 'alt::VectorLayout<float, 4>::Element':'float'
| |   `-ImplicitCastExpr 0x252ec211510 <col:36> 'alt::VectorLayout<float, 4>::Element':'float' <IntegralToFloating>
| |     `-IntegerLiteral 0x252ec2113d8 <col:36> 'int' 0
| `-CompoundStmt 0x252ec211478 <col:40, col:42>
|-CXXConstructorDecl 0x252eb992ca8 <line:25:9, col:55> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element (&)[4])'
| `-ParmVarDecl 0x252eb992b98 <col:22, col:54> col:38 _elements 'const alt::VectorLayout<float, 4>::Element (&)[4]'
|-CXXConstructorDecl 0x252eb992eb8 <line:26:9, col:39> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element &)'
| `-ParmVarDecl 0x252eb992da8 <col:22, col:37> col:37 el 'const alt::VectorLayout<float, 4>::Element &'
|-FunctionTemplateDecl 0x252eb993580 <line:28:9, line:29:41> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x252eb992f78 <line:28:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x252eb992ff8 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x252eb9934d8 <line:29:9, col:41> col:9 VectorLayout 'void (const Args &...)'
|   `-ParmVarDecl 0x252eb9933c0 <col:22, col:37> col:37 args 'const Args &...' pack
|-FunctionTemplateDecl 0x252eb993b90 <line:31:9, line:32:44> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x252eb993660 <line:31:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x252eb9936d8 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x252eb993ae8 <line:32:9, col:44> col:9 VectorLayout 'void (const ULayout &)'
| | `-ParmVarDecl 0x252eb993a08 <col:22, col:37> col:37 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x252eb999248 <col:9, col:44> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4> &)'
|   |-TemplateArgument type 'alt::VectorLayout<float, 4>'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x252eb999188 <col:22, col:37> col:37 _layout 'const alt::VectorLayout<float, 4> &'
|-CXXMethodDecl 0x252eb993d58 <line:37:9, col:44> col:18 operator[] 'alt::VectorLayout<float, 4>::Element &(std::size_t)'
| `-ParmVarDecl 0x252eb993c98 <col:29, col:41> col:41 key 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x252eb993ed8 <line:38:9, col:52> col:24 operator[] 'const alt::VectorLayout<float, 4>::Element &(std::size_t) const'
| `-ParmVarDecl 0x252eb993e10 <col:35, col:47> col:47 key 'std::size_t':'unsigned long long'
|-FriendDecl 0x252eb994230 <line:40:9, line:51:9> line:40:30
| `-FunctionDecl 0x252eb994160 parent 0x252eb9485c0 <col:9, line:51:9> line:40:30 used operator<< 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|   |-ParmVarDecl 0x252eb993f90 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252eb994038 <col:63, col:83> col:83 used layout 'const alt::VectorLayout<float, 4> &'
|   `-CompoundStmt 0x252ec268bd8 <line:41:9, line:51:9>
|     |-CXXOperatorCallExpr 0x252ec267668 <line:42:13, col:79> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | |-ImplicitCastExpr 0x252ec267650 <col:76> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec267630 <col:76> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | |-CXXOperatorCallExpr 0x252ec2675e0 <col:13, col:70> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | |-ImplicitCastExpr 0x252ec2675c8 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(*)(unsigned long long)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x252ec2675a8 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)' lvalue CXXMethod 0x252eb963e68 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)'
|     | | |-CXXOperatorCallExpr 0x252ec267518 <col:13, col:62> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | |-ImplicitCastExpr 0x252ec267500 <col:59> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | `-DeclRefExpr 0x252ec2674e0 <col:59> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | |-CXXOperatorCallExpr 0x252ec267490 <col:13, col:57> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | |-ImplicitCastExpr 0x252ec267478 <col:33> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | `-DeclRefExpr 0x252ec267458 <col:33> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | |-CXXOperatorCallExpr 0x252ec2673a0 <col:13, col:23> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | | |-ImplicitCastExpr 0x252ec267388 <col:20> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | | `-DeclRefExpr 0x252ec267368 <col:20> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | | |-DeclRefExpr 0x252ec267330 <col:13> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252eb993f90 'stream' 'std::ostream &'
|     | | | | | `-ImplicitCastExpr 0x252ec267350 <col:23> 'const char *' <ArrayToPointerDecay>
|     | | | | |   `-StringLiteral 0x252ec25d468 <col:23> 'const char [8]' lvalue "Vector<"
|     | | | | `-CXXMemberCallExpr 0x252ec267438 <col:36, col:57> 'const char *'
|     | | | |   `-MemberExpr 0x252ec267408 <col:36, col:52> '<bound member function type>' .name 0x252eb4d1ff8
|     | | | |     `-CXXTypeidExpr 0x252ec2673e8 <col:36, col:50> 'const type_info' lvalue
|     | | | `-ImplicitCastExpr 0x252ec2674c8 <col:62> 'const char *' <ArrayToPointerDecay>
|     | | |   `-StringLiteral 0x252ec25f630 <col:62> 'const char [3]' lvalue ", "
|     | | `-ImplicitCastExpr 0x252ec267590 <col:70> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec267570 <col:70> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb9927d8 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | `-ImplicitCastExpr 0x252ec267618 <col:79> 'const char *' <ArrayToPointerDecay>
|     |   `-StringLiteral 0x252ec263cf8 <col:79> 'const char [4]' lvalue ">{ "
|     |-ForStmt 0x252ec268ae8 <line:44:13, line:48:13>
|     | |-DeclStmt 0x252ec267720 <line:44:18, col:35>
|     | | `-VarDecl 0x252ec2676a0 <col:18, col:34> col:30 used i 'std::size_t':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x252ec267708 <col:34> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x252ec264e80 <col:34> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x252ec2677c8 <col:37, col:41> 'bool' '<'
|     | | |-ImplicitCastExpr 0x252ec267778 <col:37> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec267738 <col:37> 'std::size_t':'unsigned long long' lvalue Var 0x252ec2676a0 'i' 'std::size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x252ec2677b0 <col:41> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec267790 <col:41> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb9927d8 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | |-UnaryOperator 0x252ec267808 <col:48, col:50> 'std::size_t':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x252ec2677e8 <col:50> 'std::size_t':'unsigned long long' lvalue Var 0x252ec2676a0 'i' 'std::size_t':'unsigned long long'
|     | `-CompoundStmt 0x252ec268ac8 <line:45:13, line:48:13>
|     |   |-IfStmt 0x252ec267938 <line:46:17, col:39>
|     |   | |-BinaryOperator 0x252ec267870 <col:21, col:26> 'bool' '!='
|     |   | | |-ImplicitCastExpr 0x252ec267840 <col:21> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |   | | | `-DeclRefExpr 0x252ec267820 <col:21> 'std::size_t':'unsigned long long' lvalue Var 0x252ec2676a0 'i' 'std::size_t':'unsigned long long'
|     |   | | `-ImplicitCastExpr 0x252ec267858 <col:26> 'unsigned long long' <IntegralCast>
|     |   | |   `-IntegerLiteral 0x252ec264fc0 <col:26> 'int' 0
|     |   | `-CXXOperatorCallExpr 0x252ec267900 <col:29, col:39> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |   |   |-ImplicitCastExpr 0x252ec2678e8 <col:36> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x252ec2678c8 <col:36> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     |   |   |-DeclRefExpr 0x252ec267890 <col:29> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252eb993f90 'stream' 'std::ostream &'
|     |   |   `-ImplicitCastExpr 0x252ec2678b0 <col:39> 'const char *' <ArrayToPointerDecay>
|     |   |     `-StringLiteral 0x252ec265058 <col:39> 'const char [3]' lvalue ", "
|     |   `-CXXOperatorCallExpr 0x252ec268a90 <line:47:17, col:44> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |     |-ImplicitCastExpr 0x252ec268a78 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(*)(float)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x252ec268a58 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(float)' lvalue CXXMethod 0x252eb963fe8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(float)'
|     |     |-DeclRefExpr 0x252ec267950 <col:17> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252eb993f90 'stream' 'std::ostream &'
|     |     `-ImplicitCastExpr 0x252ec268a40 <col:27, col:44> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x252ec267a10 <col:27, col:44> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
|     |         |-ImplicitCastExpr 0x252ec2679e0 <col:27, col:34> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
|     |         | `-MemberExpr 0x252ec267990 <col:27, col:34> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x252eb994368
|     |         |   `-DeclRefExpr 0x252ec267970 <col:27> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x252eb994038 'layout' 'const alt::VectorLayout<float, 4> &'
|     |         `-ImplicitCastExpr 0x252ec2679f8 <col:43> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |           `-DeclRefExpr 0x252ec2679c0 <col:43> 'std::size_t':'unsigned long long' lvalue Var 0x252ec2676a0 'i' 'std::size_t':'unsigned long long'
|     `-ReturnStmt 0x252ec268bc8 <line:50:13, col:30>
|       `-CXXOperatorCallExpr 0x252ec268b90 <col:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|         |-ImplicitCastExpr 0x252ec268b78 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ec268b58 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ec268b20 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252eb993f90 'stream' 'std::ostream &'
|         `-ImplicitCastExpr 0x252ec268b40 <col:30> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ec266260 <col:30> 'const char [3]' lvalue " }"
|-AccessSpecDecl 0x252eb994270 <line:53:5, col:12> col:5 private
|-FieldDecl 0x252eb994368 <line:54:9, col:31> col:17 referenced elements 'alt::VectorLayout<float, 4>::Element [4]'
|-CXXDestructorDecl 0x252eb9962e8 <line:17:11> col:11 implicit ~VectorLayout 'void ()' inline default trivial noexcept-unevaluated 0x252eb9962e8
|-CXXConstructorDecl 0x252eb998990 <col:11> col:11 implicit used constexpr VectorLayout 'void (const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| |-ParmVarDecl 0x252eb998a78 <col:11> col:11 used 'const alt::VectorLayout<float, 4> &'
| |-CXXCtorInitializer Field 0x252eb994368 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-ArrayInitLoopExpr 0x252eb99b908 <col:11> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-OpaqueValueExpr 0x252eb99b868 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |   | `-MemberExpr 0x252eb99b820 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x252eb994368
| |   |   `-DeclRefExpr 0x252eb99b800 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x252eb998a78 '' 'const alt::VectorLayout<float, 4> &'
| |   `-ImplicitCastExpr 0x252eb99b8f0 <col:11> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x252eb99b8d0 <col:11> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
| |       |-ImplicitCastExpr 0x252eb99b8b8 <col:11> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x252eb99b868 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |       |   `-MemberExpr 0x252eb99b820 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x252eb994368
| |       |     `-DeclRefExpr 0x252eb99b800 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x252eb998a78 '' 'const alt::VectorLayout<float, 4> &'
| |       `-ArrayInitIndexExpr 0x252eb99b880 <<invalid sloc>> 'unsigned long long'
| `-CompoundStmt 0x252eb99b958 <col:11>
|-CXXConstructorDecl 0x252eb998b18 <col:11> col:11 implicit constexpr VectorLayout 'void (alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x252eb998b18
| `-ParmVarDecl 0x252eb998c28 <col:11> col:11 'alt::VectorLayout<float, 4> &&'
|-CXXMethodDecl 0x252ec2291a8 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| `-ParmVarDecl 0x252ec2292b8 <col:11> col:11 'const alt::VectorLayout<float, 4> &'
`-CXXMethodDecl 0x252ec229328 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x252ec229328
  `-ParmVarDecl 0x252ec229438 <col:11> col:11 'alt::VectorLayout<float, 4> &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2f = alt::Vector
ClassTemplateSpecializationDecl 0x252eb94d410 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<float, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2i = alt::Vector
ClassTemplateSpecializationDecl 0x252eb94e550 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<int, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3f = alt::Vector
ClassTemplateSpecializationDecl 0x252eb94efd0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<float, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3i = alt::Vector
ClassTemplateSpecializationDecl 0x252eb94f5c0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<int, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4f = alt::Vector
ClassTemplateSpecializationDecl 0x252eb950040 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x252eb994408 prev 0x252eb950040 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x252eb994498 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x252eb9944d8 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x252eb9925e0 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x252eb94ad90 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x252eb94ad38 '_Layout'
|   `-RecordType 0x252eb94ff80 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x252eb94fe88 'VectorLayout'
|-TypeAliasDecl 0x252eb994548 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x252eb94d1b0 'float' sugar
|   |-TemplateTypeParmType 0x252eb94ab40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x252eb94aaf0 'T'
|   `-BuiltinType 0x252ea4ee210 'float'
|-VarDecl 0x252eb9945a8 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x252eb9946d8 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x252eb9946a8 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb9927d8 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x252eb994770 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x252eb999dc8 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x252eb999e30 <col:26>
|-CXXConstructorDecl 0x252eb994a38 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x252eb994958 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x252eb994c48 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x252eb994b38 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x252eb995280 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x252eb994d08 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x252eb994d88 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x252eb9951d8 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x252eb9950f0 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x252eb995890 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x252eb995360 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x252eb9953d8 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x252eb9957e8 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x252eb995708 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x252eb99b228 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x252eb99b168 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x252eb9959e8 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x252eb995ab8 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x252eb995de8 <line:91:9, col:65> col:24
| `-FunctionDecl 0x252eb995d18 parent 0x252eb9485c0 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x252eb995ba8 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x252eb995c48 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x252eb996058 <line:99:9, col:69> col:23
| `-FunctionDecl 0x252eb995f88 parent 0x252eb9485c0 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x252eb995e38 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x252eb995eb0 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x252eb9988a8 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x252eb9988a8
|-CXXConstructorDecl 0x252eb999368 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x252eb999448 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x252eb99b968 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x252eb99b3d0 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x252eb99b3b0 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb999448 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x252eb99b9d8 <col:11>
|-CXXConstructorDecl 0x252eb999900 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x252eb999900
| `-ParmVarDecl 0x252eb999a18 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x252ec228ff8 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x252ec229108 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x252ec2294a8 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x252ec2294a8
  `-ParmVarDecl 0x252ec2295b8 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4i = alt::Vector
ClassTemplateSpecializationDecl 0x252eb950630 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::VectorLayout<int, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::DXMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x252eb9561e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::MatrixLayout<float, 4, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::Point = alt::Vector
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PointPadded = alt::Vector
ClassTemplateSpecializationDecl 0x252eb981498 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Position = alt::Vector
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PositionPadded = alt::Vector
ClassTemplateSpecializationDecl 0x252eb981498 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Rotation = alt::Vector
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::RotationPadded = alt::Vector
ClassTemplateSpecializationDecl 0x252eb991fe8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Row = alt::Vector
ClassTemplateSpecializationDecl 0x252eb950040 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x252eb994408 prev 0x252eb950040 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x252eb994498 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x252eb9944d8 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x252eb9925e0 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x252eb94ad90 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x252eb94ad38 '_Layout'
|   `-RecordType 0x252eb94ff80 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x252eb94fe88 'VectorLayout'
|-TypeAliasDecl 0x252eb994548 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x252eb94d1b0 'float' sugar
|   |-TemplateTypeParmType 0x252eb94ab40 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x252eb94aaf0 'T'
|   `-BuiltinType 0x252ea4ee210 'float'
|-VarDecl 0x252eb9945a8 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x252eb9946d8 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x252eb9946a8 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb9927d8 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x252eb994770 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x252eb999dc8 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x252eb999e30 <col:26>
|-CXXConstructorDecl 0x252eb994a38 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x252eb994958 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x252eb994c48 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x252eb994b38 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x252eb995280 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x252eb994d08 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x252eb994d88 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x252eb9951d8 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x252eb9950f0 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x252eb995890 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x252eb995360 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x252eb9953d8 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x252eb9957e8 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x252eb995708 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x252eb99b228 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x252eb99b168 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x252eb9959e8 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x252eb995ab8 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x252eb995de8 <line:91:9, col:65> col:24
| `-FunctionDecl 0x252eb995d18 parent 0x252eb9485c0 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x252eb995ba8 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x252eb995c48 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x252eb996058 <line:99:9, col:69> col:23
| `-FunctionDecl 0x252eb995f88 parent 0x252eb9485c0 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x252eb995e38 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x252eb995eb0 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x252eb9988a8 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x252eb9988a8
|-CXXConstructorDecl 0x252eb999368 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x252eb999448 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x252eb99b968 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x252eb99b3d0 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x252eb99b3b0 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb999448 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x252eb99b9d8 <col:11>
|-CXXConstructorDecl 0x252eb999900 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x252eb999900
| `-ParmVarDecl 0x252eb999a18 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x252ec228ff8 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x252ec229108 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x252ec2294a8 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x252ec2294a8
  `-ParmVarDecl 0x252ec2295b8 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Transposed = alt::ViewMatrixLayout
CXXRecordDecl 0x252eb9922b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:318:5, line:360:5> line:318:11 referenced class ViewMatrixLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x252eb9923c8 <col:5, col:11> col:11 implicit referenced class ViewMatrixLayout
|-AccessSpecDecl 0x252eb992458 <line:320:5, col:11> col:5 public
|-TypeAliasDecl 0x252eb9924c0 <line:321:9, col:21> col:15 referenced Row 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| `-TypedefType 0x252eb992490 'alt::Vector4f' sugar
|   |-TypeAlias 0x252eb9502b8 'Vector4f'
|   `-TemplateSpecializationType 0x252eb950210 'Vector4<float>' sugar alias Vector4
|     |-TemplateArgument type 'float'
|     |-TemplateSpecializationType 0x252eb950170 'Vector<float, 4>' sugar Vector
|     | |-TemplateArgument type 'float':'float'
|     | |-TemplateArgument expr
|     | | `-ConstantExpr 0x252eb94fdf0 <line:114:49> 'std::size_t':'unsigned long long' 4
|     | |   `-ImplicitCastExpr 0x252eb94fdd8 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x252eb94f940 <col:49> 'int' 4
|     | `-RecordType 0x252eb950150 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|     |   `-ClassTemplateSpecialization 0x252eb950040 'Vector'
|     `-TemplateSpecializationType 0x252eb950170 'Vector<float, 4>' sugar Vector
|       |-TemplateArgument type 'float':'float'
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x252eb94fdf0 <col:49> 'std::size_t':'unsigned long long' 4
|       |   `-ImplicitCastExpr 0x252eb94fdd8 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|       |     `-IntegerLiteral 0x252eb94f940 <col:49> 'int' 4
|       `-RecordType 0x252eb950150 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|         `-ClassTemplateSpecialization 0x252eb950040 'Vector'
|-TypeAliasDecl 0x252eb996460 <line:322:9, col:39> col:15 referenced Element 'typename Row::Element':'float'
| `-ElaboratedType 0x252eb9963f0 'typename Row::Element' sugar
|   `-TypedefType 0x252eb9963d0 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element' sugar
|     |-TypeAlias 0x252eb994548 'Element'
|     `-SubstTemplateTypeParmType 0x252eb94d1b0 'float' sugar
|       |-TemplateTypeParmType 0x252eb94ab40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x252eb94aaf0 'T'
|       `-BuiltinType 0x252ea4ee210 'float'
|-TypeAliasDecl 0x252eb9964d0 <line:323:9, col:28> col:15 Transposed 'alt::ViewMatrixLayout'
| `-RecordType 0x252eb992340 'alt::ViewMatrixLayout'
|   `-CXXRecord 0x252eb9922b0 'ViewMatrixLayout'
|-VarDecl 0x252eb996580 <line:325:9, col:47> col:34 referenced Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x252eb996680 <col:42, col:47> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x252eb996650 <col:42, col:47> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb9945a8 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-VarDecl 0x252eb996730 <line:326:9, col:43> col:34 used Height 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x252eb9967c0 <col:43> 'const std::size_t':'const unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x252eb996798 <col:43> 'int' 4
|-CXXConstructorDecl 0x252eb996880 <line:328:9, col:36> col:9 ViewMatrixLayout 'void ()' default noexcept-unevaluated 0x252eb996880
|-CXXConstructorDecl 0x252eb996d48 <line:329:9, col:98> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row (&)[4])'
| |-ParmVarDecl 0x252eb996c58 <col:26, col:51> col:38 used _rows 'const alt::ViewMatrixLayout::Row (&)[4]'
| |-CXXCtorInitializer Field 0x252eb9984d0 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb999e40 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb998538 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99a008 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb9985a0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99a1d8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb998608 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99a3a8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x252eb99ac00 <col:54, col:98>
|   `-CallExpr 0x252eb99abb0 <col:56, col:95> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x252eb99ab98 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x252eb99ab00 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x252eb99a9d8 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x252eab411e8 'copy')
|     |-ImplicitCastExpr 0x252eb99abe8 <col:66> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x252eb99a488 <col:66> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x252eb996c58 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |-UnaryOperator 0x252eb99a5b8 <col:73, col:86> 'const alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x252eb99a598 <col:74, col:86> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ImplicitCastExpr 0x252eb99a548 <col:74> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     |   | `-DeclRefExpr 0x252eb99a4a8 <col:74> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x252eb996c58 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |   `-ImplicitCastExpr 0x252eb99a580 <col:80> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x252eb99a560 <col:80> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb996730 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x252eb99a668 <col:89, col:90> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x252eb99a5e0 <col:90> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x252eb9984d0
|         `-CXXThisExpr 0x252eb99a5d0 <col:90> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x252eb996f28 <line:331:9, col:59> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row &)'
| |-ParmVarDecl 0x252eb996e38 <col:26, col:37> col:37 used row 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x252eb9984d0 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99b9e8 <col:44, col:55> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x252eb99ac18 <col:51> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb996e38 'row' 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x252eb998538 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99bbb8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb9985a0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99bd88 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb998608 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99bf58 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x252eb99bfc8 <col:57, col:59>
|-CXXConstructorDecl 0x252eb997318 <line:333:9, line:336:9> line:333:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Element (&)[16])'
| |-ParmVarDecl 0x252eb997228 <col:26, col:66> col:42 used elements 'const alt::ViewMatrixLayout::Element (&)[16]'
| |-CXXCtorInitializer Field 0x252eb9984d0 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99c158 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb998538 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99c328 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb9985a0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99c4f8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x252eb998608 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb99c6c8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x252eb9acf18 <line:334:9, line:336:9>
|   `-CallExpr 0x252eb9acee0 <line:335:13, col:72> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x252eb9acec8 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x252eb9ace30 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x252eb9acd08 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x252eab411e8 'copy')
|     |-CStyleCastExpr 0x252eb99c850 <col:23, col:29> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     | `-ImplicitCastExpr 0x252eb99c838 <col:29> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x252eb99c7a8 <col:29> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x252eb997228 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |-UnaryOperator 0x252eb99c980 <col:39, col:63> 'alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x252eb99c960 <col:40, col:63> 'alt::ViewMatrixLayout::Row':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ParenExpr 0x252eb99c8e8 <col:40, col:55> 'alt::ViewMatrixLayout::Row *'
|     |   | `-CStyleCastExpr 0x252eb99c8c0 <col:41, col:47> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     |   |   `-ImplicitCastExpr 0x252eb99c8a8 <col:47> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x252eb99c878 <col:47> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x252eb997228 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |   `-ImplicitCastExpr 0x252eb99c948 <col:57> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x252eb99c928 <col:57> 'const std::size_t':'const unsigned long long' lvalue Var 0x252eb996730 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x252eb99c9d8 <col:66, col:67> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x252eb99c9a8 <col:67> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x252eb9984d0
|         `-CXXThisExpr 0x252eb99c998 <col:67> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x252eb9976b8 <line:338:9, col:184> col:9 ViewMatrixLayout 'void (const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &)'
| |-ParmVarDecl 0x252eb997408 <col:26, col:42> col:42 used _right 'const alt::Vector4f &'
| |-ParmVarDecl 0x252eb997480 <col:50, col:66> col:66 used _up 'const alt::Vector4f &'
| |-ParmVarDecl 0x252eb9974f8 <col:71, col:87> col:87 used _forward 'const alt::Vector4f &'
| |-ParmVarDecl 0x252eb997570 <col:97, col:113> col:113 used _pos 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x252eb9984d0 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb9ad3b0 <col:121, col:135> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x252eb9acf30 <col:128> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb997408 '_right' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x252eb998538 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb9ad880 <col:138, col:146> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x252eb9ad408 <col:142> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb997480 '_up' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x252eb9985a0 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb9add50 <col:149, col:167> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x252eb9ad8d8 <col:158> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb9974f8 '_forward' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x252eb998608 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x252eb9ae220 <col:170, col:180> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x252eb9adda8 <col:175> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x252eb997570 '_pos' 'const alt::Vector4f &'
| `-CompoundStmt 0x252eb9ae298 <col:182, col:184>
|-FunctionTemplateDecl 0x252eb997cd0 <line:340:9, line:341:48> col:9 ViewMatrixLayout
| |-TemplateTypeParmDecl 0x252eb997780 <line:340:18, col:24> col:24 referenced class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x252eb997a90 <col:33, col:96> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Height == Height>::type'
| `-CXXConstructorDecl 0x252eb997c28 <line:341:9, col:48> col:9 ViewMatrixLayout 'void (const ULayout &)'
|   |-ParmVarDecl 0x252eb997b68 <col:26, col:41> col:41 _layout 'const ULayout &'
|   `-<<<NULL>>>
|-CXXMethodDecl 0x252eb997ea8 <line:346:9, col:66> col:14 operator[] 'alt::ViewMatrixLayout::Row &(std::size_t)'
| |-ParmVarDecl 0x252eb997d80 <col:25, col:37> col:37 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x252eb9ae388 <col:42, col:66>
|   `-ReturnStmt 0x252eb9ae378 <col:44, col:63>
|     `-ArraySubscriptExpr 0x252eb9ae358 <col:51, col:63> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x252eb9ae300 <col:51, col:58> 'alt::Vector4f *'
|       | `-UnaryOperator 0x252eb9ae2e8 <col:52, col:53> 'alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x252eb9ae2b8 <col:53> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x252eb9984d0
|       |     `-CXXThisExpr 0x252eb9ae2a8 <col:53> 'alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x252eb9ae340 <col:60> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252eb9ae320 <col:60> 'std::size_t':'unsigned long long' lvalue ParmVar 0x252eb997d80 'key' 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x252eb9980c8 <line:347:9, col:78> col:20 operator[] 'const alt::ViewMatrixLayout::Row &(std::size_t) const'
| |-ParmVarDecl 0x252eb997fa0 <col:31, col:43> col:43 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x252eb9ae4a8 <col:54, col:78>
|   `-ReturnStmt 0x252eb9ae498 <col:56, col:75>
|     `-ArraySubscriptExpr 0x252eb9ae478 <col:63, col:75> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x252eb9ae420 <col:63, col:70> 'const alt::Vector4f *'
|       | `-UnaryOperator 0x252eb9ae408 <col:64, col:65> 'const alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x252eb9ae3b0 <col:65> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x252eb9984d0
|       |     `-CXXThisExpr 0x252eb9ae3a0 <col:65> 'const alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x252eb9ae460 <col:72> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252eb9ae440 <col:72> 'std::size_t':'unsigned long long' lvalue ParmVar 0x252eb997fa0 'key' 'std::size_t':'unsigned long long'
|-FriendDecl 0x252eb998480 <line:349:9, line:357:9> line:349:30
| `-FunctionDecl 0x252eb9983c0 parent 0x252eb9485c0 <col:9, line:357:9> line:349:30 operator<< 'std::ostream &(std::ostream &, const alt::ViewMatrixLayout &)'
|   |-ParmVarDecl 0x252eb9981f8 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252eb998298 <col:63, col:87> col:87 used layout 'const alt::ViewMatrixLayout &'
|   `-CompoundStmt 0x252eb9de568 <line:350:9, line:357:9>
|     `-ReturnStmt 0x252eb9de558 <line:351:13, line:356:20>
|       `-CXXOperatorCallExpr 0x252eb9de520 <line:351:20, line:356:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252eb9de508 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252eb9de4e8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-CXXOperatorCallExpr 0x252eb9badf8 <line:351:20, line:355:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | |-ImplicitCastExpr 0x252eb9bade0 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252eb9badc0 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x252eb994160 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | |-CXXOperatorCallExpr 0x252eb9b9e00 <line:351:20, line:355:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | |-ImplicitCastExpr 0x252eb9b9de8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x252eb9b9dc8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | |-CXXOperatorCallExpr 0x252eb9b8d98 <line:351:20, line:354:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | |-ImplicitCastExpr 0x252eb9b8d80 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | `-DeclRefExpr 0x252eb9b8d60 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x252eb994160 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | |-CXXOperatorCallExpr 0x252eb9b7da0 <line:351:20, line:354:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | |-ImplicitCastExpr 0x252eb9b7d88 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | `-DeclRefExpr 0x252eb9b7d68 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | |-CXXOperatorCallExpr 0x252eb9b6d38 <line:351:20, line:353:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | |-ImplicitCastExpr 0x252eb9b6d20 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | `-DeclRefExpr 0x252eb9b6d00 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x252eb994160 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | |-CXXOperatorCallExpr 0x252eb9b5d40 <line:351:20, line:353:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | |-ImplicitCastExpr 0x252eb9b5d28 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | `-DeclRefExpr 0x252eb9b5d08 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | |-CXXOperatorCallExpr 0x252eb9b4cd0 <line:351:20, line:352:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | |-ImplicitCastExpr 0x252eb9b4cb8 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | | | `-DeclRefExpr 0x252eb9b4c40 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x252eb994160 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | | | |-CXXOperatorCallExpr 0x252eb9b15a0 <line:351:20, line:352:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | |-ImplicitCastExpr 0x252eb9b1588 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | `-DeclRefExpr 0x252eb9b1568 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | |-CXXOperatorCallExpr 0x252eb9b0530 <line:351:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | | |-ImplicitCastExpr 0x252eb9b0518 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | | `-DeclRefExpr 0x252eb9b04f8 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | | |-DeclRefExpr 0x252eb9ae4c0 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252eb9981f8 'stream' 'std::ostream &'
|         | | | | | | | | | `-ImplicitCastExpr 0x252eb9b04e0 <col:30> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | | |   `-StringLiteral 0x252eb9ae4e0 <col:30> 'const char [13]' lvalue "\nViewMatrix{"
|         | | | | | | | | `-ImplicitCastExpr 0x252eb9b1550 <line:352:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | |   `-StringLiteral 0x252eb9b0568 <col:20> 'const char [13]' lvalue "\n  right:   "
|         | | | | | | | `-ImplicitCastExpr 0x252eb9b4c20 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | | | |   `-MemberExpr 0x252eb9b15f8 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .right 0x252eb9984d0
|         | | | | | | |     `-DeclRefExpr 0x252eb9b15d8 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x252eb998298 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | | | `-ImplicitCastExpr 0x252eb9b5cf0 <line:353:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | |   `-StringLiteral 0x252eb9b4d08 <col:20> 'const char [13]' lvalue "\n  up:      "
|         | | | | | `-ImplicitCastExpr 0x252eb9b6ce0 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | |   `-MemberExpr 0x252eb9b5d98 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .up 0x252eb998538
|         | | | | |     `-DeclRefExpr 0x252eb9b5d78 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x252eb998298 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | `-ImplicitCastExpr 0x252eb9b7d50 <line:354:20> 'const char *' <ArrayToPointerDecay>
|         | | | |   `-StringLiteral 0x252eb9b6d70 <col:20> 'const char [13]' lvalue "\n  forward: "
|         | | | `-ImplicitCastExpr 0x252eb9b8d40 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | |   `-MemberExpr 0x252eb9b7df8 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .forward 0x252eb9985a0
|         | | |     `-DeclRefExpr 0x252eb9b7dd8 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x252eb998298 'layout' 'const alt::ViewMatrixLayout &'
|         | | `-ImplicitCastExpr 0x252eb9b9db0 <line:355:20> 'const char *' <ArrayToPointerDecay>
|         | |   `-StringLiteral 0x252eb9b8dd0 <col:20> 'const char [13]' lvalue "\n  pos:     "
|         | `-ImplicitCastExpr 0x252eb9bada0 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         |   `-MemberExpr 0x252eb9b9e58 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .pos 0x252eb998608
|         |     `-DeclRefExpr 0x252eb9b9e38 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x252eb998298 'layout' 'const alt::ViewMatrixLayout &'
|         `-ImplicitCastExpr 0x252eb9de4d0 <line:356:20> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252eb9bae30 <col:20> 'const char [4]' lvalue "\n}\n"
|-FieldDecl 0x252eb9984d0 <line:359:9, col:18> col:18 referenced right 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x252eb998538 <col:9, col:25> col:25 referenced up 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x252eb9985a0 <col:9, col:29> col:29 referenced forward 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
`-FieldDecl 0x252eb998608 <col:9, col:38> col:38 referenced pos 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x252eb9de668 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::ViewMatrixLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::String = alt::String
CXXRecordDecl 0x252ebc44798 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/String.h:13:2, line:142:2> line:13:8 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebc448b8 <col:2, col:8> col:8 implicit referenced class String
|-AccessSpecDecl 0x252ebc44948 <line:15:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc44b38 <line:16:3, line:22:3> line:16:3 used String 'void (alt::Size, char)'
| |-ParmVarDecl 0x252ebc449b0 <col:10, col:15> col:15 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x252ebc44a28 <col:22, col:34> col:27 used fill 'char' cinit
| | `-CharacterLiteral 0x252ebc48178 <col:34> 'char' 0
| |-CXXCtorInitializer Field 0x252ebc47c20 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc481d0 <line:17:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc48190 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc449b0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc48680 <line:18:3, line:22:3>
|   |-BinaryOperator 0x252ebc48388 <line:19:4, col:28> 'char *' lvalue '='
|   | |-MemberExpr 0x252ebc48228 <col:4> 'char *' lvalue ->data 0x252ebc47bb8
|   | | `-CXXThisExpr 0x252ebc48218 <col:4> 'alt::String *' implicit this
|   | `-CXXNewExpr 0x252ebc48348 <col:11, col:28> 'char *' array Function 0x252ea72bee8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|   |   `-BinaryOperator 0x252ebc482f0 <col:20, col:27> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x252ebc482c0 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x252ebc48268 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|   |     |   `-CXXThisExpr 0x252ebc48258 <col:20> 'alt::String *' implicit this
|   |     `-ImplicitCastExpr 0x252ebc482d8 <col:27> 'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x252ebc48298 <col:27> 'int' 1
|   |-CallExpr 0x252ebc484c8 <line:20:4, col:27> 'void *'
|   | |-ImplicitCastExpr 0x252ebc484b0 <col:4> 'void *(*)(void *, int, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x252ebc48490 <col:4> 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)' lvalue Function 0x252ea90aee8 'memset' 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)'
|   | |-ImplicitCastExpr 0x252ebc48518 <col:11> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x252ebc48500 <col:11> 'char *' <LValueToRValue>
|   | |   `-MemberExpr 0x252ebc48400 <col:11> 'char *' lvalue ->data 0x252ebc47bb8
|   | |     `-CXXThisExpr 0x252ebc483f0 <col:11> 'alt::String *' implicit this
|   | |-ImplicitCastExpr 0x252ebc48548 <col:17> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x252ebc48530 <col:17> 'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ebc48430 <col:17> 'char' lvalue ParmVar 0x252ebc44a28 'fill' 'char'
|   | `-ImplicitCastExpr 0x252ebc48560 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ebc48460 <col:23> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|   |     `-CXXThisExpr 0x252ebc48450 <col:23> 'alt::String *' implicit this
|   `-BinaryOperator 0x252ebc48660 <line:21:4, col:17> 'char' lvalue '='
|     |-ArraySubscriptExpr 0x252ebc48628 <col:4, col:13> 'char' lvalue
|     | |-ImplicitCastExpr 0x252ebc485f8 <col:4> 'char *' <LValueToRValue>
|     | | `-MemberExpr 0x252ebc48588 <col:4> 'char *' lvalue ->data 0x252ebc47bb8
|     | |   `-CXXThisExpr 0x252ebc48578 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x252ebc48610 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-MemberExpr 0x252ebc485c8 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|     |     `-CXXThisExpr 0x252ebc485b8 <col:9> 'alt::String *' implicit this
|     `-CharacterLiteral 0x252ebc48648 <col:17> 'char' 0
|-FunctionTemplateDecl 0x252ebc44e80 <line:24:3, line:35:3> line:25:3 String
| |-TemplateTypeParmDecl 0x252ebc44bf0 <line:24:12, col:18> col:18 referenced class depth 0 index 0 Iter
| |-CXXConstructorDecl 0x252ebc44dd8 <line:25:3, line:35:3> line:25:3 String 'void (Iter, Iter)'
| | |-ParmVarDecl 0x252ebc44c90 <col:10, col:15> col:15 referenced first 'Iter'
| | |-ParmVarDecl 0x252ebc44d08 <col:22, col:27> col:27 referenced last 'Iter'
| | `-CompoundStmt 0x252ec330a10 <line:26:3, line:35:3>
| |   |-BinaryOperator 0x252ec330478 <line:27:4, col:36> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec330370 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
| |   | | `-CXXThisExpr 0x252ec330360 <col:4> 'alt::String *' implicit this
| |   | `-CallExpr 0x252ec330448 <col:11, col:36> '<dependent type>'
| |   |   |-UnresolvedLookupExpr 0x252ec3303c0 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = 'distance' 0x252eb2052c8
| |   |   |-DeclRefExpr 0x252ec330408 <col:25> 'Iter' lvalue ParmVar 0x252ebc44c90 'first' 'Iter'
| |   |   `-DeclRefExpr 0x252ec330428 <col:32> 'Iter' lvalue ParmVar 0x252ebc44d08 'last' 'Iter'
| |   |-BinaryOperator 0x252ec3305e0 <line:29:4, col:28> 'char *' lvalue '='
| |   | |-MemberExpr 0x252ec3304a8 <col:4> 'char *' lvalue ->data 0x252ebc47bb8
| |   | | `-CXXThisExpr 0x252ec330498 <col:4> 'alt::String *' implicit this
| |   | `-CXXNewExpr 0x252ec3305a0 <col:11, col:28> 'char *' array Function 0x252ea72bee8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |   `-BinaryOperator 0x252ec330570 <col:20, col:27> 'unsigned long long' '+'
| |   |     |-ImplicitCastExpr 0x252ec330540 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |     | `-MemberExpr 0x252ec3304e8 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
| |   |     |   `-CXXThisExpr 0x252ec3304d8 <col:20> 'alt::String *' implicit this
| |   |     `-ImplicitCastExpr 0x252ec330558 <col:27> 'unsigned long long' <IntegralCast>
| |   |       `-IntegerLiteral 0x252ec330518 <col:27> 'int' 1
| |   |-ForStmt 0x252ec3308d0 <line:31:4, line:32:24>
| |   | |-DeclStmt 0x252ec3306b8 <line:31:9, col:19>
| |   | | `-VarDecl 0x252ec330610 <col:9, col:18> col:14 referenced i 'alt::Size':'unsigned long long' cinit
| |   | |   `-ImplicitCastExpr 0x252ec3306a0 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
| |   | |     `-IntegerLiteral 0x252ec330678 <col:18> 'int' 0
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x252ec330710 <col:21, col:30> '<dependent type>' '!='
| |   | | |-DeclRefExpr 0x252ec3306d0 <col:21> 'Iter' lvalue ParmVar 0x252ebc44c90 'first' 'Iter'
| |   | | `-DeclRefExpr 0x252ec3306f0 <col:30> 'Iter' lvalue ParmVar 0x252ebc44d08 'last' 'Iter'
| |   | |-UnaryOperator 0x252ec330750 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
| |   | | `-DeclRefExpr 0x252ec330730 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x252ec330610 'i' 'alt::Size':'unsigned long long'
| |   | `-BinaryOperator 0x252ec3308b0 <line:32:5, col:24> '<dependent type>' '='
| |   |   |-ArraySubscriptExpr 0x252ec3307f8 <col:5, col:11> 'char' lvalue
| |   |   | |-ImplicitCastExpr 0x252ec3307c8 <col:5> 'char *' <LValueToRValue>
| |   |   | | `-MemberExpr 0x252ec330778 <col:5> 'char *' lvalue ->data 0x252ebc47bb8
| |   |   | |   `-CXXThisExpr 0x252ec330768 <col:5> 'alt::String *' implicit this
| |   |   | `-ImplicitCastExpr 0x252ec3307e0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |   |   `-DeclRefExpr 0x252ec3307a8 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x252ec330610 'i' 'alt::Size':'unsigned long long'
| |   |   `-UnaryOperator 0x252ec330898 <col:15, col:24> '<dependent type>' prefix '*' cannot overflow
| |   |     `-ParenExpr 0x252ec330878 <col:16, col:24> '<dependent type>'
| |   |       `-UnaryOperator 0x252ec330860 <col:17, col:22> '<dependent type>' postfix '++' cannot overflow
| |   |         `-DeclRefExpr 0x252ec330818 <col:17> 'Iter' lvalue ParmVar 0x252ebc44c90 'first' 'Iter'
| |   `-BinaryOperator 0x252ec3309f0 <line:34:4, col:17> 'char' lvalue '='
| |     |-ArraySubscriptExpr 0x252ec3309b8 <col:4, col:13> 'char' lvalue
| |     | |-ImplicitCastExpr 0x252ec330988 <col:4> 'char *' <LValueToRValue>
| |     | | `-MemberExpr 0x252ec330918 <col:4> 'char *' lvalue ->data 0x252ebc47bb8
| |     | |   `-CXXThisExpr 0x252ec330908 <col:4> 'alt::String *' implicit this
| |     | `-ImplicitCastExpr 0x252ec3309a0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     |   `-MemberExpr 0x252ec330958 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
| |     |     `-CXXThisExpr 0x252ec330948 <col:9> 'alt::String *' implicit this
| |     `-CharacterLiteral 0x252ec3309d8 <col:17> 'char' 0
| `-CXXConstructorDecl 0x252ebc48a18 <line:25:3, line:35:3> line:25:3 used String 'void (const char *, const char *)'
|   |-TemplateArgument type 'const char *'
|   |-ParmVarDecl 0x252ebc48888 <col:10, col:15> col:15 used first 'const char *':'const char *'
|   |-ParmVarDecl 0x252ebc48900 <col:22, col:27> col:27 used last 'const char *':'const char *'
|   `-CompoundStmt 0x252ec3368c8 <line:26:3, line:35:3>
|     |-BinaryOperator 0x252ec3364d8 <line:27:4, col:36> 'alt::Size':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec330370 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|     | | `-CXXThisExpr 0x252ec330360 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x252ec3364c0 <col:11, col:36> 'alt::Size':'unsigned long long' <IntegralCast>
|     |   `-CallExpr 0x252ec336460 <col:11, col:36> '_Iter_diff_t<const char *>':'long long'
|     |     |-ImplicitCastExpr 0x252ec336448 <col:11, col:16> '_Iter_diff_t<const char *> (*)(const char *, const char *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x252ec335280 <col:11, col:16> '_Iter_diff_t<const char *> (const char *, const char *)' lvalue Function 0x252ec335138 'distance' '_Iter_diff_t<const char *> (const char *, const char *)' (FunctionTemplate 0x252eb2052c8 'distance')
|     |     |-ImplicitCastExpr 0x252ec336490 <col:25> 'const char *':'const char *' <LValueToRValue>
|     |     | `-DeclRefExpr 0x252ec330a88 <col:25> 'const char *':'const char *' lvalue ParmVar 0x252ebc48888 'first' 'const char *':'const char *'
|     |     `-ImplicitCastExpr 0x252ec3364a8 <col:32> 'const char *':'const char *' <LValueToRValue>
|     |       `-DeclRefExpr 0x252ec330aa8 <col:32> 'const char *':'const char *' lvalue ParmVar 0x252ebc48900 'last' 'const char *':'const char *'
|     |-BinaryOperator 0x252ec336588 <line:29:4, col:11> 'char *' lvalue '='
|     | |-MemberExpr 0x252ec3304a8 <col:4> 'char *' lvalue ->data 0x252ebc47bb8
|     | | `-CXXThisExpr 0x252ec330498 <col:4> 'alt::String *' implicit this
|     | `-CXXNewExpr 0x252ec336548 <col:11> 'char *' array Function 0x252ea72bee8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |   `-BinaryOperator 0x252ec336528 <col:20, col:27> 'unsigned long long' '+'
|     |     |-ImplicitCastExpr 0x252ec3364f8 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |     | `-MemberExpr 0x252ec3304e8 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|     |     |   `-CXXThisExpr 0x252ec3304d8 <col:20> 'alt::String *' implicit this
|     |     `-ImplicitCastExpr 0x252ec336510 <col:27> 'unsigned long long' <IntegralCast>
|     |       `-IntegerLiteral 0x252ec330518 <col:27> 'int' 1
|     |-ForStmt 0x252ec336820 <line:31:4, line:32:24>
|     | |-DeclStmt 0x252ec336628 <line:31:9, col:19>
|     | | `-VarDecl 0x252ec3365a8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x252ec336610 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x252ec330678 <col:18> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x252ec3366b0 <col:21, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec336680 <col:21> 'const char *':'const char *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec336640 <col:21> 'const char *':'const char *' lvalue ParmVar 0x252ebc48888 'first' 'const char *':'const char *'
|     | | `-ImplicitCastExpr 0x252ec336698 <col:30> 'const char *':'const char *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec336660 <col:30> 'const char *':'const char *' lvalue ParmVar 0x252ebc48900 'last' 'const char *':'const char *'
|     | |-UnaryOperator 0x252ec3366f0 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x252ec3366d0 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3365a8 'i' 'alt::Size':'unsigned long long'
|     | `-BinaryOperator 0x252ec336800 <line:32:5, col:24> 'char' lvalue '='
|     |   |-ArraySubscriptExpr 0x252ec336758 <col:5, col:11> 'char' lvalue
|     |   | |-ImplicitCastExpr 0x252ec336728 <col:5> 'char *' <LValueToRValue>
|     |   | | `-MemberExpr 0x252ec330778 <col:5> 'char *' lvalue ->data 0x252ebc47bb8
|     |   | |   `-CXXThisExpr 0x252ec330768 <col:5> 'alt::String *' implicit this
|     |   | `-ImplicitCastExpr 0x252ec336740 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x252ec336708 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3365a8 'i' 'alt::Size':'unsigned long long'
|     |   `-ImplicitCastExpr 0x252ec3367e8 <col:15, col:24> 'char' <LValueToRValue>
|     |     `-UnaryOperator 0x252ec3367d0 <col:15, col:24> 'const char' lvalue prefix '*' cannot overflow
|     |       `-ParenExpr 0x252ec3367b0 <col:16, col:24> 'const char *':'const char *'
|     |         `-UnaryOperator 0x252ec336798 <col:17, col:22> 'const char *':'const char *' postfix '++'
|     |           `-DeclRefExpr 0x252ec336778 <col:17> 'const char *':'const char *' lvalue ParmVar 0x252ebc48888 'first' 'const char *':'const char *'
|     `-BinaryOperator 0x252ec3368a8 <line:34:4, col:17> 'char' lvalue '='
|       |-ArraySubscriptExpr 0x252ec336888 <col:4, col:13> 'char' lvalue
|       | |-ImplicitCastExpr 0x252ec336858 <col:4> 'char *' <LValueToRValue>
|       | | `-MemberExpr 0x252ec330918 <col:4> 'char *' lvalue ->data 0x252ebc47bb8
|       | |   `-CXXThisExpr 0x252ec330908 <col:4> 'alt::String *' implicit this
|       | `-ImplicitCastExpr 0x252ec336870 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ec330958 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|       |     `-CXXThisExpr 0x252ec330948 <col:9> 'alt::String *' implicit this
|       `-CharacterLiteral 0x252ec3309d8 <col:17> 'char' 0
|-CXXConstructorDecl 0x252ebc45048 <line:37:3, line:41:3> line:37:3 used String 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc44f00 <col:10, col:22> col:22 used _data 'const char *'
| |-ParmVarDecl 0x252ebc44f78 <col:29, col:34> col:34 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x252ebc48b40 <line:38:4, col:30> 'alt::String' 'void (const char *, const char *)'
| |   |-ImplicitCastExpr 0x252ebc48b28 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc486a8 <col:11> 'const char *' lvalue ParmVar 0x252ebc44f00 '_data' 'const char *'
| |   `-BinaryOperator 0x252ebc48738 <col:18, col:26> 'const char *' '+'
| |     |-ImplicitCastExpr 0x252ebc48708 <col:18> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x252ebc486c8 <col:18> 'const char *' lvalue ParmVar 0x252ebc44f00 '_data' 'const char *'
| |     `-ImplicitCastExpr 0x252ebc48720 <col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc486e8 <col:26> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc44f78 'size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc48ba8 <line:39:3, line:41:3>
|-CXXConstructorDecl 0x252ebc45120 <line:43:3, line:47:3> line:43:3 used String 'void ()'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x252ebc48c90 <line:44:4, col:21> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc48c60 <col:11> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc48bb8 <col:11> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc48c78 <col:20> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc48bc8 <col:20> 'int' 0
| `-CompoundStmt 0x252ebc48cf8 <line:45:3, line:47:3>
|-CXXConstructorDecl 0x252ebc45270 <line:49:3, line:53:3> line:49:3 used String 'void (const char *)'
| |-ParmVarDecl 0x252ebc451e0 <col:10, col:22> col:22 used _str 'const char *'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x252ebc48e90 <line:50:4, col:29> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc48e78 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc48d08 <col:11> 'const char *' lvalue ParmVar 0x252ebc451e0 '_str' 'const char *'
| |   `-CallExpr 0x252ebc48dc8 <col:17, col:28> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc48db0 <col:17> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc48d90 <col:17> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc48df0 <col:24> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc48d70 <col:24> 'const char *' lvalue ParmVar 0x252ebc451e0 '_str' 'const char *'
| `-CompoundStmt 0x252ebc48ef8 <line:51:3, line:53:3>
|-FunctionTemplateDecl 0x252ebc45630 <line:55:3, line:56:34> col:3 String
| |-NonTypeTemplateParmDecl 0x252ebc45330 <line:55:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc45588 <line:56:3, col:34> col:3 String 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc45498 <col:10, col:33> col:22 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebef59e8 <col:3, col:34> col:3 String 'void (const char (&)[9])'
|   |-TemplateArgument integral 9
|   `-ParmVarDecl 0x252ebef58f8 <col:10, col:33> col:22 _data 'const char (&)[9]'
|-CXXConstructorDecl 0x252ebc45828 <line:62:3, line:66:3> line:62:3 used String 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc45760 <col:10, col:29> col:29 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x252ebc490b8 <line:63:4, col:35> 'alt::String' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc48fb8 <col:11, col:21> 'const char *'
| |   | `-MemberExpr 0x252ebc48f88 <col:11, col:16> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc48f08 <col:11> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc45760 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc49028 <col:24, col:34> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc48ff8 <col:24, col:29> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc48fd8 <col:24> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc45760 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc49120 <line:64:3, line:66:3>
|-CXXConstructorDecl 0x252ebc459d8 <line:68:3, line:72:3> line:68:3 used String 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc45918 <col:10, col:24> col:24 used that 'const alt::String &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x252ebc49288 <line:69:4, col:31> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc49258 <col:11, col:16> 'const char *' <NoOp>
| |   | `-ImplicitCastExpr 0x252ebc49240 <col:11, col:16> 'char *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ebc49150 <col:11, col:16> 'char *const' lvalue .data 0x252ebc47bb8
| |   |     `-DeclRefExpr 0x252ebc49130 <col:11> 'const alt::String' lvalue ParmVar 0x252ebc45918 'that' 'const alt::String &'
| |   `-ImplicitCastExpr 0x252ebc49270 <col:22, col:27> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x252ebc491a0 <col:22, col:27> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc47c20
| |       `-DeclRefExpr 0x252ebc49180 <col:22> 'const alt::String' lvalue ParmVar 0x252ebc45918 'that' 'const alt::String &'
| `-CompoundStmt 0x252ebc492f0 <line:70:3, line:72:3>
|-CXXConstructorDecl 0x252ebc45b88 <line:74:3, line:80:3> line:74:3 used String 'void (alt::String &&)'
| |-ParmVarDecl 0x252ebc45ac8 <col:10, col:19> col:19 used that 'alt::String &&'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x252ebc49328 <line:75:4, col:11> 'alt::String' 'void ()'
| `-CompoundStmt 0x252ebc49558 <line:76:3, line:80:3>
|   |-DeclStmt 0x252ebc49420 <line:77:4, col:14>
|   | `-VarDecl 0x252ebc49390 <col:4, col:11> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x252ebc493f8 <col:11> 'alt::String' 'void ()'
|   |-CXXMemberCallExpr 0x252ebc494a8 <line:78:4, col:17> 'void'
|   | |-MemberExpr 0x252ebc49458 <col:4, col:8> '<bound member function type>' .Swap 0x252ebc47d48
|   | | `-DeclRefExpr 0x252ebc49438 <col:4> 'alt::String' lvalue Var 0x252ebc49390 'tmp' 'alt::String'
|   | `-DeclRefExpr 0x252ebc49488 <col:13> 'alt::String' lvalue ParmVar 0x252ebc45ac8 'that' 'alt::String &&'
|   `-CXXMemberCallExpr 0x252ebc49530 <line:79:4, col:12> 'void'
|     |-MemberExpr 0x252ebc494e0 <col:4> '<bound member function type>' ->Swap 0x252ebc47d48
|     | `-CXXThisExpr 0x252ebc494d0 <col:4> 'alt::String *' implicit this
|     `-DeclRefExpr 0x252ebc49510 <col:9> 'alt::String' lvalue Var 0x252ebc49390 'tmp' 'alt::String'
|-CXXDestructorDecl 0x252ebc45c80 <line:82:3, col:30> col:3 used ~String 'void () noexcept'
| `-CompoundStmt 0x252ebc495f8 <col:13, col:30>
|   `-CXXDeleteExpr 0x252ebc495d8 <col:15, col:24> 'void' array Function 0x252ea72c7f8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x252ebc495c0 <col:24> 'char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc49590 <col:24> 'char *' lvalue ->data 0x252ebc47bb8
|         `-CXXThisExpr 0x252ebc49580 <col:24> 'alt::String *' implicit this
|-CXXMethodDecl 0x252ebc45e40 <line:84:3, col:50> col:9 used operator[] 'char &(alt::Size)'
| |-ParmVarDecl 0x252ebc45d70 <col:20, col:25> col:25 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc496d0 <col:30, col:50>
|   `-ReturnStmt 0x252ebc496c0 <col:32, col:47>
|     `-ArraySubscriptExpr 0x252ebc496a0 <col:39, col:47> 'char' lvalue
|       |-ImplicitCastExpr 0x252ebc49670 <col:39> 'char *' <LValueToRValue>
|       | `-MemberExpr 0x252ebc49620 <col:39> 'char *' lvalue ->data 0x252ebc47bb8
|       |   `-CXXThisExpr 0x252ebc49610 <col:39> 'alt::String *' implicit this
|       `-ImplicitCastExpr 0x252ebc49688 <col:44> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252ebc49650 <col:44> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc45d70 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc46018 <line:85:3, col:55> col:8 used operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc45ef8 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc497c0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc497b0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc49798 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc49778 <col:44, col:52> 'char' lvalue
|         |-ImplicitCastExpr 0x252ebc49748 <col:44> 'char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc496f8 <col:44> 'char *const' lvalue ->data 0x252ebc47bb8
|         |   `-CXXThisExpr 0x252ebc496e8 <col:44> 'const alt::String *' implicit this
|         `-ImplicitCastExpr 0x252ebc49760 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc49728 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc45ef8 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc461c8 <line:87:3, line:92:3> line:87:11 used operator= 'alt::String &(const alt::String &)'
| |-ParmVarDecl 0x252ebc460d0 <col:21, col:35> col:35 used that 'const alt::String &'
| `-CompoundStmt 0x252ebc499c8 <line:88:3, line:92:3>
|   |-DeclStmt 0x252ebc498f0 <line:89:4, col:20>
|   | `-VarDecl 0x252ebc49808 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x252ebc498c0 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-DeclRefExpr 0x252ebc497d8 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc460d0 'that' 'const alt::String &'
|   |-CXXMemberCallExpr 0x252ebc49968 <line:90:4, col:12> 'void'
|   | |-MemberExpr 0x252ebc49918 <col:4> '<bound member function type>' ->Swap 0x252ebc47d48
|   | | `-CXXThisExpr 0x252ebc49908 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x252ebc49948 <col:9> 'alt::String' lvalue Var 0x252ebc49808 'tmp' 'alt::String'
|   `-ReturnStmt 0x252ebc499b8 <line:91:4, col:12>
|     `-UnaryOperator 0x252ebc499a0 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebc49990 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x252ebc46348 <line:94:3, line:99:3> line:94:11 used operator= 'alt::String &(alt::String &&)'
| |-ParmVarDecl 0x252ebc46280 <col:21, col:30> col:30 used that 'alt::String &&'
| `-CompoundStmt 0x252ebc49bf8 <line:95:3, line:99:3>
|   |-DeclStmt 0x252ebc49b20 <line:96:4, col:20>
|   | `-VarDecl 0x252ebc49a20 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x252ebc49af0 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-ImplicitCastExpr 0x252ebc49ad8 <col:15> 'const alt::String' lvalue <NoOp>
|   |       `-DeclRefExpr 0x252ebc499f0 <col:15> 'alt::String' lvalue ParmVar 0x252ebc46280 'that' 'alt::String &&'
|   |-CXXMemberCallExpr 0x252ebc49b98 <line:97:4, col:12> 'void'
|   | |-MemberExpr 0x252ebc49b48 <col:4> '<bound member function type>' ->Swap 0x252ebc47d48
|   | | `-CXXThisExpr 0x252ebc49b38 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x252ebc49b78 <col:9> 'alt::String' lvalue Var 0x252ebc49a20 'tmp' 'alt::String'
|   `-ReturnStmt 0x252ebc49be8 <line:98:4, col:12>
|     `-UnaryOperator 0x252ebc49bd0 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebc49bc0 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x252ebc46410 <line:101:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc49ce8 <col:24, col:44>
|   `-ReturnStmt 0x252ebc49cd8 <col:26, col:41>
|     `-BinaryOperator 0x252ebc49cb8 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc49c88 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc49c30 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc47c20
|       |   `-CXXThisExpr 0x252ebc49c20 <col:33> 'const alt::String *' implicit this
|       `-ImplicitCastExpr 0x252ebc49ca0 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc49c60 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc464d8 <line:103:3, col:46> col:15 used GetData 'const char *() const'
| `-CompoundStmt 0x252ebc49d80 <col:31, col:46>
|   `-ReturnStmt 0x252ebc49d70 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc49d58 <col:40> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x252ebc49d40 <col:40> 'char *' <LValueToRValue>
|         `-MemberExpr 0x252ebc49d10 <col:40> 'char *const' lvalue ->data 0x252ebc47bb8
|           `-CXXThisExpr 0x252ebc49d00 <col:40> 'const alt::String *' implicit this
|-CXXMethodDecl 0x252ebc465a0 <line:104:3, col:34> col:9 GetData 'char *()'
| `-CompoundStmt 0x252ebc49e00 <col:19, col:34>
|   `-ReturnStmt 0x252ebc49df0 <col:21, col:28>
|     `-ImplicitCastExpr 0x252ebc49dd8 <col:28> 'char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc49da8 <col:28> 'char *' lvalue ->data 0x252ebc47bb8
|         `-CXXThisExpr 0x252ebc49d98 <col:28> 'alt::String *' implicit this
|-CXXMethodDecl 0x252ebc466b8 <line:105:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc49e80 <col:24, col:39>
|   `-ReturnStmt 0x252ebc49e70 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc49e58 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc49e28 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc47c20
|         `-CXXThisExpr 0x252ebc49e18 <col:33> 'const alt::String *' implicit this
|-CXXMethodDecl 0x252ebc46828 <line:107:3, col:104> col:8 used operator== 'bool (alt::String) const'
| |-ParmVarDecl 0x252ebc46768 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x252ebc4a318 <col:38, col:104>
|   `-ReturnStmt 0x252ebc4a308 <col:40, col:101>
|     `-BinaryOperator 0x252ebc4a218 <col:47, col:101> 'bool' '&&'
|       |-BinaryOperator 0x252ebc49f58 <col:47, col:60> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc49f28 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc49ea8 <col:47> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc47c20
|       | |   `-CXXThisExpr 0x252ebc49e98 <col:47> 'const alt::String *' implicit this
|       | `-ImplicitCastExpr 0x252ebc49f40 <col:55, col:60> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc49ef8 <col:55, col:60> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc47c20
|       |     `-DeclRefExpr 0x252ebc49ed8 <col:55> 'alt::String' lvalue ParmVar 0x252ebc46768 'that' 'alt::String'
|       `-BinaryOperator 0x252ebc4a1f8 <col:68, col:101> 'bool' '=='
|         |-CallExpr 0x252ebc4a120 <col:68, col:96> 'int'
|         | |-ImplicitCastExpr 0x252ebc4a108 <col:68> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc4a090 <col:68> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc4a170 <col:75> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc4a158 <col:75> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc49fd0 <col:75> 'char *const' lvalue ->data 0x252ebc47bb8
|         | |     `-CXXThisExpr 0x252ebc49fc0 <col:75> 'const alt::String *' implicit this
|         | |-ImplicitCastExpr 0x252ebc4a1a0 <col:81, col:86> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc4a188 <col:81, col:86> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc4a020 <col:81, col:86> 'char *' lvalue .data 0x252ebc47bb8
|         | |     `-DeclRefExpr 0x252ebc4a000 <col:81> 'alt::String' lvalue ParmVar 0x252ebc46768 'that' 'alt::String'
|         | `-ImplicitCastExpr 0x252ebc4a1b8 <col:92> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc4a060 <col:92> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc47c20
|         |     `-CXXThisExpr 0x252ebc4a050 <col:92> 'const alt::String *' implicit this
|         `-IntegerLiteral 0x252ebc4a1d0 <col:101> 'int' 0
|-CXXMethodDecl 0x252ebc46970 <line:108:3, col:65> col:8 operator!= 'bool (alt::String) const'
| |-ParmVarDecl 0x252ebc468e0 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x252ebc4a518 <col:38, col:65>
|   `-ReturnStmt 0x252ebc4a508 <col:40, col:62>
|     `-ExprWithCleanups 0x252ebc4a4f0 <col:47, col:62> 'bool'
|       `-UnaryOperator 0x252ebc4a4d8 <col:47, col:62> 'bool' prefix '!' cannot overflow
|         `-ParenExpr 0x252ebc4a4b8 <col:48, col:62> 'bool'
|           `-CXXOperatorCallExpr 0x252ebc4a480 <col:49, col:58> 'bool'
|             |-ImplicitCastExpr 0x252ebc4a468 <col:55> 'bool (*)(alt::String) const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ebc4a418 <col:55> 'bool (alt::String) const' lvalue CXXMethod 0x252ebc46828 'operator==' 'bool (alt::String) const'
|             |-UnaryOperator 0x252ebc4a340 <col:49, col:50> 'const alt::String' lvalue prefix '*' cannot overflow
|             | `-CXXThisExpr 0x252ebc4a330 <col:50> 'const alt::String *' this
|             `-CXXBindTemporaryExpr 0x252ebc4a3f8 <col:58> 'alt::String' (CXXTemporary 0x252ebc4a3f0)
|               `-CXXConstructExpr 0x252ebc4a3c0 <col:58> 'alt::String' 'void (const alt::String &)'
|                 `-ImplicitCastExpr 0x252ebc4a3a8 <col:58> 'const alt::String' lvalue <NoOp>
|                   `-DeclRefExpr 0x252ebc4a358 <col:58> 'alt::String' lvalue ParmVar 0x252ebc468e0 'that' 'alt::String'
|-CXXMethodDecl 0x252ebc46aa8 <line:110:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc4f778 <col:32, col:66>
|   `-ReturnStmt 0x252ebc4f768 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc4f750 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc4f730 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc4f728)
|         `-CXXTemporaryObjectExpr 0x252ebc4f6e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc4f6b8 <col:53> 'const char *' <NoOp>
|           | `-ImplicitCastExpr 0x252ebc4f6a0 <col:53> 'char *' <LValueToRValue>
|           |   `-MemberExpr 0x252ebc4a588 <col:53> 'char *const' lvalue ->data 0x252ebc47bb8
|           |     `-CXXThisExpr 0x252ebc4a578 <col:53> 'const alt::String *' implicit this
|           `-ImplicitCastExpr 0x252ebc4f6d0 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc4a5c8 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc47c20
|               `-CXXThisExpr 0x252ebc4a5b8 <col:59> 'const alt::String *' implicit this
|-CXXMethodDecl 0x252ebc46b70 <line:111:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc4f810 <col:28, col:43>
|   `-ReturnStmt 0x252ebc4f800 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc4f7e8 <col:37> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x252ebc4f7d0 <col:37> 'char *' <LValueToRValue>
|         `-MemberExpr 0x252ebc4f7a0 <col:37> 'char *const' lvalue ->data 0x252ebc47bb8
|           `-CXXThisExpr 0x252ebc4f790 <col:37> 'const alt::String *' implicit this
|-FriendDecl 0x252ebc46e28 <line:113:3, col:139> col:17
| `-FunctionDecl 0x252ebc46d68 parent 0x252ebc44728 <col:3, col:139> col:17 operator+ 'alt::String (const alt::String &, const alt::String &)'
|   |-ParmVarDecl 0x252ebc46c20 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x252ebc46c98 <col:46, col:60> col:60 used rhs 'const alt::String &'
|   `-CompoundStmt 0x252ebc4fb70 <col:65, col:139>
|     `-ReturnStmt 0x252ebc4fb60 <col:67, col:136>
|       `-ExprWithCleanups 0x252ebc4fb48 <col:74, col:136> 'alt::String'
|         `-CXXBindTemporaryExpr 0x252ebc4fb28 <col:74, col:136> 'alt::String' (CXXTemporary 0x252ebc4fb20)
|           `-CallExpr 0x252ebc4fae0 <col:74, col:136> 'alt::String'
|             |-ImplicitCastExpr 0x252ebc4fac8 <col:74> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ebc4f828 <col:74> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x252ebc480b8 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x252ebc4f898 <col:81, col:90> 'const char *'
|             | `-MemberExpr 0x252ebc4f868 <col:81, col:85> '<bound member function type>' .CStr 0x252ebc46b70
|             |   `-DeclRefExpr 0x252ebc4f848 <col:81> 'const alt::String' lvalue ParmVar 0x252ebc46c20 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x252ebc4f908 <col:93, col:105> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x252ebc4f8d8 <col:93, col:97> '<bound member function type>' .GetSize 0x252ebc466b8
|             |   `-DeclRefExpr 0x252ebc4f8b8 <col:93> 'const alt::String' lvalue ParmVar 0x252ebc46c20 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x252ebc4f9d8 <col:108, col:120> 'const char *'
|             | `-MemberExpr 0x252ebc4f9a8 <col:108, col:112> '<bound member function type>' .GetData 0x252ebc464d8
|             |   `-DeclRefExpr 0x252ebc4f928 <col:108> 'const alt::String' lvalue ParmVar 0x252ebc46c98 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x252ebc4fa48 <col:123, col:135> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x252ebc4fa18 <col:123, col:127> '<bound member function type>' .GetSize 0x252ebc466b8
|                 `-DeclRefExpr 0x252ebc4f9f8 <col:123> 'const alt::String' lvalue ParmVar 0x252ebc46c98 'rhs' 'const alt::String &'
|-FriendDecl 0x252ebc47088 <line:115:3, col:125> col:17
| `-FunctionDecl 0x252ebc46fc8 parent 0x252ebc44728 <col:3, col:125> col:17 operator+ 'alt::String (const alt::String &, const char *)'
|   |-ParmVarDecl 0x252ebc46e78 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x252ebc46ef8 <col:46, col:58> col:58 used rhs 'const char *'
|   `-CompoundStmt 0x252ebc4fe48 <col:63, col:125>
|     `-ReturnStmt 0x252ebc4fe38 <col:65, col:122>
|       `-ExprWithCleanups 0x252ebc4fe20 <col:72, col:122> 'alt::String'
|         `-CXXBindTemporaryExpr 0x252ebc4fe00 <col:72, col:122> 'alt::String' (CXXTemporary 0x252ebc4fdf8)
|           `-CallExpr 0x252ebc4fda0 <col:72, col:122> 'alt::String'
|             |-ImplicitCastExpr 0x252ebc4fd88 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ebc4fb88 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x252ebc480b8 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x252ebc4fbf8 <col:79, col:88> 'const char *'
|             | `-MemberExpr 0x252ebc4fbc8 <col:79, col:83> '<bound member function type>' .CStr 0x252ebc46b70
|             |   `-DeclRefExpr 0x252ebc4fba8 <col:79> 'const alt::String' lvalue ParmVar 0x252ebc46e78 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x252ebc4fc68 <col:91, col:103> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x252ebc4fc38 <col:91, col:95> '<bound member function type>' .GetSize 0x252ebc466b8
|             |   `-DeclRefExpr 0x252ebc4fc18 <col:91> 'const alt::String' lvalue ParmVar 0x252ebc46e78 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x252ebc4fde0 <col:106> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x252ebc4fc88 <col:106> 'const char *' lvalue ParmVar 0x252ebc46ef8 'rhs' 'const char *'
|             `-CallExpr 0x252ebc4fd48 <col:111, col:121> 'size_t':'unsigned long long'
|               |-ImplicitCastExpr 0x252ebc4fd30 <col:111> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x252ebc4fd10 <col:111> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|               `-ImplicitCastExpr 0x252ebc4fd70 <col:118> 'const char *' <LValueToRValue>
|                 `-DeclRefExpr 0x252ebc4fcf0 <col:118> 'const char *' lvalue ParmVar 0x252ebc46ef8 'rhs' 'const char *'
|-FriendDecl 0x252ebc472e8 <line:116:3, col:128> col:17
| `-FunctionDecl 0x252ebc47228 parent 0x252ebc44728 <col:3, col:128> col:17 operator+ 'alt::String (const char *, const alt::String &)'
|   |-ParmVarDecl 0x252ebc470e0 <col:27, col:39> col:39 used lhs 'const char *'
|   |-ParmVarDecl 0x252ebc47158 <col:44, col:58> col:58 used rhs 'const alt::String &'
|   `-CompoundStmt 0x252ebc50180 <col:63, col:128>
|     `-ReturnStmt 0x252ebc50170 <col:65, col:125>
|       `-ExprWithCleanups 0x252ebc50158 <col:72, col:125> 'alt::String'
|         `-CXXBindTemporaryExpr 0x252ebc50138 <col:72, col:125> 'alt::String' (CXXTemporary 0x252ebc50130)
|           `-CallExpr 0x252ebc500d8 <col:72, col:125> 'alt::String'
|             |-ImplicitCastExpr 0x252ebc500c0 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ebc4fe60 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x252ebc480b8 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x252ebc50118 <col:79> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x252ebc4fe80 <col:79> 'const char *' lvalue ParmVar 0x252ebc470e0 'lhs' 'const char *'
|             |-CallExpr 0x252ebc4ff40 <col:84, col:94> 'size_t':'unsigned long long'
|             | |-ImplicitCastExpr 0x252ebc4ff28 <col:84> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x252ebc4ff08 <col:84> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|             | `-ImplicitCastExpr 0x252ebc4ff68 <col:91> 'const char *' <LValueToRValue>
|             |   `-DeclRefExpr 0x252ebc4fee8 <col:91> 'const char *' lvalue ParmVar 0x252ebc470e0 'lhs' 'const char *'
|             |-CXXMemberCallExpr 0x252ebc50030 <col:97, col:109> 'const char *'
|             | `-MemberExpr 0x252ebc50000 <col:97, col:101> '<bound member function type>' .GetData 0x252ebc464d8
|             |   `-DeclRefExpr 0x252ebc4ff80 <col:97> 'const alt::String' lvalue ParmVar 0x252ebc47158 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x252ebc500a0 <col:112, col:124> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x252ebc50070 <col:112, col:116> '<bound member function type>' .GetSize 0x252ebc466b8
|                 `-DeclRefExpr 0x252ebc50050 <col:112> 'const alt::String' lvalue ParmVar 0x252ebc47158 'rhs' 'const alt::String &'
|-FriendDecl 0x252ebc47548 <line:118:3, col:109> col:17
| `-FunctionDecl 0x252ebc47488 parent 0x252ebc44728 <col:3, col:109> col:17 operator+ 'alt::String (const alt::String &, char)'
|   |-ParmVarDecl 0x252ebc47338 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x252ebc473b0 <col:46, col:51> col:51 used rhs 'char'
|   `-CompoundStmt 0x252ebc503d0 <col:56, col:109>
|     `-ReturnStmt 0x252ebc503c0 <col:58, col:106>
|       `-ExprWithCleanups 0x252ebc503a8 <col:65, col:106> 'alt::String'
|         `-CXXBindTemporaryExpr 0x252ebc50388 <col:65, col:106> 'alt::String' (CXXTemporary 0x252ebc50380)
|           `-CallExpr 0x252ebc50310 <col:65, col:106> 'alt::String'
|             |-ImplicitCastExpr 0x252ebc502f8 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ebc50198 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x252ebc480b8 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x252ebc50208 <col:72, col:81> 'const char *'
|             | `-MemberExpr 0x252ebc501d8 <col:72, col:76> '<bound member function type>' .CStr 0x252ebc46b70
|             |   `-DeclRefExpr 0x252ebc501b8 <col:72> 'const alt::String' lvalue ParmVar 0x252ebc47338 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x252ebc50278 <col:84, col:96> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x252ebc50248 <col:84, col:88> '<bound member function type>' .GetSize 0x252ebc466b8
|             |   `-DeclRefExpr 0x252ebc50228 <col:84> 'const alt::String' lvalue ParmVar 0x252ebc47338 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x252ebc50350 <col:99, col:100> 'const char *' <NoOp>
|             | `-UnaryOperator 0x252ebc502b8 <col:99, col:100> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x252ebc50298 <col:100> 'char' lvalue ParmVar 0x252ebc473b0 'rhs' 'char'
|             `-ImplicitCastExpr 0x252ebc50368 <col:105> 'alt::Size':'unsigned long long' <IntegralCast>
|               `-IntegerLiteral 0x252ebc502d0 <col:105> 'int' 1
|-FriendDecl 0x252ebc477a8 <line:119:3, col:112> col:17
| `-FunctionDecl 0x252ebc476e8 parent 0x252ebc44728 <col:3, col:112> col:17 operator+ 'alt::String (char, const alt::String &)'
|   |-ParmVarDecl 0x252ebc47598 <col:27, col:32> col:32 used lhs 'char'
|   |-ParmVarDecl 0x252ebc47610 <col:37, col:51> col:51 used rhs 'const alt::String &'
|   `-CompoundStmt 0x252ebc50680 <col:56, col:112>
|     `-ReturnStmt 0x252ebc50670 <col:58, col:109>
|       `-ExprWithCleanups 0x252ebc50658 <col:65, col:109> 'alt::String'
|         `-CXXBindTemporaryExpr 0x252ebc50638 <col:65, col:109> 'alt::String' (CXXTemporary 0x252ebc50630)
|           `-CallExpr 0x252ebc505c0 <col:65, col:109> 'alt::String'
|             |-ImplicitCastExpr 0x252ebc505a8 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ebc503e8 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x252ebc480b8 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x252ebc50600 <col:72, col:73> 'const char *' <NoOp>
|             | `-UnaryOperator 0x252ebc50428 <col:72, col:73> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x252ebc50408 <col:73> 'char' lvalue ParmVar 0x252ebc47598 'lhs' 'char'
|             |-ImplicitCastExpr 0x252ebc50618 <col:78> 'alt::Size':'unsigned long long' <IntegralCast>
|             | `-IntegerLiteral 0x252ebc50440 <col:78> 'int' 1
|             |-CXXMemberCallExpr 0x252ebc50518 <col:81, col:93> 'const char *'
|             | `-MemberExpr 0x252ebc504e8 <col:81, col:85> '<bound member function type>' .GetData 0x252ebc464d8
|             |   `-DeclRefExpr 0x252ebc50468 <col:81> 'const alt::String' lvalue ParmVar 0x252ebc47610 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x252ebc50588 <col:96, col:108> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x252ebc50558 <col:96, col:100> '<bound member function type>' .GetSize 0x252ebc466b8
|                 `-DeclRefExpr 0x252ebc50538 <col:96> 'const alt::String' lvalue ParmVar 0x252ebc47610 'rhs' 'const alt::String &'
|-FriendDecl 0x252ebc47b30 <line:121:3, col:100> col:24
| `-FunctionDecl 0x252ebc47a70 parent 0x252ebc44728 <col:3, col:100> col:24 operator<< 'std::ostream &(std::ostream &, alt::String)'
|   |-ParmVarDecl 0x252ebc478d0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc47948 <col:57, col:64> col:64 used str 'alt::String'
|   `-CompoundStmt 0x252ebc527d0 <col:69, col:100>
|     `-ReturnStmt 0x252ebc527c0 <col:71, col:97>
|       `-CXXOperatorCallExpr 0x252ebc52788 <col:78, col:97> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc52770 <col:85> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc52750 <col:85> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc50698 <col:78> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc478d0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc50708 <col:88, col:97> 'const char *'
|           `-MemberExpr 0x252ebc506d8 <col:88, col:92> '<bound member function type>' .CStr 0x252ebc46b70
|             `-ImplicitCastExpr 0x252ebc50728 <col:88> 'const alt::String' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc506b8 <col:88> 'alt::String' lvalue ParmVar 0x252ebc47948 'str' 'alt::String'
|-AccessSpecDecl 0x252ebc47b70 <line:123:2, col:9> col:2 private
|-FieldDecl 0x252ebc47bb8 <line:124:3, col:9> col:9 referenced data 'char *'
|-FieldDecl 0x252ebc47c20 <line:125:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc47d48 <line:127:3, line:131:3> line:127:8 used Swap 'void (alt::String &)'
| |-ParmVarDecl 0x252ebc47c88 <col:13, col:21> col:21 used that 'alt::String &'
| `-CompoundStmt 0x252ebc572f0 <line:128:3, line:131:3>
|   |-CallExpr 0x252ebc54d40 <line:129:4, col:29> 'void'
|   | |-ImplicitCastExpr 0x252ebc54d28 <col:4, col:9> 'void (*)(char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x252ebc54c90 <col:4, col:9> 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' lvalue Function 0x252ebc53e48 'swap' 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' (FunctionTemplate 0x252eb12be18 'swap')
|   | |-MemberExpr 0x252ebc528a0 <col:14> 'char *' lvalue ->data 0x252ebc47bb8
|   | | `-CXXThisExpr 0x252ebc52890 <col:14> 'alt::String *' implicit this
|   | `-MemberExpr 0x252ebc528f0 <col:20, col:25> 'char *' lvalue .data 0x252ebc47bb8
|   |   `-DeclRefExpr 0x252ebc528d0 <col:20> 'alt::String' lvalue ParmVar 0x252ebc47c88 'that' 'alt::String &'
|   `-CallExpr 0x252ebc572c0 <line:130:4, col:29> 'void'
|     |-ImplicitCastExpr 0x252ebc572a8 <col:4, col:9> 'void (*)(unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x252ebc57210 <col:4, col:9> 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' lvalue Function 0x252ebc563c8 'swap' 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' (FunctionTemplate 0x252eb12be18 'swap')
|     |-MemberExpr 0x252ebc54e28 <col:14> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc47c20
|     | `-CXXThisExpr 0x252ebc54e18 <col:14> 'alt::String *' implicit this
|     `-MemberExpr 0x252ebc54e78 <col:20, col:25> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc47c20
|       `-DeclRefExpr 0x252ebc54e58 <col:20> 'alt::String' lvalue ParmVar 0x252ebc47c88 'that' 'alt::String &'
`-CXXMethodDecl 0x252ebc480b8 <line:133:3, line:141:3> line:133:17 used Concat 'alt::String (const char *, alt::Size, const char *, alt::Size)' static
  |-ParmVarDecl 0x252ebc47e08 <col:24, col:36> col:36 used lData 'const char *'
  |-ParmVarDecl 0x252ebc47e80 <col:43, col:48> col:48 used lSize 'alt::Size':'unsigned long long'
  |-ParmVarDecl 0x252ebc47f00 <col:55, col:67> col:67 used rData 'const char *'
  |-ParmVarDecl 0x252ebc47f78 <col:74, col:79> col:79 used rSize 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x252ebc57b70 <line:134:3, line:141:3>
    |-DeclStmt 0x252ebc57520 <line:135:4, col:29>
    | `-VarDecl 0x252ebc57340 <col:4, col:28> col:11 used res 'alt::String' nrvo callinit
    |   `-CXXConstructExpr 0x252ebc574e8 <col:11, col:28> 'alt::String' 'void (alt::Size, char)'
    |     |-BinaryOperator 0x252ebc573f8 <col:15, col:23> 'unsigned long long' '+'
    |     | |-ImplicitCastExpr 0x252ebc573c8 <col:15> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x252ebc57310 <col:15> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc47e80 'lSize' 'alt::Size':'unsigned long long'
    |     | `-ImplicitCastExpr 0x252ebc573e0 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     |   `-DeclRefExpr 0x252ebc573a8 <col:23> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc47f78 'rSize' 'alt::Size':'unsigned long long'
    |     `-CXXDefaultArgExpr 0x252ebc574c8 <<invalid sloc>> 'char'
    |-ForStmt 0x252ebc57a88 <line:137:4, line:138:52>
    | |-DeclStmt 0x252ebc575f0 <line:137:9, col:19>
    | | `-VarDecl 0x252ebc57548 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x252ebc575d8 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x252ebc575b0 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x252ebc576d0 <col:21, col:33> 'bool' '<'
    | | |-ImplicitCastExpr 0x252ebc576b8 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x252ebc57608 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x252ebc57548 'i' 'alt::Size':'unsigned long long'
    | | `-BinaryOperator 0x252ebc57698 <col:25, col:33> 'unsigned long long' '+'
    | |   |-ImplicitCastExpr 0x252ebc57668 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x252ebc57628 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc47e80 'lSize' 'alt::Size':'unsigned long long'
    | |   `-ImplicitCastExpr 0x252ebc57680 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |     `-DeclRefExpr 0x252ebc57648 <col:33> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc47f78 'rSize' 'alt::Size':'unsigned long long'
    | |-UnaryOperator 0x252ebc57710 <col:40, col:42> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x252ebc576f0 <col:42> 'alt::Size':'unsigned long long' lvalue Var 0x252ebc57548 'i' 'alt::Size':'unsigned long long'
    | `-BinaryOperator 0x252ebc57a68 <line:138:5, col:52> 'char' lvalue '='
    |   |-CXXOperatorCallExpr 0x252ebc577e0 <col:5, col:10> 'char' lvalue
    |   | |-ImplicitCastExpr 0x252ebc577c8 <col:8, col:10> 'char &(*)(alt::Size)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x252ebc57780 <col:8, col:10> 'char &(alt::Size)' lvalue CXXMethod 0x252ebc45e40 'operator[]' 'char &(alt::Size)'
    |   | |-DeclRefExpr 0x252ebc57728 <col:5> 'alt::String' lvalue Var 0x252ebc57340 'res' 'alt::String'
    |   | `-ImplicitCastExpr 0x252ebc57768 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x252ebc57748 <col:9> 'alt::Size':'unsigned long long' lvalue Var 0x252ebc57548 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x252ebc57a50 <col:14, col:52> 'char' <LValueToRValue>
    |     `-ConditionalOperator 0x252ebc57a20 <col:14, col:52> 'const char' lvalue
    |       |-BinaryOperator 0x252ebc57888 <col:14, col:18> 'bool' '<'
    |       | |-ImplicitCastExpr 0x252ebc57858 <col:14> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       | | `-DeclRefExpr 0x252ebc57818 <col:14> 'alt::Size':'unsigned long long' lvalue Var 0x252ebc57548 'i' 'alt::Size':'unsigned long long'
    |       | `-ImplicitCastExpr 0x252ebc57870 <col:18> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x252ebc57838 <col:18> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc47e80 'lSize' 'alt::Size':'unsigned long long'
    |       |-ArraySubscriptExpr 0x252ebc57918 <col:26, col:33> 'const char' lvalue
    |       | |-ImplicitCastExpr 0x252ebc578e8 <col:26> 'const char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x252ebc578a8 <col:26> 'const char *' lvalue ParmVar 0x252ebc47e08 'lData' 'const char *'
    |       | `-ImplicitCastExpr 0x252ebc57900 <col:32> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x252ebc578c8 <col:32> 'alt::Size':'unsigned long long' lvalue Var 0x252ebc57548 'i' 'alt::Size':'unsigned long long'
    |       `-ArraySubscriptExpr 0x252ebc57a00 <col:37, col:52> 'const char' lvalue
    |         |-ImplicitCastExpr 0x252ebc579e8 <col:37> 'const char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x252ebc57938 <col:37> 'const char *' lvalue ParmVar 0x252ebc47f00 'rData' 'const char *'
    |         `-BinaryOperator 0x252ebc579c8 <col:43, col:47> 'unsigned long long' '-'
    |           |-ImplicitCastExpr 0x252ebc57998 <col:43> 'alt::Size':'unsigned long long' <LValueToRValue>
    |           | `-DeclRefExpr 0x252ebc57958 <col:43> 'alt::Size':'unsigned long long' lvalue Var 0x252ebc57548 'i' 'alt::Size':'unsigned long long'
    |           `-ImplicitCastExpr 0x252ebc579b0 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
    |             `-DeclRefExpr 0x252ebc57978 <col:47> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc47e80 'lSize' 'alt::Size':'unsigned long long'
    `-ReturnStmt 0x252ebc57b58 <line:140:4, col:11>
      `-CXXConstructExpr 0x252ebc57b28 <col:11> 'alt::String' 'void (alt::String &&)' elidable
        `-ImplicitCastExpr 0x252ebc57b10 <col:11> 'alt::String' xvalue <NoOp>
          `-DeclRefExpr 0x252ebc57ac0 <col:11> 'alt::String' lvalue Var 0x252ebc57340 'res' 'alt::String'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::List = alt::Array
ClassTemplateSpecializationDecl 0x252ebe80c58 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::MValue'
|-CXXRecordDecl 0x252ebef71f0 prev 0x252ebe80c58 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x252ebef7280 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebef72e8 <line:13:3, col:19> col:3 used constexpr Array 'void () noexcept' default
| |-CXXCtorInitializer Field 0x252ebef8f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x252ebef9260 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x252ebef8f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x252ebef92a8 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebef8fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x252ebef92f0 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebef9350 <col:19>
|-FunctionTemplateDecl 0x252ebef7650 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x252ebef73a0 <line:15:12, col:18> col:18 class depth 0 index 0 It
| |-CXXConstructorDecl 0x252ebef75a8 <line:16:3, col:25> col:3 Array 'void (It, It)'
| | |-ParmVarDecl 0x252ebef7440 <col:9, col:12> col:12 begin 'It'
| | `-ParmVarDecl 0x252ebef74b8 <col:19, col:22> col:22 end 'It'
| `-CXXConstructorDecl 0x252ec4e9b98 <col:3, line:29:3> line:16:3 used Array 'void (const alt::MValue *, const alt::MValue *)'
|   |-TemplateArgument type 'const alt::MValue *'
|   |-ParmVarDecl 0x252ec4e9a08 <col:9, col:12> col:12 used begin 'const alt::MValue *':'const alt::MValue *'
|   |-ParmVarDecl 0x252ec4e9a80 <col:19, col:22> col:22 used end 'const alt::MValue *':'const alt::MValue *'
|   |-CXXCtorInitializer Field 0x252ebef8f08 'data' 'alt::MValue *'
|   | `-CXXDefaultInitExpr 0x252ec4ea390 <col:3> 'alt::MValue *'
|   |-CXXCtorInitializer Field 0x252ebef8f60 'size' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec4ea3d8 <col:3> 'alt::Size':'unsigned long long'
|   |-CXXCtorInitializer Field 0x252ebef8fb8 'capacity' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec4ea420 <col:3> 'alt::Size':'unsigned long long'
|   `-CompoundStmt 0x252ec4f03b0 <line:17:3, line:29:3>
|     |-DeclStmt 0x252ec4efd18 <line:18:4, col:42>
|     | `-VarDecl 0x252ec4ea480 <col:4, col:41> col:9 used _size 'alt::Size':'unsigned long long' cinit
|     |   `-ImplicitCastExpr 0x252ec4efd00 <col:17, col:41> 'alt::Size':'unsigned long long' <IntegralCast>
|     |     `-CallExpr 0x252ec4efca0 <col:17, col:41> '_Iter_diff_t<const alt::MValue *>':'long long'
|     |       |-ImplicitCastExpr 0x252ec4efc88 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (*)(const alt::MValue *, const alt::MValue *)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x252ec4eebe0 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' lvalue Function 0x252ec4eea98 'distance' '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' (FunctionTemplate 0x252eb2052c8 'distance')
|     |       |-ImplicitCastExpr 0x252ec4efcd0 <col:31> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       | `-DeclRefExpr 0x252ec4ea530 <col:31> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x252ec4e9a08 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |       `-ImplicitCastExpr 0x252ec4efce8 <col:38> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |         `-DeclRefExpr 0x252ec4ea550 <col:38> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x252ec4e9a80 'end' 'const alt::MValue *':'const alt::MValue *'
|     |-CXXMemberCallExpr 0x252ec4efd90 <line:20:4, col:17> 'void'
|     | |-MemberExpr 0x252ec4efd40 <col:4> '<bound member function type>' ->Realloc 0x252ebef90a0
|     | | `-CXXThisExpr 0x252ec4efd30 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     | `-ImplicitCastExpr 0x252ec4efdb8 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4efd70 <col:12> 'alt::Size':'unsigned long long' lvalue Var 0x252ec4ea480 '_size' 'alt::Size':'unsigned long long'
|     |-DeclStmt 0x252ec4eff18 <line:22:4, col:21>
|     | `-VarDecl 0x252ec4efdd0 <col:4, col:16> col:9 used from 'const alt::MValue *':'const alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x252ec4eff00 <col:16> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |     `-DeclRefExpr 0x252ec4efe38 <col:16> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x252ec4e9a08 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |-DeclStmt 0x252ec4f0098 <line:23:4, col:18>
|     | `-VarDecl 0x252ec4eff30 <col:4, col:14> col:9 used to 'alt::MValue *':'alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x252ec4f0080 <col:14> 'alt::MValue *' <LValueToRValue>
|     |     `-MemberExpr 0x252ec4effa8 <col:14> 'alt::MValue *' lvalue ->data 0x252ebef8f08
|     |       `-CXXThisExpr 0x252ec4eff98 <col:14> 'alt::Array<alt::MValue> *' implicit this
|     |-ForStmt 0x252ec4f02e0 <line:25:4, line:26:12>
|     | |-<<<NULL>>>
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x252ec4f0120 <line:25:11, col:19> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec4f00f0 <col:11> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec4f00b0 <col:11> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x252ec4efdd0 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-ImplicitCastExpr 0x252ec4f0108 <col:19> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4f00d0 <col:19> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x252ec4e9a80 'end' 'const alt::MValue *':'const alt::MValue *'
|     | |-BinaryOperator 0x252ec4f01b0 <col:24, col:34> 'alt::MValue *':'alt::MValue *' lvalue ','
|     | | |-UnaryOperator 0x252ec4f0160 <col:24, col:26> 'const alt::MValue *':'const alt::MValue *' lvalue prefix '++'
|     | | | `-DeclRefExpr 0x252ec4f0140 <col:26> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x252ec4efdd0 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-UnaryOperator 0x252ec4f0198 <col:32, col:34> 'alt::MValue *':'alt::MValue *' lvalue prefix '++'
|     | |   `-DeclRefExpr 0x252ec4f0178 <col:34> 'alt::MValue *':'alt::MValue *' lvalue Var 0x252ec4eff30 'to' 'alt::MValue *':'alt::MValue *'
|     | `-CXXOperatorCallExpr 0x252ec4f02a8 <line:26:5, col:12> 'alt::MValue' lvalue
|     |   |-ImplicitCastExpr 0x252ec4f0290 <col:9> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x252ec4f0270 <col:9> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |   |-UnaryOperator 0x252ec4f0208 <col:5, col:6> 'alt::MValue' lvalue prefix '*' cannot overflow
|     |   | `-ImplicitCastExpr 0x252ec4f01f0 <col:6> 'alt::MValue *':'alt::MValue *' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x252ec4f01d0 <col:6> 'alt::MValue *':'alt::MValue *' lvalue Var 0x252ec4eff30 'to' 'alt::MValue *':'alt::MValue *'
|     |   `-UnaryOperator 0x252ec4f0258 <col:11, col:12> 'const alt::MValue' lvalue prefix '*' cannot overflow
|     |     `-ImplicitCastExpr 0x252ec4f0240 <col:12> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       `-DeclRefExpr 0x252ec4f0220 <col:12> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x252ec4efdd0 'from' 'const alt::MValue *':'const alt::MValue *'
|     `-BinaryOperator 0x252ec4f0390 <line:28:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|       |-MemberExpr 0x252ec4f0328 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
|       | `-CXXThisExpr 0x252ec4f0318 <col:4> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x252ec4f0378 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252ec4f0358 <col:11> 'alt::Size':'unsigned long long' lvalue Var 0x252ec4ea480 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x252ebef7948 <line:31:3, line:35:3> line:31:3 used Array 'void (const alt::MValue *, alt::Size)'
| |-ParmVarDecl 0x252ebef77a8 <col:9, col:18> col:18 used _data 'const alt::MValue *'
| |-ParmVarDecl 0x252ebef7810 <col:25, col:30> col:30 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x252ec4e9cc0 <line:32:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, const alt::MValue *)'
| |   |-ImplicitCastExpr 0x252ec4e9ca8 <col:10> 'const alt::MValue *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ec4e98a8 <col:10> 'const alt::MValue *' lvalue ParmVar 0x252ebef77a8 '_data' 'const alt::MValue *'
| |   `-BinaryOperator 0x252ec4e9938 <col:17, col:25> 'const alt::MValue *' '+'
| |     |-ImplicitCastExpr 0x252ec4e9908 <col:17> 'const alt::MValue *' <LValueToRValue>
| |     | `-DeclRefExpr 0x252ec4e98c8 <col:17> 'const alt::MValue *' lvalue ParmVar 0x252ebef77a8 '_data' 'const alt::MValue *'
| |     `-ImplicitCastExpr 0x252ec4e9920 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x252ec4e98e8 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef7810 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ec4e9898 <line:33:3, line:35:3>
|-CXXConstructorDecl 0x252ebef7be8 <line:37:3, line:45:3> line:37:3 used Array 'void (alt::Size, const alt::MValue &)'
| |-ParmVarDecl 0x252ebef7a10 <col:9, col:14> col:14 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x252ebef7ab8 <col:21, col:39> col:30 used fill 'const alt::MValue &' cinit
| | `-ExprWithCleanups 0x252ebfc4e98 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |   `-MaterializeTemporaryExpr 0x252ebfc4e80 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |     `-ImplicitCastExpr 0x252ebfc4e68 <col:37, col:39> 'const alt::MValue':'const alt::MValue' <NoOp>
| |       `-CXXBindTemporaryExpr 0x252ebfc4e48 <col:37, col:39> 'alt::MValue':'alt::MValue' (CXXTemporary 0x252ebfc4e40)
| |         `-CXXTemporaryObjectExpr 0x252ebfc4e10 <col:37, col:39> 'alt::MValue':'alt::MValue' 'void ()'
| |-CXXCtorInitializer Field 0x252ebef8f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x252ec4e88b8 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x252ebef8f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x252ec4e8900 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebef8fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x252ec4e8948 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ec4e8db8 <line:38:3, line:45:3>
|   |-CXXMemberCallExpr 0x252ec4e8a08 <line:39:4, col:17> 'void'
|   | |-MemberExpr 0x252ec4e89b8 <col:4> '<bound member function type>' ->Realloc 0x252ebef90a0
|   | | `-CXXThisExpr 0x252ec4e89a8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x252ec4e8a30 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4e89e8 <col:12> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef7a10 '_size' 'alt::Size':'unsigned long long'
|   |-ForStmt 0x252ec4e8ce8 <line:41:4, line:42:15>
|   | |-DeclStmt 0x252ec4e8ac8 <line:41:9, col:19>
|   | | `-VarDecl 0x252ec4e8a48 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x252ec4e8ab0 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x252ec4e85f8 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x252ec4e8b50 <col:21, col:25> 'bool' '<'
|   | | |-ImplicitCastExpr 0x252ec4e8b20 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x252ec4e8ae0 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x252ec4e8a48 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec4e8b38 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4e8b00 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef7a10 '_size' 'alt::Size':'unsigned long long'
|   | |-UnaryOperator 0x252ec4e8b90 <col:32, col:34> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x252ec4e8b70 <col:34> 'alt::Size':'unsigned long long' lvalue Var 0x252ec4e8a48 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x252ec4e8cb0 <line:42:5, col:15> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x252ec4e8c98 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x252ec4e8c78 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x252ec4e8c38 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x252ec4e8c08 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x252ec4e8bb8 <col:5> 'alt::MValue *' lvalue ->data 0x252ebef8f08
|   |   | |   `-CXXThisExpr 0x252ec4e8ba8 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x252ec4e8c20 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x252ec4e8be8 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x252ec4e8a48 'i' 'alt::Size':'unsigned long long'
|   |   `-DeclRefExpr 0x252ec4e8c58 <col:15> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x252ebef7ab8 'fill' 'const alt::MValue &'
|   `-BinaryOperator 0x252ec4e8d98 <line:44:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|     |-MemberExpr 0x252ec4e8d30 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
|     | `-CXXThisExpr 0x252ec4e8d20 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     `-ImplicitCastExpr 0x252ec4e8d80 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e8d60 <col:11> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef7a10 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x252ebef7d70 <line:47:3, line:51:3> line:47:3 used Array 'void (const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x252ebef7cc0 <col:9, col:22> col:22 used that 'const alt::Array<alt::MValue> &'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x252ec4e9748 <line:48:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ec4e9718 <col:10, col:15> 'const alt::MValue *' <NoOp>
| |   | `-ImplicitCastExpr 0x252ec4e9700 <col:10, col:15> 'alt::MValue *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e9610 <col:10, col:15> 'alt::MValue *const' lvalue .data 0x252ebef8f08
| |   |     `-DeclRefExpr 0x252ec4e95f0 <col:10> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef7cc0 'that' 'const alt::Array<alt::MValue> &'
| |   `-ImplicitCastExpr 0x252ec4e9730 <col:21, col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x252ec4e9660 <col:21, col:26> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebef8f60
| |       `-DeclRefExpr 0x252ec4e9640 <col:21> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef7cc0 'that' 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x252ec4e95e0 <line:49:3, line:51:3>
|-CXXConstructorDecl 0x252ebef7f48 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x252ebef7e68 <col:9, col:17> col:17 that 'alt::Array<alt::MValue> &&'
|-CXXDestructorDecl 0x252ebef8030 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x252ec4e84e0 <col:12, col:29>
|   `-CXXDeleteExpr 0x252ec4e84c0 <col:14, col:23> 'void' array Function 0x252ea72c7f8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x252ec4e84a8 <col:23> 'alt::MValue *' <LValueToRValue>
|       `-MemberExpr 0x252ec4e8478 <col:23> 'alt::MValue *' lvalue ->data 0x252ebef8f08
|         `-CXXThisExpr 0x252ec4e8468 <col:23> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x252ebef8218 <line:62:3, line:71:3> line:62:10 used operator= 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x252ebef8158 <col:20, col:33> col:33 used that 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x252ec354b68 <line:63:3, line:71:3>
|   |-CXXMemberCallExpr 0x252ec354668 <line:64:4, col:21> 'void'
|   | |-MemberExpr 0x252ec3545e8 <col:4> '<bound member function type>' ->Realloc 0x252ebef90a0
|   | | `-CXXThisExpr 0x252ec3545d8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x252ec354690 <col:12, col:17> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec354638 <col:12, col:17> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebef8f60
|   |     `-DeclRefExpr 0x252ec354618 <col:12> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef8158 'that' 'const alt::Array<alt::MValue> &'
|   |-ForStmt 0x252ec354a30 <line:66:4, line:67:26>
|   | |-DeclStmt 0x252ec354728 <line:66:9, col:19>
|   | | `-VarDecl 0x252ec3546a8 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x252ec354710 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x252ec3541f0 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x252ec3547e0 <col:21, col:30> 'bool' '<'
|   | | |-ImplicitCastExpr 0x252ec3547b0 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x252ec354740 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3546a8 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec3547c8 <col:25, col:30> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x252ec354780 <col:25, col:30> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebef8f60
|   | |     `-DeclRefExpr 0x252ec354760 <col:25> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef8158 'that' 'const alt::Array<alt::MValue> &'
|   | |-UnaryOperator 0x252ec354820 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x252ec354800 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3546a8 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x252ec3549f8 <line:67:5, col:26> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x252ec3549e0 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x252ec3549c0 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x252ec3548c8 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x252ec354898 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x252ec354848 <col:5> 'alt::MValue *' lvalue ->data 0x252ebef8f08
|   |   | |   `-CXXThisExpr 0x252ec354838 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x252ec3548b0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x252ec354878 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3546a8 'i' 'alt::Size':'unsigned long long'
|   |   `-ImplicitCastExpr 0x252ec3549a8 <col:15, col:26> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
|   |     `-ArraySubscriptExpr 0x252ec354988 <col:15, col:26> 'alt::MValue':'alt::MValue' lvalue
|   |       |-ImplicitCastExpr 0x252ec354958 <col:15, col:20> 'alt::MValue *' <LValueToRValue>
|   |       | `-MemberExpr 0x252ec354908 <col:15, col:20> 'alt::MValue *const' lvalue .data 0x252ebef8f08
|   |       |   `-DeclRefExpr 0x252ec3548e8 <col:15> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef8158 'that' 'const alt::Array<alt::MValue> &'
|   |       `-ImplicitCastExpr 0x252ec354970 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x252ec354938 <col:25> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3546a8 'i' 'alt::Size':'unsigned long long'
|   |-BinaryOperator 0x252ec354b10 <line:69:4, col:16> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec354a78 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
|   | | `-CXXThisExpr 0x252ec354a68 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x252ec354af8 <col:11, col:16> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec354ac8 <col:11, col:16> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebef8f60
|   |     `-DeclRefExpr 0x252ec354aa8 <col:11> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef8158 'that' 'const alt::Array<alt::MValue> &'
|   `-ReturnStmt 0x252ec354b58 <line:70:4, col:12>
|     `-UnaryOperator 0x252ec354b40 <col:11, col:12> 'alt::Array<alt::MValue>' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec354b30 <col:12> 'alt::Array<alt::MValue> *' this
|-CXXMethodDecl 0x252ebef83a8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::MValue> &(alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x252ebef82e0 <col:20, col:28> col:28 that 'alt::Array<alt::MValue> &&'
|-CXXMethodDecl 0x252ebef8538 <line:86:3, line:91:3> line:86:8 used Push 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebef8470 <col:13, col:22> col:22 used el 'const alt::MValue &'
| `-CompoundStmt 0x252ec4f08f0 <line:87:3, line:91:3>
|   |-CXXMemberCallExpr 0x252ec4f0710 <line:88:4, col:20> 'void'
|   | |-MemberExpr 0x252ec4f0650 <col:4> '<bound member function type>' ->Realloc 0x252ebef90a0
|   | | `-CXXThisExpr 0x252ec4f0640 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-BinaryOperator 0x252ec4f06f0 <col:12, col:19> 'unsigned long long' '+'
|   |   |-ImplicitCastExpr 0x252ec4f06c0 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   | `-MemberExpr 0x252ec4f0690 <col:12> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
|   |   |   `-CXXThisExpr 0x252ec4f0680 <col:12> 'alt::Array<alt::MValue> *' implicit this
|   |   `-ImplicitCastExpr 0x252ec4f06d8 <col:19> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x252ec4f0470 <col:19> 'int' 1
|   |-CXXOperatorCallExpr 0x252ec4f0860 <line:89:4, col:17> 'alt::MValue' lvalue
|   | |-ImplicitCastExpr 0x252ec4f0848 <col:15> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x252ec4f0828 <col:15> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|   | |-ArraySubscriptExpr 0x252ec4f07e8 <col:4, col:13> 'alt::MValue':'alt::MValue' lvalue
|   | | |-ImplicitCastExpr 0x252ec4f07b8 <col:4> 'alt::MValue *' <LValueToRValue>
|   | | | `-MemberExpr 0x252ec4f0748 <col:4> 'alt::MValue *' lvalue ->data 0x252ebef8f08
|   | | |   `-CXXThisExpr 0x252ec4f0738 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | | `-ImplicitCastExpr 0x252ec4f07d0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x252ec4f0788 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
|   | |     `-CXXThisExpr 0x252ec4f0778 <col:9> 'alt::Array<alt::MValue> *' implicit this
|   | `-DeclRefExpr 0x252ec4f0808 <col:17> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x252ebef8470 'el' 'const alt::MValue &'
|   `-UnaryOperator 0x252ec4f08d8 <line:90:4, col:6> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     `-MemberExpr 0x252ec4f08a8 <col:6> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
|       `-CXXThisExpr 0x252ec4f0898 <col:6> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x252ebef85f0 <line:93:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ec4e9310 <col:24, col:39>
|   `-ReturnStmt 0x252ec4e9300 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ec4e92e8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ec4e92b8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebef8f60
|         `-CXXThisExpr 0x252ec4e92a8 <col:33> 'const alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x252ebef86a0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x252ebef8838 <line:96:3, col:47> col:6 used operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x252ebef8778 <col:17, col:22> col:22 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ec4e9490 <col:27, col:47>
|   `-ReturnStmt 0x252ec4e9480 <col:29, col:44>
|     `-ArraySubscriptExpr 0x252ec4e9460 <col:36, col:44> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x252ec4e9430 <col:36> 'alt::MValue *' <LValueToRValue>
|       | `-MemberExpr 0x252ec4e93e0 <col:36> 'alt::MValue *' lvalue ->data 0x252ebef8f08
|       |   `-CXXThisExpr 0x252ec4e93d0 <col:36> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x252ec4e9448 <col:41> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252ec4e9410 <col:41> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef8778 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebef89e8 <line:97:3, col:33> col:12 operator[] 'const alt::MValue &(alt::Size) const'
| `-ParmVarDecl 0x252ebef88f0 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebef8b48 <line:99:3, col:12> col:6 begin 'alt::MValue *()'
|-CXXMethodDecl 0x252ebef8c78 <line:100:3, col:20> col:12 begin 'const alt::MValue *() const'
|-CXXMethodDecl 0x252ebef8d48 <line:101:3, col:10> col:6 end 'alt::MValue *()'
|-CXXMethodDecl 0x252ebef8e18 <line:102:3, col:18> col:12 end 'const alt::MValue *() const'
|-AccessSpecDecl 0x252ebef8ec8 <line:104:2, col:9> col:2 private
|-FieldDecl 0x252ebef8f08 <line:105:3, col:13> col:6 referenced data 'alt::MValue *'
| `-ImplicitCastExpr 0x252ebef91b8 <col:13> 'alt::MValue *' <NullToPointer>
|   `-CXXNullPtrLiteralExpr 0x252ebc7ad90 <col:13> 'nullptr_t'
|-FieldDecl 0x252ebef8f60 <line:106:3, col:15> col:8 referenced size 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x252ebef91f0 <col:15> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x252ebc7ada0 <col:15> 'int' 0
|-FieldDecl 0x252ebef8fb8 <line:107:3, col:19> col:8 referenced capacity 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x252ebef9228 <col:19> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x252ebc7ade0 <col:19> 'int' 0
`-CXXMethodDecl 0x252ebef90a0 <line:109:3, line:127:3> line:109:8 used Realloc 'void (alt::Size)'
  |-ParmVarDecl 0x252ebef9010 <col:16, col:21> col:21 used least 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x252ec355d40 <line:110:3, line:127:3>
    |-IfStmt 0x252ec355460 <line:111:4, line:112:5>
    | |-BinaryOperator 0x252ec355430 <line:111:8, col:20> 'bool' '>='
    | | |-ImplicitCastExpr 0x252ec355400 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x252ec3553b0 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x252ebef8fb8
    | | |   `-CXXThisExpr 0x252ec3553a0 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x252ec355418 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x252ec3553e0 <col:20> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef9010 'least' 'alt::Size':'unsigned long long'
    | `-ReturnStmt 0x252ec355450 <line:112:5>
    |-IfStmt 0x252ec355580 <line:114:4, line:115:16>
    | |-BinaryOperator 0x252ec3554e8 <line:114:8, col:20> 'bool' '=='
    | | |-ImplicitCastExpr 0x252ec3554b8 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x252ec355488 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x252ebef8fb8
    | | |   `-CXXThisExpr 0x252ec355478 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x252ec3554d0 <col:20> 'unsigned long long' <IntegralCast>
    | |   `-IntegerLiteral 0x252ec354c80 <col:20> 'int' 0
    | `-BinaryOperator 0x252ec355560 <line:115:5, col:16> 'alt::Size':'unsigned long long' lvalue '='
    |   |-MemberExpr 0x252ec355518 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x252ebef8fb8
    |   | `-CXXThisExpr 0x252ec355508 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-ImplicitCastExpr 0x252ec355548 <col:16> 'alt::Size':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252ec354d08 <col:16> 'int' 1
    |-WhileStmt 0x252ec3556d0 <line:117:4, line:118:18>
    | |-BinaryOperator 0x252ec355628 <line:117:11, col:22> 'bool' '<'
    | | |-ImplicitCastExpr 0x252ec3555f8 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x252ec3555a8 <col:11> 'alt::Size':'unsigned long long' lvalue ->capacity 0x252ebef8fb8
    | | |   `-CXXThisExpr 0x252ec355598 <col:11> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x252ec355610 <col:22> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x252ec3555d8 <col:22> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef9010 'least' 'alt::Size':'unsigned long long'
    | `-CompoundAssignOperator 0x252ec3556a0 <line:118:5, col:18> 'alt::Size':'unsigned long long' lvalue '<<=' ComputeLHSTy='alt::Size':'unsigned long long' ComputeResultTy='alt::Size':'unsigned long long'
    |   |-MemberExpr 0x252ec355658 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x252ebef8fb8
    |   | `-CXXThisExpr 0x252ec355648 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-IntegerLiteral 0x252ec354e28 <col:18> 'int' 1
    |-DeclStmt 0x252ec355898 <line:120:4, col:32>
    | `-VarDecl 0x252ec3556f8 <col:4, col:17> col:7 used newData 'alt::MValue *' cinit
    |   `-CXXNewExpr 0x252ec355850 <col:17> 'alt::MValue *' array Function 0x252ea72bee8 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
    |     |-ImplicitCastExpr 0x252ec3557b0 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | `-MemberExpr 0x252ec355780 <col:23> 'alt::Size':'unsigned long long' lvalue ->capacity 0x252ebef8fb8
    |     |   `-CXXThisExpr 0x252ec355770 <col:23> 'alt::Array<alt::MValue> *' implicit this
    |     `-CXXConstructExpr 0x252ec355828 <col:21> 'alt::MValue []' 'void ()'
    |-ForStmt 0x252ec355bf8 <line:122:4, line:123:24>
    | |-DeclStmt 0x252ec355930 <line:122:9, col:19>
    | | `-VarDecl 0x252ec3558b0 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x252ec355918 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x252ec355030 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x252ec3559d8 <col:21, col:25> 'bool' '<'
    | | |-ImplicitCastExpr 0x252ec3559a8 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x252ec355948 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3558b0 'i' 'alt::Size':'unsigned long long'
    | | `-ImplicitCastExpr 0x252ec3559c0 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-MemberExpr 0x252ec355978 <col:25> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebef8f60
    | |     `-CXXThisExpr 0x252ec355968 <col:25> 'alt::Array<alt::MValue> *' implicit this
    | |-UnaryOperator 0x252ec355a18 <col:31, col:33> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x252ec3559f8 <col:33> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3558b0 'i' 'alt::Size':'unsigned long long'
    | `-CXXOperatorCallExpr 0x252ec355bc0 <line:123:5, col:24> 'alt::MValue' lvalue
    |   |-ImplicitCastExpr 0x252ec355ba8 <col:16> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x252ec355b88 <col:16> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
    |   |-ArraySubscriptExpr 0x252ec355aa0 <col:5, col:14> 'alt::MValue':'alt::MValue' lvalue
    |   | |-ImplicitCastExpr 0x252ec355a70 <col:5> 'alt::MValue *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x252ec355a30 <col:5> 'alt::MValue *' lvalue Var 0x252ec3556f8 'newData' 'alt::MValue *'
    |   | `-ImplicitCastExpr 0x252ec355a88 <col:13> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x252ec355a50 <col:13> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3558b0 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x252ec355b70 <col:18, col:24> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
    |     `-ArraySubscriptExpr 0x252ec355b50 <col:18, col:24> 'alt::MValue':'alt::MValue' lvalue
    |       |-ImplicitCastExpr 0x252ec355b20 <col:18> 'alt::MValue *' <LValueToRValue>
    |       | `-MemberExpr 0x252ec355ad0 <col:18> 'alt::MValue *' lvalue ->data 0x252ebef8f08
    |       |   `-CXXThisExpr 0x252ec355ac0 <col:18> 'alt::Array<alt::MValue> *' implicit this
    |       `-ImplicitCastExpr 0x252ec355b38 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |         `-DeclRefExpr 0x252ec355b00 <col:23> 'alt::Size':'unsigned long long' lvalue Var 0x252ec3558b0 'i' 'alt::Size':'unsigned long long'
    |-CXXDeleteExpr 0x252ec355c88 <line:125:4, col:13> 'void' array Function 0x252ea72c7f8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
    | `-ImplicitCastExpr 0x252ec355c70 <col:13> 'alt::MValue *' <LValueToRValue>
    |   `-MemberExpr 0x252ec355c40 <col:13> 'alt::MValue *' lvalue ->data 0x252ebef8f08
    |     `-CXXThisExpr 0x252ec355c30 <col:13> 'alt::Array<alt::MValue> *' implicit this
    `-BinaryOperator 0x252ec355d20 <line:126:4, col:11> 'alt::MValue *' lvalue '='
      |-MemberExpr 0x252ec355cb8 <col:4> 'alt::MValue *' lvalue ->data 0x252ebef8f08
      | `-CXXThisExpr 0x252ec355ca8 <col:4> 'alt::Array<alt::MValue> *' implicit this
      `-ImplicitCastExpr 0x252ec355d08 <col:11> 'alt::MValue *' <LValueToRValue>
        `-DeclRefExpr 0x252ec355ce8 <col:11> 'alt::MValue *' lvalue Var 0x252ec3556f8 'newData' 'alt::MValue *'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::Dict = std::unordered_map
ClassTemplateSpecializationDecl 0x252ebe814e0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:89:1, line:511:2> line:94:8 class unordered_map definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial
|-public '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|-TemplateArgument type 'alt::String'
|-TemplateArgument type 'alt::MValue'
|-TemplateArgument type 'std::hash<alt::String>'
|-TemplateArgument type 'std::equal_to<alt::String>'
|-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|-MaxFieldAlignmentAttr 0x252ebef9418 <<invalid sloc>> Implicit 64
|-CXXRecordDecl 0x252ebfb7ac0 prev 0x252ebe814e0 <col:2, col:8> col:8 implicit class unordered_map
|-AccessSpecDecl 0x252ebfb7b50 <line:98:1, col:7> col:1 public
|-StaticAssertDecl 0x252ebfb7e70 <line:99:2, line:100:110> line:99:2
| |-BinaryOperator 0x252ebfb7e38 <col:16, col:109> 'bool' '||'
| | |-UnaryOperator 0x252ebfb7b98 <col:16, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:207:23> 'bool' prefix '!' cannot overflow
| | | `-ImplicitCastExpr 0x252ebfb7b80 <col:23> 'bool' <IntegralToBoolean>
| | |   `-IntegerLiteral 0x252ebdb3df0 <col:23> 'int' 1
| | `-ImplicitCastExpr 0x252ebfb7e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:99:49, col:109> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebfb7d90 <col:49, col:109> 'const bool' lvalue VarTemplateSpecialization 0x252ebf51bc0 'is_same_v' 'const bool' non_odr_use_constant
| `-StringLiteral 0x252ebdb4198 <line:100:33, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:428:2> 'const char [291]' lvalue "unordered_map<Key, Value, Hasher, Eq, Allocator> requires that Allocator's value_type match pair<const Key, Value> (See N4659 26.2.1 [container.requirements.general]/16 allocator_type) Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this diagnostic."
|-TypeAliasDecl 0x252ebfb7fb0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:102:2, col:56> col:8 _Mytraits '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TemplateSpecializationType 0x252ebfb7ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|   |-TemplateArgument type 'alt::String':'alt::String'
|   |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|   |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|   `-RecordType 0x252ebef9680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|     `-ClassTemplateSpecialization 0x252ebef9568 '_Uhash_compare'
|-TypeAliasDecl 0x252ebfb8230 <line:103:2, col:73> col:8 _Mybase '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| `-TemplateSpecializationType 0x252ebfb81c0 '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' sugar _Hash
|   |-TemplateArgument type '_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false>':'std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false>'
|   `-RecordType 0x252ebef9b40 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|     `-ClassTemplateSpecialization 0x252ebef9a60 '_Hash'
|-TypeAliasDecl 0x252ebfb82a0 <line:104:2, col:17> col:8 hasher 'std::hash<alt::String>':'std::hash<alt::String>'
| `-SubstTemplateTypeParmType 0x252ebef94f0 'std::hash<alt::String>' sugar
|   |-TemplateTypeParmType 0x252ebdb2fe0 '_Hasher' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x252ebdb2f90 '_Hasher'
|   `-RecordType 0x252ebc58230 'std::hash<alt::String>'
|     `-ClassTemplateSpecialization 0x252ebc58148 'hash'
|-TypeAliasDecl 0x252ebfb8310 <line:105:2, col:19> col:8 key_type 'alt::String':'alt::String'
| `-SubstTemplateTypeParmType 0x252ebe80f40 'alt::String' sugar
|   |-TemplateTypeParmType 0x252ebdb2e30 '_Kty' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x252ebdb2de0 '_Kty'
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebfb8380 <line:106:2, col:22> col:8 mapped_type 'alt::MValue':'alt::MValue'
| `-SubstTemplateTypeParmType 0x252ebe81180 'alt::MValue' sugar
|   |-TemplateTypeParmType 0x252ebdb2eb0 '_Ty' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x252ebdb2e58 '_Ty'
|   `-RecordType 0x252ebe80340 'alt::MValue'
|     `-CXXRecord 0x252ebe802b0 'MValue'
|-TypeAliasDecl 0x252ebfb83f0 <line:107:2, col:20> col:8 key_equal 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| `-SubstTemplateTypeParmType 0x252ebef9530 'std::equal_to<alt::String>' sugar
|   |-TemplateTypeParmType 0x252ebdb3110 '_Keyeq' dependent depth 0 index 3
|   | `-TemplateTypeParm 0x252ebdb30c0 '_Keyeq'
|   `-RecordType 0x252ebe810e0 'std::equal_to<alt::String>'
|     `-ClassTemplateSpecialization 0x252ebe81000 'equal_to'
|-TypeAliasDecl 0x252ebfb8460 <line:108:2, col:22> col:8 key_compare 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TypedefType 0x252ebfb8030 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits' sugar
|   |-TypeAlias 0x252ebfb7fb0 '_Mytraits'
|   `-TemplateSpecializationType 0x252ebfb7ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|     |-TemplateArgument type 'alt::String':'alt::String'
|     |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|     |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|     `-RecordType 0x252ebef9680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|       `-ClassTemplateSpecialization 0x252ebef9568 '_Uhash_compare'
|-TypeAliasDecl 0x252ebfb8570 <line:110:2, col:39> col:8 value_type 'typename _Mybase::value_type':'std::pair<const alt::String, alt::MValue>'
| `-ElaboratedType 0x252ebfb8520 'typename _Mybase::value_type' sugar
|   `-TypedefType 0x252ebf62da0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|     |-TypeAlias 0x252ebf628d0 'value_type'
|     `-ElaboratedType 0x252ebf62880 'typename _Mylist::value_type' sugar
|       `-TypedefType 0x252ebf52ed0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|         |-TypeAlias 0x252ebf52a60 'value_type'
|         `-ElaboratedType 0x252ebf52a10 'typename _Mybase::value_type' sugar
|           `-TypedefType 0x252ebf26050 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|             |-TypeAlias 0x252ebf25c30 'value_type'
|             `-ElaboratedType 0x252ebf25be0 'typename _Val_types::value_type' sugar
|               `-TypedefType 0x252ebf257d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                 |-TypeAlias 0x252ebf256a8 'value_type'
|                 `-SubstTemplateTypeParmType 0x252ebf25670 'std::pair<const alt::String, alt::MValue>' sugar
|                   |-TemplateTypeParmType 0x252eb309820 '_Value_type' dependent depth 0 index 0
|                   | `-TemplateTypeParm 0x252eb3097c8 '_Value_type'
|                   `-RecordType 0x252ebe812b0 'std::pair<const alt::String, alt::MValue>'
|                     `-ClassTemplateSpecialization 0x252ebe811b8 'pair'
|-TypeAliasDecl 0x252ebfb8640 <line:111:2, col:43> col:8 allocator_type 'typename _Mybase::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >'
| `-ElaboratedType 0x252ebfb85f0 'typename _Mybase::allocator_type' sugar
|   `-TypedefType 0x252ebf65ad0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type' sugar
|     |-TypeAlias 0x252ebf629a0 'allocator_type'
|     `-ElaboratedType 0x252ebf62950 'typename _Mylist::allocator_type' sugar
|       `-TypedefType 0x252ebf5a7e0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type' sugar
|         |-TypeAlias 0x252ebf52ad0 'allocator_type'
|         `-SubstTemplateTypeParmType 0x252ebf18b80 'std::allocator<std::pair<const alt::String, alt::MValue> >' sugar
|           |-TemplateTypeParmType 0x252ebc98290 '_Alloc' dependent depth 0 index 1
|           | `-TemplateTypeParm 0x252ebc98240 '_Alloc'
|           `-RecordType 0x252ebe81450 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|             `-ClassTemplateSpecialization 0x252ebe81370 'allocator'
|-TypeAliasDecl 0x252ebfb8710 <line:112:2, col:38> col:8 size_type 'typename _Mybase::size_type':'unsigned long long'
| `-ElaboratedType 0x252ebfb86c0 'typename _Mybase::size_type' sugar
|   `-TypedefType 0x252ebf68e60 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::size_type' sugar
|     |-TypeAlias 0x252ebf62a70 'size_type'
|     `-ElaboratedType 0x252ebf62a20 'typename _Mylist::size_type' sugar
|       `-TypedefType 0x252ebf53b70 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type' sugar
|         |-TypeAlias 0x252ebf52ba0 'size_type'
|         `-ElaboratedType 0x252ebf52b50 'typename _Mybase::size_type' sugar
|           `-TypedefType 0x252ebf28ff0 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::size_type' sugar
|             |-TypeAlias 0x252ebf25d20 'size_type'
|             `-ElaboratedType 0x252ebf25cd0 'typename _Val_types::size_type' sugar
|               `-TypedefType 0x252ebf25cb0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::size_type' sugar
|                 |-TypeAlias 0x252ebf25708 'size_type'
|                 `-TypedefType 0x252ea6a7da0 'size_t' sugar
|                   |-Typedef 0x252ea6a7ae8 'size_t'
|                   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebfb8800 <line:113:2, col:44> col:8 difference_type 'typename _Mybase::difference_type':'long long'
| `-ElaboratedType 0x252ebfb87b0 'typename _Mybase::difference_type' sugar
|   `-TypedefType 0x252ebfb8790 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::difference_type' sugar
|     |-TypeAlias 0x252ebf62b60 'difference_type'
|     `-ElaboratedType 0x252ebf62b10 'typename _Mylist::difference_type' sugar
|       `-TypedefType 0x252ebf62af0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::difference_type' sugar
|         |-TypeAlias 0x252ebf52c90 'difference_type'
|         `-ElaboratedType 0x252ebf52c40 'typename _Mybase::difference_type' sugar
|           `-TypedefType 0x252ebf52c20 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::difference_type' sugar
|             |-TypeAlias 0x252ebf25e10 'difference_type'
|             `-ElaboratedType 0x252ebf25dc0 'typename _Val_types::difference_type' sugar
|               `-TypedefType 0x252ebf25da0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::difference_type' sugar
|                 |-TypeAlias 0x252ebf25768 'difference_type'
|                 `-TypedefType 0x252eb1dce50 'ptrdiff_t' sugar
|                   |-Typedef 0x252ea6a7b80 'ptrdiff_t'
|                   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebfb88f0 <line:114:2, col:36> col:8 pointer 'typename _Mybase::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x252ebfb88a0 'typename _Mybase::pointer' sugar
|   `-TypedefType 0x252ebfb8880 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::pointer' sugar
|     |-TypeAlias 0x252ebf62c50 'pointer'
|     `-ElaboratedType 0x252ebf62c00 'typename _Mylist::pointer' sugar
|       `-TypedefType 0x252ebf62be0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::pointer' sugar
|         |-TypeAlias 0x252ebf52d80 'pointer'
|         `-ElaboratedType 0x252ebf52d30 'typename _Mybase::pointer' sugar
|           `-TypedefType 0x252ebf52d10 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::pointer' sugar
|             |-TypeAlias 0x252ebf25f00 'pointer'
|             `-ElaboratedType 0x252ebf25eb0 'typename _Val_types::pointer' sugar
|               `-TypedefType 0x252ebf25e90 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::pointer' sugar
|                 |-TypeAlias 0x252ebf25828 'pointer'
|                 `-PointerType 0x252ebf257f0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-TypedefType 0x252ebf257d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x252ebf256a8 'value_type'
|                     `-SubstTemplateTypeParmType 0x252ebf25670 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x252eb309820 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x252eb3097c8 '_Value_type'
|                       `-RecordType 0x252ebe812b0 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x252ebe811b8 'pair'
|-TypeAliasDecl 0x252ebfb89e0 <line:115:2, col:42> col:8 const_pointer 'typename _Mybase::const_pointer':'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x252ebfb8990 'typename _Mybase::const_pointer' sugar
|   `-TypedefType 0x252ebfb8970 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_pointer' sugar
|     |-TypeAlias 0x252ebf62d40 'const_pointer'
|     `-ElaboratedType 0x252ebf62cf0 'typename _Mylist::const_pointer' sugar
|       `-TypedefType 0x252ebf62cd0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_pointer' sugar
|         |-TypeAlias 0x252ebf52e70 'const_pointer'
|         `-ElaboratedType 0x252ebf52e20 'typename _Mybase::const_pointer' sugar
|           `-TypedefType 0x252ebf52e00 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_pointer' sugar
|             |-TypeAlias 0x252ebf25ff0 'const_pointer'
|             `-ElaboratedType 0x252ebf25fa0 'typename _Val_types::const_pointer' sugar
|               `-TypedefType 0x252ebf25f80 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::const_pointer' sugar
|                 |-TypeAlias 0x252ebf258c8 'const_pointer'
|                 `-PointerType 0x252ebf25890 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-QualType 0x252ebf257d1 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' const
|                     `-TypedefType 0x252ebf257d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x252ebf256a8 'value_type'
|                       `-SubstTemplateTypeParmType 0x252ebf25670 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x252eb309820 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x252eb3097c8 '_Value_type'
|                         `-RecordType 0x252ebe812b0 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x252ebe811b8 'pair'
|-TypeAliasDecl 0x252ebfb8a98 <line:116:2, col:30> col:8 reference 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x252ebfb8a60 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-TypedefType 0x252ebfb8a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|     |-TypeAlias 0x252ebfb8570 'value_type'
|     `-ElaboratedType 0x252ebfb8520 'typename _Mybase::value_type' sugar
|       `-TypedefType 0x252ebf62da0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|         |-TypeAlias 0x252ebf628d0 'value_type'
|         `-ElaboratedType 0x252ebf62880 'typename _Mylist::value_type' sugar
|           `-TypedefType 0x252ebf52ed0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|             |-TypeAlias 0x252ebf52a60 'value_type'
|             `-ElaboratedType 0x252ebf52a10 'typename _Mybase::value_type' sugar
|               `-TypedefType 0x252ebf26050 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                 |-TypeAlias 0x252ebf25c30 'value_type'
|                 `-ElaboratedType 0x252ebf25be0 'typename _Val_types::value_type' sugar
|                   `-TypedefType 0x252ebf257d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x252ebf256a8 'value_type'
|                     `-SubstTemplateTypeParmType 0x252ebf25670 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x252eb309820 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x252eb3097c8 '_Value_type'
|                       `-RecordType 0x252ebe812b0 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x252ebe811b8 'pair'
|-TypeAliasDecl 0x252ebfb8b38 <line:117:2, col:42> col:8 const_reference 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x252ebfb8b00 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-QualType 0x252ebfb8a41 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' const
|     `-TypedefType 0x252ebfb8a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|       |-TypeAlias 0x252ebfb8570 'value_type'
|       `-ElaboratedType 0x252ebfb8520 'typename _Mybase::value_type' sugar
|         `-TypedefType 0x252ebf62da0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|           |-TypeAlias 0x252ebf628d0 'value_type'
|           `-ElaboratedType 0x252ebf62880 'typename _Mylist::value_type' sugar
|             `-TypedefType 0x252ebf52ed0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|               |-TypeAlias 0x252ebf52a60 'value_type'
|               `-ElaboratedType 0x252ebf52a10 'typename _Mybase::value_type' sugar
|                 `-TypedefType 0x252ebf26050 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                   |-TypeAlias 0x252ebf25c30 'value_type'
|                   `-ElaboratedType 0x252ebf25be0 'typename _Val_types::value_type' sugar
|                     `-TypedefType 0x252ebf257d0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x252ebf256a8 'value_type'
|                       `-SubstTemplateTypeParmType 0x252ebf25670 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x252eb309820 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x252eb3097c8 '_Value_type'
|                         `-RecordType 0x252ebe812b0 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x252ebe811b8 'pair'
|-TypeAliasDecl 0x252ebfb8c10 <line:118:2, col:37> col:8 iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x252ebfb8bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x252ebf65340 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x252ebf63f98 'iterator'
|     `-TemplateSpecializationType 0x252ebf63ec0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x252ebf63868 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x252ebf63850 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x252ebf636e0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x252ebf62f40 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x252ebf63e70 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x252ebf63e50 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x252ebf63dd8 'type'
|       |   `-SubstTemplateTypeParmType 0x252ebf63da0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x252ea6e41a0 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x252ea6e4118 '_Ty2'
|       |     `-RecordType 0x252ebf26410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x252ebf26330 '_List_iterator'
|       `-ElaboratedType 0x252ebf63e70 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x252ebf63e50 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x252ebf63dd8 'type'
|           `-SubstTemplateTypeParmType 0x252ebf63da0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x252ea6e41a0 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x252ea6e4118 '_Ty2'
|             `-RecordType 0x252ebf26410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x252ebf26330 '_List_iterator'
|-TypeAliasDecl 0x252ebfb8ce0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:119:2, col:43> col:8 const_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x252ebfb8c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x252ebf657d0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x252ebf64038 'const_iterator'
|     `-ElaboratedType 0x252ebf63790 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x252ebf53630 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x252ebf531b0 'const_iterator'
|         `-ElaboratedType 0x252ebf53160 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x252ebf53140 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x252ebf266f0 'const_iterator'
|             `-TemplateSpecializationType 0x252ebf26680 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x252ebf26660 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x252ebf26580 '_List_const_iterator'
|-TypeAliasDecl 0x252ebfb8d80 <line:121:2, col:43> col:8 local_iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x252ebfb8bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x252ebf65340 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x252ebf63f98 'iterator'
|     `-TemplateSpecializationType 0x252ebf63ec0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x252ebf63868 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x252ebf63850 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x252ebf636e0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x252ebf62f40 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x252ebf63e70 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x252ebf63e50 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x252ebf63dd8 'type'
|       |   `-SubstTemplateTypeParmType 0x252ebf63da0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x252ea6e41a0 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x252ea6e4118 '_Ty2'
|       |     `-RecordType 0x252ebf26410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x252ebf26330 '_List_iterator'
|       `-ElaboratedType 0x252ebf63e70 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x252ebf63e50 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x252ebf63dd8 'type'
|           `-SubstTemplateTypeParmType 0x252ebf63da0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x252ea6e41a0 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x252ea6e4118 '_Ty2'
|             `-RecordType 0x252ebf26410 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x252ebf26330 '_List_iterator'
|-TypeAliasDecl 0x252ebfb8e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:122:2, col:49> col:8 const_local_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x252ebfb8c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x252ebf657d0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x252ebf64038 'const_iterator'
|     `-ElaboratedType 0x252ebf63790 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x252ebf53630 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x252ebf531b0 'const_iterator'
|         `-ElaboratedType 0x252ebf53160 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x252ebf53140 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x252ebf266f0 'const_iterator'
|             `-TemplateSpecializationType 0x252ebf26680 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x252ebf26660 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x252ebf26580 '_List_const_iterator'
|-TypeAliasDecl 0x252ebfb8ef0 <line:124:2, col:36> col:8 _Alnode 'typename _Mybase::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
| `-ElaboratedType 0x252ebfb8ea0 'typename _Mybase::_Alnode' sugar
|   `-TypedefType 0x252ebf64b10 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode' sugar
|     |-TypeAlias 0x252ebf62710 '_Alnode'
|     `-ElaboratedType 0x252ebf626c0 'typename _Mylist::_Alnode' sugar
|       `-TypedefType 0x252ebf626a0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|         |-TypeAlias 0x252ebf528a0 '_Alnode'
|         `-ElaboratedType 0x252ebf52850 'typename _Mybase::_Alnode' sugar
|           `-TypedefType 0x252ebf24a50 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode' sugar
|             |-TypeAlias 0x252ebf24920 '_Alnode'
|             `-ElaboratedType 0x252ebf248d0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode' sugar
|               `-TypedefType 0x252ebf1a2a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|                 |-TypeAlias 0x252ebf1a238 '_Alnode'
|                 `-TemplateSpecializationType 0x252ebf1a190 '_Rebind_alloc_t<std::allocator<std::pair<const alt::String, alt::MValue> >, std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node>' sugar alias _Rebind_alloc_t
|                   |-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >':'std::allocator<std::pair<const alt::String, alt::MValue> >'
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |-ElaboratedType 0x252ebf1a120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                   | `-TemplateSpecializationType 0x252ebf1a0d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                   |   |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   |-TemplateSpecializationType 0x252ebf1a060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |   | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   | `-RecordType 0x252ebf1a040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |   |   `-ClassTemplateSpecialization 0x252ebf19f58 'allocator'
|                   |   `-TemplateSpecializationType 0x252ebf1a060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |     |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |     `-RecordType 0x252ebf1a040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |       `-ClassTemplateSpecialization 0x252ebf19f58 'allocator'
|                   `-ElaboratedType 0x252ebf1a120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                     `-TemplateSpecializationType 0x252ebf1a0d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                       |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       |-TemplateSpecializationType 0x252ebf1a060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                       | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       | `-RecordType 0x252ebf1a040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                       |   `-ClassTemplateSpecialization 0x252ebf19f58 'allocator'
|                       `-TemplateSpecializationType 0x252ebf1a060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                         |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                         `-RecordType 0x252ebf1a040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                           `-ClassTemplateSpecialization 0x252ebf19f58 'allocator'
|-TypeAliasDecl 0x252ebfb8fe0 <line:125:2, col:43> col:8 _Alnode_traits 'typename _Mybase::_Alnode_traits':'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
| `-ElaboratedType 0x252ebfb8f90 'typename _Mybase::_Alnode_traits' sugar
|   `-TypedefType 0x252ebfb8f70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode_traits' sugar
|     |-TypeAlias 0x252ebf62800 '_Alnode_traits'
|     `-ElaboratedType 0x252ebf627b0 'typename _Mylist::_Alnode_traits' sugar
|       `-TypedefType 0x252ebf62790 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|         |-TypeAlias 0x252ebf52990 '_Alnode_traits'
|         `-ElaboratedType 0x252ebf52940 'typename _Mybase::_Alnode_traits' sugar
|           `-TypedefType 0x252ebf52920 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode_traits' sugar
|             |-TypeAlias 0x252ebf249f0 '_Alnode_traits'
|             `-ElaboratedType 0x252ebf249a0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode_traits' sugar
|               `-TypedefType 0x252ebf1a4a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|                 |-TypeAlias 0x252ebf1a440 '_Alnode_traits'
|                 `-TemplateSpecializationType 0x252ebf1a3d0 'allocator_traits<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode>' sugar allocator_traits
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   `-RecordType 0x252ebf1a3b0 'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
|                     `-ClassTemplateSpecialization 0x252ebf1a2d0 'allocator_traits'
|-TypeAliasDecl 0x252ebfb90b0 <line:126:2, col:36> col:8 _Pairib 'typename _Mybase::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
| `-ElaboratedType 0x252ebfb9060 'typename _Mybase::_Pairib' sugar
|   `-TypedefType 0x252ebf677b0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib' sugar
|     |-TypeAlias 0x252ebf65530 '_Pairib'
|     `-TemplateSpecializationType 0x252ebf65490 'pair<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator, bool>' sugar pair
|       |-TemplateArgument type 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'bool'
|       `-RecordType 0x252ebf65470 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-ClassTemplateSpecialization 0x252ebf65370 'pair'
|-TypeAliasDecl 0x252ebfb9370 <line:129:2, col:86> col:8 insert_return_type '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>':'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
| `-TemplateSpecializationType 0x252ebfb92d0 '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>' sugar _Insert_return_type
|   |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-TemplateArgument type 'typename _Mybase::node_type':'std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue>'
|   `-RecordType 0x252ebfb92b0 'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
|     `-ClassTemplateSpecialization 0x252ebfb91b0 '_Insert_return_type'
|-CXXConstructorDecl 0x252ebfb9408 <line:132:2, line:135:3> line:132:2 used unordered_map 'void ()'
| |-CXXCtorInitializer 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| | `-ExprWithCleanups 0x252ec4f0e30 <line:133:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| |   `-CXXConstructExpr 0x252ec4f0df8 <col:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' 'void (const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_compare &, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type &)'
| |     |-MaterializeTemporaryExpr 0x252ec4f0db0 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' lvalue
| |     | `-ImplicitCastExpr 0x252ec4f0d98 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' <NoOp>
| |     |   `-CXXTemporaryObjectExpr 0x252ec4f0cd0 <col:13, col:25> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' 'void (std::hash<alt::String>, std::equal_to<alt::String>)'
| |     |     |-CXXDefaultArgExpr 0x252ec4f0b70 <<invalid sloc>> 'std::hash<alt::String>':'std::hash<alt::String>'
| |     |     `-CXXDefaultArgExpr 0x252ec4f0cb0 <<invalid sloc>> 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| |     `-MaterializeTemporaryExpr 0x252ec4f0de0 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' lvalue
| |       `-ImplicitCastExpr 0x252ec4f0dc8 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' <NoOp>
| |         `-CXXTemporaryObjectExpr 0x252ec4f0d20 <col:28, col:43> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >' 'void () noexcept'
| `-CompoundStmt 0x252ec4f0a08 <line:134:3, line:135:3>
|-CXXConstructorDecl 0x252ebfb95f8 <line:137:2, col:50> col:11 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| `-ParmVarDecl 0x252ebfb9518 <col:25, col:47> col:47 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfb9778 <line:142:2, col:43> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| `-ParmVarDecl 0x252ebfb96c8 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-CXXConstructorDecl 0x252ebfb99f8 <line:147:2, col:70> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfb9848 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-ParmVarDecl 0x252ebfb98c0 <col:45, col:67> col:67 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfb9bd8 <line:152:2, col:43> col:11 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| `-ParmVarDecl 0x252ebfb9af0 <col:25, col:35> col:35 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x252ebfb9e18 <line:158:2, col:61> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfb9ca8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x252ebfb9d20 <col:36, col:58> col:58 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfba0e8 <line:164:2, col:58> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x252ebfb9ef0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x252ebfb9fb8 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x252ebfba3f8 <line:170:2, line:171:28> line:170:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfba1c0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x252ebfba238 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x252ebfba2b0 <line:171:3, col:25> col:25 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfba738 <line:177:2, line:178:26> line:177:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x252ebfba4d8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x252ebfba550 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x252ebfba5f8 <line:178:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x252ebfbaae8 <line:184:2, line:185:53> line:184:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfba818 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x252ebfba890 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x252ebfba908 <line:185:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x252ebfba980 <col:28, col:50> col:50 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x252ebfbae70 <line:191:2, line:192:42> col:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbabc0 <line:191:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbadc8 <line:192:3, col:42> col:3 unordered_map 'void (_Iter, _Iter)'
|   |-ParmVarDecl 0x252ebfbac60 <col:17, col:23> col:23 _First '_Iter'
|   `-ParmVarDecl 0x252ebfbacd8 <col:31, col:37> col:37 _Last '_Iter'
|-FunctionTemplateDecl 0x252ebfbb2a0 <line:198:2, line:199:69> col:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbaf58 <line:198:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbb1f8 <line:199:3, col:69> col:3 unordered_map 'void (_Iter, _Iter, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x252ebfbb000 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbb078 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x252ebfbb0f0 <col:44, col:66> col:66 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x252ebfbb710 <line:205:2, line:207:22> line:206:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbb390 <line:205:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbb668 <line:206:3, line:207:22> line:206:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
|   |-ParmVarDecl 0x252ebfbb430 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbb4a8 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x252ebfbb520 <line:207:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-FunctionTemplateDecl 0x252ebfbbc10 <line:214:2, line:216:49> line:215:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbb800 <line:214:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbbb68 <line:215:3, line:216:49> line:215:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x252ebfbb8a0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbb918 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x252ebfbb990 <line:216:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x252ebfbba08 <col:24, col:46> col:46 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x252ebfbc120 <line:223:2, line:225:46> line:224:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbbd08 <line:223:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbc078 <line:224:3, line:225:46> line:224:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
|   |-ParmVarDecl 0x252ebfbbdb0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbbe28 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x252ebfbbea0 <line:225:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x252ebfbbf18 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-FunctionTemplateDecl 0x252ebfbc6c0 <line:232:2, line:235:29> line:233:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbc218 <line:232:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbc618 <line:233:3, line:235:29> line:233:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x252ebfbc2c0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbc338 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x252ebfbc3b0 <line:234:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x252ebfbc428 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x252ebfbc4a0 <line:235:4, col:26> col:26 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x252ebfbcc60 <line:242:2, line:245:27> line:243:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbc7c0 <line:242:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbcbb8 <line:243:3, line:245:27> line:243:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
|   |-ParmVarDecl 0x252ebfbc860 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbc8d8 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x252ebfbc950 <line:244:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x252ebfbc9c8 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x252ebfbca40 <line:245:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-FunctionTemplateDecl 0x252ebfbd290 <line:252:2, line:255:54> line:253:3 unordered_map
| |-TemplateTypeParmDecl 0x252ebfbcd60 <line:252:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x252ebfbd1e8 <line:253:3, line:255:54> line:253:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x252ebfbce00 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x252ebfbce78 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x252ebfbcef0 <line:254:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x252ebfbcf68 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   |-ParmVarDecl 0x252ebfbcfe0 <line:255:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|   `-ParmVarDecl 0x252ebfbd058 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x252ebfbd498 <line:262:2, line:266:3> line:262:17 used operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |-ParmVarDecl 0x252ebfbd3d8 <col:27, col:48> col:48 used _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-CompoundStmt 0x252ec35c780 <line:263:3, line:266:3>
|   |-CXXMemberCallExpr 0x252ec35c698 <line:264:3, col:28> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue
|   | |-MemberExpr 0x252ec35c650 <col:3, col:20> '<bound member function type>' ->operator= 0x252ebf67f98
|   | | `-ImplicitCastExpr 0x252ec35c6e8 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|   | |   `-CXXThisExpr 0x252ec35c640 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|   | `-ImplicitCastExpr 0x252ec35c708 <col:22> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue <DerivedToBase (_Hash)>
|   |   `-DeclRefExpr 0x252ec35c620 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebfbd3d8 '_Right' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|   `-ReturnStmt 0x252ec35c770 <line:265:3, col:16>
|     `-ParenExpr 0x252ec35c750 <col:10, col:16> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
|       `-UnaryOperator 0x252ec35c738 <col:11, col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x252ec35c728 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' this
|-CXXConstructorDecl 0x252ebfbd668 <line:268:2, col:38> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)'
| `-ParmVarDecl 0x252ebfbd588 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXConstructorDecl 0x252ebfbd8e8 <line:273:2, col:65> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfbd738 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
| `-ParmVarDecl 0x252ebfbd7b0 <col:40, col:62> col:62 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x252ebfbda98 <line:278:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:278:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)' noexcept-uninstantiated 0x252ebdb9e40
| `-ParmVarDecl 0x252ebfbd9c0 <col:27, col:43> col:43 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXMethodDecl 0x252ebfbdd58 <line:287:2, col:44> col:15 operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&)'
| `-ParmVarDecl 0x252ebfbdc68 <col:26, col:37> col:37 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|-CXXMethodDecl 0x252ebfbdef8 <line:292:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:292:7 swap 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' noexcept-uninstantiated 0x252ebdba240
| `-ParmVarDecl 0x252ebfbde20 <col:12, col:27> col:27 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-UsingDecl 0x252ebfbe040 <line:298:2, col:17> col:17 _Mybase::insert
|-UsingShadowDecl 0x252ebfbe098 <col:17> col:17 implicit FunctionTemplate 0x252ebf6b388 'insert'
|-UsingShadowDecl 0x252ebfbe0e8 <col:17> col:17 implicit FunctionTemplate 0x252ebf6ba48 'insert'
|-UsingShadowDecl 0x252ebfbe138 <col:17> col:17 implicit FunctionTemplate 0x252ebf6c0b8 'insert'
|-UsingShadowDecl 0x252ebfbe188 <col:17> col:17 implicit FunctionTemplate 0x252ebf6c6d8 'insert'
|-UsingShadowDecl 0x252ebfbe1d8 <col:17> col:17 implicit CXXMethod 0x252ebf6c918 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &)'
|-UsingShadowDecl 0x252ebfbe228 <col:17> col:17 implicit CXXMethod 0x252ebf6cb38 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &&)'
|-UsingShadowDecl 0x252ebfbe278 <col:17> col:17 implicit FunctionTemplate 0x252ebf6ce88 'insert'
|-UsingShadowDecl 0x252ebfbe2c8 <col:17> col:17 implicit CXXMethod 0x252ebf6d0b8 'insert' 'void (initializer_list<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>)'
|-UsingShadowDecl 0x252ebfbe318 <col:17> col:17 implicit CXXMethod 0x252ebf902c8 'insert' 'auto (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-UsingShadowDecl 0x252ebfbe368 <col:17> col:17 implicit CXXMethod 0x252ebf90518 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-FunctionTemplateDecl 0x252ebfbea98 <line:300:2, line:302:31> col:11 insert
| |-TemplateTypeParmDecl 0x252ebfbe3b8 <line:300:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x252ebfbe438 <line:301:3, <scratch space>:333:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:301:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x252ebfbe9f8 <line:302:3, col:31> col:11 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Valty &&)'
|   `-ParmVarDecl 0x252ebfbe908 <col:18, col:27> col:27 _Val '_Valty &&'
|-FunctionTemplateDecl 0x252ebfbf2b0 <line:307:2, line:309:55> col:12 insert
| |-TemplateTypeParmDecl 0x252ebfbeb78 <line:307:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x252ebfbebf8 <line:308:3, <scratch space>:335:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:308:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x252ebfbf1b8 <line:309:3, col:55> col:12 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, _Valty &&)'
|   |-ParmVarDecl 0x252ebfbf000 <col:19, col:34> col:34 _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   `-ParmVarDecl 0x252ebfbf0a8 <col:42, col:51> col:51 _Val '_Valty &&'
|-FunctionTemplateDecl 0x252ebfbf798 <line:314:2, line:317:26> line:316:11 _Try_emplace
| |-TemplateTypeParmDecl 0x252ebfbf398 <line:314:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x252ebfbf418 <line:315:3, col:12> col:12 class depth 0 index 1 ... _Mappedty
| |-CXXMethodDecl 0x252ebfbf6f8 <line:316:3, line:317:26> line:316:11 _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&...)'
| | |-ParmVarDecl 0x252ebfbf4f8 <col:24, col:33> col:33 _Keyval '_Keyty &&'
| | `-ParmVarDecl 0x252ebfbf5e0 <line:317:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x252ec506d08 <line:316:3, line:327:3> line:316:11 used _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const alt::String &)'
|   |-TemplateArgument type 'const alt::String &'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x252ec506c48 <col:24, col:33> col:33 used _Keyval 'const alt::String &'
|   `-CompoundStmt 0x252ec579a50 <line:318:3, line:327:3>
|     |-DeclStmt 0x252ec507a98 <line:319:3, col:43>
|     | `-VarDecl 0x252ec5078d0 <col:3, col:42> col:12 used _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' cinit
|     |   `-CXXMemberCallExpr 0x252ec507a50 <col:21, col:42> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|     |     |-MemberExpr 0x252ec507a08 <col:21, col:30> '<bound member function type>' ->find 0x252ebf6e008
|     |     | `-ImplicitCastExpr 0x252ec507a78 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|     |     |   `-CXXThisExpr 0x252ec5079f8 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|     |     `-DeclRefExpr 0x252ec5079d8 <col:35> 'const alt::String' lvalue ParmVar 0x252ec506c48 '_Keyval' 'const alt::String &'
|     `-IfStmt 0x252ec579a28 <line:320:3, line:326:34> has_else
|       |-ExprWithCleanups 0x252ec509030 <line:320:7, col:30> 'bool'
|       | `-CXXOperatorCallExpr 0x252ec508ff8 <col:7, col:30> 'bool'
|       |   |-ImplicitCastExpr 0x252ec508fe0 <col:14> 'bool (*)(const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x252ec508fc0 <col:14> 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' lvalue CXXMethod 0x252ec3b9cd8 'operator==' 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const'
|       |   |-ImplicitCastExpr 0x252ec508fa0 <col:7> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <UncheckedDerivedToBase (_List_const_iterator)>
|       |   | `-DeclRefExpr 0x252ec507bf0 <col:7> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x252ec5078d0 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |   `-ImplicitCastExpr 0x252ec508f80 <col:17, col:30> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <DerivedToBase (_List_const_iterator)>
|       |     `-MaterializeTemporaryExpr 0x252ec508f68 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue
|       |       `-ImplicitCastExpr 0x252ec508f50 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' <NoOp>
|       |         `-CXXMemberCallExpr 0x252ec507d18 <col:17, col:30> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |           `-MemberExpr 0x252ec507cd0 <col:17, col:26> '<bound member function type>' ->end 0x252ebf68328
|       |             `-ImplicitCastExpr 0x252ec507d38 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |               `-CXXThisExpr 0x252ec507cc0 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |-ReturnStmt 0x252ec56bcf0 <line:321:4, line:324:64>
|       | `-ExprWithCleanups 0x252ec56bcd8 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |   `-ParenExpr 0x252ec56bcb8 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |     `-CXXMemberCallExpr 0x252ec56bc30 <line:321:12, line:324:63> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |       |-MemberExpr 0x252ec56bbe8 <line:321:12, col:21> '<bound member function type>' ->emplace 0x252ec56bac8
|       |       | `-ImplicitCastExpr 0x252ec56bc68 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |       |   `-CXXThisExpr 0x252ec56bbd8 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |       |-DeclRefExpr 0x252ec507390 <line:322:5> 'const std::piecewise_construct_t' lvalue Var 0x252eb12c680 'piecewise_construct' 'const std::piecewise_construct_t'
|       |       |-MaterializeTemporaryExpr 0x252ec56bc88 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>' xvalue
|       |       | `-CallExpr 0x252ec56b240 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>'
|       |       |   |-ImplicitCastExpr 0x252ec56b228 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (*)(const alt::String &) noexcept' <FunctionToPointerDecay>
|       |       |   | `-DeclRefExpr 0x252ec50a810 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (const alt::String &) noexcept' lvalue Function 0x252ec50a6d0 'forward_as_tuple' 'tuple<const alt::String &> (const alt::String &) noexcept' (FunctionTemplate 0x252eba98ec0 'forward_as_tuple')
|       |       |   `-CallExpr 0x252ec50a2c0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:55> 'const alt::String' lvalue
|       |       |     |-ImplicitCastExpr 0x252ec50a2a8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(*)(remove_reference_t<const alt::String &> &) noexcept' <FunctionToPointerDecay>
|       |       |     | `-DeclRefExpr 0x252ec50a128 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' lvalue Function 0x252ec509ca0 'forward' 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' (FunctionTemplate 0x252eaf30f40 'forward')
|       |       |     `-DeclRefExpr 0x252ec5091f8 <col:48> 'const alt::String' lvalue ParmVar 0x252ec506c48 '_Keyval' 'const alt::String &'
|       |       `-MaterializeTemporaryExpr 0x252ec56bca0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>' xvalue
|       |         `-CallExpr 0x252ec56b660 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>'
|       |           `-ImplicitCastExpr 0x252ec56b648 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> (*)() noexcept' <FunctionToPointerDecay>
|       |             `-DeclRefExpr 0x252ec56b4e0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> () noexcept' lvalue Function 0x252ec56b3a8 'forward_as_tuple' 'tuple<> () noexcept' (FunctionTemplate 0x252eba98ec0 'forward_as_tuple')
|       `-ReturnStmt 0x252ec579a18 <line:326:4, col:34>
|         `-ExprWithCleanups 0x252ec579a00 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           `-ParenExpr 0x252ec5799e0 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|             `-CXXTemporaryObjectExpr 0x252ec5799a0 <col:12, col:33> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' 'void (std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &, bool &&) noexcept(is_nothrow_constructible_v<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &> && is_nothrow_constructible_v<bool, bool>)'
|               |-DeclRefExpr 0x252ec56bd10 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x252ec5078d0 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-MaterializeTemporaryExpr 0x252ec577858 <col:28> 'bool' xvalue
|                 `-CXXBoolLiteralExpr 0x252ec507808 <col:28> 'bool' false
|-FunctionTemplateDecl 0x252ebfbfbe8 <line:329:2, line:331:26> line:330:11 try_emplace
| |-TemplateTypeParmDecl 0x252ebfbf880 <line:329:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| |-CXXMethodDecl 0x252ebfbfb48 <line:330:3, line:331:26> line:330:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
| | |-ParmVarDecl 0x252ebfbf948 <col:23, col:39> col:39 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| | `-ParmVarDecl 0x252ebfbfa30 <line:331:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x252ec506568 <line:330:3, line:334:3> line:330:11 used try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x252ec506478 <col:23, col:39> col:39 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-CompoundStmt 0x252ec506ed0 <line:332:3, line:334:3>
|     `-ReturnStmt 0x252ec506ec0 <line:333:3, col:69>
|       `-ParenExpr 0x252ec506ea0 <col:10, col:69> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-CXXMemberCallExpr 0x252ec506e78 <col:11, col:68> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           |-MemberExpr 0x252ec506e30 <col:11> '<bound member function type>' ->_Try_emplace 0x252ec506d08
|           | `-CXXThisExpr 0x252ec506e20 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|           `-DeclRefExpr 0x252ec506b68 <col:24> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x252ec506478 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-FunctionTemplateDecl 0x252ebfc0098 <line:336:2, line:338:26> line:337:12 try_emplace
| |-TemplateTypeParmDecl 0x252ebfbfcd0 <line:336:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x252ebfbfff8 <line:337:3, line:338:26> line:337:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
|   |-ParmVarDecl 0x252ebfbfd70 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x252ebfbfde8 <col:40, col:56> col:56 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x252ebfbfed0 <line:338:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x252ebfc04d8 <line:344:2, line:346:26> line:345:11 try_emplace
| |-TemplateTypeParmDecl 0x252ebfc0188 <line:344:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x252ebfc0438 <line:345:3, line:346:26> line:345:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x252ebfc0230 <col:23, col:34> col:34 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x252ebfc0320 <line:346:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x252ebfc0988 <line:352:2, line:354:26> line:353:12 try_emplace
| |-TemplateTypeParmDecl 0x252ebfc05c0 <line:352:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x252ebfc08e8 <line:353:3, line:354:26> line:353:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x252ebfc0660 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x252ebfc06d8 <col:40, col:51> col:51 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x252ebfc07c0 <line:354:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x252ebfc0e28 <line:360:2, line:363:23> line:362:11 _Insert_or_assign
| |-TemplateTypeParmDecl 0x252ebfc0a78 <line:360:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x252ebfc0af8 <line:361:3, col:9> col:9 class depth 0 index 1 _Mappedty
| `-CXXMethodDecl 0x252ebfc0d88 <line:362:3, line:363:23> line:362:11 _Insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&)'
|   |-ParmVarDecl 0x252ebfc0bd8 <col:29, col:38> col:38 _Keyval '_Keyty &&'
|   `-ParmVarDecl 0x252ebfc0c78 <line:363:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x252ebfc1208 <line:377:2, line:379:23> line:378:11 insert_or_assign
| |-TemplateTypeParmDecl 0x252ebfc0f10 <line:377:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x252ebfc1168 <line:378:3, line:379:23> line:378:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x252ebfc0fb0 <col:28, col:44> col:44 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x252ebfc1058 <line:379:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x252ebfc1668 <line:385:2, line:387:23> line:386:12 insert_or_assign
| |-TemplateTypeParmDecl 0x252ebfc12f0 <line:385:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x252ebfc15c8 <line:386:3, line:387:23> line:386:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x252ebfc1390 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x252ebfc1408 <col:45, col:61> col:61 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x252ebfc14a8 <line:387:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x252ebfc1a58 <line:393:2, line:395:23> line:394:11 insert_or_assign
| |-TemplateTypeParmDecl 0x252ebfc1758 <line:393:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x252ebfc19b8 <line:394:3, line:395:23> line:394:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x252ebfc1800 <col:28, col:39> col:39 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x252ebfc18a8 <line:395:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x252ebfc1eb8 <line:401:2, line:403:23> line:402:12 insert_or_assign
| |-TemplateTypeParmDecl 0x252ebfc1b40 <line:401:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x252ebfc1e18 <line:402:3, line:403:23> line:402:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x252ebfc1be0 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x252ebfc1c58 <col:45, col:56> col:56 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x252ebfc1cf8 <line:403:4, col:16> col:16 _Mapval '_Mappedty &&'
|-CXXConstructorDecl 0x252ebfc2118 <line:409:2, col:51> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x252ebfc2030 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXConstructorDecl 0x252ebfc23c8 <line:415:2, col:78> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfc2260 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x252ebfc22d8 <col:53, col:75> col:75 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfc26b8 <line:421:2, line:422:21> line:421:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| |-ParmVarDecl 0x252ebfc2510 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x252ebfc2588 <line:422:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x252ebfc2a38 <line:429:2, line:430:48> line:429:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfc2800 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x252ebfc2878 <line:430:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x252ebfc28f0 <col:23, col:45> col:45 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfc2dc8 <line:437:2, line:438:45> line:437:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x252ebfc2b90 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x252ebfc2c08 <line:438:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x252ebfc2c80 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x252ebfc31e8 <line:445:2, line:446:72> line:445:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfc2f20 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x252ebfc2f98 <line:446:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x252ebfc3010 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x252ebfc3088 <col:47, col:69> col:69 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x252ebfc3608 <line:453:2, line:455:27> line:453:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x252ebfc3340 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x252ebfc33b8 <line:454:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x252ebfc3430 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x252ebfc34a8 <line:455:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x252ebfc3ab8 <line:462:2, line:464:54> line:462:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x252ebfc3760 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x252ebfc37d8 <line:463:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x252ebfc3850 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x252ebfc38c8 <line:464:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x252ebfc3940 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x252ebfc3d18 <line:471:2, col:62> col:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x252ebfc3c20 <col:27, col:56> col:56 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXMethodDecl 0x252ebfc3e48 <line:478:13, col:36> col:20 hash_function 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher () const'
| `-WarnUnusedResultAttr 0x252ebfc3f28 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x252ebfc4008 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:483:13, col:32> col:23 key_eq 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_equal () const'
| `-WarnUnusedResultAttr 0x252ebfc40b8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x252ebfc41f8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:488:2, line:491:3> line:488:15 used operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x252ebfc4108 <col:26, col:42> col:42 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-CompoundStmt 0x252ec506888 <line:489:3, line:491:3>
|   `-ReturnStmt 0x252ec506878 <line:490:3, col:45>
|     `-ExprWithCleanups 0x252ec506860 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|       `-ParenExpr 0x252ec506840 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|         `-MemberExpr 0x252ec506810 <col:11, col:39> 'alt::MValue':'alt::MValue' lvalue ->second 0x252ec376978
|           `-CXXOperatorCallExpr 0x252ec5067e0 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|             |-ImplicitCastExpr 0x252ec5067c8 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer (*)() const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x252ec506748 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const' lvalue CXXMethod 0x252ec3c6968 'operator->' 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const'
|             `-ImplicitCastExpr 0x252ec506730 <col:11, col:32> 'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue <NoOp>
|               `-MemberExpr 0x252ec506700 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue .first 0x252ec47d070
|                 `-MaterializeTemporaryExpr 0x252ec5066e8 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' xvalue
|                   `-CXXMemberCallExpr 0x252ec5066c0 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|                     |-MemberExpr 0x252ec506678 <col:11> '<bound member function type>' ->try_emplace 0x252ec506568
|                     | `-CXXThisExpr 0x252ec506668 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|                     `-DeclRefExpr 0x252ec506430 <col:23> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x252ebfc4108 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-CXXMethodDecl 0x252ebfc4350 <line:493:13, col:52> col:26 at 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x252ebfc42c0 <col:29, col:45> col:45 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x252ebfc4408 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x252ebfc4578 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:501:13, col:60> col:32 at 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &) const'
| |-ParmVarDecl 0x252ebfc4488 <col:35, col:51> col:51 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x252ebfc4630 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-UsingDecl 0x252ebfc4690 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:509:2, col:17> col:17 _Mybase::_Unchecked_begin
|-UsingShadowDecl 0x252ebfc46e8 <col:17> col:17 implicit CXXMethod 0x252ebf68578 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x252ebfc4738 <col:17> col:17 implicit CXXMethod 0x252ebf68698 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
|-UsingDecl 0x252ebfc47a8 <line:510:2, col:17> col:17 _Mybase::_Unchecked_end
|-UsingShadowDecl 0x252ebfc4800 <col:17> col:17 implicit CXXMethod 0x252ebf68768 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x252ebfc4850 <col:17> col:17 implicit CXXMethod 0x252ebf68838 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
`-CXXDestructorDecl 0x252ebfc7448 <line:94:8> col:8 implicit used ~unordered_map 'void () noexcept' inline default
  `-CompoundStmt 0x252ebfc7540 <col:8>

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::TypeTag = alt::MValue::_TypeTag
ClassTemplateSpecializationDecl 0x252ebe858a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:52:3, line:72:3> line:53:10 struct _TypeTag definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument pack
| |-TemplateArgument type 'void'
| |-TemplateArgument type 'bool'
| |-TemplateArgument type 'long long'
| |-TemplateArgument type 'unsigned long long'
| |-TemplateArgument type 'double'
| |-TemplateArgument type 'alt::String'
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |-TemplateArgument type 'alt::IBaseObject *'
| `-TemplateArgument type 'alt::MValue::Function'
|-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
| |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
| |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
| `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
| |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
| `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
| |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
| |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
| |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
| |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
| |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
| |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
| |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
| |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
| |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
| |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
| |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
| |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
| `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument integral 9
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument pack
|   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
| |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
| |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
| |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'bool'
| | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'long long'
| | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'unsigned long long'
| | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'double'
| | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::String'
| | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::IBaseObject *'
| | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'bool'
| `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'long long'
| `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'unsigned long long'
| `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'double'
| `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::String'
| `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::IBaseObject *'
| `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
`-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
  |-TemplateArgument type 'alt::MValue::Function'
  `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
    `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_MValueList_Push
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_MValueList_Push
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_MValueList_Push
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IResource_MakeClient
TemplateSpecializationType 0x252ebfcbb60 'Array<class alt::String>' sugar Array
|-TemplateArgument type 'class alt::String'
`-RecordType 0x252ebfc89a0 'class alt::Array<class alt::String>'
  `-ClassTemplateSpecialization 0x252ebfc88b8 'Array'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IResource_MakeClient
RecordType 0x252ebfc89a0 'class alt::Array<class alt::String>'
`-ClassTemplateSpecialization 0x252ebfc88b8 'Array'

--- END OF NODE ---

Record param FROM FUNCTION alt_IResource_MakeClient
ClassTemplateSpecializationDecl 0x252ebfc88b8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::String'
|-CXXRecordDecl 0x252ebfc8ac8 prev 0x252ebfc88b8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x252ebfc8b58 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebfc8bc0 <line:13:3, col:19> col:3 constexpr Array 'void ()' default noexcept-unevaluated 0x252ebfc8bc0
|-FunctionTemplateDecl 0x252ebfc8f30 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x252ebfc8c78 <line:15:12, col:18> col:18 class depth 0 index 0 It
| `-CXXConstructorDecl 0x252ebfc8e88 <line:16:3, col:25> col:3 Array 'void (It, It)'
|   |-ParmVarDecl 0x252ebfc8d20 <col:9, col:12> col:12 begin 'It'
|   `-ParmVarDecl 0x252ebfc8d98 <col:19, col:22> col:22 end 'It'
|-CXXConstructorDecl 0x252ebfc9228 <line:31:3, col:35> col:3 Array 'void (const alt::String *, alt::Size)'
| |-ParmVarDecl 0x252ebfc9088 <col:9, col:18> col:18 _data 'const alt::String *'
| `-ParmVarDecl 0x252ebfc90f0 <col:25, col:30> col:30 _size 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x252ebfc94c8 <line:37:3, col:40> col:3 Array 'void (alt::Size, const alt::String &)'
| |-ParmVarDecl 0x252ebfc92f0 <col:9, col:14> col:14 _size 'alt::Size':'unsigned long long'
| `-ParmVarDecl 0x252ebfc9398 <col:21, col:39> col:30 fill 'const alt::String &'
|-CXXConstructorDecl 0x252ebfc96a8 <line:47:3, col:26> col:3 Array 'void (const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x252ebfc95c8 <col:9, col:22> col:22 that 'const alt::Array<alt::String> &'
|-CXXConstructorDecl 0x252ebfc9888 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x252ebfc97a8 <col:9, col:17> col:17 that 'alt::Array<alt::String> &&'
|-CXXDestructorDecl 0x252ebfc9970 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x252ec5a4020 <col:12, col:29>
|   `-CXXDeleteExpr 0x252ec5a4000 <col:14, col:23> 'void' array Function 0x252ea72c7f8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x252ec5a3fe8 <col:23> 'alt::String *' <LValueToRValue>
|       `-MemberExpr 0x252ec5a3fb8 <col:23> 'alt::String *' lvalue ->data 0x252ebfca878
|         `-CXXThisExpr 0x252ec5a3fa8 <col:23> 'alt::Array<alt::String> *' implicit this
|-CXXMethodDecl 0x252ebfc9b58 <line:62:3, col:37> col:10 operator= 'alt::Array<alt::String> &(const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x252ebfc9a98 <col:20, col:33> col:33 that 'const alt::Array<alt::String> &'
|-CXXMethodDecl 0x252ebfc9ce8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::String> &(alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x252ebfc9c20 <col:20, col:28> col:28 that 'alt::Array<alt::String> &&'
|-CXXMethodDecl 0x252ebfc9e78 <line:86:3, col:24> col:8 Push 'void (const alt::String &)'
| `-ParmVarDecl 0x252ebfc9db0 <col:13, col:22> col:22 el 'const alt::String &'
|-CXXMethodDecl 0x252ebfc9f30 <line:93:3, col:18> col:8 GetSize 'alt::Size () const'
|-CXXMethodDecl 0x252ebfc9fe0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x252ebfca1a8 <line:96:3, col:25> col:6 operator[] 'alt::String &(alt::Size)'
| `-ParmVarDecl 0x252ebfca0b8 <col:17, col:22> col:22 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebfca358 <line:97:3, col:33> col:12 operator[] 'const alt::String &(alt::Size) const'
| `-ParmVarDecl 0x252ebfca260 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebfca4b8 <line:99:3, col:12> col:6 begin 'alt::String *()'
|-CXXMethodDecl 0x252ebfca5e8 <line:100:3, col:20> col:12 begin 'const alt::String *() const'
|-CXXMethodDecl 0x252ebfca6b8 <line:101:3, col:10> col:6 end 'alt::String *()'
|-CXXMethodDecl 0x252ebfca788 <line:102:3, col:18> col:12 end 'const alt::String *() const'
|-AccessSpecDecl 0x252ebfca838 <line:104:2, col:9> col:2 private
|-FieldDecl 0x252ebfca878 <line:105:3, col:6> col:6 referenced data 'alt::String *'
|-FieldDecl 0x252ebfca8d0 <line:106:3, col:8> col:8 size 'alt::Size':'unsigned long long'
|-FieldDecl 0x252ebfca928 <line:107:3, col:8> col:8 capacity 'alt::Size':'unsigned long long'
`-CXXMethodDecl 0x252ebfcaa10 <line:109:3, col:26> col:8 Realloc 'void (alt::Size)'
  `-ParmVarDecl 0x252ebfca980 <col:16, col:21> col:21 least 'alt::Size':'unsigned long long'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IResource_MakeClient
ClassTemplateSpecializationDecl 0x252ebfc88b8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::String'
|-CXXRecordDecl 0x252ebfc8ac8 prev 0x252ebfc88b8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x252ebfc8b58 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebfc8bc0 <line:13:3, col:19> col:3 constexpr Array 'void ()' default noexcept-unevaluated 0x252ebfc8bc0
|-FunctionTemplateDecl 0x252ebfc8f30 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x252ebfc8c78 <line:15:12, col:18> col:18 class depth 0 index 0 It
| `-CXXConstructorDecl 0x252ebfc8e88 <line:16:3, col:25> col:3 Array 'void (It, It)'
|   |-ParmVarDecl 0x252ebfc8d20 <col:9, col:12> col:12 begin 'It'
|   `-ParmVarDecl 0x252ebfc8d98 <col:19, col:22> col:22 end 'It'
|-CXXConstructorDecl 0x252ebfc9228 <line:31:3, col:35> col:3 Array 'void (const alt::String *, alt::Size)'
| |-ParmVarDecl 0x252ebfc9088 <col:9, col:18> col:18 _data 'const alt::String *'
| `-ParmVarDecl 0x252ebfc90f0 <col:25, col:30> col:30 _size 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x252ebfc94c8 <line:37:3, col:40> col:3 Array 'void (alt::Size, const alt::String &)'
| |-ParmVarDecl 0x252ebfc92f0 <col:9, col:14> col:14 _size 'alt::Size':'unsigned long long'
| `-ParmVarDecl 0x252ebfc9398 <col:21, col:39> col:30 fill 'const alt::String &'
|-CXXConstructorDecl 0x252ebfc96a8 <line:47:3, col:26> col:3 Array 'void (const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x252ebfc95c8 <col:9, col:22> col:22 that 'const alt::Array<alt::String> &'
|-CXXConstructorDecl 0x252ebfc9888 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x252ebfc97a8 <col:9, col:17> col:17 that 'alt::Array<alt::String> &&'
|-CXXDestructorDecl 0x252ebfc9970 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x252ec5a4020 <col:12, col:29>
|   `-CXXDeleteExpr 0x252ec5a4000 <col:14, col:23> 'void' array Function 0x252ea72c7f8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x252ec5a3fe8 <col:23> 'alt::String *' <LValueToRValue>
|       `-MemberExpr 0x252ec5a3fb8 <col:23> 'alt::String *' lvalue ->data 0x252ebfca878
|         `-CXXThisExpr 0x252ec5a3fa8 <col:23> 'alt::Array<alt::String> *' implicit this
|-CXXMethodDecl 0x252ebfc9b58 <line:62:3, col:37> col:10 operator= 'alt::Array<alt::String> &(const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x252ebfc9a98 <col:20, col:33> col:33 that 'const alt::Array<alt::String> &'
|-CXXMethodDecl 0x252ebfc9ce8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::String> &(alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x252ebfc9c20 <col:20, col:28> col:28 that 'alt::Array<alt::String> &&'
|-CXXMethodDecl 0x252ebfc9e78 <line:86:3, col:24> col:8 Push 'void (const alt::String &)'
| `-ParmVarDecl 0x252ebfc9db0 <col:13, col:22> col:22 el 'const alt::String &'
|-CXXMethodDecl 0x252ebfc9f30 <line:93:3, col:18> col:8 GetSize 'alt::Size () const'
|-CXXMethodDecl 0x252ebfc9fe0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x252ebfca1a8 <line:96:3, col:25> col:6 operator[] 'alt::String &(alt::Size)'
| `-ParmVarDecl 0x252ebfca0b8 <col:17, col:22> col:22 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebfca358 <line:97:3, col:33> col:12 operator[] 'const alt::String &(alt::Size) const'
| `-ParmVarDecl 0x252ebfca260 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebfca4b8 <line:99:3, col:12> col:6 begin 'alt::String *()'
|-CXXMethodDecl 0x252ebfca5e8 <line:100:3, col:20> col:12 begin 'const alt::String *() const'
|-CXXMethodDecl 0x252ebfca6b8 <line:101:3, col:10> col:6 end 'alt::String *()'
|-CXXMethodDecl 0x252ebfca788 <line:102:3, col:18> col:12 end 'const alt::String *() const'
|-AccessSpecDecl 0x252ebfca838 <line:104:2, col:9> col:2 private
|-FieldDecl 0x252ebfca878 <line:105:3, col:6> col:6 referenced data 'alt::String *'
|-FieldDecl 0x252ebfca8d0 <line:106:3, col:8> col:8 size 'alt::Size':'unsigned long long'
|-FieldDecl 0x252ebfca928 <line:107:3, col:8> col:8 capacity 'alt::Size':'unsigned long long'
`-CXXMethodDecl 0x252ebfcaa10 <line:109:3, col:26> col:8 Realloc 'void (alt::Size)'
  `-ParmVarDecl 0x252ebfca980 <col:16, col:21> col:21 least 'alt::Size':'unsigned long long'

--- END OF NODE ---

ClassTemplateSpecialization DEF param FROM FUNCTION alt_IResource_MakeClient
ClassTemplateSpecializationDecl 0x252ebfc88b8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::String'
|-CXXRecordDecl 0x252ebfc8ac8 prev 0x252ebfc88b8 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x252ebfc8b58 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebfc8bc0 <line:13:3, col:19> col:3 constexpr Array 'void ()' default noexcept-unevaluated 0x252ebfc8bc0
|-FunctionTemplateDecl 0x252ebfc8f30 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x252ebfc8c78 <line:15:12, col:18> col:18 class depth 0 index 0 It
| `-CXXConstructorDecl 0x252ebfc8e88 <line:16:3, col:25> col:3 Array 'void (It, It)'
|   |-ParmVarDecl 0x252ebfc8d20 <col:9, col:12> col:12 begin 'It'
|   `-ParmVarDecl 0x252ebfc8d98 <col:19, col:22> col:22 end 'It'
|-CXXConstructorDecl 0x252ebfc9228 <line:31:3, col:35> col:3 Array 'void (const alt::String *, alt::Size)'
| |-ParmVarDecl 0x252ebfc9088 <col:9, col:18> col:18 _data 'const alt::String *'
| `-ParmVarDecl 0x252ebfc90f0 <col:25, col:30> col:30 _size 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x252ebfc94c8 <line:37:3, col:40> col:3 Array 'void (alt::Size, const alt::String &)'
| |-ParmVarDecl 0x252ebfc92f0 <col:9, col:14> col:14 _size 'alt::Size':'unsigned long long'
| `-ParmVarDecl 0x252ebfc9398 <col:21, col:39> col:30 fill 'const alt::String &'
|-CXXConstructorDecl 0x252ebfc96a8 <line:47:3, col:26> col:3 Array 'void (const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x252ebfc95c8 <col:9, col:22> col:22 that 'const alt::Array<alt::String> &'
|-CXXConstructorDecl 0x252ebfc9888 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x252ebfc97a8 <col:9, col:17> col:17 that 'alt::Array<alt::String> &&'
|-CXXDestructorDecl 0x252ebfc9970 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x252ec5a4020 <col:12, col:29>
|   `-CXXDeleteExpr 0x252ec5a4000 <col:14, col:23> 'void' array Function 0x252ea72c7f8 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x252ec5a3fe8 <col:23> 'alt::String *' <LValueToRValue>
|       `-MemberExpr 0x252ec5a3fb8 <col:23> 'alt::String *' lvalue ->data 0x252ebfca878
|         `-CXXThisExpr 0x252ec5a3fa8 <col:23> 'alt::Array<alt::String> *' implicit this
|-CXXMethodDecl 0x252ebfc9b58 <line:62:3, col:37> col:10 operator= 'alt::Array<alt::String> &(const alt::Array<alt::String> &)'
| `-ParmVarDecl 0x252ebfc9a98 <col:20, col:33> col:33 that 'const alt::Array<alt::String> &'
|-CXXMethodDecl 0x252ebfc9ce8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::String> &(alt::Array<alt::String> &&)'
| `-ParmVarDecl 0x252ebfc9c20 <col:20, col:28> col:28 that 'alt::Array<alt::String> &&'
|-CXXMethodDecl 0x252ebfc9e78 <line:86:3, col:24> col:8 Push 'void (const alt::String &)'
| `-ParmVarDecl 0x252ebfc9db0 <col:13, col:22> col:22 el 'const alt::String &'
|-CXXMethodDecl 0x252ebfc9f30 <line:93:3, col:18> col:8 GetSize 'alt::Size () const'
|-CXXMethodDecl 0x252ebfc9fe0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x252ebfca1a8 <line:96:3, col:25> col:6 operator[] 'alt::String &(alt::Size)'
| `-ParmVarDecl 0x252ebfca0b8 <col:17, col:22> col:22 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebfca358 <line:97:3, col:33> col:12 operator[] 'const alt::String &(alt::Size) const'
| `-ParmVarDecl 0x252ebfca260 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebfca4b8 <line:99:3, col:12> col:6 begin 'alt::String *()'
|-CXXMethodDecl 0x252ebfca5e8 <line:100:3, col:20> col:12 begin 'const alt::String *() const'
|-CXXMethodDecl 0x252ebfca6b8 <line:101:3, col:10> col:6 end 'alt::String *()'
|-CXXMethodDecl 0x252ebfca788 <line:102:3, col:18> col:12 end 'const alt::String *() const'
|-AccessSpecDecl 0x252ebfca838 <line:104:2, col:9> col:2 private
|-FieldDecl 0x252ebfca878 <line:105:3, col:6> col:6 referenced data 'alt::String *'
|-FieldDecl 0x252ebfca8d0 <line:106:3, col:8> col:8 size 'alt::Size':'unsigned long long'
|-FieldDecl 0x252ebfca928 <line:107:3, col:8> col:8 capacity 'alt::Size':'unsigned long long'
`-CXXMethodDecl 0x252ebfcaa10 <line:109:3, col:26> col:8 Realloc 'void (alt::Size)'
  `-ParmVarDecl 0x252ebfca980 <col:16, col:21> col:21 least 'alt::Size':'unsigned long long'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_MValueFunction_Invoker_Invoke
RecordType 0x252ebef5d80 'class alt::MValueList'
`-CXXRecord 0x252ebef5ce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_MValueFunction_Invoker_Invoke
RecordType 0x252ebef5d80 'class alt::MValueList'
`-CXXRecord 0x252ebef5ce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_MValueFunction_Invoker_Invoke
CXXRecordDecl 0x252ebef5ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x252ebef5e48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x252ebef5ed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebef5f70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x252ebfc4d18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x252ebfc4ce8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x252ebfc4cd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x252ebfc4cb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x252ebef9398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x252ebef9390)
| |           `-CXXTemporaryObjectExpr 0x252ebef9360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x252ebfc4d60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x252ebef60b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x252ebef6028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x252ebfc5018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x252ebfc4fe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x252ebfc4fd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x252ebfc4fb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x252ebfc4f30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x252ebfc4f10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x252ebfc4f08)
| |             `-CXXConstructExpr 0x252ebfc4ed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x252ebfc4de8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x252ebfc4dc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef6028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x252ebfc4eb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x252ebfc5060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x252ebef62f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x252ebef6230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ebfc50f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x252ebfc5070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef6230 'list' 'const MValue::List &'
| `-CompoundStmt 0x252ebfc5150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x252ebef6478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x252ebef63b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ebfc5160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x252ebfc5768 <line:29:3, line:34:3>
|   |-IfStmt 0x252ebfc55f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x252ebfc52b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x252ebfc5218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x252ebfc51e8 <col:8, col:12> '<bound member function type>' .GetType 0x252ebe88ec8
|   | | |   `-ImplicitCastExpr 0x252ebfc5238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x252ebfc51c8 <col:8> 'alt::MValue' lvalue ParmVar 0x252ebef63b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x252ebfc5288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x252ebe80770 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x252ebfc55e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x252ebfc55c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x252ebfc5498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ebfc5490)
|   |       `-CXXTemporaryObjectExpr 0x252ebfc5460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x252ebfc5730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x252ebfc5718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x252ebfc56c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x252ebfc5678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x252ebfc5650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x252ebfc5630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x252ebfc5610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x252ebfc56b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x252ebfc5690 <col:21> 'alt::MValue' lvalue ParmVar 0x252ebef63b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x252ebef6578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x252ebfc5c20 <col:18, col:50>
|   `-ReturnStmt 0x252ebfc5c10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x252ebfc5ba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x252ebfc5b78 <col:27, col:39> '<bound member function type>' .GetSize 0x252ebef85f0
|         `-ImplicitCastExpr 0x252ebfc5bf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x252ebfc5b38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x252ebfc5ab0 <col:27, col:35> '<bound member function type>' ->Get 0x252ebfc59a8
|               `-ImplicitCastExpr 0x252ebfc5b58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x252ebfc5aa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x252ebef6718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x252ebef6628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebfc5f68 <col:32, col:59>
|   `-ReturnStmt 0x252ebfc5f58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x252ebfc5f20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x252ebfc5f08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x252ebfc5e90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x252ebef8838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x252ebfc5e18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x252ebfc5d90 <col:41, col:49> '<bound member function type>' ->Get 0x252ebfc59a8
|       |   `-ImplicitCastExpr 0x252ebfc5e38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x252ebfc5d80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x252ebfc5e78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252ebfc5e58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef6628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x252ebef6938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x252ebfc61f8 <col:32, col:54>
|   `-ReturnStmt 0x252ebfc61e8 <col:34, col:51>
|     `-CXXConstructExpr 0x252ebfc61b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x252ebfc61a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x252ebfc6160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x252ebfc60d8 <col:41, col:49> '<bound member function type>' ->Get 0x252ebfc59a8
|             `-ImplicitCastExpr 0x252ebfc6180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x252ebfc60c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x252ebef6a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x252ebef69f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x252ebfc64d0 <col:25, col:57>
|   `-ReturnStmt 0x252ebfc64c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x252ebfc6480 <col:34, col:54> 'void'
|       |-MemberExpr 0x252ebfc6430 <col:34, col:46> '<bound member function type>' .Push 0x252ebef8538
|       | `-CXXMemberCallExpr 0x252ebfc63f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x252ebfc6368 <col:34, col:42> '<bound member function type>' ->Get 0x252ebfc59a8
|       |     `-ImplicitCastExpr 0x252ebfc6410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x252ebfc6358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x252ebfc64a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x252ebfc6460 <col:51> 'alt::MValue' lvalue ParmVar 0x252ebef69f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x252ebef6b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x252ebef6c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ec05fac8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x252ec05fa78 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x252ec05fa58 <col:8> 'const alt::MValueList' lvalue ParmVar 0x252ebef6c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x252ec05fb38 <col:8>
|-CXXConstructorDecl 0x252ebef6d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x252ebef6d08
| `-ParmVarDecl 0x252ebef6e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x252ebef6eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x252ebef6eb8
| `-ParmVarDecl 0x252ebef6fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x252ebef7050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x252ec05f720 <col:8>
`-CXXMethodDecl 0x252ec05f328 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x252ec05f328
  `-ParmVarDecl 0x252ec05f438 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_GetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_GetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_GetMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_SetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_SetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_SetMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBaseObject_SetMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBaseObject_SetMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBaseObject_SetMetaData
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_GetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_GetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_GetMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetMetaData
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IWorldObject_SetPosition
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IWorldObject_SetPosition
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IWorldObject_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IWorldObject_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetPosition
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetPosition
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IEntity_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetRotation
TypedefType 0x252ebfd2a90 'alt::Rotation' sugar
|-TypeAlias 0x252eb991f00 'Rotation'
`-TemplateSpecializationType 0x252eb991dd0 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x252eb991c78 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x252eb991c60 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x252eb991c28 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetRotation
RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetRotation
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IEntity_SetRotation
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_GetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_GetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_GetSyncedMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetSyncedMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IEntity_SetSyncedMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IEntity_SetSyncedMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IEntity_SetSyncedMetaData
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetRotation
TypedefType 0x252ebfd2a90 'alt::Rotation' sugar
|-TypeAlias 0x252eb991f00 'Rotation'
`-TemplateSpecializationType 0x252eb991dd0 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x252eb991c78 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x252eb991c60 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x252eb991c28 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetRotation
RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetRotation
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IPlayer_SetRotation
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_GetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_GetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_GetSyncedMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetSyncedMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetSyncedMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetSyncedMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetSyncedMetaData
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_Spawn
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_Spawn
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_Spawn
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IPlayer_Spawn
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_SetName
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_SetName
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_SetName
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPlayer_Kick
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPlayer_Kick
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPlayer_Kick
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetRotation
TypedefType 0x252ebfd2a90 'alt::Rotation' sugar
|-TypeAlias 0x252eb991f00 'Rotation'
`-TemplateSpecializationType 0x252eb991dd0 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x252eb991c78 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x252eb991c60 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x252eb991c28 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetRotation
RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetRotation
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IVehicle_SetRotation
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_GetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_GetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_GetSyncedMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSyncedMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSyncedMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSyncedMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSyncedMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSyncedMetaData
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetPrimaryColorRGB
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetPrimaryColorRGB
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetPrimaryColorRGB
CXXRecordDecl 0x252ebc6bff8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x252ebc6c118 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x252ebc6c1e0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cbc8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cba0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c248 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc08 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cbe0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c2b0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc48 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc20 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c318 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc88 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc60 <col:15> 'int' 0
|-CXXConstructorDecl 0x252ebc6c3d0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x252ebc6c3d0
|-CXXConstructorDecl 0x252ebc6c738 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x252ebc6c488 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c500 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c578 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c5f0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c1e0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cce0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cca0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c488 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c248 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cd60 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cd20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c500 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c2b0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cde0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cda0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c578 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c318 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6ce60 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6ce20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c5f0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x252ebc6cec0 <line:22:3, line:24:3>
`-FriendDecl 0x252ebc6cb10 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x252ebc6ca50 parent 0x252ebc6bf88 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x252ebc6c888 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x252ebc6c928 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x252ebc78b48 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x252ebc78ae0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x252ebc78ac8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x252ebc78aa8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x252ebc77a48 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x252ebc77a30 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x252ebc77a10 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x252ebc76820 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x252ebc76808 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x252ebc767e8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x252ebc75788 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x252ebc75770 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x252ebc75750 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x252ebc74560 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x252ebc74548 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x252ebc74528 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x252ebc734c8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x252ebc734b0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x252ebc73490 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x252ebc722a0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x252ebc72288 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x252ebc72268 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x252ebc71210 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x252ebc711f8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x252ebc711b0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x252ebc6ef70 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x252ebc6ef58 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x252ebc6ef38 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x252ebc6ced0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x252ebc6ef20 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x252ebc6cef0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x252ebc6f040 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x252ebc6f028 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x252ebc6f010 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x252ebc6efc8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x252ebc6c1e0
      | | | | | | | |         `-DeclRefExpr 0x252ebc6efa8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x252ebc72250 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x252ebc71248 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x252ebc72370 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x252ebc72358 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x252ebc72340 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x252ebc722f8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x252ebc6c248
      | | | | | |         `-DeclRefExpr 0x252ebc722d8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x252ebc74510 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x252ebc73500 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x252ebc74630 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x252ebc74618 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x252ebc74600 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x252ebc745b8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x252ebc6c2b0
      | | | |         `-DeclRefExpr 0x252ebc74598 <col:77> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x252ebc767d0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x252ebc757c0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x252ebc768f0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x252ebc768d8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x252ebc768c0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x252ebc76878 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x252ebc6c318
      | |         `-DeclRefExpr 0x252ebc76858 <col:100> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x252ebc78a90 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x252ebc77a80 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x252ebc78b38 <line:29:4, col:11>
        `-DeclRefExpr 0x252ebc78b18 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetSecondaryColorRGB
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetSecondaryColorRGB
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetSecondaryColorRGB
CXXRecordDecl 0x252ebc6bff8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x252ebc6c118 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x252ebc6c1e0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cbc8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cba0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c248 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc08 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cbe0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c2b0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc48 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc20 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c318 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc88 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc60 <col:15> 'int' 0
|-CXXConstructorDecl 0x252ebc6c3d0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x252ebc6c3d0
|-CXXConstructorDecl 0x252ebc6c738 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x252ebc6c488 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c500 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c578 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c5f0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c1e0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cce0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cca0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c488 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c248 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cd60 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cd20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c500 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c2b0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cde0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cda0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c578 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c318 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6ce60 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6ce20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c5f0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x252ebc6cec0 <line:22:3, line:24:3>
`-FriendDecl 0x252ebc6cb10 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x252ebc6ca50 parent 0x252ebc6bf88 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x252ebc6c888 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x252ebc6c928 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x252ebc78b48 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x252ebc78ae0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x252ebc78ac8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x252ebc78aa8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x252ebc77a48 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x252ebc77a30 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x252ebc77a10 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x252ebc76820 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x252ebc76808 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x252ebc767e8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x252ebc75788 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x252ebc75770 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x252ebc75750 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x252ebc74560 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x252ebc74548 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x252ebc74528 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x252ebc734c8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x252ebc734b0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x252ebc73490 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x252ebc722a0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x252ebc72288 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x252ebc72268 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x252ebc71210 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x252ebc711f8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x252ebc711b0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x252ebc6ef70 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x252ebc6ef58 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x252ebc6ef38 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x252ebc6ced0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x252ebc6ef20 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x252ebc6cef0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x252ebc6f040 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x252ebc6f028 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x252ebc6f010 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x252ebc6efc8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x252ebc6c1e0
      | | | | | | | |         `-DeclRefExpr 0x252ebc6efa8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x252ebc72250 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x252ebc71248 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x252ebc72370 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x252ebc72358 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x252ebc72340 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x252ebc722f8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x252ebc6c248
      | | | | | |         `-DeclRefExpr 0x252ebc722d8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x252ebc74510 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x252ebc73500 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x252ebc74630 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x252ebc74618 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x252ebc74600 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x252ebc745b8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x252ebc6c2b0
      | | | |         `-DeclRefExpr 0x252ebc74598 <col:77> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x252ebc767d0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x252ebc757c0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x252ebc768f0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x252ebc768d8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x252ebc768c0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x252ebc76878 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x252ebc6c318
      | |         `-DeclRefExpr 0x252ebc76858 <col:100> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x252ebc78a90 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x252ebc77a80 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x252ebc78b38 <line:29:4, col:11>
        `-DeclRefExpr 0x252ebc78b18 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetTireSmokeColor
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetTireSmokeColor
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetTireSmokeColor
CXXRecordDecl 0x252ebc6bff8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x252ebc6c118 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x252ebc6c1e0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cbc8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cba0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c248 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc08 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cbe0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c2b0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc48 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc20 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c318 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc88 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc60 <col:15> 'int' 0
|-CXXConstructorDecl 0x252ebc6c3d0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x252ebc6c3d0
|-CXXConstructorDecl 0x252ebc6c738 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x252ebc6c488 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c500 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c578 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c5f0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c1e0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cce0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cca0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c488 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c248 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cd60 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cd20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c500 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c2b0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cde0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cda0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c578 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c318 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6ce60 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6ce20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c5f0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x252ebc6cec0 <line:22:3, line:24:3>
`-FriendDecl 0x252ebc6cb10 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x252ebc6ca50 parent 0x252ebc6bf88 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x252ebc6c888 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x252ebc6c928 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x252ebc78b48 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x252ebc78ae0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x252ebc78ac8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x252ebc78aa8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x252ebc77a48 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x252ebc77a30 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x252ebc77a10 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x252ebc76820 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x252ebc76808 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x252ebc767e8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x252ebc75788 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x252ebc75770 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x252ebc75750 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x252ebc74560 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x252ebc74548 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x252ebc74528 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x252ebc734c8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x252ebc734b0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x252ebc73490 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x252ebc722a0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x252ebc72288 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x252ebc72268 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x252ebc71210 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x252ebc711f8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x252ebc711b0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x252ebc6ef70 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x252ebc6ef58 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x252ebc6ef38 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x252ebc6ced0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x252ebc6ef20 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x252ebc6cef0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x252ebc6f040 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x252ebc6f028 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x252ebc6f010 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x252ebc6efc8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x252ebc6c1e0
      | | | | | | | |         `-DeclRefExpr 0x252ebc6efa8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x252ebc72250 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x252ebc71248 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x252ebc72370 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x252ebc72358 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x252ebc72340 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x252ebc722f8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x252ebc6c248
      | | | | | |         `-DeclRefExpr 0x252ebc722d8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x252ebc74510 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x252ebc73500 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x252ebc74630 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x252ebc74618 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x252ebc74600 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x252ebc745b8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x252ebc6c2b0
      | | | |         `-DeclRefExpr 0x252ebc74598 <col:77> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x252ebc767d0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x252ebc757c0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x252ebc768f0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x252ebc768d8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x252ebc768c0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x252ebc76878 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x252ebc6c318
      | |         `-DeclRefExpr 0x252ebc76858 <col:100> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x252ebc78a90 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x252ebc77a80 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x252ebc78b38 <line:29:4, col:11>
        `-DeclRefExpr 0x252ebc78b18 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetNumberplateText
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetNumberplateText
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetNumberplateText
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_SetNeonColor
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_SetNeonColor
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_SetNeonColor
CXXRecordDecl 0x252ebc6bff8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x252ebc6c118 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x252ebc6c1e0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cbc8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cba0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c248 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc08 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cbe0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c2b0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc48 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc20 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c318 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc88 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc60 <col:15> 'int' 0
|-CXXConstructorDecl 0x252ebc6c3d0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x252ebc6c3d0
|-CXXConstructorDecl 0x252ebc6c738 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x252ebc6c488 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c500 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c578 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c5f0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c1e0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cce0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cca0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c488 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c248 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cd60 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cd20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c500 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c2b0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cde0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cda0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c578 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c318 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6ce60 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6ce20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c5f0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x252ebc6cec0 <line:22:3, line:24:3>
`-FriendDecl 0x252ebc6cb10 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x252ebc6ca50 parent 0x252ebc6bf88 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x252ebc6c888 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x252ebc6c928 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x252ebc78b48 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x252ebc78ae0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x252ebc78ac8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x252ebc78aa8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x252ebc77a48 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x252ebc77a30 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x252ebc77a10 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x252ebc76820 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x252ebc76808 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x252ebc767e8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x252ebc75788 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x252ebc75770 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x252ebc75750 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x252ebc74560 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x252ebc74548 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x252ebc74528 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x252ebc734c8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x252ebc734b0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x252ebc73490 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x252ebc722a0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x252ebc72288 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x252ebc72268 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x252ebc71210 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x252ebc711f8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x252ebc711b0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x252ebc6ef70 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x252ebc6ef58 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x252ebc6ef38 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x252ebc6ced0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x252ebc6ef20 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x252ebc6cef0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x252ebc6f040 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x252ebc6f028 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x252ebc6f010 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x252ebc6efc8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x252ebc6c1e0
      | | | | | | | |         `-DeclRefExpr 0x252ebc6efa8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x252ebc72250 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x252ebc71248 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x252ebc72370 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x252ebc72358 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x252ebc72340 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x252ebc722f8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x252ebc6c248
      | | | | | |         `-DeclRefExpr 0x252ebc722d8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x252ebc74510 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x252ebc73500 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x252ebc74630 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x252ebc74618 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x252ebc74600 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x252ebc745b8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x252ebc6c2b0
      | | | |         `-DeclRefExpr 0x252ebc74598 <col:77> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x252ebc767d0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x252ebc757c0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x252ebc768f0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x252ebc768d8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x252ebc768c0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x252ebc76878 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x252ebc6c318
      | |         `-DeclRefExpr 0x252ebc76858 <col:100> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x252ebc78a90 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x252ebc77a80 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x252ebc78b38 <line:29:4, col:11>
        `-DeclRefExpr 0x252ebc78b18 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadAppearanceDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadAppearanceDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadAppearanceDataFromBase64
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadGameStateFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadGameStateFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadGameStateFromBase64
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadHealthDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadHealthDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadHealthDataFromBase64
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadDamageDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadDamageDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadDamageDataFromBase64
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVehicle_LoadScriptDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVehicle_LoadScriptDataFromBase64
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVehicle_LoadScriptDataFromBase64
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_ICheckpoint_SetPosition
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_ICheckpoint_SetPosition
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_ICheckpoint_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_ICheckpoint_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IBlip_SetPosition
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IBlip_SetPosition
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IBlip_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IBlip_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_GetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_GetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_GetMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_SetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_SetMetaData
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_SetMetaData
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IVoiceChannel_SetMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IVoiceChannel_SetMetaData
RecordType 0x252ebe80340 'class alt::MValue'
`-CXXRecord 0x252ebe802b0 'MValue'

--- END OF NODE ---

Record param FROM FUNCTION alt_IVoiceChannel_SetMetaData
CXXRecordDecl 0x252ebe802b0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:14:2, line:226:2> line:14:8 referenced class MValue definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x252ebe803c8 <col:2, col:8> col:8 implicit referenced class MValue
|-AccessSpecDecl 0x252ebe80458 <line:16:2, col:8> col:2 public
|-EnumDecl 0x252ebe80498 <line:17:3, line:29:3> line:17:14 referenced class Type 'uint8_t':'unsigned char'
| |-EnumConstantDecl 0x252ebe80560 <line:19:4> col:4 referenced NIL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe805b8 <line:20:4> col:4 referenced BOOL 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80610 <line:21:4> col:4 referenced INT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80668 <line:22:4> col:4 referenced UINT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe806c0 <line:23:4> col:4 referenced DOUBLE 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80718 <line:24:4> col:4 referenced STRING 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80770 <line:25:4> col:4 referenced LIST 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe807c8 <line:26:4> col:4 referenced DICT 'alt::MValue::Type'
| |-EnumConstantDecl 0x252ebe80820 <line:27:4> col:4 ENTITY 'alt::MValue::Type'
| `-EnumConstantDecl 0x252ebe80878 <line:28:4> col:4 referenced FUNCTION 'alt::MValue::Type'
|-TypeAliasDecl 0x252ebe808e0 <line:31:3, col:15> col:9 referenced Nil 'void'
| `-BuiltinType 0x252ea4ee070 'void'
|-TypeAliasDecl 0x252ebe80950 <line:32:3, col:16> col:9 referenced Bool 'bool'
| `-BuiltinType 0x252ea4ee090 'bool'
|-TypeAliasDecl 0x252ebe809e0 <line:33:3, col:15> col:9 referenced Int 'int64_t':'long long'
| `-TypedefType 0x252ebe809b0 'int64_t' sugar
|   |-Typedef 0x252eafec8a0 'int64_t'
|   `-BuiltinType 0x252ea4ee150 'long long'
|-TypeAliasDecl 0x252ebe80a50 <line:34:3, col:16> col:9 referenced UInt 'uint64_t':'unsigned long long'
| `-TypedefType 0x252eb9dea00 'uint64_t' sugar
|   |-Typedef 0x252eafeca60 'uint64_t'
|   `-BuiltinType 0x252ea4ee1f0 'unsigned long long'
|-TypeAliasDecl 0x252ebe80ac8 <line:35:3, col:18> col:9 referenced Double 'double'
| `-BuiltinType 0x252ea4ee230 'double'
|-TypeAliasDecl 0x252ebe80bc0 <line:36:3, col:23> col:9 referenced String 'alt::String':'alt::String'
| `-ElaboratedType 0x252ebe80b50 'alt::String' sugar
|   `-RecordType 0x252ebc44830 'alt::String'
|     `-CXXRecord 0x252ebc44798 'String'
|-TypeAliasDecl 0x252ebe80e58 <line:37:3, col:33> col:9 referenced List 'alt::Array<MValue>':'alt::Array<alt::MValue>'
| `-ElaboratedType 0x252ebe80da0 'alt::Array<MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe80d60 'Array<alt::MValue>' sugar Array
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe80d40 'alt::Array<alt::MValue>'
|       `-ClassTemplateSpecialization 0x252ebe80c58 'Array'
|-TypeAliasDecl 0x252ebe817b8 <line:38:3, col:49> col:9 referenced Dict 'std::unordered_map<String, MValue>':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ElaboratedType 0x252ebe816a0 'std::unordered_map<String, MValue>' sugar
|   `-TemplateSpecializationType 0x252ebe81640 'unordered_map<alt::MValue::String, alt::MValue>' sugar unordered_map
|     |-TemplateArgument type 'alt::MValue::String':'alt::String'
|     |-TemplateArgument type 'alt::MValue'
|     `-RecordType 0x252ebe81620 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|       `-ClassTemplateSpecialization 0x252ebe814e0 'unordered_map'
|-TypeAliasDecl 0x252ebe81900 <line:39:3, col:34> col:9 referenced Entity 'alt::IBaseObject *'
| `-PointerType 0x252ebe818b0 'alt::IBaseObject *'
|   `-ElaboratedType 0x252ebe81830 'alt::IBaseObject' sugar
|     `-RecordType 0x252ebe801e0 'alt::IBaseObject'
|       `-CXXRecord 0x252ebfd0948 'IBaseObject'
|-CXXRecordDecl 0x252ebe81960 <line:40:3, col:36> col:10 referenced struct Function definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x252ebe81a78 <col:3, col:10> col:10 implicit struct Function
| |-FieldDecl 0x252ebe81b20 <col:21, col:27> col:27 referenced invoker 'void *'
| |-CXXConstructorDecl 0x252ebfc48d0 <col:10> col:10 implicit used Function 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x252ec4e63e0 <col:10>
| |-CXXConstructorDecl 0x252ebfc49b0 <col:10> col:10 implicit constexpr Function 'void (const alt::MValue::Function &)' inline default trivial noexcept-unevaluated 0x252ebfc49b0
| | `-ParmVarDecl 0x252ebfc4a98 <col:10> col:10 'const alt::MValue::Function &'
| |-CXXConstructorDecl 0x252ebfc4b38 <col:10> col:10 implicit constexpr Function 'void (alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ebfc4b38
| | `-ParmVarDecl 0x252ebfc4c48 <col:10> col:10 'alt::MValue::Function &&'
| |-CXXDestructorDecl 0x252ebfcfcb8 <col:10> col:10 implicit referenced ~Function 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x252ec4e5b38 <col:10> col:10 implicit used constexpr operator= 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' inline default trivial
| | |-ParmVarDecl 0x252ec4e5c48 <col:10> col:10 used 'const alt::MValue::Function &'
| | `-CompoundStmt 0x252ec4e6850 <col:10>
| |   |-BinaryOperator 0x252ec4e67f8 <col:10> 'void *' lvalue '='
| |   | |-MemberExpr 0x252ec4e67b0 <col:10> 'void *' lvalue ->invoker 0x252ebe81b20
| |   | | `-CXXThisExpr 0x252ec4e67a0 <col:10> 'alt::MValue::Function *' this
| |   | `-ImplicitCastExpr 0x252ec4e67e0 <col:10> 'void *' <LValueToRValue>
| |   |   `-MemberExpr 0x252ec4e6770 <col:10> 'void *const' lvalue .invoker 0x252ebe81b20
| |   |     `-DeclRefExpr 0x252ec4e6750 <col:10> 'const alt::MValue::Function' lvalue ParmVar 0x252ec4e5c48 '' 'const alt::MValue::Function &'
| |   `-ReturnStmt 0x252ec4e6840 <col:10>
| |     `-UnaryOperator 0x252ec4e6828 <col:10> 'alt::MValue::Function' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x252ec4e6818 <col:10> 'alt::MValue::Function *' this
| `-CXXMethodDecl 0x252ec4e5cb8 <col:10> col:10 implicit constexpr operator= 'alt::MValue::Function &(alt::MValue::Function &&)' inline default trivial noexcept-unevaluated 0x252ec4e5cb8
|   `-ParmVarDecl 0x252ec4e5dc8 <col:10> col:10 'alt::MValue::Function &&'
|-CXXRecordDecl 0x252ebe81b90 <line:42:3, line:49:3> line:42:9 referenced class TypeMismatchException definition
| |-DefinitionData polymorphic can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-private 'std::exception':'std::exception'
| |-CXXRecordDecl 0x252ebe81d58 <col:3, col:9> col:9 implicit class TypeMismatchException
| |-AccessSpecDecl 0x252ebe81de8 <line:44:3, col:9> col:3 public
| |-CXXMethodDecl 0x252ebe81e78 <line:45:4, line:48:4> line:45:16 used what 'const char *() const noexcept'
| | |-Overrides: [ 0x252eab4ec20 exception::what 'const char *() const' ]
| | |-CompoundStmt 0x252ebe8cbd8 <line:46:4, line:48:4>
| | | `-ReturnStmt 0x252ebe8cbc8 <line:47:5, col:12>
| | |   `-ImplicitCastExpr 0x252ebe8cbb0 <col:12> 'const char *' <ArrayToPointerDecay>
| | |     `-StringLiteral 0x252ebe8cb88 <col:12> 'const char [14]' lvalue "type mismatch"
| | `-OverrideAttr 0x252ebe81f18 <line:45:38>
| |-CXXConstructorDecl 0x252ebe81fa0 <line:42:9> col:9 implicit used TypeMismatchException 'void (const alt::MValue::TypeMismatchException &) noexcept' inline default
| | |-ParmVarDecl 0x252ebe820b8 <col:9> col:9 used 'const alt::MValue::TypeMismatchException &'
| | |-CXXCtorInitializer 'std::exception':'std::exception'
| | | `-CXXConstructExpr 0x252ebfc5530 <col:9> 'std::exception':'std::exception' 'void (const std::exception &) noexcept'
| | |   `-ImplicitCastExpr 0x252ebfc5510 <col:9> 'const std::exception':'const std::exception' lvalue <UncheckedDerivedToBase (exception)>
| | |     `-DeclRefExpr 0x252ebfc54f0 <col:9> 'const alt::MValue::TypeMismatchException' lvalue ParmVar 0x252ebe820b8 '' 'const alt::MValue::TypeMismatchException &'
| | `-CompoundStmt 0x252ebfc55b8 <col:9>
| |-CXXConstructorDecl 0x252ebe82158 <col:9> col:9 implicit TypeMismatchException 'void (alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82158
| | `-ParmVarDecl 0x252ebe82268 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXMethodDecl 0x252ebe82308 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(const alt::MValue::TypeMismatchException &)' inline default noexcept-unevaluated 0x252ebe82308
| | `-ParmVarDecl 0x252ebe82418 <col:9> col:9 'const alt::MValue::TypeMismatchException &'
| |-CXXMethodDecl 0x252ebe82488 <col:9> col:9 implicit operator= 'alt::MValue::TypeMismatchException &(alt::MValue::TypeMismatchException &&)' inline default noexcept-unevaluated 0x252ebe82488
| | `-ParmVarDecl 0x252ebe82598 <col:9> col:9 'alt::MValue::TypeMismatchException &&'
| |-CXXDestructorDecl 0x252ebe82620 <col:9> col:9 implicit used ~TypeMismatchException 'void () noexcept' inline default
| | |-Overrides: [ 0x252eab4eae8 exception::~exception 'void () noexcept' ]
| | `-CompoundStmt 0x252ebfc53c0 <col:9>
| `-CXXConstructorDecl 0x252ebfc52e8 <col:9> col:9 implicit used TypeMismatchException 'void () noexcept' inline default
|   |-CXXCtorInitializer 'std::exception':'std::exception'
|   | `-CXXConstructExpr 0x252ebfc53d0 <col:9> 'std::exception':'std::exception' 'void () noexcept'
|   `-CompoundStmt 0x252ebfc5450 <col:9>
|-AccessSpecDecl 0x252ebe827c0 <line:51:2, col:9> col:2 private
|-ClassTemplateDecl 0x252ebe82910 <line:52:3, line:72:3> line:53:10 _TypeTag
| |-TemplateTypeParmDecl 0x252ebe827f0 <line:52:12, col:21> col:21 referenced class depth 0 index 0 ... Args
| |-CXXRecordDecl 0x252ebe82880 <line:53:3, line:72:3> line:53:10 struct _TypeTag definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x252ebe82bc0 <col:3, col:10> col:10 implicit struct _TypeTag
| | |-ClassTemplateDecl 0x252ebe82e70 <line:55:4, line:56:46> col:11 _Type
| | | |-NonTypeTemplateParmDecl 0x252ebe82c60 <line:55:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe82cc0 <col:27, col:33> col:33 class depth 1 index 1 _T
| | | |-TemplateTypeParmDecl 0x252ebe82d38 <col:37, col:46> col:46 referenced class depth 1 index 2 ... _Args
| | | `-CXXRecordDecl 0x252ebe82de0 <line:56:4, col:46> col:11 struct _Type definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_Type<idx - 1, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe83370 <col:4, col:11> col:11 implicit struct _Type
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe837a0 <line:58:4, line:59:53> col:11 struct _Type definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument integral 0
| | | |-TemplateArgument type 'type-parameter-1-0'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-1...'
| | | |-TemplateTypeParmDecl 0x252ebe83418 <line:58:13, col:19> col:19 referenced class depth 1 index 0 _T
| | | |-TemplateTypeParmDecl 0x252ebe83498 <col:23, col:32> col:32 referenced class depth 1 index 1 ... _Args
| | | |-CXXRecordDecl 0x252ebe83a48 <line:59:4, col:11> col:11 implicit struct _Type
| | | `-TypeAliasDecl 0x252ebe83ae8 <col:36, col:49> col:42 Type '_T'
| | |   `-TemplateTypeParmType 0x252ebe83470 '_T' dependent depth 1 index 0
| | |     `-TemplateTypeParm 0x252ebe83418 '_T'
| | |-TypeAliasTemplateDecl 0x252ebe83f40 <line:61:4, line:62:58> col:4 Type
| | | |-NonTypeTemplateParmDecl 0x252ebe83c10 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 1 index 0 type
| | | `-TypeAliasDecl 0x252ebe83ee0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, Args...>::Type'
| | |   `-DependentNameType 0x252ebe83e70 'typename _Type<(uint64_t)type, Args...>::Type' dependent
| | |-ClassTemplateDecl 0x252ebe84248 <line:64:4, line:65:53> col:11 _TypeId
| | | |-NonTypeTemplateParmDecl 0x252ebe83fa8 <line:64:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84008 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe84088 <col:36, col:42> col:42 class depth 1 index 2 _T
| | | |-TemplateTypeParmDecl 0x252ebe84108 <col:46, col:55> col:55 referenced class depth 1 index 3 ... _Args
| | | `-CXXRecordDecl 0x252ebe841b8 <line:65:4, col:53> col:11 struct _TypeId definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-public '_TypeId<idx + 1, U, _Args...>'
| | |   `-CXXRecordDecl 0x252ebe84810 <col:4, col:11> col:11 implicit struct _TypeId
| | |-ClassTemplatePartialSpecializationDecl 0x252ebe84cf8 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-TemplateArgument expr
| | | | `-DeclRefExpr 0x252ebe84a50 <col:19> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument type 'type-parameter-1-1'
| | | |-TemplateArgument pack
| | | | `-TemplateArgument type 'type-parameter-1-2...'
| | | |-NonTypeTemplateParmDecl 0x252ebe848c8 <line:67:13, col:22> col:22 referenced 'uint64_t':'unsigned long long' depth 1 index 0 idx
| | | |-TemplateTypeParmDecl 0x252ebe84928 <col:27, col:33> col:33 referenced class depth 1 index 1 U
| | | |-TemplateTypeParmDecl 0x252ebe849a8 <col:36, col:45> col:45 referenced class depth 1 index 2 ... _Args
| | | |-CXXRecordDecl 0x252ebe84fe8 <line:68:4, col:11> col:11 implicit struct _TypeId
| | | `-VarDecl 0x252ebe850d8 <col:42, col:91> col:72 Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |   `-CStyleCastExpr 0x252ebe851b8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <Dependent>
| | |     `-DeclRefExpr 0x252ebe85178 <col:91> 'uint64_t':'unsigned long long' NonTypeTemplateParm 0x252ebe848c8 'idx' 'uint64_t':'unsigned long long'
| | `-VarTemplateDecl 0x252ebe85358 <line:70:4, line:71:67> col:34 TypeId
| |   |-TemplateTypeParmDecl 0x252ebe851f8 <line:70:13, col:19> col:19 referenced class depth 1 index 0 U
| |   `-VarDecl 0x252ebe852f0 <line:71:4, col:67> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |     `-DependentScopeDeclRefExpr 0x252ebe855c0 <col:43, col:67> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x252ebe858a0 <line:52:3, line:72:3> line:53:10 struct _TypeTag definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument pack
|   | |-TemplateArgument type 'void'
|   | |-TemplateArgument type 'bool'
|   | |-TemplateArgument type 'long long'
|   | |-TemplateArgument type 'unsigned long long'
|   | |-TemplateArgument type 'double'
|   | |-TemplateArgument type 'alt::String'
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ebe89088 prev 0x252ebe858a0 <col:3, col:10> col:10 implicit struct _TypeTag
|   |-ClassTemplateDecl 0x252ebe89330 <line:55:4, line:56:11> col:11 _Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89118 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe89178 <col:27, col:33> col:33 class depth 0 index 1 _T
|   | |-TemplateTypeParmDecl 0x252ebe891f8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
|   | `-CXXRecordDecl 0x252ebe892a0 <line:56:4, col:11> col:11 struct _Type
|   |-TypeAliasTemplateDecl 0x252ebe8a520 <line:61:4, line:62:58> col:4 Type
|   | |-NonTypeTemplateParmDecl 0x252ebe89c40 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
|   | `-TypeAliasDecl 0x252ebe8a4c0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   |   `-DependentNameType 0x252ebe8a470 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|   |-ClassTemplateDecl 0x252ebe8a828 <line:64:4, line:65:11> col:11 _TypeId
|   | |-NonTypeTemplateParmDecl 0x252ebe8a588 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
|   | |-TemplateTypeParmDecl 0x252ebe8a5e8 <col:27, col:33> col:33 class depth 0 index 1 U
|   | |-TemplateTypeParmDecl 0x252ebe8a668 <col:36, col:42> col:42 class depth 0 index 2 _T
|   | |-TemplateTypeParmDecl 0x252ebe8a6e8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
|   | |-CXXRecordDecl 0x252ebe8a798 <line:65:4, col:11> col:11 struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33e908 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec33fd30 prev 0x252ec33e908 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec33f188 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec33fbe0 prev 0x252ec33f188 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec33fc70 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec33fe50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec33fe30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec33fe08 <col:91> 'unsigned long long' 1
|   | |-ClassTemplateSpecializationDecl 0x252ec341928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec343080 prev 0x252ec341928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec341ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec342fa8 prev 0x252ec341ff8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec342618 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec342e58 prev 0x252ec342618 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec342ee8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3431a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec343180 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec343158 <col:91> 'unsigned long long' 2
|   | |-ClassTemplateSpecializationDecl 0x252ec344948 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3466b0 prev 0x252ec344948 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345018 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3465d8 prev 0x252ec345018 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345638 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec346500 prev 0x252ec345638 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec345c00 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3463b0 prev 0x252ec345c00 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec346440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec3467d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec3467b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec346788 <col:91> 'unsigned long long' 3
|   | |-ClassTemplateSpecializationDecl 0x252ec347f78 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a280 prev 0x252ec347f78 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348648 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a1a8 prev 0x252ec348648 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec348c68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34a0d0 prev 0x252ec348c68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec349230 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec349ff8 prev 0x252ec349230 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3497a8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec349ea8 prev 0x252ec3497a8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec349f38 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34a3a0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34a380 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34a358 <col:91> 'unsigned long long' 4
|   | |-ClassTemplateSpecializationDecl 0x252ec34bb48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e3b0 prev 0x252ec34bb48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c218 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e2d8 prev 0x252ec34c218 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34c838 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e200 prev 0x252ec34c838 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34ce00 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e128 prev 0x252ec34ce00 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d378 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec34e050 prev 0x252ec34d378 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec34d890 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec34df00 prev 0x252ec34d890 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec34df90 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec34e4d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec34e4b0 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec34e488 <col:91> 'unsigned long long' 5
|   | |-ClassTemplateSpecializationDecl 0x252ec34fd68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352b30 prev 0x252ec34fd68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350438 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352a58 prev 0x252ec350438 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec350a58 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec352980 prev 0x252ec350a58 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351020 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3528a8 prev 0x252ec351020 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3515f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3527d0 prev 0x252ec3515f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351b10 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3526f8 prev 0x252ec351b10 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec351fd8 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec3525a8 prev 0x252ec351fd8 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec352638 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec352c50 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec352c30 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec352c08 <col:91> 'unsigned long long' 6
|   | |-ClassTemplateSpecializationDecl 0x252ec356258 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359470 prev 0x252ec356258 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356928 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359398 prev 0x252ec356928 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec356f48 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3592c0 prev 0x252ec356f48 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357510 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec3591e8 prev 0x252ec357510 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357a88 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359110 prev 0x252ec357a88 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec357fa0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec359038 prev 0x252ec357fa0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec358468 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec358f60 prev 0x252ec358468 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec3588d0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec358e10 prev 0x252ec3588d0 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec358ea0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec359590 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec359570 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec359548 <col:91> 'unsigned long long' 7
|   | |-ClassTemplateSpecializationDecl 0x252ec4dc4f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfb60 prev 0x252ec4dc4f8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dcbc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4dfa88 prev 0x252ec4dcbc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd1e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df9b0 prev 0x252ec4dd1e8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4dd7b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df8d8 prev 0x252ec4dd7b0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4ddd28 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df800 prev 0x252ec4ddd28 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de240 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df728 prev 0x252ec4de240 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4de708 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df650 prev 0x252ec4de708 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4deb70 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4df578 prev 0x252ec4deb70 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4def88 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | |-CXXRecordDecl 0x252ec4df428 prev 0x252ec4def88 <col:4, col:11> col:11 implicit struct _TypeId
|   | | `-VarDecl 0x252ec4df4b8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |   `-CStyleCastExpr 0x252ec4dfc80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   | |     `-SubstNonTypeTemplateParmExpr 0x252ec4dfc60 <col:91> 'unsigned long long'
|   | |       `-IntegerLiteral 0x252ec4dfc38 <col:91> 'unsigned long long' 8
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1428 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 0
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'void'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'bool'
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4fa0 prev 0x252ec4e1428 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e1af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 1
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'bool'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'long long'
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4ec8 prev 0x252ec4e1af8 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2228 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 2
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'unsigned long long'
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4df0 prev 0x252ec4e2228 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e27f0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 3
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'unsigned long long'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'double'
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4d18 prev 0x252ec4e27f0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e2d68 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 4
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'double'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::String'
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4c40 prev 0x252ec4e2d68 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3280 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 5
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::String'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4b68 prev 0x252ec4e3280 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3748 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 6
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e4a90 prev 0x252ec4e3748 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3bb0 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
|   | | |-TemplateArgument integral 7
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | |-TemplateArgument pack
|   | | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e49b8 prev 0x252ec4e3bb0 <col:4, col:11> col:11 implicit struct _TypeId
|   | |-ClassTemplateSpecializationDecl 0x252ec4e3fc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
|   | | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial needs_implicit
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
|   | | |-TemplateArgument integral 8
|   | | |-TemplateArgument type 'alt::MValue::Function'
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | |-TemplateArgument pack
|   | | | `-TemplateArgument type 'alt::MValue::Function'
|   | | `-CXXRecordDecl 0x252ec4e48e0 prev 0x252ec4e3fc8 <col:4, col:11> col:11 implicit struct _TypeId
|   | `-ClassTemplateSpecializationDecl 0x252ec4e4380 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveConstructor exists simple trivial needs_implicit
|   |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   | |-MoveAssignment exists simple trivial needs_implicit
|   |   | `-Destructor simple irrelevant trivial needs_implicit
|   |   |-TemplateArgument integral 9
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   |-TemplateArgument pack
|   |   |-CXXRecordDecl 0x252ec4e4790 prev 0x252ec4e4380 <col:4, col:11> col:11 implicit struct _TypeId
|   |   `-VarDecl 0x252ec4e4820 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |     `-CStyleCastExpr 0x252ec4e50c0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|   |       `-SubstNonTypeTemplateParmExpr 0x252ec4e50a0 <col:91> 'unsigned long long'
|   |         `-IntegerLiteral 0x252ec4e5078 <col:91> 'unsigned long long' 9
|   |-VarTemplateDecl 0x252ebe8b358 <line:70:4, line:71:34> col:34 TypeId
|   | |-TemplateTypeParmDecl 0x252ebe8b258 <line:70:13, col:19> col:19 class depth 0 index 0 U
|   | |-VarDecl 0x252ebe8b2f0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
|   | |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'bool'
|   | | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'long long'
|   | | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'unsigned long long'
|   | | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'double'
|   | | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::String'
|   | | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | | |-TemplateArgument type 'alt::IBaseObject *'
|   | | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   | |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   | `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |   |-TemplateArgument type 'alt::MValue::Function'
|   |   `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |     `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec33e448 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'bool'
|   | `-ImplicitCastExpr 0x252ec33fef0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec33fec0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec33fc70 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec341470 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'long long'
|   | `-ImplicitCastExpr 0x252ec343240 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec343210 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec342ee8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec344488 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'unsigned long long'
|   | `-ImplicitCastExpr 0x252ec346870 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec346840 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec346440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec347ab8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'double'
|   | `-ImplicitCastExpr 0x252ec34a440 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34a410 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec349f38 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34b688 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::String'
|   | `-ImplicitCastExpr 0x252ec34e570 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec34e540 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec34df90 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec34f8a8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::Array<alt::MValue>'
|   | `-ImplicitCastExpr 0x252ec352cf0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec352cc0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec352638 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec355d98 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   | `-ImplicitCastExpr 0x252ec359630 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec359600 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec358ea0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   |-VarTemplateSpecializationDecl 0x252ec4dc038 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   | |-TemplateArgument type 'alt::IBaseObject *'
|   | `-ImplicitCastExpr 0x252ec4dfd20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   |   `-DeclRefExpr 0x252ec4dfcf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4df4b8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|   `-VarTemplateSpecializationDecl 0x252ec4e0f68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     |-TemplateArgument type 'alt::MValue::Function'
|     `-ImplicitCastExpr 0x252ec4e5160 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|       `-DeclRefExpr 0x252ec4e5130 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x252ec4e4820 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-TypeAliasDecl 0x252ebe85cc8 <line:74:3, col:94> col:9 referenced TypeTag '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| `-TemplateSpecializationType 0x252ebe859a0 '_TypeTag<alt::MValue::Nil, alt::MValue::Bool, alt::MValue::Int, alt::MValue::UInt, alt::MValue::Double, alt::MValue::String, alt::MValue::List, alt::MValue::Dict, alt::MValue::Entity, alt::MValue::Function>' sugar _TypeTag
|   |-TemplateArgument type 'alt::MValue::Nil':'void'
|   |-TemplateArgument type 'alt::MValue::Bool':'bool'
|   |-TemplateArgument type 'alt::MValue::Int':'long long'
|   |-TemplateArgument type 'alt::MValue::UInt':'unsigned long long'
|   |-TemplateArgument type 'alt::MValue::Double':'double'
|   |-TemplateArgument type 'alt::MValue::String':'alt::String'
|   |-TemplateArgument type 'alt::MValue::List':'alt::Array<alt::MValue>'
|   |-TemplateArgument type 'alt::MValue::Dict':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
|   |-TemplateArgument type 'alt::MValue::Entity':'alt::IBaseObject *'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-RecordType 0x252ebe85980 'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
|     `-ClassTemplateSpecialization 0x252ebe858a0 '_TypeTag'
|-CXXRecordDecl 0x252ebe85d28 <line:76:3, col:75> col:10 referenced struct _Storage definition
| |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x252ebe85e48 <col:3, col:10> col:10 implicit referenced struct _Storage
| |-FieldDecl 0x252ebe85ee8 <col:21, col:41> col:30 referenced refCount 'uint64_t':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebe8cb70 <col:41> 'uint64_t':'unsigned long long' <IntegralCast>
| |   `-IntegerLiteral 0x252ebe8cb48 <col:41> 'int' 1
| |-CXXDestructorDecl 0x252ebe85fb0 <col:44, col:72> col:52 used ~_Storage 'void () noexcept' virtual default
| | `-CompoundStmt 0x252ebe8d358 <col:72>
| |-CXXMethodDecl 0x252ebe860e8 <col:10> col:10 implicit operator= 'alt::MValue::_Storage &(const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ebe860e8
| | `-ParmVarDecl 0x252ebe861f8 <col:10> col:10 'const alt::MValue::_Storage &'
| |-CXXConstructorDecl 0x252ec3403e0 <col:10> col:10 implicit constexpr _Storage 'void (const alt::MValue::_Storage &)' inline default noexcept-unevaluated 0x252ec3403e0
| | `-ParmVarDecl 0x252ec3404f8 <col:10> col:10 'const alt::MValue::_Storage &'
| `-CXXConstructorDecl 0x252ec340ee0 <col:10> col:10 implicit used constexpr _Storage 'void () noexcept' inline default
|   |-CXXCtorInitializer Field 0x252ebe85ee8 'refCount' 'uint64_t':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x252ec340fd0 <col:10> 'uint64_t':'unsigned long long'
|   `-CompoundStmt 0x252ec341020 <col:10>
|-ClassTemplateDecl 0x252ebe86450 <line:78:3, line:79:40> col:10 Storage
| |-TemplateTypeParmDecl 0x252ebe86330 <line:78:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x252ebe863c0 <line:79:3, col:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial needs_implicit
| | | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-CXXRecordDecl 0x252ebe866e0 <col:3, col:10> col:10 implicit struct Storage
| | `-FieldDecl 0x252ebe86780 <col:31, col:33> col:33 value 'T'
| |-ClassTemplateSpecializationDecl 0x252ec340070 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'bool'
| | |-CXXRecordDecl 0x252ec340278 prev 0x252ec340070 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec340348 <col:31, col:33> col:33 referenced value 'bool':'bool'
| | |-CXXConstructorDecl 0x252ec340580 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec340580
| | | `-ParmVarDecl 0x252ec340698 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXConstructorDecl 0x252ec340738 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340738
| | | `-ParmVarDecl 0x252ec340848 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXMethodDecl 0x252ec3408e8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(const alt::MValue::Storage<bool> &)' inline default noexcept-unevaluated 0x252ec3408e8
| | | `-ParmVarDecl 0x252ec3409f8 <col:10> col:10 'const alt::MValue::Storage<bool> &'
| | |-CXXMethodDecl 0x252ec340a68 <col:10> col:10 implicit operator= 'alt::MValue::Storage<bool> &(alt::MValue::Storage<bool> &&)' inline default noexcept-unevaluated 0x252ec340a68
| | | `-ParmVarDecl 0x252ec340b78 <col:10> col:10 'alt::MValue::Storage<bool> &&'
| | |-CXXDestructorDecl 0x252ec340c00 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec340fc0 <col:10>
| | `-CXXConstructorDecl 0x252ec340e08 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec341030 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec341098 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3433c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'long long'
| | |-CXXRecordDecl 0x252ec3435c8 prev 0x252ec3433c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec343698 <col:31, col:33> col:33 referenced value 'long long':'long long'
| | |-CXXConstructorDecl 0x252ec343730 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343730
| | | `-ParmVarDecl 0x252ec343848 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXConstructorDecl 0x252ec3438e8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec3438e8
| | | `-ParmVarDecl 0x252ec3439f8 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXMethodDecl 0x252ec343a98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(const alt::MValue::Storage<long long> &)' inline default noexcept-unevaluated 0x252ec343a98
| | | `-ParmVarDecl 0x252ec343ba8 <col:10> col:10 'const alt::MValue::Storage<long long> &'
| | |-CXXMethodDecl 0x252ec343c18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<long long> &(alt::MValue::Storage<long long> &&)' inline default noexcept-unevaluated 0x252ec343c18
| | | `-ParmVarDecl 0x252ec343d28 <col:10> col:10 'alt::MValue::Storage<long long> &&'
| | |-CXXDestructorDecl 0x252ec343db0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec344090 <col:10>
| | `-CXXConstructorDecl 0x252ec343fb8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3440a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec344108 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3469f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'unsigned long long'
| | |-CXXRecordDecl 0x252ec346bf8 prev 0x252ec3469f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec346cc8 <col:31, col:33> col:33 referenced value 'unsigned long long':'unsigned long long'
| | |-CXXConstructorDecl 0x252ec346d60 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec346d60
| | | `-ParmVarDecl 0x252ec346e78 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXConstructorDecl 0x252ec346f18 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec346f18
| | | `-ParmVarDecl 0x252ec347028 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXMethodDecl 0x252ec3470c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(const alt::MValue::Storage<unsigned long long> &)' inline default noexcept-unevaluated 0x252ec3470c8
| | | `-ParmVarDecl 0x252ec3471d8 <col:10> col:10 'const alt::MValue::Storage<unsigned long long> &'
| | |-CXXMethodDecl 0x252ec347248 <col:10> col:10 implicit operator= 'alt::MValue::Storage<unsigned long long> &(alt::MValue::Storage<unsigned long long> &&)' inline default noexcept-unevaluated 0x252ec347248
| | | `-ParmVarDecl 0x252ec347358 <col:10> col:10 'alt::MValue::Storage<unsigned long long> &&'
| | |-CXXDestructorDecl 0x252ec3473e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec3476c0 <col:10>
| | `-CXXConstructorDecl 0x252ec3475e8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec3476d0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec347738 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34a5c0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'double'
| | |-CXXRecordDecl 0x252ec34a7c8 prev 0x252ec34a5c0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34a898 <col:31, col:33> col:33 referenced value 'double':'double'
| | |-CXXConstructorDecl 0x252ec34a930 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34a930
| | | `-ParmVarDecl 0x252ec34aa48 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXConstructorDecl 0x252ec34aae8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34aae8
| | | `-ParmVarDecl 0x252ec34abf8 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXMethodDecl 0x252ec34ac98 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(const alt::MValue::Storage<double> &)' inline default noexcept-unevaluated 0x252ec34ac98
| | | `-ParmVarDecl 0x252ec34ada8 <col:10> col:10 'const alt::MValue::Storage<double> &'
| | |-CXXMethodDecl 0x252ec34ae18 <col:10> col:10 implicit operator= 'alt::MValue::Storage<double> &(alt::MValue::Storage<double> &&)' inline default noexcept-unevaluated 0x252ec34ae18
| | | `-ParmVarDecl 0x252ec34af28 <col:10> col:10 'alt::MValue::Storage<double> &&'
| | |-CXXDestructorDecl 0x252ec34afb0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34b290 <col:10>
| | `-CXXConstructorDecl 0x252ec34b1b8 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34b2a0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec34b308 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec34e6f0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::String'
| | |-CXXRecordDecl 0x252ec34e8f8 prev 0x252ec34e6f0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec34e9c8 <col:31, col:33> col:33 referenced value 'alt::String':'alt::String'
| | |-CXXConstructorDecl 0x252ec34ea60 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34ea60
| | | `-ParmVarDecl 0x252ec34eb78 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXConstructorDecl 0x252ec34ec18 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ec18
| | | `-ParmVarDecl 0x252ec34ed28 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXMethodDecl 0x252ec34edc8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(const alt::MValue::Storage<alt::String> &)' inline default noexcept-unevaluated 0x252ec34edc8
| | | `-ParmVarDecl 0x252ec34eed8 <col:10> col:10 'const alt::MValue::Storage<alt::String> &'
| | |-CXXMethodDecl 0x252ec34ef48 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::String> &(alt::MValue::Storage<alt::String> &&)' inline default noexcept-unevaluated 0x252ec34ef48
| | | `-ParmVarDecl 0x252ec34f058 <col:10> col:10 'alt::MValue::Storage<alt::String> &&'
| | |-CXXDestructorDecl 0x252ec34f0e0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec34f400 <col:10>
| | `-CXXConstructorDecl 0x252ec34f2e8 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec34f410 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec34e9c8 'value' 'alt::String':'alt::String'
| |   | `-CXXConstructExpr 0x252ec34f470 <col:10> 'alt::String':'alt::String' 'void ()'
| |   `-CompoundStmt 0x252ec34f4d0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec352e70 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-CXXRecordDecl 0x252ec353078 prev 0x252ec352e70 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec353148 <col:31, col:33> col:33 referenced value 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| | |-CXXConstructorDecl 0x252ec3531e0 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec3531e0
| | | `-ParmVarDecl 0x252ec3532f8 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXConstructorDecl 0x252ec353398 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec353398
| | | `-ParmVarDecl 0x252ec3534a8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXMethodDecl 0x252ec353548 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(const alt::MValue::Storage<alt::Array<alt::MValue> > &)' inline default noexcept-unevaluated 0x252ec353548
| | | `-ParmVarDecl 0x252ec353658 <col:10> col:10 'const alt::MValue::Storage<alt::Array<alt::MValue> > &'
| | |-CXXMethodDecl 0x252ec3536c8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::Array<alt::MValue> > &(alt::MValue::Storage<alt::Array<alt::MValue> > &&)' inline default noexcept-unevaluated 0x252ec3536c8
| | | `-ParmVarDecl 0x252ec3537d8 <col:10> col:10 'alt::MValue::Storage<alt::Array<alt::MValue> > &&'
| | |-CXXDestructorDecl 0x252ec353860 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec353c10 <col:10>
| | `-CXXConstructorDecl 0x252ec353b38 <col:10> col:10 implicit used constexpr Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec353c20 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec353148 'value' 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>'
| |   | `-CXXConstructExpr 0x252ec353c80 <col:10> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' 'void () noexcept'
| |   `-CompoundStmt 0x252ec353ce0 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec3597b0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic can_const_default_init
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXRecordDecl 0x252ec3599b8 prev 0x252ec3597b0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec359a88 <col:31, col:33> col:33 referenced value 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-CXXConstructorDecl 0x252ec359b20 <col:10> col:10 implicit Storage 'void (const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359b20
| | | `-ParmVarDecl 0x252ec359c38 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXConstructorDecl 0x252ec359cd8 <col:10> col:10 implicit Storage 'void (alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec359cd8
| | | `-ParmVarDecl 0x252ec359de8 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXMethodDecl 0x252ec359e88 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &)' inline default noexcept-unevaluated 0x252ec359e88
| | | `-ParmVarDecl 0x252ec359f98 <col:10> col:10 'const alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &'
| | |-CXXMethodDecl 0x252ec35a008 <col:10> col:10 implicit operator= 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &(alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&)' inline default noexcept-unevaluated 0x252ec35a008
| | | `-ParmVarDecl 0x252ec35a118 <col:10> col:10 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > &&'
| | |-CXXDestructorDecl 0x252ec35a1a0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec35afa0 <col:10>
| | `-CXXConstructorDecl 0x252ec35ae88 <col:10> col:10 implicit used Storage 'void () noexcept(false)' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec35afb0 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   |-CXXCtorInitializer Field 0x252ec359a88 'value' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |   | `-CXXConstructExpr 0x252ec35b010 <col:10> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' 'void ()'
| |   `-CompoundStmt 0x252ec35b070 <col:10>
| |-ClassTemplateSpecializationDecl 0x252ec4dfea0 <line:78:3, line:79:40> col:10 struct Storage definition
| | |-DefinitionData polymorphic
| | | |-DefaultConstructor exists non_trivial
| | | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | | `-Destructor simple non_trivial needs_overload_resolution
| | |-public 'alt::MValue::_Storage'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-CXXRecordDecl 0x252ec4e00a8 prev 0x252ec4dfea0 <col:3, col:10> col:10 implicit struct Storage
| | |-FieldDecl 0x252ec4e0178 <col:31, col:33> col:33 referenced value 'alt::IBaseObject *':'alt::IBaseObject *'
| | |-CXXConstructorDecl 0x252ec4e0210 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0210
| | | `-ParmVarDecl 0x252ec4e0328 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXConstructorDecl 0x252ec4e03c8 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e03c8
| | | `-ParmVarDecl 0x252ec4e04d8 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXMethodDecl 0x252ec4e0578 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(const alt::MValue::Storage<alt::IBaseObject *> &)' inline default noexcept-unevaluated 0x252ec4e0578
| | | `-ParmVarDecl 0x252ec4e0688 <col:10> col:10 'const alt::MValue::Storage<alt::IBaseObject *> &'
| | |-CXXMethodDecl 0x252ec4e06f8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::IBaseObject *> &(alt::MValue::Storage<alt::IBaseObject *> &&)' inline default noexcept-unevaluated 0x252ec4e06f8
| | | `-ParmVarDecl 0x252ec4e0808 <col:10> col:10 'alt::MValue::Storage<alt::IBaseObject *> &&'
| | |-CXXDestructorDecl 0x252ec4e0890 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
| | | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
| | | `-CompoundStmt 0x252ec4e0b70 <col:10>
| | `-CXXConstructorDecl 0x252ec4e0a98 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
| |   |-CXXCtorInitializer 'alt::MValue::_Storage'
| |   | `-CXXConstructExpr 0x252ec4e0b80 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
| |   `-CompoundStmt 0x252ec4e0be8 <col:10>
| `-ClassTemplateSpecializationDecl 0x252ec4e52e0 <line:78:3, line:79:40> col:10 struct Storage definition
|   |-DefinitionData polymorphic
|   | |-DefaultConstructor exists non_trivial
|   | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_overload_resolution
|   | `-Destructor simple non_trivial needs_overload_resolution
|   |-public 'alt::MValue::_Storage'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-CXXRecordDecl 0x252ec4e54e8 prev 0x252ec4e52e0 <col:3, col:10> col:10 implicit struct Storage
|   |-FieldDecl 0x252ec4e55b8 <col:31, col:33> col:33 referenced value 'alt::MValue::Function':'alt::MValue::Function'
|   |-CXXConstructorDecl 0x252ec4e5650 <col:10> col:10 implicit constexpr Storage 'void (const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e5650
|   | `-ParmVarDecl 0x252ec4e5768 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXConstructorDecl 0x252ec4e5808 <col:10> col:10 implicit constexpr Storage 'void (alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5808
|   | `-ParmVarDecl 0x252ec4e5918 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXMethodDecl 0x252ec4e59b8 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(const alt::MValue::Storage<alt::MValue::Function> &)' inline default noexcept-unevaluated 0x252ec4e59b8
|   | `-ParmVarDecl 0x252ec4e5ac8 <col:10> col:10 'const alt::MValue::Storage<alt::MValue::Function> &'
|   |-CXXMethodDecl 0x252ec4e5e38 <col:10> col:10 implicit operator= 'alt::MValue::Storage<alt::MValue::Function> &(alt::MValue::Storage<alt::MValue::Function> &&)' inline default noexcept-unevaluated 0x252ec4e5e38
|   | `-ParmVarDecl 0x252ec4e5f48 <col:10> col:10 'alt::MValue::Storage<alt::MValue::Function> &&'
|   |-CXXDestructorDecl 0x252ec4e5fd0 <col:10> col:10 implicit used ~Storage 'void () noexcept' inline default
|   | |-Overrides: [ 0x252ebe85fb0 _Storage::~_Storage 'void () noexcept' ]
|   | `-CompoundStmt 0x252ec4e6370 <col:10>
|   `-CXXConstructorDecl 0x252ec4e6298 <col:10> col:10 implicit used Storage 'void () noexcept' inline default
|     |-CXXCtorInitializer 'alt::MValue::_Storage'
|     | `-CXXConstructExpr 0x252ec4e6380 <col:10> 'alt::MValue::_Storage' 'void () noexcept'
|     |-CXXCtorInitializer Field 0x252ec4e55b8 'value' 'alt::MValue::Function':'alt::MValue::Function'
|     | `-CXXConstructExpr 0x252ec4e63f0 <col:10> 'alt::MValue::Function':'alt::MValue::Function' 'void () noexcept'
|     `-CompoundStmt 0x252ec4e6450 <col:10>
|-FunctionTemplateDecl 0x252ebe86a48 <line:81:3, line:91:3> line:82:8 Create
| |-TemplateTypeParmDecl 0x252ebe867f0 <line:81:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe869a8 <line:82:3, line:91:3> line:82:8 Create 'void (const T &)'
| | |-ParmVarDecl 0x252ebe868b8 <col:15, col:24> col:24 referenced val 'const T &'
| | `-CompoundStmt 0x252ec33e400 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33e038 <line:84:4, col:28> '<dependent type>' '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-UnresolvedLookupExpr 0x252ec33dfb0 <col:11, col:28> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   |-DeclStmt 0x252ec33e210 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33e068 <col:4, col:33> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXNewExpr 0x252ec33e1d8 <col:20, col:33> 'Storage<T> *'
| |   |-BinaryOperator 0x252ec33e2b8 <line:87:4, col:25> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e248 <col:4, col:14> '<dependent type>' lvalue ->refCount
| |   | | `-DeclRefExpr 0x252ec33e228 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec33e360 <line:88:4, col:22> '<dependent type>' '='
| |   | |-CXXDependentScopeMemberExpr 0x252ec33e2f8 <col:4, col:14> '<dependent type>' lvalue ->value
| |   | | `-DeclRefExpr 0x252ec33e2d8 <col:4> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |   | `-DeclRefExpr 0x252ec33e340 <col:22> 'const T' lvalue ParmVar 0x252ebe868b8 'val' 'const T &'
| |   `-BinaryOperator 0x252ec33e3e0 <line:90:4, col:14> '<dependent type>' '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-DeclRefExpr 0x252ec33e3c0 <col:14> 'auto' lvalue Var 0x252ec33e068 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebe8d6a8 <line:82:3, line:91:3> line:82:8 used Create 'void (const bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x252ebe8d5e8 <col:15, col:24> col:24 used val 'const bool &'
| | `-CompoundStmt 0x252ec341428 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec33ffd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec33ffc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec33ff50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec3411c0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec33fff8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXNewExpr 0x252ec3410d0 <col:20> 'Storage<bool> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec3410a8 <col:24> 'Storage<bool>':'alt::MValue::Storage<bool>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec341278 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec341230 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec341210 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec3411f8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec3411d8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341260 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec341338 <line:88:4, col:22> 'bool':'bool' lvalue '='
| |   | |-MemberExpr 0x252ec3412d0 <col:4, col:14> 'bool':'bool' lvalue ->value 0x252ec340348
| |   | | `-ImplicitCastExpr 0x252ec3412b8 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec341298 <col:4> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |   | `-ImplicitCastExpr 0x252ec341320 <col:22> 'bool':'bool' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec341300 <col:22> 'const bool':'const bool' lvalue ParmVar 0x252ebe8d5e8 'val' 'const bool &'
| |   `-BinaryOperator 0x252ec341408 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec3413e8 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3413d0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3413b0 <col:14> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec33fff8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebeef2b8 <line:82:3, line:91:3> line:82:8 used Create 'void (const long long &)'
| | |-TemplateArgument type 'long long'
| | |-ParmVarDecl 0x252ebeef1f8 <col:15, col:24> col:24 used val 'const long long &'
| | `-CompoundStmt 0x252ec344440 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec343328 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec343310 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3432a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec344230 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec343348 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec344140 <col:20> 'Storage<long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec344118 <col:24> 'Storage<long long>':'alt::MValue::Storage<long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec3442e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3442a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec344280 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec344268 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec344248 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec3442d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3443a8 <line:88:4, col:22> 'long long':'long long' lvalue '='
| |   | |-MemberExpr 0x252ec344340 <col:4, col:14> 'long long':'long long' lvalue ->value 0x252ec343698
| |   | | `-ImplicitCastExpr 0x252ec344328 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec344308 <col:4> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |   | `-ImplicitCastExpr 0x252ec344390 <col:22> 'long long':'long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec344370 <col:22> 'const long long':'const long long' lvalue ParmVar 0x252ebeef1f8 'val' 'const long long &'
| |   `-BinaryOperator 0x252ec344420 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec344400 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec3443e8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3443c8 <col:14> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec343348 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebeef648 <line:82:3, line:91:3> line:82:8 used Create 'void (const unsigned long long &)'
| | |-TemplateArgument type 'unsigned long long'
| | |-ParmVarDecl 0x252ebeef588 <col:15, col:24> col:24 used val 'const unsigned long long &'
| | `-CompoundStmt 0x252ec347a70 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec346958 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec346940 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3468d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec347860 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec346978 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXNewExpr 0x252ec347770 <col:20> 'Storage<unsigned long long> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec347748 <col:24> 'Storage<unsigned long long>':'alt::MValue::Storage<unsigned long long>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec347918 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec3478d0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec3478b0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec347898 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec347878 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec347900 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec3479d8 <line:88:4, col:22> 'unsigned long long':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec347970 <col:4, col:14> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |   | | `-ImplicitCastExpr 0x252ec347958 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec347938 <col:4> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |   | `-ImplicitCastExpr 0x252ec3479c0 <col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec3479a0 <col:22> 'const unsigned long long':'const unsigned long long' lvalue ParmVar 0x252ebeef588 'val' 'const unsigned long long &'
| |   `-BinaryOperator 0x252ec347a50 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec347a30 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec347a18 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec3479f8 <col:14> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec346978 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebeef9d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const double &)'
| | |-TemplateArgument type 'double'
| | |-ParmVarDecl 0x252ebeef918 <col:15, col:24> col:24 used val 'const double &'
| | `-CompoundStmt 0x252ec34b640 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34a528 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34a510 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34a4a0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34b430 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34a548 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXNewExpr 0x252ec34b340 <col:20> 'Storage<double> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34b318 <col:24> 'Storage<double>':'alt::MValue::Storage<double>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec34b4e8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34b4a0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34b480 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34b468 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34b448 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b4d0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec34b5a8 <line:88:4, col:22> 'double':'double' lvalue '='
| |   | |-MemberExpr 0x252ec34b540 <col:4, col:14> 'double':'double' lvalue ->value 0x252ec34a898
| |   | | `-ImplicitCastExpr 0x252ec34b528 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34b508 <col:4> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |   | `-ImplicitCastExpr 0x252ec34b590 <col:22> 'double':'double' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34b570 <col:22> 'const double':'const double' lvalue ParmVar 0x252ebeef918 'val' 'const double &'
| |   `-BinaryOperator 0x252ec34b620 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34b600 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34b5e8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34b5c8 <col:14> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec34a548 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebeefd58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::String &)'
| | |-TemplateArgument type 'alt::String'
| | |-ParmVarDecl 0x252ebeefc98 <col:15, col:24> col:24 used val 'const alt::String &'
| | `-CompoundStmt 0x252ec34f860 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec34e658 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec34e640 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec34e5d0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec34f5f0 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec34e678 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXNewExpr 0x252ec34f508 <col:20> 'Storage<alt::String> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec34f4e0 <col:24> 'Storage<alt::String>':'alt::MValue::Storage<alt::String>' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec34f6a8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec34f660 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec34f640 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec34f628 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec34f608 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-ImplicitCastExpr 0x252ec34f690 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec34f7b0 <line:88:4, col:22> 'alt::String' lvalue
| |   | |-ImplicitCastExpr 0x252ec34f798 <col:20> 'alt::String &(*)(const alt::String &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec34f750 <col:20> 'alt::String &(const alt::String &)' lvalue CXXMethod 0x252ebc461c8 'operator=' 'alt::String &(const alt::String &)'
| |   | |-MemberExpr 0x252ec34f700 <col:4, col:14> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |   | | `-ImplicitCastExpr 0x252ec34f6e8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec34f6c8 <col:4> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |   | `-DeclRefExpr 0x252ec34f730 <col:22> 'const alt::String':'const alt::String' lvalue ParmVar 0x252ebeefc98 'val' 'const alt::String &'
| |   `-BinaryOperator 0x252ec34f840 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec34f820 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec34f808 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec34f7e8 <col:14> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec34e678 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebef00d8 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::Array<alt::MValue> &)'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-ParmVarDecl 0x252ebef0018 <col:15, col:24> col:24 used val 'const alt::Array<alt::MValue> &'
| | `-CompoundStmt 0x252ec354070 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec352dd8 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec352dc0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec352d50 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec353e00 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec352df8 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXNewExpr 0x252ec353d18 <col:20> 'Storage<alt::Array<alt::MValue> > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec353cf0 <col:24> 'Storage<alt::Array<alt::MValue> >':'alt::MValue::Storage<alt::Array<alt::MValue> >' 'void () noexcept'
| |   |-BinaryOperator 0x252ec353eb8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec353e70 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec353e50 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec353e38 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec353e18 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-ImplicitCastExpr 0x252ec353ea0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec353fc0 <line:88:4, col:22> 'alt::Array<alt::MValue>' lvalue
| |   | |-ImplicitCastExpr 0x252ec353fa8 <col:20> 'alt::Array<alt::MValue> &(*)(const alt::Array<alt::MValue> &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec353f60 <col:20> 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)' lvalue CXXMethod 0x252ebef8218 'operator=' 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |   | |-MemberExpr 0x252ec353f10 <col:4, col:14> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |   | | `-ImplicitCastExpr 0x252ec353ef8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec353ed8 <col:4> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |   | `-DeclRefExpr 0x252ec353f40 <col:22> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef0018 'val' 'const alt::Array<alt::MValue> &'
| |   `-BinaryOperator 0x252ec354050 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec354030 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec354018 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec353ff8 <col:14> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec352df8 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebef0458 <line:82:3, line:91:3> line:82:8 used Create 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-ParmVarDecl 0x252ebef0398 <col:15, col:24> col:24 used val 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| | `-CompoundStmt 0x252ec35c3f0 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec359718 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec359700 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec359690 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec35b190 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec359738 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXNewExpr 0x252ec35b0a8 <col:20> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec35b080 <col:24> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > >' 'void () noexcept(false)'
| |   |-BinaryOperator 0x252ec35b248 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec35b200 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec35b1e0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec35b1c8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec35b1a8 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-ImplicitCastExpr 0x252ec35b230 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-CXXOperatorCallExpr 0x252ec35c340 <line:88:4, col:22> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
| |   | |-ImplicitCastExpr 0x252ec35c328 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(*)(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x252ec35c2d8 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' lvalue CXXMethod 0x252ebfbd498 'operator=' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |   | |-MemberExpr 0x252ec35b2a0 <col:4, col:14> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |   | | `-ImplicitCastExpr 0x252ec35b288 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec35b268 <col:4> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |   | `-DeclRefExpr 0x252ec35b2d0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebef0398 'val' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| |   `-BinaryOperator 0x252ec35c3d0 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec35c3b0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec35c398 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec35c378 <col:14> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec359738 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| |-CXXMethodDecl 0x252ebef07d8 <line:82:3, line:91:3> line:82:8 used Create 'void (alt::IBaseObject *const &)'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-ParmVarDecl 0x252ebef0718 <col:15, col:24> col:24 used val 'alt::IBaseObject *const &'
| | `-CompoundStmt 0x252ec4e0f20 <line:83:3, line:91:3>
| |   |-BinaryOperator 0x252ec4dfe08 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
| |   | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
| |   | `-ImplicitCastExpr 0x252ec4dfdf0 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4dfd80 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4dc038 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   |-DeclStmt 0x252ec4e0d10 <line:85:4, col:34>
| |   | `-VarDecl 0x252ec4dfe28 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' cinit
| |   |   `-CXXNewExpr 0x252ec4e0c20 <col:20> 'Storage<alt::IBaseObject *> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |     `-CXXConstructExpr 0x252ec4e0bf8 <col:24> 'Storage<alt::IBaseObject *>':'alt::MValue::Storage<alt::IBaseObject *>' 'void () noexcept'
| |   |-BinaryOperator 0x252ec4e0dc8 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
| |   | |-MemberExpr 0x252ec4e0d80 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
| |   | | `-ImplicitCastExpr 0x252ec4e0d60 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
| |   | |   `-ImplicitCastExpr 0x252ec4e0d48 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |     `-DeclRefExpr 0x252ec4e0d28 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0db0 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
| |   |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
| |   |-BinaryOperator 0x252ec4e0e88 <line:88:4, col:22> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue '='
| |   | |-MemberExpr 0x252ec4e0e20 <col:4, col:14> 'alt::IBaseObject *':'alt::IBaseObject *' lvalue ->value 0x252ec4e0178
| |   | | `-ImplicitCastExpr 0x252ec4e0e08 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x252ec4e0de8 <col:4> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| |   | `-ImplicitCastExpr 0x252ec4e0e70 <col:22> 'alt::IBaseObject *':'alt::IBaseObject *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x252ec4e0e50 <col:22> 'alt::IBaseObject *const':'alt::IBaseObject *const' lvalue ParmVar 0x252ebef0718 'val' 'alt::IBaseObject *const &'
| |   `-BinaryOperator 0x252ec4e0f00 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
| |     |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |     | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
| |     `-ImplicitCastExpr 0x252ec4e0ee0 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
| |       `-ImplicitCastExpr 0x252ec4e0ec8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e0ea8 <col:14> 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *' lvalue Var 0x252ec4dfe28 '_storage' 'alt::MValue::Storage<alt::IBaseObject *> *':'alt::MValue::Storage<alt::IBaseObject *> *'
| `-CXXMethodDecl 0x252ebef0b58 <line:82:3, line:91:3> line:82:8 used Create 'void (const alt::MValue::Function &)'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-ParmVarDecl 0x252ebef0a98 <col:15, col:24> col:24 used val 'const alt::MValue::Function &'
|   `-CompoundStmt 0x252ec4e6960 <line:83:3, line:91:3>
|     |-BinaryOperator 0x252ec4e5248 <line:84:4, col:28> 'alt::MValue::Type' lvalue '='
|     | |-MemberExpr 0x252ec33df20 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | | `-CXXThisExpr 0x252ec33df10 <col:4> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ec4e5230 <col:11, col:28> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     |   `-DeclRefExpr 0x252ec4e51c0 <col:11, col:28> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     |-DeclStmt 0x252ec4e6570 <line:85:4, col:34>
|     | `-VarDecl 0x252ec4e5268 <col:4, col:20> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXNewExpr 0x252ec4e6488 <col:20> 'Storage<alt::MValue::Function> *' Function 0x252ea72a6f8 'operator new' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |     `-CXXConstructExpr 0x252ec4e6460 <col:24> 'Storage<alt::MValue::Function>':'alt::MValue::Storage<alt::MValue::Function>' 'void () noexcept'
|     |-BinaryOperator 0x252ec4e6628 <line:87:4, col:25> 'uint64_t':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x252ec4e65e0 <col:4, col:14> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | | `-ImplicitCastExpr 0x252ec4e65c0 <col:4> 'alt::MValue::_Storage *' <UncheckedDerivedToBase (_Storage)>
|     | |   `-ImplicitCastExpr 0x252ec4e65a8 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x252ec4e6588 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-ImplicitCastExpr 0x252ec4e6610 <col:25> 'uint64_t':'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ec33e290 <col:25> 'int' 1
|     |-CXXOperatorCallExpr 0x252ec4e68b0 <line:88:4, col:22> 'alt::MValue::Function' lvalue
|     | |-ImplicitCastExpr 0x252ec4e6898 <col:20> 'alt::MValue::Function &(*)(const alt::MValue::Function &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x252ec4e6730 <col:20> 'alt::MValue::Function &(const alt::MValue::Function &) noexcept' lvalue CXXMethod 0x252ec4e5b38 'operator=' 'alt::MValue::Function &(const alt::MValue::Function &) noexcept'
|     | |-MemberExpr 0x252ec4e6680 <col:4, col:14> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|     | | `-ImplicitCastExpr 0x252ec4e6668 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x252ec4e6648 <col:4> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|     | `-DeclRefExpr 0x252ec4e66b0 <col:22> 'const alt::MValue::Function':'const alt::MValue::Function' lvalue ParmVar 0x252ebef0a98 'val' 'const alt::MValue::Function &'
|     `-BinaryOperator 0x252ec4e6940 <line:90:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|       |-MemberExpr 0x252ec33e390 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|       | `-CXXThisExpr 0x252ec33e380 <col:4> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ec4e6920 <col:14> 'alt::MValue::_Storage *' <DerivedToBase (_Storage)>
|         `-ImplicitCastExpr 0x252ec4e6908 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec4e68e8 <col:14> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec4e5268 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
|-CXXMethodDecl 0x252ebe86ac8 <line:93:3, line:97:3> line:93:8 used CreateNil 'void ()'
| `-CompoundStmt 0x252ebe8cdb0 <line:94:3, line:97:3>
|   |-BinaryOperator 0x252ebe8cd08 <line:95:4, col:17> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cc00 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cbf0 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebe8cc80 <col:11, col:17> 'alt::MValue::Type' EnumConstant 0x252ebe80560 'NIL' 'alt::MValue::Type'
|   `-BinaryOperator 0x252ebe8cd90 <line:96:4, col:14> 'alt::MValue::_Storage *' lvalue '='
|     |-MemberExpr 0x252ebe8cd38 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | `-CXXThisExpr 0x252ebe8cd28 <col:4> 'alt::MValue *' implicit this
|     `-ImplicitCastExpr 0x252ebe8cd78 <col:14> 'alt::MValue::_Storage *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x252ebe8cd68 <col:14> 'nullptr_t'
|-CXXMethodDecl 0x252ebe86c68 <line:99:3, line:106:3> line:99:8 used Copy 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe86ba8 <col:13, col:27> col:27 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebe8d088 <line:100:3, line:106:3>
|   |-BinaryOperator 0x252ebe8ce78 <line:101:4, col:16> 'alt::MValue::Type' lvalue '='
|   | |-MemberExpr 0x252ebe8cde0 <col:4> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | | `-CXXThisExpr 0x252ebe8cdd0 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8ce60 <col:11, col:16> 'alt::MValue::Type' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8ce30 <col:11, col:16> 'const alt::MValue::Type' lvalue .type 0x252ebe86de0
|   |     `-DeclRefExpr 0x252ebe8ce10 <col:11> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   |-BinaryOperator 0x252ebe8cf40 <line:102:4, col:19> 'alt::MValue::_Storage *' lvalue '='
|   | |-MemberExpr 0x252ebe8cea8 <col:4> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | | `-CXXThisExpr 0x252ebe8ce98 <col:4> 'alt::MValue *' implicit this
|   | `-ImplicitCastExpr 0x252ebe8cf28 <col:14, col:19> 'alt::MValue::_Storage *' <LValueToRValue>
|   |   `-MemberExpr 0x252ebe8cef8 <col:14, col:19> 'alt::MValue::_Storage *const' lvalue .storage 0x252ebe86e48
|   |     `-DeclRefExpr 0x252ebe8ced8 <col:14> 'const alt::MValue' lvalue ParmVar 0x252ebe86ba8 'that' 'const alt::MValue &'
|   `-IfStmt 0x252ebe8d070 <line:104:4, line:105:16>
|     |-ImplicitCastExpr 0x252ebe8cfb8 <line:104:8> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x252ebe8cfa0 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     |   `-MemberExpr 0x252ebe8cf70 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |     `-CXXThisExpr 0x252ebe8cf60 <col:8> 'alt::MValue *' implicit this
|     `-UnaryOperator 0x252ebe8d058 <line:105:5, col:16> 'uint64_t':'unsigned long long' lvalue prefix '++'
|       `-MemberExpr 0x252ebe8d028 <col:7, col:16> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|         `-ImplicitCastExpr 0x252ebe8d010 <col:7> 'alt::MValue::_Storage *' <LValueToRValue>
|           `-MemberExpr 0x252ebe8cfe0 <col:7> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|             `-CXXThisExpr 0x252ebe8cfd0 <col:7> 'alt::MValue *' implicit this
|-CXXMethodDecl 0x252ebe86d30 <line:108:3, line:117:3> line:108:8 used Destroy 'void ()'
| `-CompoundStmt 0x252ebe8d3a0 <line:109:3, line:117:3>
|   |-IfStmt 0x252ebe8d148 <line:110:4, line:111:5>
|   | |-UnaryOperator 0x252ebe8d120 <line:110:8, col:9> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x252ebe8d108 <col:9> 'bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x252ebe8d0f0 <col:9> 'alt::MValue::_Storage *' <LValueToRValue>
|   | |     `-MemberExpr 0x252ebe8d0c0 <col:9> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   | |       `-CXXThisExpr 0x252ebe8d0b0 <col:9> 'alt::MValue *' implicit this
|   | `-ReturnStmt 0x252ebe8d138 <line:111:5>
|   |-UnaryOperator 0x252ebe8d1e8 <line:113:4, col:15> 'uint64_t':'unsigned long long' lvalue prefix '--'
|   | `-MemberExpr 0x252ebe8d1b8 <col:6, col:15> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|   |   `-ImplicitCastExpr 0x252ebe8d1a0 <col:6> 'alt::MValue::_Storage *' <LValueToRValue>
|   |     `-MemberExpr 0x252ebe8d170 <col:6> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|   |       `-CXXThisExpr 0x252ebe8d160 <col:6> 'alt::MValue *' implicit this
|   `-IfStmt 0x252ebe8d388 <line:115:4, line:116:12>
|     |-BinaryOperator 0x252ebe8d2e0 <line:115:8, col:29> 'bool' '=='
|     | |-ImplicitCastExpr 0x252ebe8d2b0 <col:8, col:17> 'uint64_t':'unsigned long long' <LValueToRValue>
|     | | `-MemberExpr 0x252ebe8d258 <col:8, col:17> 'uint64_t':'unsigned long long' lvalue ->refCount 0x252ebe85ee8
|     | |   `-ImplicitCastExpr 0x252ebe8d240 <col:8> 'alt::MValue::_Storage *' <LValueToRValue>
|     | |     `-MemberExpr 0x252ebe8d210 <col:8> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     | |       `-CXXThisExpr 0x252ebe8d200 <col:8> 'alt::MValue *' implicit this
|     | `-ImplicitCastExpr 0x252ebe8d2c8 <col:29> 'unsigned long long' <IntegralCast>
|     |   `-IntegerLiteral 0x252ebe8d288 <col:29> 'int' 0
|     `-CXXDeleteExpr 0x252ebe8d368 <line:116:5, col:12> 'void' Function 0x252ea72c358 'operator delete' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|       `-ImplicitCastExpr 0x252ebe8d340 <col:12> 'alt::MValue::_Storage *' <LValueToRValue>
|         `-MemberExpr 0x252ebe8d310 <col:12> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|           `-CXXThisExpr 0x252ebe8d300 <col:12> 'alt::MValue *' implicit this
|-FieldDecl 0x252ebe86de0 <line:119:3, col:8> col:8 referenced type 'alt::MValue::Type'
|-FieldDecl 0x252ebe86e48 <line:120:3, col:13> col:13 referenced storage 'alt::MValue::_Storage *'
|-AccessSpecDecl 0x252ebe86ea0 <line:122:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebe86f08 <line:123:3, col:27> col:3 used MValue 'void ()'
| `-CompoundStmt 0x252ebe8d428 <col:12, col:27>
|   `-CXXMemberCallExpr 0x252ebe8d408 <col:14, col:24> 'void'
|     `-MemberExpr 0x252ebe8d3d8 <col:14> '<bound member function type>' ->CreateNil 0x252ebe86ac8
|       `-CXXThisExpr 0x252ebe8d3c8 <col:14> 'alt::MValue *' implicit this
|-CXXConstructorDecl 0x252ebe870a8 <line:124:3, col:42> col:3 MValue 'void (const alt::MValue::Bool &)'
| |-ParmVarDecl 0x252ebe86fe8 <col:10, col:22> col:22 used val 'const alt::MValue::Bool &'
| `-CompoundStmt 0x252ebeef0b0 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef088 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef040 <col:29> '<bound member function type>' ->Create 0x252ebe8d6a8
|     | `-CXXThisExpr 0x252ebe8d7a8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebe8d4a8 <col:36> 'const alt::MValue::Bool':'const bool' lvalue ParmVar 0x252ebe86fe8 'val' 'const alt::MValue::Bool &'
|-CXXConstructorDecl 0x252ebe872b8 <line:125:3, col:41> col:3 MValue 'void (const alt::MValue::Int &)'
| |-ParmVarDecl 0x252ebe871c8 <col:10, col:21> col:21 used val 'const alt::MValue::Int &'
| `-CompoundStmt 0x252ebeef438 <col:26, col:41>
|   `-CXXMemberCallExpr 0x252ebeef410 <col:28, col:38> 'void'
|     |-MemberExpr 0x252ebeef3c8 <col:28> '<bound member function type>' ->Create 0x252ebeef2b8
|     | `-CXXThisExpr 0x252ebeef3b8 <col:28> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef130 <col:35> 'const alt::MValue::Int':'const long long' lvalue ParmVar 0x252ebe871c8 'val' 'const alt::MValue::Int &'
|-CXXConstructorDecl 0x252ebe87498 <line:126:3, col:42> col:3 MValue 'void (const alt::MValue::UInt &)'
| |-ParmVarDecl 0x252ebe873a8 <col:10, col:22> col:22 used val 'const alt::MValue::UInt &'
| `-CompoundStmt 0x252ebeef7c8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebeef7a0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebeef758 <col:29> '<bound member function type>' ->Create 0x252ebeef648
|     | `-CXXThisExpr 0x252ebeef748 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef4b8 <col:36> 'const alt::MValue::UInt':'const unsigned long long' lvalue ParmVar 0x252ebe873a8 'val' 'const alt::MValue::UInt &'
|-CXXConstructorDecl 0x252ebe87678 <line:127:3, col:44> col:3 MValue 'void (const alt::MValue::Double &)'
| |-ParmVarDecl 0x252ebe87588 <col:10, col:24> col:24 used val 'const alt::MValue::Double &'
| `-CompoundStmt 0x252ebeefb58 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefb30 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefae8 <col:31> '<bound member function type>' ->Create 0x252ebeef9d8
|     | `-CXXThisExpr 0x252ebeefad8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeef848 <col:38> 'const alt::MValue::Double':'const double' lvalue ParmVar 0x252ebe87588 'val' 'const alt::MValue::Double &'
|-CXXConstructorDecl 0x252ebe87828 <line:128:3, col:44> col:3 MValue 'void (const alt::MValue::String &)'
| |-ParmVarDecl 0x252ebe87768 <col:10, col:24> col:24 used val 'const alt::MValue::String &'
| `-CompoundStmt 0x252ebeefed8 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebeefeb0 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebeefe68 <col:31> '<bound member function type>' ->Create 0x252ebeefd58
|     | `-CXXThisExpr 0x252ebeefe58 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeefbd8 <col:38> 'const alt::MValue::String':'const alt::String' lvalue ParmVar 0x252ebe87768 'val' 'const alt::MValue::String &'
|-CXXConstructorDecl 0x252ebe87a38 <line:129:3, col:42> col:3 used MValue 'void (const alt::MValue::List &)'
| |-ParmVarDecl 0x252ebe87948 <col:10, col:22> col:22 used val 'const alt::MValue::List &'
| `-CompoundStmt 0x252ebef0258 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef0230 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef01e8 <col:29> '<bound member function type>' ->Create 0x252ebef00d8
|     | `-CXXThisExpr 0x252ebef01d8 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebeeff58 <col:36> 'const alt::MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebe87948 'val' 'const alt::MValue::List &'
|-CXXConstructorDecl 0x252ebe87c48 <line:130:3, col:42> col:3 used MValue 'void (const alt::MValue::Dict &)'
| |-ParmVarDecl 0x252ebe87b58 <col:10, col:22> col:22 used val 'const alt::MValue::Dict &'
| `-CompoundStmt 0x252ebef05d8 <col:27, col:42>
|   `-CXXMemberCallExpr 0x252ebef05b0 <col:29, col:39> 'void'
|     |-MemberExpr 0x252ebef0568 <col:29> '<bound member function type>' ->Create 0x252ebef0458
|     | `-CXXThisExpr 0x252ebef0558 <col:29> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef02d8 <col:36> 'const alt::MValue::Dict':'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x252ebe87b58 'val' 'const alt::MValue::Dict &'
|-CXXConstructorDecl 0x252ebe87e58 <line:131:3, col:44> col:3 MValue 'void (const alt::MValue::Entity &)'
| |-ParmVarDecl 0x252ebe87d68 <col:10, col:24> col:24 used val 'const alt::MValue::Entity &'
| `-CompoundStmt 0x252ebef0958 <col:29, col:44>
|   `-CXXMemberCallExpr 0x252ebef0930 <col:31, col:41> 'void'
|     |-MemberExpr 0x252ebef08e8 <col:31> '<bound member function type>' ->Create 0x252ebef07d8
|     | `-CXXThisExpr 0x252ebef08d8 <col:31> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef0658 <col:38> 'const alt::MValue::Entity':'alt::IBaseObject *const' lvalue ParmVar 0x252ebe87d68 'val' 'const alt::MValue::Entity &'
|-CXXConstructorDecl 0x252ebe88008 <line:132:3, col:46> col:3 used MValue 'void (const alt::MValue::Function &)'
| |-ParmVarDecl 0x252ebe87f48 <col:10, col:26> col:26 used val 'const alt::MValue::Function &'
| `-CompoundStmt 0x252ebef0cd8 <col:31, col:46>
|   `-CXXMemberCallExpr 0x252ebef0cb0 <col:33, col:43> 'void'
|     |-MemberExpr 0x252ebef0c68 <col:33> '<bound member function type>' ->Create 0x252ebef0b58
|     | `-CXXThisExpr 0x252ebef0c58 <col:33> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef09d8 <col:40> 'const alt::MValue::Function' lvalue ParmVar 0x252ebe87f48 'val' 'const alt::MValue::Function &'
|-CXXConstructorDecl 0x252ebe881b8 <line:134:3, col:43> col:3 MValue 'void (int32_t)'
| |-ParmVarDecl 0x252ebe880f0 <col:10, col:18> col:18 used val 'int32_t':'int'
| `-CompoundStmt 0x252ebef0fb0 <col:23, col:43>
|   `-ExprWithCleanups 0x252ebef0f98 <col:25, col:40> 'void'
|     `-CXXMemberCallExpr 0x252ebef0f28 <col:25, col:40> 'void'
|       |-MemberExpr 0x252ebef0ea0 <col:25, col:35> '<bound member function type>' ->Create 0x252ebeef2b8
|       | `-CXXThisExpr 0x252ebef0e90 <col:25> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef0f80 <col:37> 'const long long':'const long long' lvalue
|         `-ImplicitCastExpr 0x252ebef0f68 <col:37> 'const long long':'const long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef0f50 <col:37> 'int32_t':'int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef0da8 <col:37> 'int32_t':'int' lvalue ParmVar 0x252ebe880f0 'val' 'int32_t':'int'
|-CXXConstructorDecl 0x252ebe88338 <line:135:3, col:45> col:3 MValue 'void (uint32_t)'
| |-ParmVarDecl 0x252ebe88278 <col:10, col:19> col:19 used val 'uint32_t':'unsigned int'
| `-CompoundStmt 0x252ebef1288 <col:24, col:45>
|   `-ExprWithCleanups 0x252ebef1270 <col:26, col:42> 'void'
|     `-CXXMemberCallExpr 0x252ebef1200 <col:26, col:42> 'void'
|       |-MemberExpr 0x252ebef1178 <col:26, col:37> '<bound member function type>' ->Create 0x252ebeef648
|       | `-CXXThisExpr 0x252ebef1168 <col:26> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1258 <col:39> 'const unsigned long long':'const unsigned long long' lvalue
|         `-ImplicitCastExpr 0x252ebef1240 <col:39> 'const unsigned long long':'const unsigned long long' <IntegralCast>
|           `-ImplicitCastExpr 0x252ebef1228 <col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x252ebef1080 <col:39> 'uint32_t':'unsigned int' lvalue ParmVar 0x252ebe88278 'val' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x252ebe88490 <line:136:3, col:50> col:3 MValue 'void (const char *)'
| |-ParmVarDecl 0x252ebe88400 <col:10, col:22> col:22 used val 'const char *'
| `-CompoundStmt 0x252ebef1600 <col:27, col:50>
|   `-ExprWithCleanups 0x252ebef15e8 <col:29, col:47> 'void'
|     `-CXXMemberCallExpr 0x252ebef1508 <col:29, col:47> 'void'
|       |-MemberExpr 0x252ebef1480 <col:29, col:42> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef1470 <col:29> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef15d0 <col:44> 'const alt::String':'const alt::String' lvalue
|         `-CXXBindTemporaryExpr 0x252ebef15b0 <col:44> 'const alt::String':'const alt::String' (CXXTemporary 0x252ebef15a8)
|           `-CXXConstructExpr 0x252ebef1578 <col:44> 'const alt::String':'const alt::String' 'void (const char *)'
|             `-ImplicitCastExpr 0x252ebef1560 <col:44> 'const char *' <LValueToRValue>
|               `-DeclRefExpr 0x252ebef1358 <col:44> 'const char *' lvalue ParmVar 0x252ebe88400 'val' 'const char *'
|-CXXConstructorDecl 0x252ebe886b8 <line:137:3, col:57> col:3 MValue 'void (const std::string &)'
| |-ParmVarDecl 0x252ebe885f0 <col:10, col:29> col:29 used val 'const std::string &'
| `-CompoundStmt 0x252ebef1990 <col:34, col:57>
|   `-ExprWithCleanups 0x252ebef1978 <col:36, col:54> 'void'
|     `-CXXMemberCallExpr 0x252ebef1880 <col:36, col:54> 'void'
|       |-MemberExpr 0x252ebef17f8 <col:36, col:49> '<bound member function type>' ->Create 0x252ebeefd58
|       | `-CXXThisExpr 0x252ebef17e8 <col:36> 'alt::MValue *' implicit this
|       `-MaterializeTemporaryExpr 0x252ebef1960 <col:51> 'const alt::String':'const alt::String' lvalue
|         `-ImplicitCastExpr 0x252ebef1948 <col:51> 'const alt::String':'const alt::String' <NoOp>
|           `-CXXBindTemporaryExpr 0x252ebef1928 <col:51> 'alt::String':'alt::String' (CXXTemporary 0x252ebef1920)
|             `-ImplicitCastExpr 0x252ebef1908 <col:51> 'alt::String':'alt::String' <ConstructorConversion>
|               `-CXXConstructExpr 0x252ebef18d8 <col:51> 'alt::String':'alt::String' 'void (const std::string &)'
|                 `-DeclRefExpr 0x252ebef16d0 <col:51> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebe885f0 'val' 'const std::string &'
|-CXXConstructorDecl 0x252ebe88808 <line:139:3, col:44> col:3 used MValue 'void (const alt::MValue &)'
| |-ParmVarDecl 0x252ebe88778 <col:10, col:24> col:24 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1a30 <col:30, col:44>
|   `-CXXMemberCallExpr 0x252ebef1a08 <col:32, col:41> 'void'
|     |-MemberExpr 0x252ebef19b8 <col:32> '<bound member function type>' ->Copy 0x252ebe86c68
|     | `-CXXThisExpr 0x252ebef19a8 <col:32> 'alt::MValue *' implicit this
|     `-DeclRefExpr 0x252ebef19e8 <col:37> 'const alt::MValue' lvalue ParmVar 0x252ebe88778 'that' 'const alt::MValue &'
|-CXXMethodDecl 0x252ebe889b8 <line:141:3, line:147:3> line:141:11 used operator= 'alt::MValue &(const alt::MValue &)'
| |-ParmVarDecl 0x252ebe888c8 <col:21, col:35> col:35 used that 'const alt::MValue &'
| `-CompoundStmt 0x252ebef1b68 <line:142:3, line:147:3>
|   |-CXXMemberCallExpr 0x252ebef1a88 <line:143:4, col:12> 'void'
|   | `-MemberExpr 0x252ebef1a58 <col:4> '<bound member function type>' ->Destroy 0x252ebe86d30
|   |   `-CXXThisExpr 0x252ebef1a48 <col:4> 'alt::MValue *' implicit this
|   |-CXXMemberCallExpr 0x252ebef1b08 <line:144:4, col:13> 'void'
|   | |-MemberExpr 0x252ebef1ab8 <col:4> '<bound member function type>' ->Copy 0x252ebe86c68
|   | | `-CXXThisExpr 0x252ebef1aa8 <col:4> 'alt::MValue *' implicit this
|   | `-DeclRefExpr 0x252ebef1ae8 <col:9> 'const alt::MValue' lvalue ParmVar 0x252ebe888c8 'that' 'const alt::MValue &'
|   `-ReturnStmt 0x252ebef1b58 <line:146:4, col:12>
|     `-UnaryOperator 0x252ebef1b40 <col:11, col:12> 'alt::MValue' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ebef1b30 <col:12> 'alt::MValue *' this
|-CXXMethodDecl 0x252ebe88aa8 <line:149:3, line:152:3> line:149:8 ToBool 'alt::MValue::Bool ()'
| `-CompoundStmt 0x252ebef1c60 <line:150:3, line:152:3>
|   `-ReturnStmt 0x252ebef1c50 <line:151:4, col:22>
|     `-BinaryOperator 0x252ebef1c30 <col:11, col:22> 'bool' '!='
|       |-CXXMemberCallExpr 0x252ebef1bd0 <col:11, col:17> 'alt::MValue::Int':'long long'
|       | `-MemberExpr 0x252ebef1ba0 <col:11> '<bound member function type>' ->ToInt 0x252ebe88b98
|       |   `-CXXThisExpr 0x252ebef1b90 <col:11> 'alt::MValue *' implicit this
|       `-ImplicitCastExpr 0x252ebef1c18 <col:22> 'long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebef1bf0 <col:22> 'int' 0
|-CXXMethodDecl 0x252ebe88b98 <line:154:3, line:169:3> line:154:7 used ToInt 'alt::MValue::Int ()'
| `-CompoundStmt 0x252ebef30c8 <line:155:3, line:169:3>
|   |-SwitchStmt 0x252ebef1cd0 <line:156:4, line:166:4>
|   | |-ImplicitCastExpr 0x252ebef1cb8 <line:156:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef1c88 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef1c78 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3048 <line:157:4, line:166:4>
|   |   |-CaseStmt 0x252ebef1d78 <line:158:4, line:159:22>
|   |   | |-ConstantExpr 0x252ebef1d58 <line:158:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef1d28 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2218 <line:159:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2200 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef21e8 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef21c8 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef2140 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef2130 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef22b0 <line:160:4, line:161:21>
|   |   | |-ConstantExpr 0x252ebef2290 <line:160:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef2260 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef26c0 <line:161:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef26a8 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef2688 <col:12, col:21> 'long long':'long long' lvalue
|   |   |       `-MemberExpr 0x252ebef2600 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |         `-CXXThisExpr 0x252ebef25f0 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef2758 <line:162:4, line:163:22>
|   |   | |-ConstantExpr 0x252ebef2738 <line:162:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef2708 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef2b78 <line:163:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef2b60 <col:12, col:22> 'alt::MValue::Int':'long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef2b48 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef2b28 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |         `-MemberExpr 0x252ebef2aa0 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |           `-CXXThisExpr 0x252ebef2a90 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef2c10 <line:164:4, line:165:24>
|   |     |-ConstantExpr 0x252ebef2bf0 <line:164:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef2bc0 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3038 <line:165:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3020 <col:12, col:24> 'alt::MValue::Int':'long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3008 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef2fe8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef2f60 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef2f50 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef30b8 <line:168:4, col:11>
|     `-ImplicitCastExpr 0x252ebef30a0 <col:11> 'alt::MValue::Int':'long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3078 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88c88 <line:171:3, line:186:3> line:171:8 ToUInt 'alt::MValue::UInt ()'
| `-CompoundStmt 0x252ebef3d88 <line:172:3, line:186:3>
|   |-SwitchStmt 0x252ebef3140 <line:173:4, line:183:4>
|   | |-ImplicitCastExpr 0x252ebef3128 <line:173:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef30f8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef30e8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef3d08 <line:174:4, line:183:4>
|   |   |-CaseStmt 0x252ebef31e8 <line:175:4, line:176:22>
|   |   | |-ConstantExpr 0x252ebef31c8 <line:175:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3198 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3440 <line:176:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef3428 <col:12, col:22> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3410 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef33f0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         `-MemberExpr 0x252ebef3368 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |           `-CXXThisExpr 0x252ebef3358 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef34d8 <line:177:4, line:178:21>
|   |   | |-ConstantExpr 0x252ebef34b8 <line:177:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef3488 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3730 <line:178:5, col:21>
|   |   |   `-ImplicitCastExpr 0x252ebef3718 <col:12, col:21> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x252ebef3700 <col:12, col:21> 'long long':'long long' <LValueToRValue>
|   |   |       `-CXXMemberCallExpr 0x252ebef36e0 <col:12, col:21> 'long long':'long long' lvalue
|   |   |         `-MemberExpr 0x252ebef3658 <col:12, col:19> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |           `-CXXThisExpr 0x252ebef3648 <col:12> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef37c8 <line:179:4, line:180:22>
|   |   | |-ConstantExpr 0x252ebef37a8 <line:179:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef3778 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef3a08 <line:180:5, col:22>
|   |   |   `-ImplicitCastExpr 0x252ebef39f0 <col:12, col:22> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |     `-CXXMemberCallExpr 0x252ebef39d0 <col:12, col:22> 'unsigned long long':'unsigned long long' lvalue
|   |   |       `-MemberExpr 0x252ebef3948 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2998
|   |   |         `-CXXThisExpr 0x252ebef3938 <col:12> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef3aa0 <line:181:4, line:182:24>
|   |     |-ConstantExpr 0x252ebef3a80 <line:181:9, col:15> 'alt::MValue::Type' 4
|   |     | `-DeclRefExpr 0x252ebef3a50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef3cf8 <line:182:5, col:24>
|   |       `-ImplicitCastExpr 0x252ebef3ce0 <col:12, col:24> 'alt::MValue::UInt':'unsigned long long' <FloatingToIntegral>
|   |         `-ImplicitCastExpr 0x252ebef3cc8 <col:12, col:24> 'double':'double' <LValueToRValue>
|   |           `-CXXMemberCallExpr 0x252ebef3ca8 <col:12, col:24> 'double':'double' lvalue
|   |             `-MemberExpr 0x252ebef3c20 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef2e58
|   |               `-CXXThisExpr 0x252ebef3c10 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef3d78 <line:185:4, col:11>
|     `-ImplicitCastExpr 0x252ebef3d60 <col:11> 'alt::MValue::UInt':'unsigned long long' <IntegralCast>
|       `-IntegerLiteral 0x252ebef3d38 <col:11> 'int' 0
|-CXXMethodDecl 0x252ebe88da8 <line:188:3, line:205:3> line:188:10 ToString 'alt::MValue::String ()'
| `-CompoundStmt 0x252ebef5b60 <line:189:3, line:205:3>
|   |-SwitchStmt 0x252ebef3e00 <line:190:4, line:202:4>
|   | |-ImplicitCastExpr 0x252ebef3de8 <line:190:12> 'alt::MValue::Type' <LValueToRValue>
|   | | `-MemberExpr 0x252ebef3db8 <col:12> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|   | |   `-CXXThisExpr 0x252ebef3da8 <col:12> 'alt::MValue *' implicit this
|   | `-CompoundStmt 0x252ebef5650 <line:191:4, line:202:4>
|   |   |-CaseStmt 0x252ebef3ea8 <line:192:4, line:193:35>
|   |   | |-ConstantExpr 0x252ebef3e88 <line:192:9, col:15> 'alt::MValue::Type' 1
|   |   | | `-DeclRefExpr 0x252ebef3e58 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe805b8 'BOOL' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4200 <line:193:5, col:35>
|   |   |   `-ImplicitCastExpr 0x252ebef41e8 <col:12, col:35> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |     `-CXXConstructExpr 0x252ebef41b8 <col:12, col:35> 'alt::MValue::String':'alt::String' 'void (const char *)'
|   |   |       `-ConditionalOperator 0x252ebef4158 <col:12, col:35> 'const char *'
|   |   |         |-ImplicitCastExpr 0x252ebef4110 <col:12, col:22> 'bool':'bool' <LValueToRValue>
|   |   |         | `-CXXMemberCallExpr 0x252ebef40b0 <col:12, col:22> 'bool':'bool' lvalue
|   |   |         |   `-MemberExpr 0x252ebef4028 <col:12, col:20> '<bound member function type>' ->Get 0x252ebef2038
|   |   |         |     `-CXXThisExpr 0x252ebef4018 <col:12> 'alt::MValue *' implicit this
|   |   |         |-ImplicitCastExpr 0x252ebef4128 <col:26> 'const char *' <ArrayToPointerDecay>
|   |   |         | `-StringLiteral 0x252ebef40d0 <col:26> 'const char [5]' lvalue "true"
|   |   |         `-ImplicitCastExpr 0x252ebef4140 <col:35> 'const char *' <ArrayToPointerDecay>
|   |   |           `-StringLiteral 0x252ebef40f0 <col:35> 'const char [6]' lvalue "false"
|   |   |-CaseStmt 0x252ebef4298 <line:194:4, line:195:37>
|   |   | |-ConstantExpr 0x252ebef4278 <line:194:9, col:15> 'alt::MValue::Type' 2
|   |   | | `-DeclRefExpr 0x252ebef4248 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80610 'INT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4708 <line:195:5, col:37>
|   |   |   `-ExprWithCleanups 0x252ebef46f0 <col:12, col:37> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef46d8 <col:12, col:37> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef46a8 <col:12, col:37> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4690 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4678 <col:12, col:37> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4628 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4620)
|   |   |               `-CallExpr 0x252ebef45e0 <col:12, col:37> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef45c8 <col:12, col:17> 'std::string (*)(long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4568 <col:12, col:17> 'std::string (long long)' lvalue Function 0x252ebb69528 'to_string' 'std::string (long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4608 <col:27, col:36> 'long long':'long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4548 <col:27, col:36> 'long long':'long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef44c0 <col:27, col:34> '<bound member function type>' ->Get 0x252ebef24f8
|   |   |                       `-CXXThisExpr 0x252ebef44b0 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef47a0 <line:196:4, line:197:38>
|   |   | |-ConstantExpr 0x252ebef4780 <line:196:9, col:15> 'alt::MValue::Type' 3
|   |   | | `-DeclRefExpr 0x252ebef4750 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80668 'UINT' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef4c08 <line:197:5, col:38>
|   |   |   `-ExprWithCleanups 0x252ebef4bf0 <col:12, col:38> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef4bd8 <col:12, col:38> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef4ba8 <col:12, col:38> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef4b90 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef4b78 <col:12, col:38> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef4b28 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef4b20)
|   |   |               `-CallExpr 0x252ebef4ae0 <col:12, col:38> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ac8 <col:12, col:17> 'std::string (*)(unsigned long long)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4a70 <col:12, col:17> 'std::string (unsigned long long)' lvalue Function 0x252ebb69fb8 'to_string' 'std::string (unsigned long long)'
|   |   |                 `-ImplicitCastExpr 0x252ebef4b08 <col:27, col:37> 'unsigned long long':'unsigned long long' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4a50 <col:27, col:37> 'unsigned long long':'unsigned long long' lvalue
|   |   |                     `-MemberExpr 0x252ebef49c8 <col:27, col:35> '<bound member function type>' ->Get 0x252ebef2998
|   |   |                       `-CXXThisExpr 0x252ebef49b8 <col:27> 'alt::MValue *' implicit this
|   |   |-CaseStmt 0x252ebef4ca0 <line:198:4, line:199:40>
|   |   | |-ConstantExpr 0x252ebef4c80 <line:198:9, col:15> 'alt::MValue::Type' 4
|   |   | | `-DeclRefExpr 0x252ebef4c50 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe806c0 'DOUBLE' 'alt::MValue::Type'
|   |   | `-ReturnStmt 0x252ebef5138 <line:199:5, col:40>
|   |   |   `-ExprWithCleanups 0x252ebef5120 <col:12, col:40> 'alt::MValue::String':'alt::String'
|   |   |     `-ImplicitCastExpr 0x252ebef5108 <col:12, col:40> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|   |   |       `-CXXConstructExpr 0x252ebef50d8 <col:12, col:40> 'alt::MValue::String':'alt::String' 'void (const std::string &)'
|   |   |         `-MaterializeTemporaryExpr 0x252ebef50c0 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue
|   |   |           `-ImplicitCastExpr 0x252ebef50a8 <col:12, col:40> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' <NoOp>
|   |   |             `-CXXBindTemporaryExpr 0x252ebef5058 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebef5050)
|   |   |               `-CallExpr 0x252ebef5010 <col:12, col:40> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|   |   |                 |-ImplicitCastExpr 0x252ebef4ff8 <col:12, col:17> 'std::string (*)(double)' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x252ebef4f70 <col:12, col:17> 'std::string (double)' lvalue Function 0x252ebb6b1c8 'to_string' 'std::string (double)'
|   |   |                 `-ImplicitCastExpr 0x252ebef5038 <col:27, col:39> 'double':'double' <LValueToRValue>
|   |   |                   `-CXXMemberCallExpr 0x252ebef4f50 <col:27, col:39> 'double':'double' lvalue
|   |   |                     `-MemberExpr 0x252ebef4ec8 <col:27, col:37> '<bound member function type>' ->Get 0x252ebef2e58
|   |   |                       `-CXXThisExpr 0x252ebef4eb8 <col:27> 'alt::MValue *' implicit this
|   |   `-CaseStmt 0x252ebef51d0 <line:200:4, line:201:24>
|   |     |-ConstantExpr 0x252ebef51b0 <line:200:9, col:15> 'alt::MValue::Type' 5
|   |     | `-DeclRefExpr 0x252ebef5180 <col:9, col:15> 'alt::MValue::Type' EnumConstant 0x252ebe80718 'STRING' 'alt::MValue::Type'
|   |     `-ReturnStmt 0x252ebef5640 <line:201:5, col:24>
|   |       `-CXXConstructExpr 0x252ebef5610 <col:12, col:24> 'alt::MValue::String':'alt::String' 'void (const alt::String &)'
|   |         `-ImplicitCastExpr 0x252ebef55f8 <col:12, col:24> 'const alt::String':'const alt::String' lvalue <NoOp>
|   |           `-CXXMemberCallExpr 0x252ebef55a8 <col:12, col:24> 'alt::String':'alt::String' lvalue
|   |             `-MemberExpr 0x252ebef5520 <col:12, col:22> '<bound member function type>' ->Get 0x252ebef5418
|   |               `-CXXThisExpr 0x252ebef5510 <col:12> 'alt::MValue *' implicit this
|   `-ReturnStmt 0x252ebef5b50 <line:204:4, col:11>
|     `-ImplicitCastExpr 0x252ebef5b38 <col:11> 'alt::MValue::String':'alt::String' <ConstructorConversion>
|       `-CXXConstructExpr 0x252ebef5b08 <col:11> 'alt::MValue::String':'alt::String' 'void (const char *)'
|         `-ImplicitCastExpr 0x252ebef5af0 <col:11> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x252ebef5688 <col:11> 'const char [9]' lvalue "MValue<>"
|-CXXMethodDecl 0x252ebe88ec8 <line:207:3, col:39> col:8 used GetType 'alt::MValue::Type () const'
| `-CompoundStmt 0x252ebef5be8 <col:24, col:39>
|   `-ReturnStmt 0x252ebef5bd8 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebef5bc0 <col:33> 'alt::MValue::Type' <LValueToRValue>
|       `-MemberExpr 0x252ebef5b90 <col:33> 'const alt::MValue::Type' lvalue ->type 0x252ebe86de0
|         `-CXXThisExpr 0x252ebef5b80 <col:33> 'const alt::MValue *' implicit this
|-FunctionTemplateDecl 0x252ebe8c790 <line:209:3, line:210:38> col:34 Get
| |-NonTypeTemplateParmDecl 0x252ebe88f78 <line:209:12, col:17> col:17 referenced 'alt::MValue::Type' depth 0 index 0 _type
| |-TemplateTypeParmDecl 0x252ebe8bd90 <col:24, <scratch space>:16:1> D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:209:33 typename depth 0 index 1 T
| | `-TemplateArgument type 'typename TypeTag::Type<_type>':'typename _Type<(uint64_t)_type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
| `-CXXMethodDecl 0x252ebe8c6f0 <line:210:3, col:38> col:34 Get 'typename TypeTag::Type<_type> &()'
|   `-<<<NULL>>>
|-FunctionTemplateDecl 0x252ebe8c998 <line:215:3, line:223:3> line:216:6 Get
| |-TemplateTypeParmDecl 0x252ebe8c7e8 <line:215:12, col:18> col:18 referenced class depth 0 index 0 T
| |-CXXMethodDecl 0x252ebe8c8f8 <line:216:3, line:223:3> line:216:6 Get 'T &()'
| | `-CompoundStmt 0x252ec4e6df0 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6b78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6ac0 <line:218:8, col:30> '<dependent type>' '!='
| |   | | |-UnresolvedLookupExpr 0x252ec4e69f8 <col:8, col:25> '<dependent type>' lvalue (no ADL) = 'TypeId' 0x252ebe8b358
| |   | | `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |   `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6b60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6b48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6b28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6b20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e6d60 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6ba0 <col:4, col:52> col:9 referenced _storage 'auto' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e6d30 <col:20, col:52> 'Storage<T> *' static_cast<Storage<T> *> <Dependent>
| |   |     `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |       `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e6de0 <line:222:4, col:21>
| |     `-CXXDependentScopeMemberExpr 0x252ec4e6d98 <col:11, col:21> '<dependent type>' lvalue ->value
| |       `-DeclRefExpr 0x252ec4e6d78 <col:11> 'auto' lvalue Var 0x252ec4e6ba0 '_storage' 'auto'
| |-CXXMethodDecl 0x252ebef2038 <line:216:3, line:223:3> line:216:6 used Get 'bool &()'
| | |-TemplateArgument type 'bool'
| | `-CompoundStmt 0x252ec4e7248 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e6fb0 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e6f38 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e6f08 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e6e98 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec33e448 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e6f20 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e6f98 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e6f80 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e6f60 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e6f58)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e71b8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e6fc8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e70f8 <col:20, col:52> 'Storage<bool> *' static_cast<Storage<_Bool> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e70e0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7238 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7208 <col:11, col:21> 'bool':'bool' lvalue ->value 0x252ec340348
| |       `-ImplicitCastExpr 0x252ec4e71f0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e71d0 <col:11> 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *' lvalue Var 0x252ec4e6fc8 '_storage' 'alt::MValue::Storage<bool> *':'alt::MValue::Storage<bool> *'
| |-CXXMethodDecl 0x252ebef24f8 <line:216:3, line:223:3> line:216:6 used Get 'long long &()'
| | |-TemplateArgument type 'long long'
| | `-CompoundStmt 0x252ec4e76a8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7408 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7390 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7360 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e72f0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec341470 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7378 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e73f0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e73d8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e73b8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e73b0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7618 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7420 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7558 <col:20, col:52> 'Storage<long long> *' static_cast<Storage<long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7540 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7698 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7668 <col:11, col:21> 'long long':'long long' lvalue ->value 0x252ec343698
| |       `-ImplicitCastExpr 0x252ec4e7650 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7630 <col:11> 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *' lvalue Var 0x252ec4e7420 '_storage' 'alt::MValue::Storage<long long> *':'alt::MValue::Storage<long long> *'
| |-CXXMethodDecl 0x252ebef2998 <line:216:3, line:223:3> line:216:6 used Get 'unsigned long long &()'
| | |-TemplateArgument type 'unsigned long long'
| | `-CompoundStmt 0x252ec4e7b08 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7868 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e77f0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e77c0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7750 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec344488 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e77d8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7850 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7838 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7818 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7810)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7a78 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7880 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e79b8 <col:20, col:52> 'Storage<unsigned long long> *' static_cast<Storage<unsigned long long> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e79a0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7af8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7ac8 <col:11, col:21> 'unsigned long long':'unsigned long long' lvalue ->value 0x252ec346cc8
| |       `-ImplicitCastExpr 0x252ec4e7ab0 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7a90 <col:11> 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *' lvalue Var 0x252ec4e7880 '_storage' 'alt::MValue::Storage<unsigned long long> *':'alt::MValue::Storage<unsigned long long> *'
| |-CXXMethodDecl 0x252ebef2e58 <line:216:3, line:223:3> line:216:6 used Get 'double &()'
| | |-TemplateArgument type 'double'
| | `-CompoundStmt 0x252ec4e7f68 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e7cc8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e7c50 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e7c20 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e7bb0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec347ab8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e7c38 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e7cb0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e7c98 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e7c78 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e7c70)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e7ed8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e7ce0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e7e18 <col:20, col:52> 'Storage<double> *' static_cast<Storage<double> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e7e00 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e7f58 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e7f28 <col:11, col:21> 'double':'double' lvalue ->value 0x252ec34a898
| |       `-ImplicitCastExpr 0x252ec4e7f10 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e7ef0 <col:11> 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *' lvalue Var 0x252ec4e7ce0 '_storage' 'alt::MValue::Storage<double> *':'alt::MValue::Storage<double> *'
| |-CXXMethodDecl 0x252ebef5418 <line:216:3, line:223:3> line:216:6 used Get 'alt::String &()'
| | |-TemplateArgument type 'alt::String'
| | `-CompoundStmt 0x252ec4e83c8 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8128 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e80b0 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8080 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8010 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34b688 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8098 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8110 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e80f8 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e80d8 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e80d0)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e8338 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8140 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e8278 <col:20, col:52> 'Storage<alt::String> *' static_cast<Storage<class alt::String> *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e8260 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e83b8 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e8388 <col:11, col:21> 'alt::String':'alt::String' lvalue ->value 0x252ec34e9c8
| |       `-ImplicitCastExpr 0x252ec4e8370 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e8350 <col:11> 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *' lvalue Var 0x252ec4e8140 '_storage' 'alt::MValue::Storage<alt::String> *':'alt::MValue::Storage<alt::String> *'
| |-CXXMethodDecl 0x252ebfc59a8 <line:216:3, line:223:3> line:216:6 used Get 'alt::Array<alt::MValue> &()'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-CompoundStmt 0x252ec4e9218 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec4e8f78 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec4e8f00 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec4e8ed0 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec4e8e60 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec34f8a8 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec4e8ee8 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec4e8f60 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec4e8f48 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec4e8f28 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec4e8f20)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec4e9188 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec4e8f90 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec4e90c8 <col:20, col:52> 'Storage<alt::Array<alt::MValue> > *' static_cast<Storage<class alt::Array<class alt::MValue> > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec4e90b0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec4e9208 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec4e91d8 <col:11, col:21> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue ->value 0x252ec353148
| |       `-ImplicitCastExpr 0x252ec4e91c0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec4e91a0 <col:11> 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *' lvalue Var 0x252ec4e8f90 '_storage' 'alt::MValue::Storage<alt::Array<alt::MValue> > *':'alt::MValue::Storage<alt::Array<alt::MValue> > *'
| |-CXXMethodDecl 0x252ebfc7d08 <line:216:3, line:223:3> line:216:6 used Get 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &()'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-CompoundStmt 0x252ec506058 <line:217:3, line:223:3>
| |   |-IfStmt 0x252ec505db8 <line:218:4, line:219:33>
| |   | |-BinaryOperator 0x252ec505d40 <line:218:8, col:30> 'bool' '!='
| |   | | |-ImplicitCastExpr 0x252ec505d10 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x252ec505ca0 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec355d98 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |   | | `-ImplicitCastExpr 0x252ec505d28 <col:30> 'alt::MValue::Type' <LValueToRValue>
| |   | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
| |   | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
| |   | `-ExprWithCleanups 0x252ec505da0 <line:219:5, col:33> 'void'
| |   |   `-CXXThrowExpr 0x252ec505d88 <col:5, col:33> 'void'
| |   |     `-CXXBindTemporaryExpr 0x252ec505d68 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec505d60)
| |   |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
| |   |-DeclStmt 0x252ec505fc8 <line:221:4, col:53>
| |   | `-VarDecl 0x252ec505dd0 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' cinit
| |   |   `-CXXStaticCastExpr 0x252ec505f08 <col:20, col:52> 'Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' static_cast<Storage<class std::unordered_map<class alt::String, class alt::MValue, struct std::hash<alt::String>, struct std::equal_to<class alt::String>, class std::allocator<struct std::pair<const class alt::String, class alt::MValue> > > > *> <BaseToDerived (_Storage)>
| |   |     `-ImplicitCastExpr 0x252ec505ef0 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
| |   |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
| |   |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
| |   `-ReturnStmt 0x252ec506048 <line:222:4, col:21>
| |     `-MemberExpr 0x252ec506018 <col:11, col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >':'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ->value 0x252ec359a88
| |       `-ImplicitCastExpr 0x252ec506000 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' <LValueToRValue>
| |         `-DeclRefExpr 0x252ec505fe0 <col:11> 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *' lvalue Var 0x252ec505dd0 '_storage' 'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *':'alt::MValue::Storage<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > > *'
| `-CXXMethodDecl 0x252ebfd05b8 <line:216:3, line:223:3> line:216:6 used Get 'alt::MValue::Function &()'
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-CompoundStmt 0x252ec5a4468 <line:217:3, line:223:3>
|     |-IfStmt 0x252ec5a41d0 <line:218:4, line:219:33>
|     | |-BinaryOperator 0x252ec5a4158 <line:218:8, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x252ec5a4128 <col:8, col:25> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     | | | `-DeclRefExpr 0x252ec5a40b8 <col:8, col:25> 'const MValue::Type':'const alt::MValue::Type' lvalue VarTemplateSpecialization 0x252ec4e0f68 'TypeId' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|     | | `-ImplicitCastExpr 0x252ec5a4140 <col:30> 'alt::MValue::Type' <LValueToRValue>
|     | |   `-MemberExpr 0x252ec4e6a90 <col:30> 'alt::MValue::Type' lvalue ->type 0x252ebe86de0
|     | |     `-CXXThisExpr 0x252ec4e6a80 <col:30> 'alt::MValue *' implicit this
|     | `-ExprWithCleanups 0x252ec5a41b8 <line:219:5, col:33> 'void'
|     |   `-CXXThrowExpr 0x252ec5a41a0 <col:5, col:33> 'void'
|     |     `-CXXBindTemporaryExpr 0x252ec5a4180 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ec5a4178)
|     |       `-CXXTemporaryObjectExpr 0x252ec4e6af0 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|     |-DeclStmt 0x252ec5a43d8 <line:221:4, col:53>
|     | `-VarDecl 0x252ec5a41e8 <col:4, col:52> col:9 used _storage 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' cinit
|     |   `-CXXStaticCastExpr 0x252ec5a4318 <col:20, col:52> 'Storage<alt::MValue::Function> *' static_cast<Storage<struct alt::MValue::Function> *> <BaseToDerived (_Storage)>
|     |     `-ImplicitCastExpr 0x252ec5a4300 <col:45> 'alt::MValue::_Storage *' <LValueToRValue> part_of_explicit_cast
|     |       `-MemberExpr 0x252ec4e6ca0 <col:45> 'alt::MValue::_Storage *' lvalue ->storage 0x252ebe86e48
|     |         `-CXXThisExpr 0x252ec4e6c90 <col:45> 'alt::MValue *' implicit this
|     `-ReturnStmt 0x252ec5a4458 <line:222:4, col:21>
|       `-MemberExpr 0x252ec5a4428 <col:11, col:21> 'alt::MValue::Function':'alt::MValue::Function' lvalue ->value 0x252ec4e55b8
|         `-ImplicitCastExpr 0x252ec5a4410 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' <LValueToRValue>
|           `-DeclRefExpr 0x252ec5a43f0 <col:11> 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *' lvalue Var 0x252ec5a41e8 '_storage' 'alt::MValue::Storage<alt::MValue::Function> *':'alt::MValue::Storage<alt::MValue::Function> *'
`-CXXDestructorDecl 0x252ebe8ca38 <line:225:3, col:26> col:3 used ~MValue 'void () noexcept'
  `-CompoundStmt 0x252ebef5c60 <col:13, col:26>
    `-CXXMemberCallExpr 0x252ebef5c40 <col:15, col:23> 'void'
      `-MemberExpr 0x252ebef5c10 <col:15> '<bound member function type>' ->Destroy 0x252ebe86d30
        `-CXXThisExpr 0x252ebef5c00 <col:15> 'alt::MValue *' implicit this

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_CPlayerConnectEvent_Cancel1
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_CPlayerConnectEvent_Cancel1
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_CPlayerConnectEvent_Cancel1
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPackage_FileExists
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPackage_FileExists
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPackage_FileExists
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IPackage_OpenFile
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IPackage_OpenFile
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IPackage_OpenFile
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IColShape_SetPosition
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IColShape_SetPosition
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IColShape_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IColShape_SetPosition
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_GetResource
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_GetResource
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_GetResource
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogInfo
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogInfo
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogInfo
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogDebug
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogDebug
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogDebug
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogWarning
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogWarning
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogWarning
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogError
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogError
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogError
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_LogColored
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_LogColored
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_LogColored
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_Hash
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_Hash
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_Hash
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_RegisterScriptRuntime
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_RegisterScriptRuntime
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_RegisterScriptRuntime
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_SubscribeCommand
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_SubscribeCommand
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_SubscribeCommand
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerServerEvent
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerServerEvent
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerServerEvent
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerServerEvent
RecordType 0x252ebef5d80 'class alt::MValueList'
`-CXXRecord 0x252ebef5ce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerServerEvent
RecordType 0x252ebef5d80 'class alt::MValueList'
`-CXXRecord 0x252ebef5ce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerServerEvent
CXXRecordDecl 0x252ebef5ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x252ebef5e48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x252ebef5ed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebef5f70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x252ebfc4d18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x252ebfc4ce8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x252ebfc4cd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x252ebfc4cb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x252ebef9398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x252ebef9390)
| |           `-CXXTemporaryObjectExpr 0x252ebef9360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x252ebfc4d60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x252ebef60b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x252ebef6028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x252ebfc5018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x252ebfc4fe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x252ebfc4fd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x252ebfc4fb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x252ebfc4f30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x252ebfc4f10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x252ebfc4f08)
| |             `-CXXConstructExpr 0x252ebfc4ed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x252ebfc4de8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x252ebfc4dc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef6028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x252ebfc4eb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x252ebfc5060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x252ebef62f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x252ebef6230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ebfc50f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x252ebfc5070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef6230 'list' 'const MValue::List &'
| `-CompoundStmt 0x252ebfc5150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x252ebef6478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x252ebef63b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ebfc5160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x252ebfc5768 <line:29:3, line:34:3>
|   |-IfStmt 0x252ebfc55f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x252ebfc52b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x252ebfc5218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x252ebfc51e8 <col:8, col:12> '<bound member function type>' .GetType 0x252ebe88ec8
|   | | |   `-ImplicitCastExpr 0x252ebfc5238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x252ebfc51c8 <col:8> 'alt::MValue' lvalue ParmVar 0x252ebef63b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x252ebfc5288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x252ebe80770 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x252ebfc55e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x252ebfc55c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x252ebfc5498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ebfc5490)
|   |       `-CXXTemporaryObjectExpr 0x252ebfc5460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x252ebfc5730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x252ebfc5718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x252ebfc56c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x252ebfc5678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x252ebfc5650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x252ebfc5630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x252ebfc5610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x252ebfc56b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x252ebfc5690 <col:21> 'alt::MValue' lvalue ParmVar 0x252ebef63b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x252ebef6578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x252ebfc5c20 <col:18, col:50>
|   `-ReturnStmt 0x252ebfc5c10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x252ebfc5ba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x252ebfc5b78 <col:27, col:39> '<bound member function type>' .GetSize 0x252ebef85f0
|         `-ImplicitCastExpr 0x252ebfc5bf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x252ebfc5b38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x252ebfc5ab0 <col:27, col:35> '<bound member function type>' ->Get 0x252ebfc59a8
|               `-ImplicitCastExpr 0x252ebfc5b58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x252ebfc5aa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x252ebef6718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x252ebef6628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebfc5f68 <col:32, col:59>
|   `-ReturnStmt 0x252ebfc5f58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x252ebfc5f20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x252ebfc5f08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x252ebfc5e90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x252ebef8838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x252ebfc5e18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x252ebfc5d90 <col:41, col:49> '<bound member function type>' ->Get 0x252ebfc59a8
|       |   `-ImplicitCastExpr 0x252ebfc5e38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x252ebfc5d80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x252ebfc5e78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252ebfc5e58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef6628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x252ebef6938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x252ebfc61f8 <col:32, col:54>
|   `-ReturnStmt 0x252ebfc61e8 <col:34, col:51>
|     `-CXXConstructExpr 0x252ebfc61b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x252ebfc61a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x252ebfc6160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x252ebfc60d8 <col:41, col:49> '<bound member function type>' ->Get 0x252ebfc59a8
|             `-ImplicitCastExpr 0x252ebfc6180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x252ebfc60c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x252ebef6a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x252ebef69f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x252ebfc64d0 <col:25, col:57>
|   `-ReturnStmt 0x252ebfc64c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x252ebfc6480 <col:34, col:54> 'void'
|       |-MemberExpr 0x252ebfc6430 <col:34, col:46> '<bound member function type>' .Push 0x252ebef8538
|       | `-CXXMemberCallExpr 0x252ebfc63f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x252ebfc6368 <col:34, col:42> '<bound member function type>' ->Get 0x252ebfc59a8
|       |     `-ImplicitCastExpr 0x252ebfc6410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x252ebfc6358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x252ebfc64a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x252ebfc6460 <col:51> 'alt::MValue' lvalue ParmVar 0x252ebef69f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x252ebef6b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x252ebef6c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ec05fac8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x252ec05fa78 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x252ec05fa58 <col:8> 'const alt::MValueList' lvalue ParmVar 0x252ebef6c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x252ec05fb38 <col:8>
|-CXXConstructorDecl 0x252ebef6d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x252ebef6d08
| `-ParmVarDecl 0x252ebef6e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x252ebef6eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x252ebef6eb8
| `-ParmVarDecl 0x252ebef6fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x252ebef7050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x252ec05f720 <col:8>
`-CXXMethodDecl 0x252ec05f328 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x252ec05f328
  `-ParmVarDecl 0x252ec05f438 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerClientEvent
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerClientEvent
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerClientEvent
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_TriggerClientEvent
RecordType 0x252ebef5d80 'class alt::MValueList'
`-CXXRecord 0x252ebef5ce8 'MValueList'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_TriggerClientEvent
RecordType 0x252ebef5d80 'class alt::MValueList'
`-CXXRecord 0x252ebef5ce8 'MValueList'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_TriggerClientEvent
CXXRecordDecl 0x252ebef5ce8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValueList.h:7:2, line:43:2> line:7:8 referenced class MValueList definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'alt::MValue'
|-CXXRecordDecl 0x252ebef5e48 <col:2, col:8> col:8 implicit referenced class MValueList
|-AccessSpecDecl 0x252ebef5ed8 <line:9:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebef5f70 <line:10:3, line:14:3> line:10:3 MValueList 'void ()'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x252ebfc4d18 <line:11:4, col:25> 'alt::MValue'
| |   `-CXXConstructExpr 0x252ebfc4ce8 <col:4, col:25> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x252ebfc4cd0 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x252ebfc4cb8 <col:11, col:24> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXBindTemporaryExpr 0x252ebef9398 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x252ebef9390)
| |           `-CXXTemporaryObjectExpr 0x252ebef9360 <col:11, col:24> 'MValue::List':'alt::Array<alt::MValue>' 'void () noexcept' zeroing
| `-CompoundStmt 0x252ebfc4d60 <line:12:3, line:14:3>
|-CXXConstructorDecl 0x252ebef60b8 <line:16:3, line:20:3> line:16:3 MValueList 'void (alt::Size)'
| |-ParmVarDecl 0x252ebef6028 <col:14, col:19> col:19 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::MValue'
| | `-ExprWithCleanups 0x252ebfc5018 <line:17:4, col:29> 'alt::MValue'
| |   `-CXXConstructExpr 0x252ebfc4fe8 <col:4, col:29> 'alt::MValue' 'void (const alt::MValue::List &)'
| |     `-MaterializeTemporaryExpr 0x252ebfc4fd0 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue
| |       `-ImplicitCastExpr 0x252ebfc4fb8 <col:11, col:28> 'const MValue::List':'const alt::Array<alt::MValue>' <NoOp>
| |         `-CXXFunctionalCastExpr 0x252ebfc4f30 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' functional cast to class MValue::List <ConstructorConversion>
| |           `-CXXBindTemporaryExpr 0x252ebfc4f10 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' (CXXTemporary 0x252ebfc4f08)
| |             `-CXXConstructExpr 0x252ebfc4ed0 <col:11, col:28> 'MValue::List':'alt::Array<alt::MValue>' 'void (alt::Size, const alt::MValue &)'
| |               |-ImplicitCastExpr 0x252ebfc4de8 <col:24> 'alt::Size':'unsigned long long' <LValueToRValue>
| |               | `-DeclRefExpr 0x252ebfc4dc8 <col:24> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef6028 'size' 'alt::Size':'unsigned long long'
| |               `-CXXDefaultArgExpr 0x252ebfc4eb0 <<invalid sloc>> 'const alt::MValue':'const alt::MValue' lvalue
| `-CompoundStmt 0x252ebfc5060 <line:18:3, line:20:3>
|-CXXConstructorDecl 0x252ebef62f8 <line:22:3, line:26:3> line:22:3 MValueList 'void (const MValue::List &)'
| |-ParmVarDecl 0x252ebef6230 <col:14, col:34> col:34 used list 'const MValue::List &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ebfc50f0 <line:23:4, col:15> 'alt::MValue' 'void (const alt::MValue::List &)'
| |   `-DeclRefExpr 0x252ebfc5070 <col:11> 'const MValue::List':'const alt::Array<alt::MValue>' lvalue ParmVar 0x252ebef6230 'list' 'const MValue::List &'
| `-CompoundStmt 0x252ebfc5150 <line:24:3, line:26:3>
|-CXXConstructorDecl 0x252ebef6478 <line:28:3, line:34:3> line:28:3 MValueList 'void (alt::MValue)'
| |-ParmVarDecl 0x252ebef63b8 <col:14, col:21> col:21 used val 'alt::MValue'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ebfc5160 <col:3> 'alt::MValue' 'void ()'
| `-CompoundStmt 0x252ebfc5768 <line:29:3, line:34:3>
|   |-IfStmt 0x252ebfc55f8 <line:30:4, line:31:33>
|   | |-BinaryOperator 0x252ebfc52b8 <line:30:8, col:31> 'bool' '!='
|   | | |-CXXMemberCallExpr 0x252ebfc5218 <col:8, col:20> 'alt::MValue::Type'
|   | | | `-MemberExpr 0x252ebfc51e8 <col:8, col:12> '<bound member function type>' .GetType 0x252ebe88ec8
|   | | |   `-ImplicitCastExpr 0x252ebfc5238 <col:8> 'const alt::MValue' lvalue <NoOp>
|   | | |     `-DeclRefExpr 0x252ebfc51c8 <col:8> 'alt::MValue' lvalue ParmVar 0x252ebef63b8 'val' 'alt::MValue'
|   | | `-DeclRefExpr 0x252ebfc5288 <col:25, col:31> 'alt::MValue::Type' EnumConstant 0x252ebe80770 'LIST' 'alt::MValue::Type'
|   | `-ExprWithCleanups 0x252ebfc55e0 <line:31:5, col:33> 'void'
|   |   `-CXXThrowExpr 0x252ebfc55c8 <col:5, col:33> 'void'
|   |     `-CXXBindTemporaryExpr 0x252ebfc5498 <col:11, col:33> 'alt::MValue::TypeMismatchException' (CXXTemporary 0x252ebfc5490)
|   |       `-CXXTemporaryObjectExpr 0x252ebfc5460 <col:11, col:33> 'alt::MValue::TypeMismatchException' 'void () noexcept' zeroing
|   `-CXXOperatorCallExpr 0x252ebfc5730 <line:33:4, col:21> 'alt::MValue' lvalue
|     |-ImplicitCastExpr 0x252ebfc5718 <col:19> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x252ebfc56c8 <col:19> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x252ebe889b8 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |-UnaryOperator 0x252ebfc5678 <col:4, col:14> 'alt::MValue' lvalue prefix '*' cannot overflow
|     | `-CStyleCastExpr 0x252ebfc5650 <col:5, col:14> 'alt::MValue *' <NoOp>
|     |   `-ImplicitCastExpr 0x252ebfc5630 <col:14> 'alt::MValue *' <DerivedToBase (MValue)> part_of_explicit_cast
|     |     `-CXXThisExpr 0x252ebfc5610 <col:14> 'alt::MValueList *' this
|     `-ImplicitCastExpr 0x252ebfc56b0 <col:21> 'const alt::MValue' lvalue <NoOp>
|       `-DeclRefExpr 0x252ebfc5690 <col:21> 'alt::MValue' lvalue ParmVar 0x252ebef63b8 'val' 'alt::MValue'
|-CXXMethodDecl 0x252ebef6578 <line:36:3, col:50> col:8 GetSize 'alt::Size ()'
| `-CompoundStmt 0x252ebfc5c20 <col:18, col:50>
|   `-ReturnStmt 0x252ebfc5c10 <col:20, col:47>
|     `-CXXMemberCallExpr 0x252ebfc5ba8 <col:27, col:47> 'alt::Size':'unsigned long long'
|       `-MemberExpr 0x252ebfc5b78 <col:27, col:39> '<bound member function type>' .GetSize 0x252ebef85f0
|         `-ImplicitCastExpr 0x252ebfc5bf8 <col:27, col:37> 'const alt::Array<alt::MValue>' lvalue <NoOp>
|           `-CXXMemberCallExpr 0x252ebfc5b38 <col:27, col:37> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|             `-MemberExpr 0x252ebfc5ab0 <col:27, col:35> '<bound member function type>' ->Get 0x252ebfc59a8
|               `-ImplicitCastExpr 0x252ebfc5b58 <col:27> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|                 `-CXXThisExpr 0x252ebfc5aa0 <col:27> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x252ebef6718 <line:38:3, col:59> col:11 operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x252ebef6628 <col:22, col:27> col:27 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebfc5f68 <col:32, col:59>
|   `-ReturnStmt 0x252ebfc5f58 <col:34, col:56>
|     `-CXXOperatorCallExpr 0x252ebfc5f20 <col:41, col:56> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x252ebfc5f08 <col:52, col:56> 'alt::MValue &(*)(alt::Size)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x252ebfc5e90 <col:52, col:56> 'alt::MValue &(alt::Size)' lvalue CXXMethod 0x252ebef8838 'operator[]' 'alt::MValue &(alt::Size)'
|       |-CXXMemberCallExpr 0x252ebfc5e18 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       | `-MemberExpr 0x252ebfc5d90 <col:41, col:49> '<bound member function type>' ->Get 0x252ebfc59a8
|       |   `-ImplicitCastExpr 0x252ebfc5e38 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |     `-CXXThisExpr 0x252ebfc5d80 <col:41> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x252ebfc5e78 <col:53> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x252ebfc5e58 <col:53> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebef6628 'key' 'alt::Size':'unsigned long long'
|-CXXConversionDecl 0x252ebef6938 <line:40:3, col:54> col:3 operator Array 'alt::MValue::List ()'
| `-CompoundStmt 0x252ebfc61f8 <col:32, col:54>
|   `-ReturnStmt 0x252ebfc61e8 <col:34, col:51>
|     `-CXXConstructExpr 0x252ebfc61b8 <col:41, col:51> 'alt::MValue::List':'alt::Array<alt::MValue>' 'void (const alt::Array<alt::MValue> &)'
|       `-ImplicitCastExpr 0x252ebfc61a0 <col:41, col:51> 'const alt::Array<alt::MValue>':'const alt::Array<alt::MValue>' lvalue <NoOp>
|         `-CXXMemberCallExpr 0x252ebfc6160 <col:41, col:51> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|           `-MemberExpr 0x252ebfc60d8 <col:41, col:49> '<bound member function type>' ->Get 0x252ebfc59a8
|             `-ImplicitCastExpr 0x252ebfc6180 <col:41> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|               `-CXXThisExpr 0x252ebfc60c8 <col:41> 'alt::MValueList *' implicit this
|-CXXMethodDecl 0x252ebef6a88 <line:42:3, col:57> col:8 Push 'void (alt::MValue)'
| |-ParmVarDecl 0x252ebef69f8 <col:13, col:20> col:20 used val 'alt::MValue'
| `-CompoundStmt 0x252ebfc64d0 <col:25, col:57>
|   `-ReturnStmt 0x252ebfc64c0 <col:27, col:54>
|     `-CXXMemberCallExpr 0x252ebfc6480 <col:34, col:54> 'void'
|       |-MemberExpr 0x252ebfc6430 <col:34, col:46> '<bound member function type>' .Push 0x252ebef8538
|       | `-CXXMemberCallExpr 0x252ebfc63f0 <col:34, col:44> 'alt::Array<alt::MValue>':'alt::Array<alt::MValue>' lvalue
|       |   `-MemberExpr 0x252ebfc6368 <col:34, col:42> '<bound member function type>' ->Get 0x252ebfc59a8
|       |     `-ImplicitCastExpr 0x252ebfc6410 <col:34> 'alt::MValue *' <UncheckedDerivedToBase (MValue)>
|       |       `-CXXThisExpr 0x252ebfc6358 <col:34> 'alt::MValueList *' implicit this
|       `-ImplicitCastExpr 0x252ebfc64a8 <col:51> 'const alt::MValue' lvalue <NoOp>
|         `-DeclRefExpr 0x252ebfc6460 <col:51> 'alt::MValue' lvalue ParmVar 0x252ebef69f8 'val' 'alt::MValue'
|-CXXConstructorDecl 0x252ebef6b58 <line:7:8> col:8 implicit used MValueList 'void (const alt::MValueList &) noexcept(false)' inline default
| |-ParmVarDecl 0x252ebef6c68 <col:8> col:8 used 'const alt::MValueList &'
| |-CXXCtorInitializer 'alt::MValue'
| | `-CXXConstructExpr 0x252ec05fac8 <col:8> 'alt::MValue' 'void (const alt::MValue &)'
| |   `-ImplicitCastExpr 0x252ec05fa78 <col:8> 'const alt::MValue' lvalue <UncheckedDerivedToBase (MValue)>
| |     `-DeclRefExpr 0x252ec05fa58 <col:8> 'const alt::MValueList' lvalue ParmVar 0x252ebef6c68 '' 'const alt::MValueList &'
| `-CompoundStmt 0x252ec05fb38 <col:8>
|-CXXConstructorDecl 0x252ebef6d08 <col:8> col:8 implicit MValueList 'void (alt::MValueList &&)' inline default noexcept-unevaluated 0x252ebef6d08
| `-ParmVarDecl 0x252ebef6e18 <col:8> col:8 'alt::MValueList &&'
|-CXXMethodDecl 0x252ebef6eb8 <col:8> col:8 implicit operator= 'alt::MValueList &(alt::MValueList &&)' inline default noexcept-unevaluated 0x252ebef6eb8
| `-ParmVarDecl 0x252ebef6fc8 <col:8> col:8 'alt::MValueList &&'
|-CXXDestructorDecl 0x252ebef7050 <col:8> col:8 implicit used ~MValueList 'void () noexcept' inline default
| `-CompoundStmt 0x252ec05f720 <col:8>
`-CXXMethodDecl 0x252ec05f328 <col:8> col:8 implicit operator= 'alt::MValueList &(const alt::MValueList &)' inline default noexcept-unevaluated 0x252ec05f328
  `-ParmVarDecl 0x252ec05f438 <col:8> col:8 'const alt::MValueList &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateVehicle
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateVehicle
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateVehicle
TypedefType 0x252ebfd2a90 'alt::Rotation' sugar
|-TypeAlias 0x252eb991f00 'Rotation'
`-TemplateSpecializationType 0x252eb991dd0 'Vector<float, 3, class alt::RotationLayout>' sugar Vector
  |-TemplateArgument type 'float'
  |-TemplateArgument expr
  | `-ConstantExpr 0x252eb991c78 'std::size_t':'unsigned long long' 3
  |   `-ImplicitCastExpr 0x252eb991c60 'std::size_t':'unsigned long long' <IntegralCast>
  |     `-IntegerLiteral 0x252eb991c28 'int' 3
  |-TemplateArgument type 'class alt::RotationLayout'
  `-RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
    `-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateVehicle
RecordType 0x252eb991db0 'class alt::Vector<float, 3, class alt::RotationLayout>'
`-ClassTemplateSpecialization 0x252eb991c98 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateVehicle
ClassTemplateSpecializationDecl 0x252eb991c98 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateCheckpoint
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateCheckpoint
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateCheckpoint
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateCheckpoint
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateCheckpoint
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateCheckpoint
RecordType 0x252ebc6c090 'struct alt::RGBA'
`-CXXRecord 0x252ebc6bff8 'RGBA'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateCheckpoint
CXXRecordDecl 0x252ebc6bff8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:2, line:31:2> line:8:9 referenced struct RGBA definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x252ebc6c118 <col:2, col:9> col:9 implicit referenced struct RGBA
|-FieldDecl 0x252ebc6c1e0 <line:10:3, col:15> col:11 referenced r 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cbc8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cba0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c248 <line:11:3, col:15> col:11 referenced g 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc08 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cbe0 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c2b0 <line:12:3, col:15> col:11 referenced b 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc48 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc20 <col:15> 'int' 0
|-FieldDecl 0x252ebc6c318 <line:13:3, col:15> col:11 referenced a 'uint8_t':'unsigned char'
| `-ImplicitCastExpr 0x252ebc6cc88 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   `-IntegerLiteral 0x252ebc6cc60 <col:15> 'int' 0
|-CXXConstructorDecl 0x252ebc6c3d0 <line:15:3, col:18> col:3 constexpr RGBA 'void ()' default noexcept-unevaluated 0x252ebc6c3d0
|-CXXConstructorDecl 0x252ebc6c738 <line:17:3, line:24:3> line:17:3 RGBA 'void (uint8_t, uint8_t, uint8_t, uint8_t)'
| |-ParmVarDecl 0x252ebc6c488 <col:8, col:16> col:16 used _r 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c500 <col:20, col:28> col:28 used _g 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c578 <col:32, col:40> col:40 used _b 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x252ebc6c5f0 <col:44, col:52> col:52 used _a 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c1e0 'r' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cce0 <line:18:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cca0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c488 '_r' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c248 'g' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cd60 <line:19:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cd20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c500 '_g' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c2b0 'b' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6cde0 <line:20:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6cda0 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c578 '_b' 'uint8_t':'unsigned char'
| |-CXXCtorInitializer Field 0x252ebc6c318 'a' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x252ebc6ce60 <line:21:6> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc6ce20 <col:6> 'uint8_t':'unsigned char' lvalue ParmVar 0x252ebc6c5f0 '_a' 'uint8_t':'unsigned char'
| `-CompoundStmt 0x252ebc6cec0 <line:22:3, line:24:3>
`-FriendDecl 0x252ebc6cb10 <line:26:3, line:30:3> line:26:24
  `-FunctionDecl 0x252ebc6ca50 parent 0x252ebc6bf88 <col:3, line:30:3> line:26:24 operator<< 'std::ostream &(std::ostream &, const alt::RGBA &)'
    |-ParmVarDecl 0x252ebc6c888 <col:35, col:49> col:49 used stream 'std::ostream &'
    |-ParmVarDecl 0x252ebc6c928 <col:57, col:69> col:69 used rgba 'const alt::RGBA &'
    `-CompoundStmt 0x252ebc78b48 <line:27:3, line:30:3>
      |-CXXOperatorCallExpr 0x252ebc78ae0 <line:28:4, col:110> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | |-ImplicitCastExpr 0x252ebc78ac8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | `-DeclRefExpr 0x252ebc78aa8 <col:107> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | |-CXXOperatorCallExpr 0x252ebc77a48 <col:4, col:105> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | |-ImplicitCastExpr 0x252ebc77a30 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | `-DeclRefExpr 0x252ebc77a10 <col:92> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | |-CXXOperatorCallExpr 0x252ebc76820 <col:4, col:87> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | |-ImplicitCastExpr 0x252ebc76808 <col:84> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | `-DeclRefExpr 0x252ebc767e8 <col:84> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | |-CXXOperatorCallExpr 0x252ebc75788 <col:4, col:82> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | |-ImplicitCastExpr 0x252ebc75770 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | `-DeclRefExpr 0x252ebc75750 <col:69> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | |-CXXOperatorCallExpr 0x252ebc74560 <col:4, col:64> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | |-ImplicitCastExpr 0x252ebc74548 <col:61> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | `-DeclRefExpr 0x252ebc74528 <col:61> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | |-CXXOperatorCallExpr 0x252ebc734c8 <col:4, col:59> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | |-ImplicitCastExpr 0x252ebc734b0 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | `-DeclRefExpr 0x252ebc73490 <col:46> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | |-CXXOperatorCallExpr 0x252ebc722a0 <col:4, col:41> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | |-ImplicitCastExpr 0x252ebc72288 <col:38> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | `-DeclRefExpr 0x252ebc72268 <col:38> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | |-CXXOperatorCallExpr 0x252ebc71210 <col:4, col:36> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
      | | | | | | | | |-ImplicitCastExpr 0x252ebc711f8 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(*)(int)' <FunctionToPointerDecay>
      | | | | | | | | | `-DeclRefExpr 0x252ebc711b0 <col:23> 'std::basic_ostream<char, std::char_traits<char> > &(int)' lvalue CXXMethod 0x252eb9636e8 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(int)'
      | | | | | | | | |-CXXOperatorCallExpr 0x252ebc6ef70 <col:4, col:14> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
      | | | | | | | | | |-ImplicitCastExpr 0x252ebc6ef58 <col:11> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
      | | | | | | | | | | `-DeclRefExpr 0x252ebc6ef38 <col:11> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
      | | | | | | | | | |-DeclRefExpr 0x252ebc6ced0 <col:4> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'
      | | | | | | | | | `-ImplicitCastExpr 0x252ebc6ef20 <col:14> 'const char *' <ArrayToPointerDecay>
      | | | | | | | | |   `-StringLiteral 0x252ebc6cef0 <col:14> 'const char [7]' lvalue "RGBA{ "
      | | | | | | | | `-CStyleCastExpr 0x252ebc6f040 <col:26, col:36> 'int' <NoOp>
      | | | | | | | |   `-ImplicitCastExpr 0x252ebc6f028 <col:31, col:36> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | | | |     `-ImplicitCastExpr 0x252ebc6f010 <col:31, col:36> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | | | |       `-MemberExpr 0x252ebc6efc8 <col:31, col:36> 'const uint8_t':'const unsigned char' lvalue .r 0x252ebc6c1e0
      | | | | | | | |         `-DeclRefExpr 0x252ebc6efa8 <col:31> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | | | `-ImplicitCastExpr 0x252ebc72250 <col:41> 'const char *' <ArrayToPointerDecay>
      | | | | | | |   `-StringLiteral 0x252ebc71248 <col:41> 'const char [3]' lvalue ", "
      | | | | | | `-CStyleCastExpr 0x252ebc72370 <col:49, col:59> 'int' <NoOp>
      | | | | | |   `-ImplicitCastExpr 0x252ebc72358 <col:54, col:59> 'int' <IntegralCast> part_of_explicit_cast
      | | | | | |     `-ImplicitCastExpr 0x252ebc72340 <col:54, col:59> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | | | |       `-MemberExpr 0x252ebc722f8 <col:54, col:59> 'const uint8_t':'const unsigned char' lvalue .g 0x252ebc6c248
      | | | | | |         `-DeclRefExpr 0x252ebc722d8 <col:54> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | | | `-ImplicitCastExpr 0x252ebc74510 <col:64> 'const char *' <ArrayToPointerDecay>
      | | | | |   `-StringLiteral 0x252ebc73500 <col:64> 'const char [3]' lvalue ", "
      | | | | `-CStyleCastExpr 0x252ebc74630 <col:72, col:82> 'int' <NoOp>
      | | | |   `-ImplicitCastExpr 0x252ebc74618 <col:77, col:82> 'int' <IntegralCast> part_of_explicit_cast
      | | | |     `-ImplicitCastExpr 0x252ebc74600 <col:77, col:82> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | | | |       `-MemberExpr 0x252ebc745b8 <col:77, col:82> 'const uint8_t':'const unsigned char' lvalue .b 0x252ebc6c2b0
      | | | |         `-DeclRefExpr 0x252ebc74598 <col:77> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | | | `-ImplicitCastExpr 0x252ebc767d0 <col:87> 'const char *' <ArrayToPointerDecay>
      | | |   `-StringLiteral 0x252ebc757c0 <col:87> 'const char [3]' lvalue ", "
      | | `-CStyleCastExpr 0x252ebc768f0 <col:95, col:105> 'int' <NoOp>
      | |   `-ImplicitCastExpr 0x252ebc768d8 <col:100, col:105> 'int' <IntegralCast> part_of_explicit_cast
      | |     `-ImplicitCastExpr 0x252ebc768c0 <col:100, col:105> 'uint8_t':'unsigned char' <LValueToRValue> part_of_explicit_cast
      | |       `-MemberExpr 0x252ebc76878 <col:100, col:105> 'const uint8_t':'const unsigned char' lvalue .a 0x252ebc6c318
      | |         `-DeclRefExpr 0x252ebc76858 <col:100> 'const alt::RGBA' lvalue ParmVar 0x252ebc6c928 'rgba' 'const alt::RGBA &'
      | `-ImplicitCastExpr 0x252ebc78a90 <col:110> 'const char *' <ArrayToPointerDecay>
      |   `-StringLiteral 0x252ebc77a80 <col:110> 'const char [3]' lvalue " }"
      `-ReturnStmt 0x252ebc78b38 <line:29:4, col:11>
        `-DeclRefExpr 0x252ebc78b18 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc6c888 'stream' 'std::ostream &'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateBlip
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateBlip
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateBlip
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateBlip
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCylinder
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCylinder
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCylinder
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCylinder
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeSphere
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeSphere
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeSphere
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeSphere
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCircle
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCircle
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCircle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCircle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCube
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCube
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeCube
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeCube
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeCube
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeRectangle
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeRectangle
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_CreateColShapeRectangle
TypedefType 0x252ebfd1970 'alt::Position' sugar
|-TypeAlias 0x252eb981790 'Position'
`-TypedefType 0x252eb981760 'alt::Point' sugar
  |-TypeAlias 0x252eb9813b0 'Point'
  `-TemplateSpecializationType 0x252eb981280 'Vector<float, 3, class alt::PointLayout>' sugar Vector
    |-TemplateArgument type 'float'
    |-TemplateArgument expr
    | `-ConstantExpr 0x252eb981128 'std::size_t':'unsigned long long' 3
    |   `-ImplicitCastExpr 0x252eb981110 'std::size_t':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x252eb9810d8 'int' 3
    |-TemplateArgument type 'class alt::PointLayout'
    `-RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
      `-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_CreateColShapeRectangle
RecordType 0x252eb981260 'class alt::Vector<float, 3, class alt::PointLayout>'
`-ClassTemplateSpecialization 0x252eb981148 'Vector'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

ClassTemplateSpecialization param FROM FUNCTION alt_IServer_CreateColShapeRectangle
ClassTemplateSpecializationDecl 0x252eb981148 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

FROM FUNCTION PARAMTYPE alt_IServer_GetPlayersByName
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

FROM FUNCTION origtype desugared alt_IServer_GetPlayersByName
RecordType 0x252ebc59230 'class alt::StringView'
`-CXXRecord 0x252ebc591a0 'StringView'

--- END OF NODE ---

Record param FROM FUNCTION alt_IServer_GetPlayersByName
CXXRecordDecl 0x252ebc591a0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:2, line:82:2> line:14:8 referenced class StringView definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x252ebc592b8 <col:2, col:8> col:8 implicit referenced class StringView
|-FieldDecl 0x252ebc59360 <line:16:3, col:15> col:15 referenced data 'const char *'
|-FieldDecl 0x252ebc593c8 <line:17:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-AccessSpecDecl 0x252ebc59420 <line:19:2, col:8> col:2 public
|-CXXConstructorDecl 0x252ebc595c0 <line:20:3, line:25:3> line:20:3 used StringView 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x252ebc59468 <col:14, col:26> col:26 used _data 'const char *'
| |-ParmVarDecl 0x252ebc594e0 <col:33, col:38> col:38 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5af18 <line:21:9> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5aed8 <col:9> 'const char *' lvalue ParmVar 0x252ebc59468 '_data' 'const char *'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5af98 <line:22:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x252ebc5af58 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc594e0 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5afe8 <line:23:3, line:25:3>
|-CXXConstructorDecl 0x252ebc59698 <line:27:3, line:31:3> line:27:3 used StringView 'void ()'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b3f8 <line:28:4, col:25> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b3c8 <col:15> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x252ebc5aff8 <col:15> 'nullptr_t'
| |   `-ImplicitCastExpr 0x252ebc5b3e0 <col:24> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x252ebc5b008 <col:24> 'int' 0
| `-CompoundStmt 0x252ebc5b540 <line:29:3, line:31:3>
|-CXXConstructorDecl 0x252ebc597e8 <line:33:3, line:37:3> line:33:3 referenced StringView 'void (const char *)'
| |-ParmVarDecl 0x252ebc59758 <col:14, col:26> col:26 used _str 'const char *'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b6a0 <line:34:4, col:33> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x252ebc5b688 <col:15> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x252ebc5b550 <col:15> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| |   `-CallExpr 0x252ebc5b610 <col:21, col:32> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x252ebc5b5f8 <col:21> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x252ebc5b5d8 <col:21> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x252ea8a88a0 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x252ebc5b638 <col:28> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x252ebc5b5b8 <col:28> 'const char *' lvalue ParmVar 0x252ebc59758 '_str' 'const char *'
| `-CompoundStmt 0x252ebc5b708 <line:35:3, line:37:3>
|-FunctionTemplateDecl 0x252ebc59b70 <line:39:3, line:40:38> col:3 StringView
| |-NonTypeTemplateParmDecl 0x252ebc598a8 <line:39:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x252ebc59ac8 <line:40:3, col:38> col:3 StringView 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x252ebc59a08 <col:14, col:37> col:26 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x252ebfd7af8 <col:3, col:38> col:3 StringView 'void (const char (&)[11])'
|   |-TemplateArgument integral 11
|   `-ParmVarDecl 0x252ebfd7a08 <col:14, col:37> col:26 _data 'const char (&)[11]'
|-CXXConstructorDecl 0x252ebc59d68 <line:46:3, line:50:3> line:46:3 StringView 'void (const std::string &)'
| |-ParmVarDecl 0x252ebc59ca0 <col:14, col:33> col:33 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5b890 <line:47:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b7c8 <col:15, col:25> 'const char *'
| |   | `-MemberExpr 0x252ebc5b798 <col:15, col:20> '<bound member function type>' .data 0x252eb4b79c8
| |   |   `-DeclRefExpr 0x252ebc5b718 <col:15> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x252ebc5b838 <col:28, col:38> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b808 <col:28, col:33> '<bound member function type>' .size 0x252eb4b7d38
| |       `-DeclRefExpr 0x252ebc5b7e8 <col:28> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x252ebc59ca0 '_str' 'const std::string &'
| `-CompoundStmt 0x252ebc5b8f8 <line:48:3, line:50:3>
|-CXXConstructorDecl 0x252ebc59eb8 <line:52:3, line:56:3> line:52:3 used StringView 'void (const alt::String &)'
| |-ParmVarDecl 0x252ebc59e28 <col:14, col:28> col:28 used _str 'const alt::String &'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5ba80 <line:53:4, col:45> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5b9b8 <col:15, col:28> 'const char *'
| |   | `-MemberExpr 0x252ebc5b988 <col:15, col:20> '<bound member function type>' .GetData 0x252ebc464d8
| |   |   `-DeclRefExpr 0x252ebc5b908 <col:15> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| |   `-CXXMemberCallExpr 0x252ebc5ba28 <col:31, col:44> 'alt::Size':'unsigned long long'
| |     `-MemberExpr 0x252ebc5b9f8 <col:31, col:36> '<bound member function type>' .GetSize 0x252ebc466b8
| |       `-DeclRefExpr 0x252ebc5b9d8 <col:31> 'const alt::String' lvalue ParmVar 0x252ebc59e28 '_str' 'const alt::String &'
| `-CompoundStmt 0x252ebc5bae8 <line:54:3, line:56:3>
|-CXXConstructorDecl 0x252ebc5a0f8 <line:58:3, line:62:3> line:58:3 StringView 'void (std::string_view)'
| |-ParmVarDecl 0x252ebc5a008 <col:14, col:31> col:31 used _str 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |-CXXCtorInitializer 'alt::StringView'
| | `-CXXConstructExpr 0x252ebc5bdb0 <line:59:4, col:39> 'alt::StringView' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x252ebc5bc18 <col:15, col:25> 'std::basic_string_view<char, std::char_traits<char> >::const_pointer':'const char *'
| |   | `-MemberExpr 0x252ebc5bb18 <col:15, col:20> '<bound member function type>' .data 0x252eb623510
| |   |   `-ImplicitCastExpr 0x252ebc5bc38 <col:15> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |   |     `-DeclRefExpr 0x252ebc5baf8 <col:15> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| |   `-CXXMemberCallExpr 0x252ebc5bd40 <col:28, col:38> 'std::basic_string_view::size_type':'unsigned long long'
| |     `-MemberExpr 0x252ebc5bc70 <col:28, col:33> '<bound member function type>' .size 0x252eb623218
| |       `-ImplicitCastExpr 0x252ebc5bd60 <col:28> 'const std::basic_string_view<char, std::char_traits<char> >' lvalue <NoOp>
| |         `-DeclRefExpr 0x252ebc5bc50 <col:28> 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5a008 '_str' 'std::string_view':'std::basic_string_view<char, std::char_traits<char> >'
| `-CompoundStmt 0x252ebc5be18 <line:60:3, line:62:3>
|-CXXMethodDecl 0x252ebc5a1f8 <line:64:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x252ebc5bef0 <col:24, col:44>
|   `-ReturnStmt 0x252ebc5bee0 <col:26, col:41>
|     `-BinaryOperator 0x252ebc5bec0 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x252ebc5be90 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x252ebc5be38 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       |   `-CXXThisExpr 0x252ebc5be28 <col:33> 'const alt::StringView *' implicit this
|       `-ImplicitCastExpr 0x252ebc5bea8 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x252ebc5be68 <col:41> 'int' 0
|-CXXMethodDecl 0x252ebc5a2c0 <line:66:3, col:46> col:15 GetData 'const char *() const'
| `-CompoundStmt 0x252ebc5bf70 <col:31, col:46>
|   `-ReturnStmt 0x252ebc5bf60 <col:33, col:40>
|     `-ImplicitCastExpr 0x252ebc5bf48 <col:40> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf18 <col:40> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5bf08 <col:40> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a380 <line:67:3, col:39> col:8 GetSize 'alt::Size () const'
| `-CompoundStmt 0x252ebc5bff0 <col:24, col:39>
|   `-ReturnStmt 0x252ebc5bfe0 <col:26, col:33>
|     `-ImplicitCastExpr 0x252ebc5bfc8 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x252ebc5bf98 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         `-CXXThisExpr 0x252ebc5bf88 <col:33> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5a4c0 <line:69:3, col:55> col:8 operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x252ebc5a430 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x252ebc5c0e0 <col:35, col:55>
|   `-ReturnStmt 0x252ebc5c0d0 <col:37, col:52>
|     `-ImplicitCastExpr 0x252ebc5c0b8 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x252ebc5c098 <col:44, col:52> 'const char' lvalue
|         |-ImplicitCastExpr 0x252ebc5c068 <col:44> 'const char *' <LValueToRValue>
|         | `-MemberExpr 0x252ebc5c018 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|         |   `-CXXThisExpr 0x252ebc5c008 <col:44> 'const alt::StringView *' implicit this
|         `-ImplicitCastExpr 0x252ebc5c080 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x252ebc5c048 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x252ebc5a430 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x252ebc5a638 <line:71:3, col:108> col:8 used operator== 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a578 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c520 <col:42, col:108>
|   `-ReturnStmt 0x252ebc5c510 <col:44, col:105>
|     `-BinaryOperator 0x252ebc5c420 <col:51, col:105> 'bool' '&&'
|       |-BinaryOperator 0x252ebc5c1b8 <col:51, col:64> 'bool' '=='
|       | |-ImplicitCastExpr 0x252ebc5c188 <col:51> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x252ebc5c108 <col:51> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|       | |   `-CXXThisExpr 0x252ebc5c0f8 <col:51> 'const alt::StringView *' implicit this
|       | `-ImplicitCastExpr 0x252ebc5c1a0 <col:59, col:64> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x252ebc5c158 <col:59, col:64> 'alt::Size':'unsigned long long' lvalue .size 0x252ebc593c8
|       |     `-DeclRefExpr 0x252ebc5c138 <col:59> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|       `-BinaryOperator 0x252ebc5c400 <col:72, col:105> 'bool' '=='
|         |-CallExpr 0x252ebc5c328 <col:72, col:100> 'int'
|         | |-ImplicitCastExpr 0x252ebc5c310 <col:72> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x252ebc5c2f0 <col:72> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x252ea90a5e8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x252ebc5c378 <col:79> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c360 <col:79> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c230 <col:79> 'const char *const' lvalue ->data 0x252ebc59360
|         | |     `-CXXThisExpr 0x252ebc5c220 <col:79> 'const alt::StringView *' implicit this
|         | |-ImplicitCastExpr 0x252ebc5c3a8 <col:85, col:90> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x252ebc5c390 <col:85, col:90> 'const char *' <LValueToRValue>
|         | |   `-MemberExpr 0x252ebc5c280 <col:85, col:90> 'const char *' lvalue .data 0x252ebc59360
|         | |     `-DeclRefExpr 0x252ebc5c260 <col:85> 'alt::StringView' lvalue ParmVar 0x252ebc5a578 'that' 'alt::StringView'
|         | `-ImplicitCastExpr 0x252ebc5c3c0 <col:96> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x252ebc5c2c0 <col:96> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|         |     `-CXXThisExpr 0x252ebc5c2b0 <col:96> 'const alt::StringView *' implicit this
|         `-IntegerLiteral 0x252ebc5c3d8 <col:105> 'int' 0
|-CXXMethodDecl 0x252ebc5a780 <line:72:3, col:69> col:8 operator!= 'bool (alt::StringView) const'
| |-ParmVarDecl 0x252ebc5a6f0 <col:19, col:30> col:30 used that 'alt::StringView'
| `-CompoundStmt 0x252ebc5c8a0 <col:42, col:69>
|   `-ReturnStmt 0x252ebc5c890 <col:44, col:66>
|     `-UnaryOperator 0x252ebc5c878 <col:51, col:66> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x252ebc5c858 <col:52, col:66> 'bool'
|         `-CXXOperatorCallExpr 0x252ebc5c820 <col:53, col:62> 'bool'
|           |-ImplicitCastExpr 0x252ebc5c808 <col:59> 'bool (*)(alt::StringView) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x252ebc5c7c0 <col:59> 'bool (alt::StringView) const' lvalue CXXMethod 0x252ebc5a638 'operator==' 'bool (alt::StringView) const'
|           |-UnaryOperator 0x252ebc5c548 <col:53, col:54> 'const alt::StringView' lvalue prefix '*' cannot overflow
|           | `-CXXThisExpr 0x252ebc5c538 <col:54> 'const alt::StringView *' this
|           `-CXXConstructExpr 0x252ebc5c790 <col:62> 'alt::StringView' 'void (const alt::StringView &) noexcept'
|             `-ImplicitCastExpr 0x252ebc5c5d8 <col:62> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5c560 <col:62> 'alt::StringView' lvalue ParmVar 0x252ebc5a6f0 'that' 'alt::StringView'
|-CXXMethodDecl 0x252ebc5a8b8 <line:74:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x252ebc5d510 <col:32, col:66>
|   `-ReturnStmt 0x252ebc5d500 <col:34, col:63>
|     `-ExprWithCleanups 0x252ebc5d4e8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x252ebc5d4c8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x252ebc5d4c0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d480 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x252ebc5d450 <col:53> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5c910 <col:53> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5c900 <col:53> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d468 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5c950 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5c940 <col:59> 'const alt::StringView *' implicit this
|-CXXConversionDecl 0x252ebc5a9c8 <line:75:3, col:58> col:3 used operator String 'alt::String () const'
| `-CompoundStmt 0x252ebc5d700 <col:27, col:58>
|   `-ReturnStmt 0x252ebc5d6f0 <col:29, col:55>
|     `-ExprWithCleanups 0x252ebc5d6d8 <col:36, col:55> 'alt::String'
|       `-CXXBindTemporaryExpr 0x252ebc5d6b8 <col:36, col:55> 'alt::String' (CXXTemporary 0x252ebc5d6b0)
|         `-CXXTemporaryObjectExpr 0x252ebc5d670 <col:36, col:55> 'alt::String' 'void (const char *, alt::Size)' list
|           |-ImplicitCastExpr 0x252ebc5d640 <col:44> 'const char *' <LValueToRValue>
|           | `-MemberExpr 0x252ebc5d548 <col:44> 'const char *const' lvalue ->data 0x252ebc59360
|           |   `-CXXThisExpr 0x252ebc5d538 <col:44> 'const alt::StringView *' implicit this
|           `-ImplicitCastExpr 0x252ebc5d658 <col:50> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x252ebc5d588 <col:50> 'const alt::Size':'const unsigned long long' lvalue ->size 0x252ebc593c8
|               `-CXXThisExpr 0x252ebc5d578 <col:50> 'const alt::StringView *' implicit this
|-CXXMethodDecl 0x252ebc5aaa0 <line:76:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x252ebc5d780 <col:28, col:43>
|   `-ReturnStmt 0x252ebc5d770 <col:30, col:37>
|     `-ImplicitCastExpr 0x252ebc5d758 <col:37> 'const char *' <LValueToRValue>
|       `-MemberExpr 0x252ebc5d728 <col:37> 'const char *const' lvalue ->data 0x252ebc59360
|         `-CXXThisExpr 0x252ebc5d718 <col:37> 'const alt::StringView *' implicit this
|-FriendDecl 0x252ebc5ae80 <line:78:3, line:81:3> line:78:24
| `-FunctionDecl 0x252ebc5adc0 parent 0x252ebc59130 <col:3, line:81:3> line:78:24 operator<< 'std::ostream &(std::ostream &, alt::StringView)'
|   |-ParmVarDecl 0x252ebc5ac20 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x252ebc5ac98 <col:57, col:68> col:68 used view 'alt::StringView'
|   `-CompoundStmt 0x252ebc6bf70 <line:79:3, line:81:3>
|     `-ReturnStmt 0x252ebc6bf60 <line:80:4, col:31>
|       `-CXXOperatorCallExpr 0x252ebc6bf28 <col:11, col:31> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x252ebc6bf10 <col:18> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x252ebc6bef0 <col:18> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x252eb967298 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x252ebc5d798 <col:11> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x252ebc5ac20 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x252ebc5d808 <col:21, col:31> 'const char *'
|           `-MemberExpr 0x252ebc5d7d8 <col:21, col:26> '<bound member function type>' .CStr 0x252ebc5aaa0
|             `-ImplicitCastExpr 0x252ebc5d828 <col:21> 'const alt::StringView' lvalue <NoOp>
|               `-DeclRefExpr 0x252ebc5d7b8 <col:21> 'alt::StringView' lvalue ParmVar 0x252ebc5ac98 'view' 'alt::StringView'
|-CXXConstructorDecl 0x252ebc5b098 <line:14:8> col:8 implicit used constexpr StringView 'void (const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ebc5b1a8 <col:8> col:8 used 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc59360 'data' 'const char *'
| | `-ImplicitCastExpr 0x252ebc5c688 <col:8> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c640 <col:8> 'const char *const' lvalue .data 0x252ebc59360
| |     `-DeclRefExpr 0x252ebc5c620 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| |-CXXCtorInitializer Field 0x252ebc593c8 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x252ebc5c730 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-MemberExpr 0x252ebc5c6e8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
| |     `-DeclRefExpr 0x252ebc5c6c8 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ebc5b1a8 '' 'const alt::StringView &'
| `-CompoundStmt 0x252ebc5c780 <col:8>
|-CXXConstructorDecl 0x252ebc5b248 <col:8> col:8 implicit constexpr StringView 'void (alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ebc5b248
| `-ParmVarDecl 0x252ebc5b358 <col:8> col:8 'alt::StringView &&'
|-CXXDestructorDecl 0x252ebc5b460 <col:8> col:8 implicit referenced ~StringView 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x252ec085ab8 <col:8> col:8 implicit used operator= 'alt::StringView &(const alt::StringView &) noexcept' inline default trivial
| |-ParmVarDecl 0x252ec085bc8 <col:8> col:8 used 'const alt::StringView &'
| `-CompoundStmt 0x252ec5c0598 <col:8>
|   |-BinaryOperator 0x252ec5c0478 <col:8> 'const char *' lvalue '='
|   | |-MemberExpr 0x252ec5c0430 <col:8> 'const char *' lvalue ->data 0x252ebc59360
|   | | `-CXXThisExpr 0x252ec5c0420 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0460 <col:8> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c03f0 <col:8> 'const char *const' lvalue .data 0x252ebc59360
|   |     `-DeclRefExpr 0x252ec5c03d0 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   |-BinaryOperator 0x252ec5c0540 <col:8> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x252ec5c04f8 <col:8> 'alt::Size':'unsigned long long' lvalue ->size 0x252ebc593c8
|   | | `-CXXThisExpr 0x252ec5c04e8 <col:8> 'alt::StringView *' this
|   | `-ImplicitCastExpr 0x252ec5c0528 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x252ec5c04b8 <col:8> 'const alt::Size':'const unsigned long long' lvalue .size 0x252ebc593c8
|   |     `-DeclRefExpr 0x252ec5c0498 <col:8> 'const alt::StringView' lvalue ParmVar 0x252ec085bc8 '' 'const alt::StringView &'
|   `-ReturnStmt 0x252ec5c0588 <col:8>
|     `-UnaryOperator 0x252ec5c0570 <col:8> 'alt::StringView' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x252ec5c0560 <col:8> 'alt::StringView *' this
`-CXXMethodDecl 0x252ec085c38 <col:8> col:8 implicit operator= 'alt::StringView &(alt::StringView &&)' inline default trivial noexcept-unevaluated 0x252ec085c38
  `-ParmVarDecl 0x252ec085d48 <col:8> col:8 'alt::StringView &&'

--- END OF NODE ---

