
/**
 * CAPI API Header for C
 * THIS HEADER IS AUTOGENERATED
 * Thu Jan  9 06:51:41 2020

 * 
 * Include header for alt:V C API
 */

#ifndef _CAPI_H_
#define _CAPI_H_

#include <stdbool.h>
#define CAPI_EXTERN

#ifdef _WIN32
#define CAPI_EXPORT CAPI_EXTERN __declspec(dllexport)
#define CAPI_IMPORT CAPI_EXTERN __declspec(dllimport)
#else
#define CAPI_EXPORT CAPI_EXTERN
#define CAPI_IMPORT CAPI_EXTERN
#endif

#ifndef CAPI
#ifdef CAPI_DLL
#define CAPI CAPI_IMPORT
#else
#define CAPI CAPI_EXTERN
#endif // CAPI_DLL
#endif // CAPI

// Typedef
// <invalid loc>
// __int128_t
// Canonical decl: __int128_t
// using __int128_t = __int128
// Invalid loc

// Typedef
// <invalid loc>
// __uint128_t
// Canonical decl: __uint128_t
// using __uint128_t = unsigned __int128
// Invalid loc

// Typedef
// <invalid loc>
// __NSConstantString
// Canonical decl: __NSConstantString
// using __NSConstantString = struct __NSConstantString_tag
// Invalid loc

// Typedef
// <invalid loc>
// size_t
// Canonical decl: size_t
// tdtd
// using size_t = unsigned long long
// Invalid loc

// Typedef
// <invalid loc>
// __builtin_ms_va_list
// Canonical decl: __builtin_ms_va_list
// using __builtin_ms_va_list = char *
// Invalid loc

// Typedef
// <invalid loc>
// __builtin_va_list
// Canonical decl: __builtin_va_list
// tdtd
// using __builtin_va_list = char *
// Invalid loc

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// VectorLayout<T, W>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// VectorLayout<T, W>
// isTemplated || isTemplateDecl.

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// class alt::VectorLayout<float, 3>
// cpptype float [3]
// array type
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:59:17
    // alt::VectorLayout<float, 3>::Element [3] elements

// ARRAY SIZE WAS 0, outputting as simple pointer
typedef struct alt_VectorLayout_float_3 {
    float** elements;
} alt_VectorLayout_float_3;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// class alt::VectorLayout<float, 3>
// functions from class alt::VectorLayout<float, 3>
CAPI void alt_VectorLayout_float_3_free(struct alt_VectorLayout_float_3* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:24:9
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_VectorLayout_float_3_free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:25:9
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_VectorLayout_float_3_free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_1(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:31:9
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_VectorLayout_float_3_free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_2(float* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:42:18
// alt::VectorLayout<float, 3>::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_VectorLayout_float_3_Access_size_t(struct alt_VectorLayout_float_3* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:43:24
// alt::VectorLayout<float, 3>::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_VectorLayout_float_3_Access_size_t_1(struct alt_VectorLayout_float_3* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::~VectorLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// Return ptr must be manually freed with alt_VectorLayout_float_3_free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_3(struct alt_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::VectorLayout<float, 3> &&
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// Return ptr must be manually freed with alt_VectorLayout_float_3_free()
CAPI struct alt_VectorLayout_float_3* alt_VectorLayout_float_3_Create_4(struct alt_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// cpptype const class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
CAPI void alt_VectorLayout_float_3_Assign_constVectorLayout_float_3Ref(struct alt_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// cpptype class alt::VectorLayout<float, 3> &&
// Reference type
// cpptype class alt::VectorLayout<float, 3>
CAPI void alt_VectorLayout_float_3_Assign_VectorLayout_float_3RefRef(struct alt_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:20:15
// alt::VectorLayout<float, 3>::Element
// Canonical decl: alt::VectorLayout<float, 3>::Element
// tdtd
// using alt::VectorLayout<float, 3>::Element = float
// cpptype float
// fundamental
typedef float alt_VectorLayout_float_3_Element;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// class alt::VectorLayout<float, 4>
// cpptype float [4]
// array type
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:59:17
    // alt::VectorLayout<float, 4>::Element [4] elements

// ARRAY SIZE WAS 0, outputting as simple pointer
typedef struct alt_VectorLayout_float_4 {
    float** elements;
} alt_VectorLayout_float_4;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// class alt::VectorLayout<float, 4>
// functions from class alt::VectorLayout<float, 4>
CAPI void alt_VectorLayout_float_4_free(struct alt_VectorLayout_float_4* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:24:9
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:25:9
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[4]
// Reference type
// cpptype float [4]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_1(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:31:9
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_2(float* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:42:18
// alt::VectorLayout<float, 4>::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_VectorLayout_float_4_Access_size_t(struct alt_VectorLayout_float_4* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:43:24
// alt::VectorLayout<float, 4>::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_VectorLayout_float_4_Access_size_t_1(struct alt_VectorLayout_float_4* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::~VectorLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::VectorLayout<float, 4> &&
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// Return ptr must be manually freed with alt_VectorLayout_float_4_free()
CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// cpptype const class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
CAPI void alt_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// cpptype class alt::VectorLayout<float, 4> &&
// Reference type
// cpptype class alt::VectorLayout<float, 4>
CAPI void alt_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:20:15
// alt::VectorLayout<float, 4>::Element
// Canonical decl: alt::VectorLayout<float, 4>::Element
// tdtd
// using alt::VectorLayout<float, 4>::Element = float
// cpptype float
// fundamental
typedef float alt_VectorLayout_float_4_Element;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// Vector<T, W, _Layout>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// Vector<T, W, _Layout>
// isTemplated || isTemplateDecl.

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// derives from class alt::VectorLayout<float, 3>
// cpptype float [3]
// array type
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:59:17
    // alt::VectorLayout<float, 3>::Element [3] elements

// ARRAY SIZE WAS 0, outputting as simple pointer
typedef struct alt_Vector_float_3_VectorLayout_float_3 {
    float** elements;
} alt_Vector_float_3_VectorLayout_float_3;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// functions from class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
CAPI void alt_Vector_float_3_VectorLayout_float_3_free(struct alt_Vector_float_3_VectorLayout_float_3* ptr);

// functions derived from VectorLayout

CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_VectorLayout_float_3_to_alt_Vector_float_3_VectorLayout_float_3(struct alt_VectorLayout_float_3* from);

CAPI struct alt_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_to_alt_VectorLayout_float_3(struct alt_Vector_float_3_VectorLayout_float_3* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:24:9
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:25:9
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_1(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:31:9
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_2(float* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:42:18
// alt::VectorLayout<float, 3>::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_Vector_float_3_VectorLayout_float_3_Access_size_t(struct alt_Vector_float_3_VectorLayout_float_3* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:43:24
// alt::VectorLayout<float, 3>::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_Vector_float_3_VectorLayout_float_3_Access_size_t_1(struct alt_Vector_float_3_VectorLayout_float_3* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::~VectorLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_3(struct alt_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::VectorLayout<float, 3> &&
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_4(struct alt_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// cpptype const class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_constVectorLayout_float_3Ref(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 3>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// cpptype class alt::VectorLayout<float, 3> &&
// Reference type
// cpptype class alt::VectorLayout<float, 3>
CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_VectorLayout_float_3RefRef(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_VectorLayout_float_3* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:71:9
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_5();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:72:9
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_6(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:73:9
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::VectorLayout<float, 3> &
// Reference type
// cpptype class alt::VectorLayout<float, 3>
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_7(struct alt_VectorLayout_float_3* layout);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:81:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::LengthSqr
// Return type
// cpptype float
// fundamental
CAPI float alt_Vector_float_3_VectorLayout_float_3_LengthSqr(struct alt_Vector_float_3_VectorLayout_float_3* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:91:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Length
// Return type
// cpptype float
// fundamental
CAPI float alt_Vector_float_3_VectorLayout_float_3_Length(struct alt_Vector_float_3_VectorLayout_float_3* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Vector<float, 3, class alt::VectorLayout<float, 3> > &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_8(struct alt_Vector_float_3_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> > &&
// Reference type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_Vector_float_3_VectorLayout_float_3_Create_9(struct alt_Vector_float_3_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::~Vector
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> > &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// cpptype const class alt::Vector<float, 3, class alt::VectorLayout<float, 3> > &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_constVector_float_3_VectorLayout_float_3Ref(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_Vector_float_3_VectorLayout_float_3* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> > &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> > &&
// Reference type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
CAPI void alt_Vector_float_3_VectorLayout_float_3_Assign_Vector_float_3_VectorLayout_float_3RefRef(struct alt_Vector_float_3_VectorLayout_float_3* _instance, struct alt_Vector_float_3_VectorLayout_float_3* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:66:15
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Layout
// Canonical decl: alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Layout
// tdtd
// using alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Layout = class alt::VectorLayout<float, 3>
// cpptype class alt::VectorLayout<float, 3>
typedef struct alt_VectorLayout_float_3 alt_Vector_float_3_VectorLayout_float_3_Layout;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:67:15
// alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Element
// Canonical decl: alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Element
// using alt::Vector<float, 3, alt::VectorLayout<float, 3> >::Element = float
// cpptype float
// fundamental
typedef float alt_Vector_float_3_VectorLayout_float_3_Element;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// derives from class alt::VectorLayout<float, 4>
// cpptype float [4]
// array type
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:59:17
    // alt::VectorLayout<float, 4>::Element [4] elements

// ARRAY SIZE WAS 0, outputting as simple pointer
typedef struct alt_Vector_float_4_VectorLayout_float_4 {
    float** elements;
} alt_Vector_float_4_VectorLayout_float_4;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// functions from class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
CAPI void alt_Vector_float_4_VectorLayout_float_4_free(struct alt_Vector_float_4_VectorLayout_float_4* ptr);

// functions derived from VectorLayout

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_VectorLayout_float_4_to_alt_Vector_float_4_VectorLayout_float_4(struct alt_VectorLayout_float_4* from);

CAPI struct alt_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_to_alt_VectorLayout_float_4(struct alt_Vector_float_4_VectorLayout_float_4* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:24:9
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:25:9
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[4]
// Reference type
// cpptype float [4]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_1(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:31:9
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_2(float* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:42:18
// alt::VectorLayout<float, 4>::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:43:24
// alt::VectorLayout<float, 4>::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t_1(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::~VectorLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::VectorLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::VectorLayout<float, 4> &&
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// cpptype const class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:17:11
// alt::VectorLayout<float, 4>::operator=
// Overloaded operator
// Return type
// cpptype class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// cpptype class alt::VectorLayout<float, 4> &&
// Reference type
// cpptype class alt::VectorLayout<float, 4>
CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:71:9
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_5();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:72:9
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[4]
// Reference type
// cpptype float [4]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_6(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:73:9
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::VectorLayout<float, 4> &
// Reference type
// cpptype class alt::VectorLayout<float, 4>
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_7(struct alt_VectorLayout_float_4* layout);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:81:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::LengthSqr
// Return type
// cpptype float
// fundamental
CAPI float alt_Vector_float_4_VectorLayout_float_4_LengthSqr(struct alt_Vector_float_4_VectorLayout_float_4* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:91:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Length
// Return type
// cpptype float
// fundamental
CAPI float alt_Vector_float_4_VectorLayout_float_4_Length(struct alt_Vector_float_4_VectorLayout_float_4* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::~Vector
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_8(struct alt_Vector_float_4_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &&
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// Return ptr must be manually freed with alt_Vector_float_4_VectorLayout_float_4_free()
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_9(struct alt_Vector_float_4_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVector_float_4_VectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &&
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_Vector_float_4_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:66:15
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout
// Canonical decl: alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout
// tdtd
// using alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout = class alt::VectorLayout<float, 4>
// cpptype class alt::VectorLayout<float, 4>
typedef struct alt_VectorLayout_float_4 alt_Vector_float_4_VectorLayout_float_4_Layout;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:67:15
// alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element
// Canonical decl: alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element
// tdtd
// using alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element = float
// cpptype float
// fundamental
typedef float alt_Vector_float_4_VectorLayout_float_4_Element;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// class alt::Vector<float, 3, class alt::PointLayout>
// derives from class alt::PointLayout
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:15
    // float x

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:18
    // float y

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:21
    // float z

typedef struct alt_Vector_float_3_PointLayout {
    float x;
    float y;
    float z;
} alt_Vector_float_3_PointLayout;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// class alt::Vector<float, 3, class alt::PointLayout>
// functions from class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_Vector_float_3_PointLayout_free(struct alt_Vector_float_3_PointLayout* ptr);

// functions derived from PointLayout

CAPI struct alt_Vector_float_3_PointLayout* alt_PointLayout_to_alt_Vector_float_3_PointLayout(struct alt_PointLayout* from);

CAPI struct alt_PointLayout* alt_Vector_float_3_PointLayout_to_alt_PointLayout(struct alt_Vector_float_3_PointLayout* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:224:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:225:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_1(float _x, float _y, float _z);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:226:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_2(float* elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:234:16
// alt::PointLayout::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_Vector_float_3_PointLayout_Access_size_t(struct alt_Vector_float_3_PointLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:235:22
// alt::PointLayout::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_Vector_float_3_PointLayout_Access_size_t_1(struct alt_Vector_float_3_PointLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::~PointLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_3(struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::PointLayout &&
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_4(struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::operator=
// Overloaded operator
// Return type
// cpptype class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
CAPI void alt_Vector_float_3_PointLayout_Assign_constPointLayoutRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::operator=
// Overloaded operator
// Return type
// cpptype class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// cpptype class alt::PointLayout &&
// Reference type
// cpptype class alt::PointLayout
CAPI void alt_Vector_float_3_PointLayout_Assign_PointLayoutRefRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_PointLayout* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:71:9
// alt::Vector<float, 3, alt::PointLayout>::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_5();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:72:9
// alt::Vector<float, 3, alt::PointLayout>::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_6(float* _elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:73:9
// alt::Vector<float, 3, alt::PointLayout>::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_7(struct alt_PointLayout* layout);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:81:11
// alt::Vector<float, 3, alt::PointLayout>::LengthSqr
// Return type
// cpptype float
// fundamental
CAPI float alt_Vector_float_3_PointLayout_LengthSqr(struct alt_Vector_float_3_PointLayout* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:91:11
// alt::Vector<float, 3, alt::PointLayout>::Length
// Return type
// cpptype float
// fundamental
CAPI float alt_Vector_float_3_PointLayout_Length(struct alt_Vector_float_3_PointLayout* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::PointLayout>::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Vector<float, 3, class alt::PointLayout> &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_8(struct alt_Vector_float_3_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::PointLayout>::Vector
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout> &&
// Reference type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_Vector_float_3_PointLayout_Create_9(struct alt_Vector_float_3_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::PointLayout>::~Vector
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::PointLayout>::operator=
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout> &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype const class alt::Vector<float, 3, class alt::PointLayout> &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_Vector_float_3_PointLayout_Assign_constVector_float_3_PointLayoutRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_Vector_float_3_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:63:11
// alt::Vector<float, 3, alt::PointLayout>::operator=
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout> &
// Reference type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype class alt::Vector<float, 3, class alt::PointLayout> &&
// Reference type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_Vector_float_3_PointLayout_Assign_Vector_float_3_PointLayoutRefRef(struct alt_Vector_float_3_PointLayout* _instance, struct alt_Vector_float_3_PointLayout* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:66:15
// alt::Vector<float, 3, alt::PointLayout>::Layout
// Canonical decl: alt::Vector<float, 3, alt::PointLayout>::Layout
// tdtd
// using alt::Vector<float, 3, alt::PointLayout>::Layout = class alt::PointLayout
// cpptype class alt::PointLayout
typedef struct alt_PointLayout alt_Vector_float_3_PointLayout_Layout;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:67:15
// alt::Vector<float, 3, alt::PointLayout>::Element
// Canonical decl: alt::Vector<float, 3, alt::PointLayout>::Element
// using alt::Vector<float, 3, alt::PointLayout>::Element = float
// cpptype float
// fundamental
typedef float alt_Vector_float_3_PointLayout_Element;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:111:29
// alt::Vector2
// Canonical decl: alt::Vector2
// Describes template
// using alt::Vector2 = Vector<type-parameter-0-0, 2, VectorLayout<type-parameter-0-0, 2> >
// cpptype Vector<type-parameter-0-0, 2, VectorLayout<type-parameter-0-0, 2> >
// Could not determine ctype for Vector<type-parameter-0-0, 2, VectorLayout<type-parameter-0-0, 2> >
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:112:11
// alt::Vector2f
// Canonical decl: alt::Vector2f
// using alt::Vector2f = class alt::Vector<float, 2, class alt::VectorLayout<float, 2> >
// cpptype class alt::Vector<float, 2, class alt::VectorLayout<float, 2> >
typedef struct alt_Vector_float_2_VectorLayout_float_2 alt_Vector2f;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:113:11
// alt::Vector2i
// Canonical decl: alt::Vector2i
// using alt::Vector2i = class alt::Vector<int, 2, class alt::VectorLayout<int, 2> >
// cpptype class alt::Vector<int, 2, class alt::VectorLayout<int, 2> >
typedef struct alt_Vector_int_2_VectorLayout_int_2 alt_Vector2i;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:115:29
// alt::Vector3
// Canonical decl: alt::Vector3
// Describes template
// using alt::Vector3 = Vector<type-parameter-0-0, 3, VectorLayout<type-parameter-0-0, 3> >
// cpptype Vector<type-parameter-0-0, 3, VectorLayout<type-parameter-0-0, 3> >
// Could not determine ctype for Vector<type-parameter-0-0, 3, VectorLayout<type-parameter-0-0, 3> >
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:116:11
// alt::Vector3f
// Canonical decl: alt::Vector3f
// tdtd
// using alt::Vector3f = class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
typedef struct alt_Vector_float_3_VectorLayout_float_3 alt_Vector3f;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:117:11
// alt::Vector3i
// Canonical decl: alt::Vector3i
// using alt::Vector3i = class alt::Vector<int, 3, class alt::VectorLayout<int, 3> >
// cpptype class alt::Vector<int, 3, class alt::VectorLayout<int, 3> >
typedef struct alt_Vector_int_3_VectorLayout_int_3 alt_Vector3i;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:119:29
// alt::Vector4
// Canonical decl: alt::Vector4
// Describes template
// using alt::Vector4 = Vector<type-parameter-0-0, 4, VectorLayout<type-parameter-0-0, 4> >
// cpptype Vector<type-parameter-0-0, 4, VectorLayout<type-parameter-0-0, 4> >
// Could not determine ctype for Vector<type-parameter-0-0, 4, VectorLayout<type-parameter-0-0, 4> >
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:120:11
// alt::Vector4f
// Canonical decl: alt::Vector4f
// tdtd
// using alt::Vector4f = class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
typedef struct alt_Vector_float_4_VectorLayout_float_4 alt_Vector4f;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:121:11
// alt::Vector4i
// Canonical decl: alt::Vector4i
// using alt::Vector4i = class alt::Vector<int, 4, class alt::VectorLayout<int, 4> >
// cpptype class alt::Vector<int, 4, class alt::VectorLayout<int, 4> >
typedef struct alt_Vector_int_4_VectorLayout_int_4 alt_Vector4i;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:124:11
// MatrixLayout<T, W, H>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:124:11
// MatrixLayout<T, W, H>
// isTemplated || isTemplateDecl.

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:127:15
// alt::MatrixLayout::Row
// Canonical decl: alt::MatrixLayout::Row
// tdtd
// tdtd instantiation dependent
// using alt::MatrixLayout::Row = Vector<type-parameter-0-0, W, VectorLayout<type-parameter-0-0, W> >
// cpptype Vector<type-parameter-0-0, W, VectorLayout<type-parameter-0-0, W> >
// Could not determine ctype for Vector<type-parameter-0-0, W, VectorLayout<type-parameter-0-0, W> >
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:128:15
// alt::MatrixLayout::Element
// Canonical decl: alt::MatrixLayout::Element
// tdtd
// tdtd instantiation dependent
// using alt::MatrixLayout::Element = typename Vector<type-parameter-0-0, W, VectorLayout<type-parameter-0-0, W> >::Element
// cpptype typename Vector<type-parameter-0-0, W, VectorLayout<type-parameter-0-0, W> >::Element
// Could not determine ctype for typename Vector<type-parameter-0-0, W, VectorLayout<type-parameter-0-0, W> >::Element
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:129:15
// alt::MatrixLayout::Transposed
// Canonical decl: alt::MatrixLayout::Transposed
// using alt::MatrixLayout::Transposed = MatrixLayout<type-parameter-0-0, H, W>
// cpptype MatrixLayout<type-parameter-0-0, H, W>
// Could not determine ctype for MatrixLayout<type-parameter-0-0, H, W>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:179:11
// Matrix<T, W, H, _Layout>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:179:11
// Matrix<T, W, H, _Layout>
// isTemplated || isTemplateDecl.

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:183:15
// alt::Matrix::Row
// Canonical decl: alt::Matrix::Row
// tdtd
// tdtd instantiation dependent
// using alt::Matrix::Row = typename type-parameter-0-3::Row
// cpptype typename type-parameter-0-3::Row
// Could not determine ctype for typename type-parameter-0-3::Row
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:184:15
// alt::Matrix::Element
// Canonical decl: alt::Matrix::Element
// tdtd
// tdtd instantiation dependent
// using alt::Matrix::Element = typename type-parameter-0-3::Element
// cpptype typename type-parameter-0-3::Element
// Could not determine ctype for typename type-parameter-0-3::Element
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:185:15
// alt::Matrix::Transposed
// Canonical decl: alt::Matrix::Transposed
// tdtd
// tdtd instantiation dependent
// using alt::Matrix::Transposed = Matrix<type-parameter-0-0, H, W, typename type-parameter-0-3::Transposed>
// cpptype Matrix<type-parameter-0-0, H, W, typename type-parameter-0-3::Transposed>
// Could not determine ctype for Matrix<type-parameter-0-0, H, W, typename type-parameter-0-3::Transposed>
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:215:11
// alt::DXMatrix
// Canonical decl: alt::DXMatrix
// using alt::DXMatrix = class alt::Matrix<float, 4, 4, class alt::MatrixLayout<float, 4, 4> >
// cpptype class alt::Matrix<float, 4, 4, class alt::MatrixLayout<float, 4, 4> >
typedef struct alt_Matrix_float_4_4_MatrixLayout_float_4_4 alt_DXMatrix;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// class alt::PointLayout
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:15
    // float x

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:18
    // float y

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:21
    // float z

typedef struct alt_PointLayout {
    float x;
    float y;
    float z;
} alt_PointLayout;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// class alt::PointLayout
// functions from class alt::PointLayout
CAPI void alt_PointLayout_free(struct alt_PointLayout* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:224:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:225:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_1(float _x, float _y, float _z);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:226:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_2(float* elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:234:16
// alt::PointLayout::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_PointLayout_Access_size_t(struct alt_PointLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:235:22
// alt::PointLayout::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_PointLayout_Access_size_t_1(struct alt_PointLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::~PointLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_3(struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::PointLayout &&
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_PointLayout_free()
CAPI struct alt_PointLayout* alt_PointLayout_Create_4(struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::operator=
// Overloaded operator
// Return type
// cpptype class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
CAPI void alt_PointLayout_Assign_constPointLayoutRef(struct alt_PointLayout* _instance, struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::operator=
// Overloaded operator
// Return type
// cpptype class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// cpptype class alt::PointLayout &&
// Reference type
// cpptype class alt::PointLayout
CAPI void alt_PointLayout_Assign_PointLayoutRefRef(struct alt_PointLayout* _instance, struct alt_PointLayout* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:220:15
// alt::PointLayout::Element
// Canonical decl: alt::PointLayout::Element
// using alt::PointLayout::Element = float
// cpptype float
// fundamental
typedef float alt_PointLayout_Element;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:245:11
// class alt::PointPaddedLayout
// derives from class alt::PointLayout
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:15
    // float x

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:18
    // float y

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:242:21
    // float z

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:256:15
    // float pad

typedef struct alt_PointPaddedLayout {
    float x;
    float y;
    float z;
    float pad;
} alt_PointPaddedLayout;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:245:11
// class alt::PointPaddedLayout
// functions from class alt::PointPaddedLayout
CAPI void alt_PointPaddedLayout_free(struct alt_PointPaddedLayout* ptr);

// functions derived from PointLayout

CAPI struct alt_PointPaddedLayout* alt_PointLayout_to_alt_PointPaddedLayout(struct alt_PointLayout* from);

CAPI struct alt_PointLayout* alt_PointPaddedLayout_to_alt_PointLayout(struct alt_PointPaddedLayout* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:224:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:225:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_1(float _x, float _y, float _z);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:226:9
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_2(float* elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:234:16
// alt::PointLayout::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_PointPaddedLayout_Access_size_t(struct alt_PointPaddedLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:235:22
// alt::PointLayout::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_PointPaddedLayout_Access_size_t_1(struct alt_PointPaddedLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::~PointLayout
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_3(struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::PointLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::PointLayout &&
// Reference type
// cpptype class alt::PointLayout
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_4(struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::operator=
// Overloaded operator
// Return type
// cpptype class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// cpptype const class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
CAPI void alt_PointPaddedLayout_Assign_constPointLayoutRef(struct alt_PointPaddedLayout* _instance, struct alt_PointLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:217:11
// alt::PointLayout::operator=
// Overloaded operator
// Return type
// cpptype class alt::PointLayout &
// Reference type
// cpptype class alt::PointLayout
// cpptype class alt::PointLayout &&
// Reference type
// cpptype class alt::PointLayout
CAPI void alt_PointPaddedLayout_Assign_PointLayoutRefRef(struct alt_PointPaddedLayout* _instance, struct alt_PointLayout* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:248:9
// alt::PointPaddedLayout::PointPaddedLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_5();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:249:9
// alt::PointPaddedLayout::PointPaddedLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_6(float x, float y, float z);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:250:9
// alt::PointPaddedLayout::PointPaddedLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_PointPaddedLayout_free()
CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_7(float* elements);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:259:11
// alt::Point
// Canonical decl: alt::Point
// tdtd
// using alt::Point = class alt::Vector<float, 3, class alt::PointLayout>
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
typedef struct alt_Vector_float_3_PointLayout alt_Point;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:260:11
// alt::PointPadded
// Canonical decl: alt::PointPadded
// tdtd
// tdtd incomplete type
// using alt::PointPadded = class alt::Vector<float, 3, class alt::PointPaddedLayout>
// cpptype class alt::Vector<float, 3, class alt::PointPaddedLayout>
typedef struct alt_Vector_float_3_PointPaddedLayout alt_PointPadded;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:262:11
// alt::Position
// Canonical decl: alt::Position
// tdtd
// using alt::Position = class alt::Vector<float, 3, class alt::PointLayout>
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
typedef struct alt_Vector_float_3_PointLayout alt_Position;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:263:11
// alt::PositionPadded
// Canonical decl: alt::PositionPadded
// using alt::PositionPadded = class alt::Vector<float, 3, class alt::PointPaddedLayout>
// cpptype class alt::Vector<float, 3, class alt::PointPaddedLayout>
typedef struct alt_Vector_float_3_PointPaddedLayout alt_PositionPadded;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// class alt::RotationLayout
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:297:15
    // float roll

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:297:21
    // float pitch

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:297:28
    // float yaw

typedef struct alt_RotationLayout {
    float roll;
    float pitch;
    float yaw;
} alt_RotationLayout;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// class alt::RotationLayout
// functions from class alt::RotationLayout
CAPI void alt_RotationLayout_free(struct alt_RotationLayout* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:272:3
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create(float _roll, float _pitch, float _yaw);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:273:9
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_1();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:274:9
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_2(float* elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:282:16
// alt::RotationLayout::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_RotationLayout_Access_size_t(struct alt_RotationLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:283:22
// alt::RotationLayout::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_RotationLayout_Access_size_t_1(struct alt_RotationLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:290:8
// alt::RotationLayout::Normalize
// Return type
// cpptype void
// fundamental
CAPI void alt_RotationLayout_Normalize(struct alt_RotationLayout* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:300:16
// alt::RotationLayout::Normalize
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RotationLayout &
// Reference type
// cpptype class alt::RotationLayout
// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_3(struct alt_RotationLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RotationLayout &&
// Reference type
// cpptype class alt::RotationLayout
// Return ptr must be manually freed with alt_RotationLayout_free()
CAPI struct alt_RotationLayout* alt_RotationLayout_Create_4(struct alt_RotationLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// alt::RotationLayout::~RotationLayout
// Destructor


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:268:15
// alt::RotationLayout::Element
// Canonical decl: alt::RotationLayout::Element
// using alt::RotationLayout::Element = float
// cpptype float
// fundamental
typedef float alt_RotationLayout_Element;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:306:11
// class alt::RotationPaddedLayout
// derives from class alt::RotationLayout
// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:297:15
    // float roll

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:297:21
    // float pitch

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:297:28
    // float yaw

// cpptype float
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:317:15
    // float pad

typedef struct alt_RotationPaddedLayout {
    float roll;
    float pitch;
    float yaw;
    float pad;
} alt_RotationPaddedLayout;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:306:11
// class alt::RotationPaddedLayout
// functions from class alt::RotationPaddedLayout
CAPI void alt_RotationPaddedLayout_free(struct alt_RotationPaddedLayout* ptr);

// functions derived from RotationLayout

CAPI struct alt_RotationPaddedLayout* alt_RotationLayout_to_alt_RotationPaddedLayout(struct alt_RotationLayout* from);

CAPI struct alt_RotationLayout* alt_RotationPaddedLayout_to_alt_RotationLayout(struct alt_RotationPaddedLayout* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:272:3
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create(float _roll, float _pitch, float _yaw);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:273:9
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_1();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:274:9
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_2(float* elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:282:16
// alt::RotationLayout::operator[]
// Overloaded operator
// Return type
// cpptype float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_RotationPaddedLayout_Access_size_t(struct alt_RotationPaddedLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:283:22
// alt::RotationLayout::operator[]
// Overloaded operator
// Return type
// cpptype const float &
// Reference type
// cpptype float
// fundamental
// cpptype unsigned long long
// fundamental
CAPI float* alt_RotationPaddedLayout_Access_size_t_1(struct alt_RotationPaddedLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:290:8
// alt::RotationLayout::Normalize
// Return type
// cpptype void
// fundamental
CAPI void alt_RotationPaddedLayout_Normalize(struct alt_RotationPaddedLayout* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:300:16
// alt::RotationLayout::Normalize
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RotationLayout &
// Reference type
// cpptype class alt::RotationLayout
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_3(struct alt_RotationLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// alt::RotationLayout::RotationLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RotationLayout &&
// Reference type
// cpptype class alt::RotationLayout
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_4(struct alt_RotationLayout* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:265:11
// alt::RotationLayout::~RotationLayout
// Destructor


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:309:9
// alt::RotationPaddedLayout::RotationPaddedLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_5();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:310:9
// alt::RotationPaddedLayout::RotationPaddedLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_6(float roll, float pitch, float yaw);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:311:9
// alt::RotationPaddedLayout::RotationPaddedLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[3]
// Reference type
// cpptype float [3]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_RotationPaddedLayout_free()
CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_7(float* elements);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:320:11
// alt::Rotation
// Canonical decl: alt::Rotation
// tdtd
// tdtd incomplete type
// using alt::Rotation = class alt::Vector<float, 3, class alt::RotationLayout>
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
typedef struct alt_Vector_float_3_RotationLayout alt_Rotation;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:321:11
// alt::RotationPadded
// Canonical decl: alt::RotationPadded
// using alt::RotationPadded = class alt::Vector<float, 3, class alt::RotationPaddedLayout>
// cpptype class alt::Vector<float, 3, class alt::RotationPaddedLayout>
typedef struct alt_Vector_float_3_RotationPaddedLayout alt_RotationPadded;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:323:11
// class alt::ViewMatrixLayout
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:364:18
    // alt::Vector4f right

// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:364:25
    // alt::Vector4f up

// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:364:29
    // alt::Vector4f forward

// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:364:38
    // alt::Vector4f pos

typedef struct alt_ViewMatrixLayout {
    struct alt_Vector_float_4_VectorLayout_float_4 right;
    struct alt_Vector_float_4_VectorLayout_float_4 up;
    struct alt_Vector_float_4_VectorLayout_float_4 forward;
    struct alt_Vector_float_4_VectorLayout_float_4 pos;
} alt_ViewMatrixLayout;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:323:11
// class alt::ViewMatrixLayout
// functions from class alt::ViewMatrixLayout
CAPI void alt_ViewMatrixLayout_free(struct alt_ViewMatrixLayout* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:333:9
// alt::ViewMatrixLayout::ViewMatrixLayout
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:334:9
// alt::ViewMatrixLayout::ViewMatrixLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > const (&)[4]
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > [4]
// array type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// array reference
// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_1(struct alt_Vector_float_4_VectorLayout_float_4* _rows);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:336:9
// alt::ViewMatrixLayout::ViewMatrixLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_2(struct alt_Vector_float_4_VectorLayout_float_4* row);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:338:9
// alt::ViewMatrixLayout::ViewMatrixLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype float const (&)[16]
// Reference type
// cpptype float [16]
// array type
// cpptype float
// fundamental
// array reference
// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_3(float* elements);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:343:9
// alt::ViewMatrixLayout::ViewMatrixLayout
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// Return ptr must be manually freed with alt_ViewMatrixLayout_free()
CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_4(struct alt_Vector_float_4_VectorLayout_float_4* _right, struct alt_Vector_float_4_VectorLayout_float_4* _up, struct alt_Vector_float_4_VectorLayout_float_4* _forward, struct alt_Vector_float_4_VectorLayout_float_4* _pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:351:14
// alt::ViewMatrixLayout::operator[]
// Overloaded operator
// Return type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype unsigned long long
// fundamental
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t(struct alt_ViewMatrixLayout* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:352:20
// alt::ViewMatrixLayout::operator[]
// Overloaded operator
// Return type
// cpptype const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &
// Reference type
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype unsigned long long
// fundamental
CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t_1(struct alt_ViewMatrixLayout* _instance, unsigned long long key);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:326:15
// alt::ViewMatrixLayout::Row
// Canonical decl: alt::ViewMatrixLayout::Row
// tdtd
// using alt::ViewMatrixLayout::Row = class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
// cpptype class alt::Vector<float, 4, class alt::VectorLayout<float, 4> >
typedef struct alt_Vector_float_4_VectorLayout_float_4 alt_ViewMatrixLayout_Row;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:327:15
// alt::ViewMatrixLayout::Element
// Canonical decl: alt::ViewMatrixLayout::Element
// tdtd
// using alt::ViewMatrixLayout::Element = float
// cpptype float
// fundamental
typedef float alt_ViewMatrixLayout_Element;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:328:15
// alt::ViewMatrixLayout::Transposed
// Canonical decl: alt::ViewMatrixLayout::Transposed
// using alt::ViewMatrixLayout::Transposed = class alt::ViewMatrixLayout
// cpptype class alt::ViewMatrixLayout
typedef struct alt_ViewMatrixLayout alt_ViewMatrixLayout_Transposed;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../deps/alt-math/alt-math.h:367:11
// alt::ViewMatrix
// Canonical decl: alt::ViewMatrix
// using alt::ViewMatrix = class alt::Matrix<float, 4, 4, class alt::ViewMatrixLayout>
// cpptype class alt::Matrix<float, 4, 4, class alt::ViewMatrixLayout>
typedef struct alt_Matrix_float_4_4_ViewMatrixLayout alt_ViewMatrix;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Types.h:7:8
// alt::Size
// Canonical decl: alt::Size
// tdtd
// using alt::Size = unsigned long long
// cpptype unsigned long long
// fundamental
typedef unsigned long long alt_Size;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:13:8
// class alt::String
// cpptype char *
// Pointer type
// cpptype char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:141:9
    // char * data

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:142:8
    // alt::Size size

typedef struct alt_String {
    char* data;
    unsigned long long size;
} alt_String;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:13:8
// class alt::String
// functions from class alt::String
CAPI void alt_String_free(struct alt_String* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:16:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
// cpptype char
// fundamental
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create(unsigned long long _size, char fill);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:37:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_1(char* _data, unsigned long long size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:43:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_2();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:49:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_3(char* _str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:62:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &
// type is in STD
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:68:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::String &
// Reference type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_5(struct alt_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:74:3
// alt::String::String
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::String &&
// Reference type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_String_Create_6(struct alt_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:82:3
// alt::String::~String
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:84:9
// alt::String::operator[]
// Overloaded operator
// Return type
// cpptype char &
// Reference type
// cpptype char
// fundamental
// cpptype unsigned long long
// fundamental
CAPI char* alt_String_Access_uint64_t(struct alt_String* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:85:8
// alt::String::operator[]
// Overloaded operator
// Return type
// cpptype char
// fundamental
// cpptype unsigned long long
// fundamental
CAPI char alt_String_Access_uint64_t_1(struct alt_String* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:87:11
// alt::String::operator=
// Overloaded operator
// Return type
// cpptype class alt::String &
// Reference type
// cpptype class alt::String
// cpptype const class alt::String &
// Reference type
// cpptype class alt::String
CAPI void alt_String_Assign_constStringRef(struct alt_String* _instance, struct alt_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:94:11
// alt::String::operator=
// Overloaded operator
// Return type
// cpptype class alt::String &
// Reference type
// cpptype class alt::String
// cpptype class alt::String &&
// Reference type
// cpptype class alt::String
CAPI void alt_String_Assign_StringRefRef(struct alt_String* _instance, struct alt_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:101:8
// alt::String::Resize
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
CAPI void alt_String_Resize(struct alt_String* _instance, unsigned long long new_size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:118:8
// alt::String::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_String_IsEmpty(struct alt_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:120:15
// alt::String::GetData
// Return type
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
CAPI char* alt_String_GetData(struct alt_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:121:9
// alt::String::GetData
// Return type
// cpptype char *
// Pointer type
// cpptype char
// fundamental
CAPI char* alt_String_GetData_1(struct alt_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:122:8
// alt::String::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_String_GetSize(struct alt_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:124:8
// alt::String::operator==
// Overloaded operator
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::String
CAPI _Bool alt_String_Equals_String(struct alt_String* _instance, struct alt_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:125:8
// alt::String::operator!=
// Overloaded operator
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::String
CAPI _Bool alt_String_NotEquals_String(struct alt_String* _instance, struct alt_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:127:15
// alt::String::ToString
// Return type
// cpptype class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >
// type is in STD
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:128:15
// alt::String::CStr
// Return type
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
CAPI char* alt_String_CStr(struct alt_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:144:8
// alt::String::Swap
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:150:17
// alt::String::Concat
// Not public


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:167:9
// struct std::hash<alt::String>
// Has relations with STD namespace

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/./String.h:167:9
// struct std::hash<alt::String>
// Has relations with STD namespace

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// class alt::StringView
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:16:15
    // const char * data

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:17:8
    // alt::Size size

typedef struct alt_StringView {
    char* data;
    unsigned long long size;
} alt_StringView;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// class alt::StringView
// functions from class alt::StringView
CAPI void alt_StringView_free(struct alt_StringView* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:20:3
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create(char* _data, unsigned long long _size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:27:3
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_1();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:33:3
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_2(char* _str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:46:3
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> > &
// type is in STD
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:52:3
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::String &
// Reference type
// cpptype class alt::String
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_4(struct alt_String* _str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:58:3
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class std::basic_string_view<char, struct std::char_traits<char> >
// type is in STD
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:64:8
// alt::StringView::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_StringView_IsEmpty(struct alt_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:66:15
// alt::StringView::GetData
// Return type
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
CAPI char* alt_StringView_GetData(struct alt_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:67:8
// alt::StringView::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_StringView_GetSize(struct alt_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:69:8
// alt::StringView::operator[]
// Overloaded operator
// Return type
// cpptype char
// fundamental
// cpptype unsigned long long
// fundamental
CAPI char alt_StringView_Access_uint64_t(struct alt_StringView* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:71:8
// alt::StringView::operator==
// Overloaded operator
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::StringView
CAPI _Bool alt_StringView_Equals_StringView(struct alt_StringView* _instance, struct alt_StringView* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:72:8
// alt::StringView::operator!=
// Overloaded operator
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::StringView
CAPI _Bool alt_StringView_NotEquals_StringView(struct alt_StringView* _instance, struct alt_StringView* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:74:15
// alt::StringView::ToString
// Return type
// cpptype class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >
// type is in STD
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:75:3
// alt::StringView::operator String
// Typecast overload
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_StringView_To_String(struct alt_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:76:15
// alt::StringView::CStr
// Return type
// cpptype const char *
// Pointer type
// cpptype char
// fundamental
CAPI char* alt_StringView_CStr(struct alt_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::StringView &
// Reference type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_6(struct alt_StringView* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// alt::StringView::StringView
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView &&
// Reference type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_StringView_Create_7(struct alt_StringView* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// alt::StringView::~StringView
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// alt::StringView::operator=
// Overloaded operator
// Return type
// cpptype class alt::StringView &
// Reference type
// cpptype class alt::StringView
// cpptype const class alt::StringView &
// Reference type
// cpptype class alt::StringView
CAPI void alt_StringView_Assign_constStringViewRef(struct alt_StringView* _instance, struct alt_StringView* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/StringView.h:14:8
// alt::StringView::operator=
// Overloaded operator
// Return type
// cpptype class alt::StringView &
// Reference type
// cpptype class alt::StringView
// cpptype class alt::StringView &&
// Reference type
// cpptype class alt::StringView
CAPI void alt_StringView_Assign_StringViewRefRef(struct alt_StringView* _instance, struct alt_StringView* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:9
// struct alt::RGBA
// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:10:11
    // uint8_t r

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:11:11
    // uint8_t g

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:12:11
    // uint8_t b

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:13:11
    // uint8_t a

typedef struct alt_RGBA {
    unsigned char r;
    unsigned char g;
    unsigned char b;
    unsigned char a;
} alt_RGBA;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:8:9
// struct alt::RGBA
// functions from struct alt::RGBA
CAPI void alt_RGBA_free(struct alt_RGBA* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:15:3
// alt::RGBA::RGBA
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_RGBA_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../types/RGBA.h:17:3
// alt::RGBA::RGBA
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_RGBA_Create_1(unsigned char _r, unsigned char _g, unsigned char _b, unsigned char _a);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// Array<T>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// Array<T>
// isTemplated || isTemplateDecl.

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> > *
// Pointer type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:105:6
    // class alt::RefBase<class alt::RefStore<const class alt::IMValue> > * data

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:106:8
    // alt::Size size

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:107:8
    // alt::Size capacity

typedef struct alt_Array_RefBase_RefStore_constIMValue {
    struct alt_RefBase_RefStore_constIMValue* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_RefBase_RefStore_constIMValue;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// functions from class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI void alt_Array_RefBase_RefStore_constIMValue_free(struct alt_Array_RefBase_RefStore_constIMValue* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:13:3
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Array
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:31:3
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > *
// Pointer type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_1(struct alt_RefBase_RefStore_constIMValue* _data, unsigned long long _size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:37:3
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_2(unsigned long long _size, struct alt_RefBase_RefStore_constIMValue* fill);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:47:3
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_3(struct alt_Array_RefBase_RefStore_constIMValue* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:53:3
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &&
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_constIMValue_free()
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Create_4(struct alt_Array_RefBase_RefStore_constIMValue* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:60:3
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::~Array
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:62:10
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::operator=
// Overloaded operator
// Return type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// cpptype const class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI void alt_Array_RefBase_RefStore_constIMValue_Assign_constArray_RefBase_RefStore_constIMValueRef(struct alt_Array_RefBase_RefStore_constIMValue* _instance, struct alt_Array_RefBase_RefStore_constIMValue* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:73:10
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::operator=
// Overloaded operator
// Return type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &&
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI void alt_Array_RefBase_RefStore_constIMValue_Assign_Array_RefBase_RefStore_constIMValueRefRef(struct alt_Array_RefBase_RefStore_constIMValue* _instance, struct alt_Array_RefBase_RefStore_constIMValue* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:86:8
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Push
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI void alt_Array_RefBase_RefStore_constIMValue_Push(struct alt_Array_RefBase_RefStore_constIMValue* _instance, struct alt_RefBase_RefStore_constIMValue* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:93:8
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_Array_RefBase_RefStore_constIMValue_GetSize(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:94:8
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::GetCapacity
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_Array_RefBase_RefStore_constIMValue_GetCapacity(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:96:6
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::operator[]
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype unsigned long long
// fundamental
CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Access_uint64_t(struct alt_Array_RefBase_RefStore_constIMValue* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:97:12
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::operator[]
// Overloaded operator
// Return type
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype unsigned long long
// fundamental
CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_Access_uint64_t_1(struct alt_Array_RefBase_RefStore_constIMValue* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:99:6
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::begin
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> > *
// Pointer type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_begin(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:100:12
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::begin
// Return type
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > *
// Pointer type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_begin_1(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:101:6
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::end
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> > *
// Pointer type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_end(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:102:12
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::end
// Return type
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > *
// Pointer type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI struct alt_RefBase_RefStore_constIMValue* alt_Array_RefBase_RefStore_constIMValue_end_1(struct alt_Array_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:109:8
// alt::Array<alt::RefBase<alt::RefStore<const alt::IMValue> > >::Realloc
// Not public


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// class alt::Array<class alt::StringView>
// cpptype class alt::StringView *
// Pointer type
// cpptype class alt::StringView
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:105:6
    // class alt::StringView * data

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:106:8
    // alt::Size size

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:107:8
    // alt::Size capacity

typedef struct alt_Array_StringView {
    struct alt_StringView* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_StringView;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// class alt::Array<class alt::StringView>
// functions from class alt::Array<class alt::StringView>
CAPI void alt_Array_StringView_free(struct alt_Array_StringView* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:13:3
// alt::Array<alt::StringView>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:31:3
// alt::Array<alt::StringView>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::StringView *
// Pointer type
// cpptype class alt::StringView
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_1(struct alt_StringView* _data, unsigned long long _size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:37:3
// alt::Array<alt::StringView>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
// cpptype const class alt::StringView &
// Reference type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_2(unsigned long long _size, struct alt_StringView* fill);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:47:3
// alt::Array<alt::StringView>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Array<class alt::StringView> &
// Reference type
// cpptype class alt::Array<class alt::StringView>
// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_3(struct alt_Array_StringView* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:53:3
// alt::Array<alt::StringView>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Array<class alt::StringView> &&
// Reference type
// cpptype class alt::Array<class alt::StringView>
// Return ptr must be manually freed with alt_Array_StringView_free()
CAPI struct alt_Array_StringView* alt_Array_StringView_Create_4(struct alt_Array_StringView* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:60:3
// alt::Array<alt::StringView>::~Array
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:62:10
// alt::Array<alt::StringView>::operator=
// Overloaded operator
// Return type
// cpptype class alt::Array<class alt::StringView> &
// Reference type
// cpptype class alt::Array<class alt::StringView>
// cpptype const class alt::Array<class alt::StringView> &
// Reference type
// cpptype class alt::Array<class alt::StringView>
CAPI void alt_Array_StringView_Assign_constArray_StringViewRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:73:10
// alt::Array<alt::StringView>::operator=
// Overloaded operator
// Return type
// cpptype class alt::Array<class alt::StringView> &
// Reference type
// cpptype class alt::Array<class alt::StringView>
// cpptype class alt::Array<class alt::StringView> &&
// Reference type
// cpptype class alt::Array<class alt::StringView>
CAPI void alt_Array_StringView_Assign_Array_StringViewRefRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:86:8
// alt::Array<alt::StringView>::Push
// Return type
// cpptype void
// fundamental
// cpptype const class alt::StringView &
// Reference type
// cpptype class alt::StringView
CAPI void alt_Array_StringView_Push(struct alt_Array_StringView* _instance, struct alt_StringView* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:93:8
// alt::Array<alt::StringView>::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_Array_StringView_GetSize(struct alt_Array_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:94:8
// alt::Array<alt::StringView>::GetCapacity
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_Array_StringView_GetCapacity(struct alt_Array_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:96:6
// alt::Array<alt::StringView>::operator[]
// Overloaded operator
// Return type
// cpptype class alt::StringView &
// Reference type
// cpptype class alt::StringView
// cpptype unsigned long long
// fundamental
CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t(struct alt_Array_StringView* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:97:12
// alt::Array<alt::StringView>::operator[]
// Overloaded operator
// Return type
// cpptype const class alt::StringView &
// Reference type
// cpptype class alt::StringView
// cpptype unsigned long long
// fundamental
CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t_1(struct alt_Array_StringView* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:99:6
// alt::Array<alt::StringView>::begin
// Return type
// cpptype class alt::StringView *
// Pointer type
// cpptype class alt::StringView
CAPI struct alt_StringView* alt_Array_StringView_begin(struct alt_Array_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:100:12
// alt::Array<alt::StringView>::begin
// Return type
// cpptype const class alt::StringView *
// Pointer type
// cpptype class alt::StringView
CAPI struct alt_StringView* alt_Array_StringView_begin_1(struct alt_Array_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:101:6
// alt::Array<alt::StringView>::end
// Return type
// cpptype class alt::StringView *
// Pointer type
// cpptype class alt::StringView
CAPI struct alt_StringView* alt_Array_StringView_end(struct alt_Array_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:102:12
// alt::Array<alt::StringView>::end
// Return type
// cpptype const class alt::StringView *
// Pointer type
// cpptype class alt::StringView
CAPI struct alt_StringView* alt_Array_StringView_end_1(struct alt_Array_StringView* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:109:8
// alt::Array<alt::StringView>::Realloc
// Not public


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// class alt::Array<class alt::String>
// cpptype class alt::String *
// Pointer type
// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:105:6
    // class alt::String * data

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:106:8
    // alt::Size size

// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:107:8
    // alt::Size capacity

typedef struct alt_Array_String {
    struct alt_String* data;
    unsigned long long size;
    unsigned long long capacity;
} alt_Array_String;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:10:8
// class alt::Array<class alt::String>
// functions from class alt::Array<class alt::String>
CAPI void alt_Array_String_free(struct alt_Array_String* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:13:3
// alt::Array<alt::String>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:31:3
// alt::Array<alt::String>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::String *
// Pointer type
// cpptype class alt::String
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_1(struct alt_String* _data, unsigned long long _size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:37:3
// alt::Array<alt::String>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
// cpptype const class alt::String &
// Reference type
// cpptype class alt::String
// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_2(unsigned long long _size, struct alt_String* fill);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:47:3
// alt::Array<alt::String>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::Array<class alt::String> &
// Reference type
// cpptype class alt::Array<class alt::String>
// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_3(struct alt_Array_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:53:3
// alt::Array<alt::String>::Array
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::Array<class alt::String> &&
// Reference type
// cpptype class alt::Array<class alt::String>
// Return ptr must be manually freed with alt_Array_String_free()
CAPI struct alt_Array_String* alt_Array_String_Create_4(struct alt_Array_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:60:3
// alt::Array<alt::String>::~Array
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:62:10
// alt::Array<alt::String>::operator=
// Overloaded operator
// Return type
// cpptype class alt::Array<class alt::String> &
// Reference type
// cpptype class alt::Array<class alt::String>
// cpptype const class alt::Array<class alt::String> &
// Reference type
// cpptype class alt::Array<class alt::String>
CAPI void alt_Array_String_Assign_constArray_StringRef(struct alt_Array_String* _instance, struct alt_Array_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:73:10
// alt::Array<alt::String>::operator=
// Overloaded operator
// Return type
// cpptype class alt::Array<class alt::String> &
// Reference type
// cpptype class alt::Array<class alt::String>
// cpptype class alt::Array<class alt::String> &&
// Reference type
// cpptype class alt::Array<class alt::String>
CAPI void alt_Array_String_Assign_Array_StringRefRef(struct alt_Array_String* _instance, struct alt_Array_String* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:86:8
// alt::Array<alt::String>::Push
// Return type
// cpptype void
// fundamental
// cpptype const class alt::String &
// Reference type
// cpptype class alt::String
CAPI void alt_Array_String_Push(struct alt_Array_String* _instance, struct alt_String* el);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:93:8
// alt::Array<alt::String>::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_Array_String_GetSize(struct alt_Array_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:94:8
// alt::Array<alt::String>::GetCapacity
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_Array_String_GetCapacity(struct alt_Array_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:96:6
// alt::Array<alt::String>::operator[]
// Overloaded operator
// Return type
// cpptype class alt::String &
// Reference type
// cpptype class alt::String
// cpptype unsigned long long
// fundamental
CAPI struct alt_String* alt_Array_String_Access_uint64_t(struct alt_Array_String* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:97:12
// alt::Array<alt::String>::operator[]
// Overloaded operator
// Return type
// cpptype const class alt::String &
// Reference type
// cpptype class alt::String
// cpptype unsigned long long
// fundamental
CAPI struct alt_String* alt_Array_String_Access_uint64_t_1(struct alt_Array_String* _instance, unsigned long long key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:99:6
// alt::Array<alt::String>::begin
// Return type
// cpptype class alt::String *
// Pointer type
// cpptype class alt::String
CAPI struct alt_String* alt_Array_String_begin(struct alt_Array_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:100:12
// alt::Array<alt::String>::begin
// Return type
// cpptype const class alt::String *
// Pointer type
// cpptype class alt::String
CAPI struct alt_String* alt_Array_String_begin_1(struct alt_Array_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:101:6
// alt::Array<alt::String>::end
// Return type
// cpptype class alt::String *
// Pointer type
// cpptype class alt::String
CAPI struct alt_String* alt_Array_String_end(struct alt_Array_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:102:12
// alt::Array<alt::String>::end
// Return type
// cpptype const class alt::String *
// Pointer type
// cpptype class alt::String
CAPI struct alt_String* alt_Array_String_end_1(struct alt_Array_String* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:109:8
// alt::Array<alt::String>::Realloc
// Not public


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:10:8
// class alt::IWeakRef
typedef struct alt_IWeakRef alt_IWeakRef;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:10:8
// class alt::IWeakRef
// functions from class alt::IWeakRef
CAPI void alt_IWeakRef_free(struct alt_IWeakRef* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:13:16
// alt::IWeakRef::OnDestroy
// Return type
// cpptype void
// fundamental
CAPI void alt_IWeakRef_OnDestroy(struct alt_IWeakRef* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:10:8
// alt::IWeakRef::operator=
// Overloaded operator
// Return type
// cpptype class alt::IWeakRef &
// Reference type
// cpptype class alt::IWeakRef
// cpptype const class alt::IWeakRef &
// Reference type
// cpptype class alt::IWeakRef
CAPI void alt_IWeakRef_Assign_constIWeakRefRef(struct alt_IWeakRef* _instance, struct alt_IWeakRef* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:10:8
// alt::IWeakRef::operator=
// Overloaded operator
// Return type
// cpptype class alt::IWeakRef &
// Reference type
// cpptype class alt::IWeakRef
// cpptype class alt::IWeakRef &&
// Reference type
// cpptype class alt::IWeakRef
CAPI void alt_IWeakRef_Assign_IWeakRefRefRef(struct alt_IWeakRef* _instance, struct alt_IWeakRef* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:10:8
// alt::IWeakRef::~IWeakRef
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// class alt::CRefCountable
// functions from class alt::CRefCountable
// has no accessible destructor for 'Free' function

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_CRefCountable_GetRefCount(struct alt_CRefCountable* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_CRefCountable_AddRef(struct alt_CRefCountable* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_CRefCountable_RemoveRef(struct alt_CRefCountable* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_CRefCountable_AddWeakRef(struct alt_CRefCountable* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_CRefCountable_RemoveWeakRef(struct alt_CRefCountable* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// RefBase<MyStore>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// RefBase<MyStore>
// isTemplated || isTemplateDecl.

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase::ValueType
// Canonical decl: alt::RefBase::ValueType
// tdtd
// tdtd instantiation dependent
// using alt::RefBase::ValueType = typename type-parameter-0-0::ValueType
// cpptype typename type-parameter-0-0::ValueType
// Could not determine ctype for typename type-parameter-0-0::ValueType
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// derives from class alt::RefStore<class alt::IMValue>
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IMValue * ptr

typedef struct alt_RefBase_RefStore_IMValue {
    struct alt_IMValue* ptr;
} alt_RefBase_RefStore_IMValue;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// functions from class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_RefBase_RefStore_IMValue_free(struct alt_RefBase_RefStore_IMValue* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_IMValue* alt_RefStore_IMValue_to_alt_RefBase_RefStore_IMValue(struct alt_RefStore_IMValue* from);

CAPI struct alt_RefStore_IMValue* alt_RefBase_RefStore_IMValue_to_alt_RefStore_IMValue(struct alt_RefBase_RefStore_IMValue* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IMValue>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI void alt_RefBase_RefStore_IMValue_Assign(struct alt_RefBase_RefStore_IMValue* _instance, struct alt_IMValue* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IMValue>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_IMValue_Free(struct alt_RefBase_RefStore_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IMValue>::Get
// Return type
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI struct alt_IMValue* alt_RefBase_RefStore_IMValue_Get(struct alt_RefBase_RefStore_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IMValue> &
// Reference type
// cpptype class alt::RefStore<class alt::IMValue>
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create_1(struct alt_RefStore_IMValue* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IMValue> &&
// Reference type
// cpptype class alt::RefStore<class alt::IMValue>
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create_2(struct alt_RefStore_IMValue* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create_3();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create_4(struct alt_IMValue* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create_5(struct alt_RefBase_RefStore_IMValue* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_RefBase_RefStore_IMValue_Create_6(struct alt_RefBase_RefStore_IMValue* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<alt::IMValue> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_RefBase_RefStore_IMValue_Assign_constRefBase_RefStore_IMValueRef(struct alt_RefBase_RefStore_IMValue* _instance, struct alt_RefBase_RefStore_IMValue* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<alt::IMValue> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IMValue_IsEmpty(struct alt_RefBase_RefStore_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<alt::IMValue> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IMValue_To__Bool(struct alt_RefBase_RefStore_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<alt::IMValue> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<alt::IMValue> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<alt::IMValue> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<alt::IMValue> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<alt::IMValue> >::ValueType = class alt::IMValue
// cpptype class alt::IMValue
typedef struct alt_IMValue alt_RefBase_RefStore_IMValue_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// derives from class alt::RefStore<const class alt::IMValue>
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // const class alt::IMValue * ptr

typedef struct alt_RefBase_RefStore_constIMValue {
    struct alt_IMValue* ptr;
} alt_RefBase_RefStore_constIMValue;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// functions from class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI void alt_RefBase_RefStore_constIMValue_free(struct alt_RefBase_RefStore_constIMValue* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefStore_constIMValue_to_alt_RefBase_RefStore_constIMValue(struct alt_RefStore_constIMValue* from);

CAPI struct alt_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_to_alt_RefStore_constIMValue(struct alt_RefBase_RefStore_constIMValue* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<const alt::IMValue>::Assign
// Return type
// cpptype void
// fundamental
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI void alt_RefBase_RefStore_constIMValue_Assign(struct alt_RefBase_RefStore_constIMValue* _instance, struct alt_IMValue* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<const alt::IMValue>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_constIMValue_Free(struct alt_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<const alt::IMValue>::Get
// Return type
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI struct alt_IMValue* alt_RefBase_RefStore_constIMValue_Get(struct alt_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<const class alt::IMValue> &
// Reference type
// cpptype class alt::RefStore<const class alt::IMValue>
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_1(struct alt_RefStore_constIMValue* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<const class alt::IMValue> &&
// Reference type
// cpptype class alt::RefStore<const class alt::IMValue>
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_2(struct alt_RefStore_constIMValue* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_3();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_4(struct alt_IMValue* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_5(struct alt_RefBase_RefStore_constIMValue* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_RefBase_RefStore_constIMValue_Create_6(struct alt_RefBase_RefStore_constIMValue* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<const alt::IMValue> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype const class alt::RefBase<class alt::RefStore<const class alt::IMValue> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI void alt_RefBase_RefStore_constIMValue_Assign_constRefBase_RefStore_constIMValueRef(struct alt_RefBase_RefStore_constIMValue* _instance, struct alt_RefBase_RefStore_constIMValue* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<const alt::IMValue> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_constIMValue_IsEmpty(struct alt_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<const alt::IMValue> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_constIMValue_To__Bool(struct alt_RefBase_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<const alt::IMValue> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<const alt::IMValue> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<const alt::IMValue> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<const alt::IMValue> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<const alt::IMValue> >::ValueType = const class alt::IMValue
// cpptype class alt::IMValue
typedef struct alt_IMValue alt_RefBase_RefStore_constIMValue_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// derives from class alt::RefStore<class alt::IBaseObject>
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IBaseObject * ptr

typedef struct alt_RefBase_RefStore_IBaseObject {
    struct alt_IBaseObject* ptr;
} alt_RefBase_RefStore_IBaseObject;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// functions from class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
CAPI void alt_RefBase_RefStore_IBaseObject_free(struct alt_RefBase_RefStore_IBaseObject* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefStore_IBaseObject_to_alt_RefBase_RefStore_IBaseObject(struct alt_RefStore_IBaseObject* from);

CAPI struct alt_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_to_alt_RefStore_IBaseObject(struct alt_RefBase_RefStore_IBaseObject* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IBaseObject>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
CAPI void alt_RefBase_RefStore_IBaseObject_Assign(struct alt_RefBase_RefStore_IBaseObject* _instance, struct alt_IBaseObject* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IBaseObject>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_IBaseObject_Free(struct alt_RefBase_RefStore_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IBaseObject>::Get
// Return type
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
CAPI struct alt_IBaseObject* alt_RefBase_RefStore_IBaseObject_Get(struct alt_RefBase_RefStore_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IBaseObject>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IBaseObject>::~RefStore
// Destructor


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_1();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_2(struct alt_IBaseObject* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IBaseObject> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_3(struct alt_RefBase_RefStore_IBaseObject* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_RefBase_RefStore_IBaseObject_Create_4(struct alt_RefBase_RefStore_IBaseObject* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IBaseObject> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
CAPI void alt_RefBase_RefStore_IBaseObject_Assign_constRefBase_RefStore_IBaseObjectRef(struct alt_RefBase_RefStore_IBaseObject* _instance, struct alt_RefBase_RefStore_IBaseObject* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IBaseObject_IsEmpty(struct alt_RefBase_RefStore_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IBaseObject_To__Bool(struct alt_RefBase_RefStore_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<alt::IBaseObject> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<alt::IBaseObject> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<alt::IBaseObject> >::ValueType = class alt::IBaseObject
// cpptype class alt::IBaseObject
typedef struct alt_IBaseObject alt_RefBase_RefStore_IBaseObject_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// derives from class alt::RefStore<class alt::IPlayer>
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IPlayer * ptr

typedef struct alt_RefBase_RefStore_IPlayer {
    struct alt_IPlayer* ptr;
} alt_RefBase_RefStore_IPlayer;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// functions from class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI void alt_RefBase_RefStore_IPlayer_free(struct alt_RefBase_RefStore_IPlayer* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefStore_IPlayer_to_alt_RefBase_RefStore_IPlayer(struct alt_RefStore_IPlayer* from);

CAPI struct alt_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_to_alt_RefStore_IPlayer(struct alt_RefBase_RefStore_IPlayer* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IPlayer>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
CAPI void alt_RefBase_RefStore_IPlayer_Assign(struct alt_RefBase_RefStore_IPlayer* _instance, struct alt_IPlayer* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IPlayer>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_IPlayer_Free(struct alt_RefBase_RefStore_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IPlayer>::Get
// Return type
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
CAPI struct alt_IPlayer* alt_RefBase_RefStore_IPlayer_Get(struct alt_RefBase_RefStore_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IPlayer> &
// Reference type
// cpptype class alt::RefStore<class alt::IPlayer>
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_1(struct alt_RefStore_IPlayer* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IPlayer> &&
// Reference type
// cpptype class alt::RefStore<class alt::IPlayer>
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_2(struct alt_RefStore_IPlayer* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_3();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_4(struct alt_IPlayer* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IPlayer> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_5(struct alt_RefBase_RefStore_IPlayer* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_RefBase_RefStore_IPlayer_Create_6(struct alt_RefBase_RefStore_IPlayer* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<alt::IPlayer> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IPlayer> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI void alt_RefBase_RefStore_IPlayer_Assign_constRefBase_RefStore_IPlayerRef(struct alt_RefBase_RefStore_IPlayer* _instance, struct alt_RefBase_RefStore_IPlayer* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<alt::IPlayer> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IPlayer_IsEmpty(struct alt_RefBase_RefStore_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<alt::IPlayer> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IPlayer_To__Bool(struct alt_RefBase_RefStore_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<alt::IPlayer> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<alt::IPlayer> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<alt::IPlayer> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<alt::IPlayer> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<alt::IPlayer> >::ValueType = class alt::IPlayer
// cpptype class alt::IPlayer
typedef struct alt_IPlayer alt_RefBase_RefStore_IPlayer_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// derives from class alt::RefStore<class alt::IVehicle>
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IVehicle * ptr

typedef struct alt_RefBase_RefStore_IVehicle {
    struct alt_IVehicle* ptr;
} alt_RefBase_RefStore_IVehicle;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// functions from class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
CAPI void alt_RefBase_RefStore_IVehicle_free(struct alt_RefBase_RefStore_IVehicle* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefStore_IVehicle_to_alt_RefBase_RefStore_IVehicle(struct alt_RefStore_IVehicle* from);

CAPI struct alt_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_to_alt_RefStore_IVehicle(struct alt_RefBase_RefStore_IVehicle* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IVehicle>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
CAPI void alt_RefBase_RefStore_IVehicle_Assign(struct alt_RefBase_RefStore_IVehicle* _instance, struct alt_IVehicle* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IVehicle>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_IVehicle_Free(struct alt_RefBase_RefStore_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IVehicle>::Get
// Return type
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
CAPI struct alt_IVehicle* alt_RefBase_RefStore_IVehicle_Get(struct alt_RefBase_RefStore_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IVehicle> &
// Reference type
// cpptype class alt::RefStore<class alt::IVehicle>
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_1(struct alt_RefStore_IVehicle* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IVehicle> &&
// Reference type
// cpptype class alt::RefStore<class alt::IVehicle>
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_2(struct alt_RefStore_IVehicle* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_3();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_4(struct alt_IVehicle* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IVehicle> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_5(struct alt_RefBase_RefStore_IVehicle* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_RefBase_RefStore_IVehicle_Create_6(struct alt_RefBase_RefStore_IVehicle* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<alt::IVehicle> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IVehicle> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
CAPI void alt_RefBase_RefStore_IVehicle_Assign_constRefBase_RefStore_IVehicleRef(struct alt_RefBase_RefStore_IVehicle* _instance, struct alt_RefBase_RefStore_IVehicle* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<alt::IVehicle> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IVehicle_IsEmpty(struct alt_RefBase_RefStore_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<alt::IVehicle> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IVehicle_To__Bool(struct alt_RefBase_RefStore_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<alt::IVehicle> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<alt::IVehicle> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<alt::IVehicle> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<alt::IVehicle> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<alt::IVehicle> >::ValueType = class alt::IVehicle
// cpptype class alt::IVehicle
typedef struct alt_IVehicle alt_RefBase_RefStore_IVehicle_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// derives from class alt::RefStore<class alt::IEntity>
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IEntity * ptr

typedef struct alt_RefBase_RefStore_IEntity {
    struct alt_IEntity* ptr;
} alt_RefBase_RefStore_IEntity;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// functions from class alt::RefBase<class alt::RefStore<class alt::IEntity> >
CAPI void alt_RefBase_RefStore_IEntity_free(struct alt_RefBase_RefStore_IEntity* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_IEntity* alt_RefStore_IEntity_to_alt_RefBase_RefStore_IEntity(struct alt_RefStore_IEntity* from);

CAPI struct alt_RefStore_IEntity* alt_RefBase_RefStore_IEntity_to_alt_RefStore_IEntity(struct alt_RefBase_RefStore_IEntity* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IEntity>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
CAPI void alt_RefBase_RefStore_IEntity_Assign(struct alt_RefBase_RefStore_IEntity* _instance, struct alt_IEntity* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IEntity>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_IEntity_Free(struct alt_RefBase_RefStore_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IEntity>::Get
// Return type
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
CAPI struct alt_IEntity* alt_RefBase_RefStore_IEntity_Get(struct alt_RefBase_RefStore_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IEntity> &
// Reference type
// cpptype class alt::RefStore<class alt::IEntity>
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_1(struct alt_RefStore_IEntity* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IEntity> &&
// Reference type
// cpptype class alt::RefStore<class alt::IEntity>
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_2(struct alt_RefStore_IEntity* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_3();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_4(struct alt_IEntity* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IEntity> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_5(struct alt_RefBase_RefStore_IEntity* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_RefBase_RefStore_IEntity_Create_6(struct alt_RefBase_RefStore_IEntity* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<alt::IEntity> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IEntity> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
CAPI void alt_RefBase_RefStore_IEntity_Assign_constRefBase_RefStore_IEntityRef(struct alt_RefBase_RefStore_IEntity* _instance, struct alt_RefBase_RefStore_IEntity* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<alt::IEntity> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IEntity_IsEmpty(struct alt_RefBase_RefStore_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<alt::IEntity> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IEntity_To__Bool(struct alt_RefBase_RefStore_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<alt::IEntity> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<alt::IEntity> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<alt::IEntity> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<alt::IEntity> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<alt::IEntity> >::ValueType = class alt::IEntity
// cpptype class alt::IEntity
typedef struct alt_IEntity alt_RefBase_RefStore_IEntity_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// derives from class alt::RefStore<class alt::IColShape>
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IColShape * ptr

typedef struct alt_RefBase_RefStore_IColShape {
    struct alt_IColShape* ptr;
} alt_RefBase_RefStore_IColShape;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:12:8
// class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// functions from class alt::RefBase<class alt::RefStore<class alt::IColShape> >
CAPI void alt_RefBase_RefStore_IColShape_free(struct alt_RefBase_RefStore_IColShape* ptr);

// functions derived from RefStore

CAPI struct alt_RefBase_RefStore_IColShape* alt_RefStore_IColShape_to_alt_RefBase_RefStore_IColShape(struct alt_RefStore_IColShape* from);

CAPI struct alt_RefStore_IColShape* alt_RefBase_RefStore_IColShape_to_alt_RefStore_IColShape(struct alt_RefBase_RefStore_IColShape* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IColShape>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
CAPI void alt_RefBase_RefStore_IColShape_Assign(struct alt_RefBase_RefStore_IColShape* _instance, struct alt_IColShape* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IColShape>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefBase_RefStore_IColShape_Free(struct alt_RefBase_RefStore_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IColShape>::Get
// Return type
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
CAPI struct alt_IColShape* alt_RefBase_RefStore_IColShape_Get(struct alt_RefBase_RefStore_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IColShape> &
// Reference type
// cpptype class alt::RefStore<class alt::IColShape>
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_1(struct alt_RefStore_IColShape* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IColShape> &&
// Reference type
// cpptype class alt::RefStore<class alt::IColShape>
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_2(struct alt_RefStore_IColShape* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:17:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_3();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:18:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_4(struct alt_IColShape* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:20:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IColShape> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_5(struct alt_RefBase_RefStore_IColShape* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:23:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> > &&
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_RefBase_RefStore_IColShape_Create_6(struct alt_RefBase_RefStore_IColShape* other);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:38:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::RefBase
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype nullptr_t
// Could not determine ctype for nullptr_t
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:41:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::~RefBase
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:46:12
// alt::RefBase<alt::RefStore<alt::IColShape> >::operator=
// Overloaded operator
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype const class alt::RefBase<class alt::RefStore<class alt::IColShape> > &
// Reference type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
CAPI void alt_RefBase_RefStore_IColShape_Assign_constRefBase_RefStore_IColShapeRef(struct alt_RefBase_RefStore_IColShape* _instance, struct alt_RefBase_RefStore_IColShape* that);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:57:8
// alt::RefBase<alt::RefStore<alt::IColShape> >::IsEmpty
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IColShape_IsEmpty(struct alt_RefBase_RefStore_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:58:3
// alt::RefBase<alt::RefStore<alt::IColShape> >::operator bool
// Typecast overload
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_RefBase_RefStore_IColShape_To__Bool(struct alt_RefBase_RefStore_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:60:14
// alt::RefBase<alt::RefStore<alt::IColShape> >::operator->
// Overloaded operator
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:61:14
// alt::RefBase<alt::RefStore<alt::IColShape> >::operator*
// Overloaded operator

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:15:9
// alt::RefBase<alt::RefStore<alt::IColShape> >::ValueType
// Canonical decl: alt::RefBase<alt::RefStore<alt::IColShape> >::ValueType
// tdtd
// using alt::RefBase<alt::RefStore<alt::IColShape> >::ValueType = class alt::IColShape
// cpptype class alt::IColShape
typedef struct alt_IColShape alt_RefBase_RefStore_IColShape_ValueType;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// RefStore<T>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// RefStore<T>
// isTemplated || isTemplateDecl.


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore::OtherType
// Canonical decl: alt::RefStore::OtherType
// Describes template
// using alt::RefStore::OtherType = RefStore<type-parameter-1-0>
// cpptype RefStore<type-parameter-1-0>
// Could not determine ctype for RefStore<type-parameter-1-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IMValue>
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IMValue * ptr

typedef struct alt_RefStore_IMValue {
    struct alt_IMValue* ptr;
} alt_RefStore_IMValue;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IMValue>
// functions from class alt::RefStore<class alt::IMValue>
CAPI void alt_RefStore_IMValue_free(struct alt_RefStore_IMValue* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IMValue>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI void alt_RefStore_IMValue_Assign(struct alt_RefStore_IMValue* _instance, struct alt_IMValue* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IMValue>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_IMValue_Free(struct alt_RefStore_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IMValue>::Get
// Return type
// cpptype class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI struct alt_IMValue* alt_RefStore_IMValue_Get(struct alt_RefStore_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_IMValue_free()
CAPI struct alt_RefStore_IMValue* alt_RefStore_IMValue_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IMValue> &
// Reference type
// cpptype class alt::RefStore<class alt::IMValue>
// Return ptr must be manually freed with alt_RefStore_IMValue_free()
CAPI struct alt_RefStore_IMValue* alt_RefStore_IMValue_Create_1(struct alt_RefStore_IMValue* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IMValue> &&
// Reference type
// cpptype class alt::RefStore<class alt::IMValue>
// Return ptr must be manually freed with alt_RefStore_IMValue_free()
CAPI struct alt_RefStore_IMValue* alt_RefStore_IMValue_Create_2(struct alt_RefStore_IMValue* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<alt::IMValue>::ValueType
// Canonical decl: alt::RefStore<alt::IMValue>::ValueType
// tdtd
// using alt::RefStore<alt::IMValue>::ValueType = class alt::IMValue
// cpptype class alt::IMValue
typedef struct alt_IMValue alt_RefStore_IMValue_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<alt::IMValue>::OtherType
// Canonical decl: alt::RefStore<alt::IMValue>::OtherType
// Describes template
// using alt::RefStore<alt::IMValue>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<const class alt::IMValue>
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // const class alt::IMValue * ptr

typedef struct alt_RefStore_constIMValue {
    struct alt_IMValue* ptr;
} alt_RefStore_constIMValue;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<const class alt::IMValue>
// functions from class alt::RefStore<const class alt::IMValue>
CAPI void alt_RefStore_constIMValue_free(struct alt_RefStore_constIMValue* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<const alt::IMValue>::Assign
// Return type
// cpptype void
// fundamental
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI void alt_RefStore_constIMValue_Assign(struct alt_RefStore_constIMValue* _instance, struct alt_IMValue* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<const alt::IMValue>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_constIMValue_Free(struct alt_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<const alt::IMValue>::Get
// Return type
// cpptype const class alt::IMValue *
// Pointer type
// cpptype class alt::IMValue
CAPI struct alt_IMValue* alt_RefStore_constIMValue_Get(struct alt_RefStore_constIMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_constIMValue_free()
CAPI struct alt_RefStore_constIMValue* alt_RefStore_constIMValue_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<const class alt::IMValue> &
// Reference type
// cpptype class alt::RefStore<const class alt::IMValue>
// Return ptr must be manually freed with alt_RefStore_constIMValue_free()
CAPI struct alt_RefStore_constIMValue* alt_RefStore_constIMValue_Create_1(struct alt_RefStore_constIMValue* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<const alt::IMValue>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<const class alt::IMValue> &&
// Reference type
// cpptype class alt::RefStore<const class alt::IMValue>
// Return ptr must be manually freed with alt_RefStore_constIMValue_free()
CAPI struct alt_RefStore_constIMValue* alt_RefStore_constIMValue_Create_2(struct alt_RefStore_constIMValue* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<const alt::IMValue>::ValueType
// Canonical decl: alt::RefStore<const alt::IMValue>::ValueType
// tdtd
// using alt::RefStore<const alt::IMValue>::ValueType = const class alt::IMValue
// cpptype class alt::IMValue
typedef struct alt_IMValue alt_RefStore_constIMValue_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<const alt::IMValue>::OtherType
// Canonical decl: alt::RefStore<const alt::IMValue>::OtherType
// Describes template
// using alt::RefStore<const alt::IMValue>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IBaseObject>
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IBaseObject * ptr

typedef struct alt_RefStore_IBaseObject {
    struct alt_IBaseObject* ptr;
} alt_RefStore_IBaseObject;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IBaseObject>
// functions from class alt::RefStore<class alt::IBaseObject>
CAPI void alt_RefStore_IBaseObject_free(struct alt_RefStore_IBaseObject* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IBaseObject>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
CAPI void alt_RefStore_IBaseObject_Assign(struct alt_RefStore_IBaseObject* _instance, struct alt_IBaseObject* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IBaseObject>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_IBaseObject_Free(struct alt_RefStore_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IBaseObject>::Get
// Return type
// cpptype class alt::IBaseObject *
// Pointer type
// cpptype class alt::IBaseObject
CAPI struct alt_IBaseObject* alt_RefStore_IBaseObject_Get(struct alt_RefStore_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IBaseObject>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_IBaseObject_free()
CAPI struct alt_RefStore_IBaseObject* alt_RefStore_IBaseObject_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IBaseObject>::~RefStore
// Destructor


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<alt::IBaseObject>::ValueType
// Canonical decl: alt::RefStore<alt::IBaseObject>::ValueType
// tdtd
// using alt::RefStore<alt::IBaseObject>::ValueType = class alt::IBaseObject
// cpptype class alt::IBaseObject
typedef struct alt_IBaseObject alt_RefStore_IBaseObject_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<alt::IBaseObject>::OtherType
// Canonical decl: alt::RefStore<alt::IBaseObject>::OtherType
// Describes template
// using alt::RefStore<alt::IBaseObject>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IPlayer>
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IPlayer * ptr

typedef struct alt_RefStore_IPlayer {
    struct alt_IPlayer* ptr;
} alt_RefStore_IPlayer;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IPlayer>
// functions from class alt::RefStore<class alt::IPlayer>
CAPI void alt_RefStore_IPlayer_free(struct alt_RefStore_IPlayer* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IPlayer>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
CAPI void alt_RefStore_IPlayer_Assign(struct alt_RefStore_IPlayer* _instance, struct alt_IPlayer* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IPlayer>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_IPlayer_Free(struct alt_RefStore_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IPlayer>::Get
// Return type
// cpptype class alt::IPlayer *
// Pointer type
// cpptype class alt::IPlayer
CAPI struct alt_IPlayer* alt_RefStore_IPlayer_Get(struct alt_RefStore_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_IPlayer_free()
CAPI struct alt_RefStore_IPlayer* alt_RefStore_IPlayer_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IPlayer> &
// Reference type
// cpptype class alt::RefStore<class alt::IPlayer>
// Return ptr must be manually freed with alt_RefStore_IPlayer_free()
CAPI struct alt_RefStore_IPlayer* alt_RefStore_IPlayer_Create_1(struct alt_RefStore_IPlayer* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IPlayer>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IPlayer> &&
// Reference type
// cpptype class alt::RefStore<class alt::IPlayer>
// Return ptr must be manually freed with alt_RefStore_IPlayer_free()
CAPI struct alt_RefStore_IPlayer* alt_RefStore_IPlayer_Create_2(struct alt_RefStore_IPlayer* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<alt::IPlayer>::ValueType
// Canonical decl: alt::RefStore<alt::IPlayer>::ValueType
// tdtd
// using alt::RefStore<alt::IPlayer>::ValueType = class alt::IPlayer
// cpptype class alt::IPlayer
typedef struct alt_IPlayer alt_RefStore_IPlayer_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<alt::IPlayer>::OtherType
// Canonical decl: alt::RefStore<alt::IPlayer>::OtherType
// Describes template
// using alt::RefStore<alt::IPlayer>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IVehicle>
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IVehicle * ptr

typedef struct alt_RefStore_IVehicle {
    struct alt_IVehicle* ptr;
} alt_RefStore_IVehicle;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IVehicle>
// functions from class alt::RefStore<class alt::IVehicle>
CAPI void alt_RefStore_IVehicle_free(struct alt_RefStore_IVehicle* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IVehicle>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
CAPI void alt_RefStore_IVehicle_Assign(struct alt_RefStore_IVehicle* _instance, struct alt_IVehicle* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IVehicle>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_IVehicle_Free(struct alt_RefStore_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IVehicle>::Get
// Return type
// cpptype class alt::IVehicle *
// Pointer type
// cpptype class alt::IVehicle
CAPI struct alt_IVehicle* alt_RefStore_IVehicle_Get(struct alt_RefStore_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_IVehicle_free()
CAPI struct alt_RefStore_IVehicle* alt_RefStore_IVehicle_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IVehicle> &
// Reference type
// cpptype class alt::RefStore<class alt::IVehicle>
// Return ptr must be manually freed with alt_RefStore_IVehicle_free()
CAPI struct alt_RefStore_IVehicle* alt_RefStore_IVehicle_Create_1(struct alt_RefStore_IVehicle* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IVehicle>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IVehicle> &&
// Reference type
// cpptype class alt::RefStore<class alt::IVehicle>
// Return ptr must be manually freed with alt_RefStore_IVehicle_free()
CAPI struct alt_RefStore_IVehicle* alt_RefStore_IVehicle_Create_2(struct alt_RefStore_IVehicle* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<alt::IVehicle>::ValueType
// Canonical decl: alt::RefStore<alt::IVehicle>::ValueType
// tdtd
// using alt::RefStore<alt::IVehicle>::ValueType = class alt::IVehicle
// cpptype class alt::IVehicle
typedef struct alt_IVehicle alt_RefStore_IVehicle_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<alt::IVehicle>::OtherType
// Canonical decl: alt::RefStore<alt::IVehicle>::OtherType
// Describes template
// using alt::RefStore<alt::IVehicle>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IEntity>
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IEntity * ptr

typedef struct alt_RefStore_IEntity {
    struct alt_IEntity* ptr;
} alt_RefStore_IEntity;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IEntity>
// functions from class alt::RefStore<class alt::IEntity>
CAPI void alt_RefStore_IEntity_free(struct alt_RefStore_IEntity* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IEntity>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
CAPI void alt_RefStore_IEntity_Assign(struct alt_RefStore_IEntity* _instance, struct alt_IEntity* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IEntity>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_IEntity_Free(struct alt_RefStore_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IEntity>::Get
// Return type
// cpptype class alt::IEntity *
// Pointer type
// cpptype class alt::IEntity
CAPI struct alt_IEntity* alt_RefStore_IEntity_Get(struct alt_RefStore_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_IEntity_free()
CAPI struct alt_RefStore_IEntity* alt_RefStore_IEntity_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IEntity> &
// Reference type
// cpptype class alt::RefStore<class alt::IEntity>
// Return ptr must be manually freed with alt_RefStore_IEntity_free()
CAPI struct alt_RefStore_IEntity* alt_RefStore_IEntity_Create_1(struct alt_RefStore_IEntity* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IEntity>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IEntity> &&
// Reference type
// cpptype class alt::RefStore<class alt::IEntity>
// Return ptr must be manually freed with alt_RefStore_IEntity_free()
CAPI struct alt_RefStore_IEntity* alt_RefStore_IEntity_Create_2(struct alt_RefStore_IEntity* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<alt::IEntity>::ValueType
// Canonical decl: alt::RefStore<alt::IEntity>::ValueType
// tdtd
// using alt::RefStore<alt::IEntity>::ValueType = class alt::IEntity
// cpptype class alt::IEntity
typedef struct alt_IEntity alt_RefStore_IEntity_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<alt::IEntity>::OtherType
// Canonical decl: alt::RefStore<alt::IEntity>::OtherType
// Describes template
// using alt::RefStore<alt::IEntity>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IColShape>
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:126:6
    // class alt::IColShape * ptr

typedef struct alt_RefStore_IColShape {
    struct alt_IColShape* ptr;
} alt_RefStore_IColShape;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// class alt::RefStore<class alt::IColShape>
// functions from class alt::RefStore<class alt::IColShape>
CAPI void alt_RefStore_IColShape_free(struct alt_RefStore_IColShape* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:91:8
// alt::RefStore<alt::IColShape>::Assign
// Return type
// cpptype void
// fundamental
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
CAPI void alt_RefStore_IColShape_Assign(struct alt_RefStore_IColShape* _instance, struct alt_IColShape* _ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:97:8
// alt::RefStore<alt::IColShape>::Free
// Return type
// cpptype void
// fundamental
CAPI void alt_RefStore_IColShape_Free(struct alt_RefStore_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:113:13
// alt::RefStore<alt::IColShape>::Get
// Return type
// cpptype class alt::IColShape *
// Pointer type
// cpptype class alt::IColShape
CAPI struct alt_IColShape* alt_RefStore_IColShape_Get(struct alt_RefStore_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// Return ptr must be manually freed with alt_RefStore_IColShape_free()
CAPI struct alt_RefStore_IColShape* alt_RefStore_IColShape_Create();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::~RefStore
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::RefStore<class alt::IColShape> &
// Reference type
// cpptype class alt::RefStore<class alt::IColShape>
// Return ptr must be manually freed with alt_RefStore_IColShape_free()
CAPI struct alt_RefStore_IColShape* alt_RefStore_IColShape_Create_1(struct alt_RefStore_IColShape* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:83:8
// alt::RefStore<alt::IColShape>::RefStore
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefStore<class alt::IColShape> &&
// Reference type
// cpptype class alt::RefStore<class alt::IColShape>
// Return ptr must be manually freed with alt_RefStore_IColShape_free()
CAPI struct alt_RefStore_IColShape* alt_RefStore_IColShape_Create_2(struct alt_RefStore_IColShape* _p0);


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:86:9
// alt::RefStore<alt::IColShape>::ValueType
// Canonical decl: alt::RefStore<alt::IColShape>::ValueType
// tdtd
// using alt::RefStore<alt::IColShape>::ValueType = class alt::IColShape
// cpptype class alt::IColShape
typedef struct alt_IColShape alt_RefStore_IColShape_ValueType;


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:89:9
// alt::RefStore<alt::IColShape>::OtherType
// Canonical decl: alt::RefStore<alt::IColShape>::OtherType
// Describes template
// using alt::RefStore<alt::IColShape>::OtherType = RefStore<type-parameter-0-0>
// cpptype RefStore<type-parameter-0-0>
// Could not determine ctype for RefStore<type-parameter-0-0>
// bad typedef


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:129:26
// alt::Ref
// Canonical decl: alt::Ref
// Describes template
// using alt::Ref = RefBase<RefStore<type-parameter-0-0> >
// cpptype RefBase<RefStore<type-parameter-0-0> >
// Could not determine ctype for RefBase<RefStore<type-parameter-0-0> >
// bad typedef


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:130:26
// alt::ConstRef
// Canonical decl: alt::ConstRef
// Describes template
// using alt::ConstRef = RefBase<RefStore<const type-parameter-0-0> >
// cpptype RefBase<RefStore<const type-parameter-0-0> >
// Could not determine ctype for RefBase<RefStore<const type-parameter-0-0> >
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:133:8
// AtomicRefStore<T>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:133:8
// AtomicRefStore<T>
// isTemplated || isTemplateDecl.


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:166:26
// alt::AtomicRef
// Canonical decl: alt::AtomicRef
// Describes template
// using alt::AtomicRef = RefBase<AtomicRefStore<type-parameter-0-0> >
// cpptype RefBase<AtomicRefStore<type-parameter-0-0> >
// Could not determine ctype for RefBase<AtomicRefStore<type-parameter-0-0> >
// bad typedef


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:167:26
// alt::ConstAtomicRef
// Canonical decl: alt::ConstAtomicRef
// Describes template
// using alt::ConstAtomicRef = RefBase<AtomicRefStore<const type-parameter-0-0> >
// cpptype RefBase<AtomicRefStore<const type-parameter-0-0> >
// Could not determine ctype for RefBase<AtomicRefStore<const type-parameter-0-0> >
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:170:8
// WeakRefStore<T>
// isTemplated || isTemplateDecl.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:170:8
// WeakRefStore<T>
// isTemplated || isTemplateDecl.


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:206:26
// alt::WeakRef
// Canonical decl: alt::WeakRef
// Describes template
// using alt::WeakRef = RefBase<WeakRefStore<type-parameter-0-0> >
// cpptype RefBase<WeakRefStore<type-parameter-0-0> >
// Could not determine ctype for RefBase<WeakRefStore<type-parameter-0-0> >
// bad typedef


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:207:26
// alt::ConstWeakRef
// Canonical decl: alt::ConstWeakRef
// Describes template
// using alt::ConstWeakRef = RefBase<WeakRefStore<const type-parameter-0-0> >
// cpptype RefBase<WeakRefStore<const type-parameter-0-0> >
// Could not determine ctype for RefBase<WeakRefStore<const type-parameter-0-0> >
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:213:9
// hash<RefBase<type-parameter-0-0> >
// Is ClassTemplatePartialSpecialization.

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../Ref.h:213:9
// hash<RefBase<type-parameter-0-0> >
// Is ClassTemplatePartialSpecialization.

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:25:8
// alt::MValue
// Canonical decl: alt::MValue
// tdtd
// using alt::MValue = class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
typedef struct alt_RefBase_RefStore_IMValue alt_MValue;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:26:8
// alt::MValueNil
// Canonical decl: alt::MValueNil
// tdtd
// tdtd incomplete type
// using alt::MValueNil = class alt::RefBase<class alt::RefStore<class alt::IMValueNil> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueNil> >
typedef struct alt_RefBase_RefStore_IMValueNil alt_MValueNil;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:27:8
// alt::MValueBool
// Canonical decl: alt::MValueBool
// tdtd
// tdtd incomplete type
// using alt::MValueBool = class alt::RefBase<class alt::RefStore<class alt::IMValueBool> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueBool> >
typedef struct alt_RefBase_RefStore_IMValueBool alt_MValueBool;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:28:8
// alt::MValueInt
// Canonical decl: alt::MValueInt
// tdtd
// tdtd incomplete type
// using alt::MValueInt = class alt::RefBase<class alt::RefStore<class alt::IMValueInt> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueInt> >
typedef struct alt_RefBase_RefStore_IMValueInt alt_MValueInt;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:29:8
// alt::MValueUInt
// Canonical decl: alt::MValueUInt
// tdtd
// tdtd incomplete type
// using alt::MValueUInt = class alt::RefBase<class alt::RefStore<class alt::IMValueUInt> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueUInt> >
typedef struct alt_RefBase_RefStore_IMValueUInt alt_MValueUInt;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:30:8
// alt::MValueDouble
// Canonical decl: alt::MValueDouble
// tdtd
// tdtd incomplete type
// using alt::MValueDouble = class alt::RefBase<class alt::RefStore<class alt::IMValueDouble> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueDouble> >
typedef struct alt_RefBase_RefStore_IMValueDouble alt_MValueDouble;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:31:8
// alt::MValueString
// Canonical decl: alt::MValueString
// tdtd
// tdtd incomplete type
// using alt::MValueString = class alt::RefBase<class alt::RefStore<class alt::IMValueString> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueString> >
typedef struct alt_RefBase_RefStore_IMValueString alt_MValueString;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:32:8
// alt::MValueList
// Canonical decl: alt::MValueList
// tdtd
// tdtd incomplete type
// using alt::MValueList = class alt::RefBase<class alt::RefStore<class alt::IMValueList> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueList> >
typedef struct alt_RefBase_RefStore_IMValueList alt_MValueList;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:33:8
// alt::MValueDict
// Canonical decl: alt::MValueDict
// tdtd
// tdtd incomplete type
// using alt::MValueDict = class alt::RefBase<class alt::RefStore<class alt::IMValueDict> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueDict> >
typedef struct alt_RefBase_RefStore_IMValueDict alt_MValueDict;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:34:8
// alt::MValueBaseObject
// Canonical decl: alt::MValueBaseObject
// tdtd
// tdtd incomplete type
// using alt::MValueBaseObject = class alt::RefBase<class alt::RefStore<class alt::IMValueBaseObject> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueBaseObject> >
typedef struct alt_RefBase_RefStore_IMValueBaseObject alt_MValueBaseObject;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:35:8
// alt::MValueFunction
// Canonical decl: alt::MValueFunction
// tdtd
// tdtd incomplete type
// using alt::MValueFunction = class alt::RefBase<class alt::RefStore<class alt::IMValueFunction> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueFunction> >
typedef struct alt_RefBase_RefStore_IMValueFunction alt_MValueFunction;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:37:8
// alt::MValueConst
// Canonical decl: alt::MValueConst
// tdtd
// using alt::MValueConst = class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
typedef struct alt_RefBase_RefStore_constIMValue alt_MValueConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:38:8
// alt::MValueNilConst
// Canonical decl: alt::MValueNilConst
// using alt::MValueNilConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueNil> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueNil> >
typedef struct alt_RefBase_RefStore_constIMValueNil alt_MValueNilConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:39:8
// alt::MValueBoolConst
// Canonical decl: alt::MValueBoolConst
// using alt::MValueBoolConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueBool> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueBool> >
typedef struct alt_RefBase_RefStore_constIMValueBool alt_MValueBoolConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:40:8
// alt::MValueIntConst
// Canonical decl: alt::MValueIntConst
// using alt::MValueIntConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueInt> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueInt> >
typedef struct alt_RefBase_RefStore_constIMValueInt alt_MValueIntConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:41:8
// alt::MValueUIntConst
// Canonical decl: alt::MValueUIntConst
// using alt::MValueUIntConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueUInt> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueUInt> >
typedef struct alt_RefBase_RefStore_constIMValueUInt alt_MValueUIntConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:42:8
// alt::MValueDoubleConst
// Canonical decl: alt::MValueDoubleConst
// using alt::MValueDoubleConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueDouble> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueDouble> >
typedef struct alt_RefBase_RefStore_constIMValueDouble alt_MValueDoubleConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:43:8
// alt::MValueStringConst
// Canonical decl: alt::MValueStringConst
// using alt::MValueStringConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueString> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueString> >
typedef struct alt_RefBase_RefStore_constIMValueString alt_MValueStringConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:44:8
// alt::MValueListConst
// Canonical decl: alt::MValueListConst
// using alt::MValueListConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueList> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueList> >
typedef struct alt_RefBase_RefStore_constIMValueList alt_MValueListConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:45:8
// alt::MValueDictConst
// Canonical decl: alt::MValueDictConst
// using alt::MValueDictConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueDict> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueDict> >
typedef struct alt_RefBase_RefStore_constIMValueDict alt_MValueDictConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:46:8
// alt::MValueBaseObjectConst
// Canonical decl: alt::MValueBaseObjectConst
// using alt::MValueBaseObjectConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueBaseObject> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueBaseObject> >
typedef struct alt_RefBase_RefStore_constIMValueBaseObject alt_MValueBaseObjectConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:47:8
// alt::MValueFunctionConst
// Canonical decl: alt::MValueFunctionConst
// using alt::MValueFunctionConst = class alt::RefBase<class alt::RefStore<const class alt::IMValueFunction> >
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValueFunction> >
typedef struct alt_RefBase_RefStore_constIMValueFunction alt_MValueFunctionConst;

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:49:8
// alt::MValueArgs
// Canonical decl: alt::MValueArgs
// tdtd
// using alt::MValueArgs = class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
typedef struct alt_Array_RefBase_RefStore_constIMValue alt_MValueArgs;

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// class alt::IMValue
// functions from class alt::IMValue
// has no accessible destructor for 'Free' function

// functions derived from CRefCountable

CAPI struct alt_IMValue* alt_CRefCountable_to_alt_IMValue(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValue_to_alt_CRefCountable(struct alt_IMValue* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValue_GetRefCount(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValue_AddRef(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValue_RemoveRef(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValue_AddWeakRef(struct alt_IMValue* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValue_RemoveWeakRef(struct alt_IMValue* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
typedef enum alt_IMValue_Type {
    ALT_IMVALUE_TYPE_NIL = 0,
    ALT_IMVALUE_TYPE_BOOL = 1,
    ALT_IMVALUE_TYPE_INT = 2,
    ALT_IMVALUE_TYPE_UINT = 3,
    ALT_IMVALUE_TYPE_DOUBLE = 4,
    ALT_IMVALUE_TYPE_STRING = 5,
    ALT_IMVALUE_TYPE_LIST = 6,
    ALT_IMVALUE_TYPE_DICT = 7,
    ALT_IMVALUE_TYPE_BASE_OBJECT = 8,
    ALT_IMVALUE_TYPE_FUNCTION = 9
};

// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValue_GetType(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValue_ToString(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValue_ToNumber(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValue_Clone(struct alt_IMValue* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// class alt::IMValueNil
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// class alt::IMValueNil
// functions from class alt::IMValueNil
CAPI void alt_IMValueNil_free(struct alt_IMValueNil* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueNil* alt_CRefCountable_to_alt_IMValueNil(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueNil_to_alt_CRefCountable(struct alt_IMValueNil* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueNil_GetRefCount(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueNil_AddRef(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueNil_RemoveRef(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueNil_AddWeakRef(struct alt_IMValueNil* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueNil_RemoveWeakRef(struct alt_IMValueNil* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueNil* alt_IMValue_to_alt_IMValueNil(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueNil_to_alt_IMValue(struct alt_IMValueNil* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueNil_GetType(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueNil_ToString(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueNil_ToNumber(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueNil_Clone(struct alt_IMValueNil* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// alt::IMValueNil::IMValueNil
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// alt::IMValueNil::IMValueNil
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// alt::IMValueNil::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// alt::IMValueNil::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:76:8
// alt::IMValueNil::~IMValueNil
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// class alt::IMValueBool
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// class alt::IMValueBool
// functions from class alt::IMValueBool
CAPI void alt_IMValueBool_free(struct alt_IMValueBool* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueBool* alt_CRefCountable_to_alt_IMValueBool(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueBool_to_alt_CRefCountable(struct alt_IMValueBool* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueBool_GetRefCount(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueBool_AddRef(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueBool_RemoveRef(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueBool_AddWeakRef(struct alt_IMValueBool* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueBool_RemoveWeakRef(struct alt_IMValueBool* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueBool* alt_IMValue_to_alt_IMValueBool(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueBool_to_alt_IMValue(struct alt_IMValueBool* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueBool_GetType(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueBool_ToString(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueBool_ToNumber(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueBool_Clone(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:81:16
// alt::IMValueBool::Value
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IMValueBool_Value(struct alt_IMValueBool* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// alt::IMValueBool::IMValueBool
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// alt::IMValueBool::IMValueBool
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// alt::IMValueBool::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// alt::IMValueBool::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:78:8
// alt::IMValueBool::~IMValueBool
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// class alt::IMValueInt
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// class alt::IMValueInt
// functions from class alt::IMValueInt
CAPI void alt_IMValueInt_free(struct alt_IMValueInt* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueInt* alt_CRefCountable_to_alt_IMValueInt(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueInt_to_alt_CRefCountable(struct alt_IMValueInt* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueInt_GetRefCount(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueInt_AddRef(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueInt_RemoveRef(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueInt_AddWeakRef(struct alt_IMValueInt* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueInt_RemoveWeakRef(struct alt_IMValueInt* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueInt* alt_IMValue_to_alt_IMValueInt(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueInt_to_alt_IMValue(struct alt_IMValueInt* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueInt_GetType(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueInt_ToString(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueInt_ToNumber(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueInt_Clone(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:87:19
// alt::IMValueInt::Value
// Return type
// cpptype long long
// fundamental
CAPI long long alt_IMValueInt_Value(struct alt_IMValueInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// alt::IMValueInt::IMValueInt
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// alt::IMValueInt::IMValueInt
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// alt::IMValueInt::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// alt::IMValueInt::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:84:8
// alt::IMValueInt::~IMValueInt
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// class alt::IMValueUInt
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// class alt::IMValueUInt
// functions from class alt::IMValueUInt
CAPI void alt_IMValueUInt_free(struct alt_IMValueUInt* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueUInt* alt_CRefCountable_to_alt_IMValueUInt(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueUInt_to_alt_CRefCountable(struct alt_IMValueUInt* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueUInt_GetRefCount(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueUInt_AddRef(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueUInt_RemoveRef(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueUInt_AddWeakRef(struct alt_IMValueUInt* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueUInt_RemoveWeakRef(struct alt_IMValueUInt* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueUInt* alt_IMValue_to_alt_IMValueUInt(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueUInt_to_alt_IMValue(struct alt_IMValueUInt* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueUInt_GetType(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueUInt_ToString(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueUInt_ToNumber(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueUInt_Clone(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:93:20
// alt::IMValueUInt::Value
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueUInt_Value(struct alt_IMValueUInt* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// alt::IMValueUInt::IMValueUInt
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// alt::IMValueUInt::IMValueUInt
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// alt::IMValueUInt::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// alt::IMValueUInt::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:90:8
// alt::IMValueUInt::~IMValueUInt
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// class alt::IMValueDouble
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// class alt::IMValueDouble
// functions from class alt::IMValueDouble
CAPI void alt_IMValueDouble_free(struct alt_IMValueDouble* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueDouble* alt_CRefCountable_to_alt_IMValueDouble(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueDouble_to_alt_CRefCountable(struct alt_IMValueDouble* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueDouble_GetRefCount(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueDouble_AddRef(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueDouble_RemoveRef(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueDouble_AddWeakRef(struct alt_IMValueDouble* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueDouble_RemoveWeakRef(struct alt_IMValueDouble* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueDouble* alt_IMValue_to_alt_IMValueDouble(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueDouble_to_alt_IMValue(struct alt_IMValueDouble* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueDouble_GetType(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueDouble_ToString(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueDouble_ToNumber(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueDouble_Clone(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:99:18
// alt::IMValueDouble::Value
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueDouble_Value(struct alt_IMValueDouble* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// alt::IMValueDouble::IMValueDouble
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// alt::IMValueDouble::IMValueDouble
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// alt::IMValueDouble::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// alt::IMValueDouble::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:96:8
// alt::IMValueDouble::~IMValueDouble
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// class alt::IMValueString
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// class alt::IMValueString
// functions from class alt::IMValueString
CAPI void alt_IMValueString_free(struct alt_IMValueString* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueString* alt_CRefCountable_to_alt_IMValueString(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueString_to_alt_CRefCountable(struct alt_IMValueString* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueString_GetRefCount(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueString_AddRef(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueString_RemoveRef(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueString_AddWeakRef(struct alt_IMValueString* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueString_RemoveWeakRef(struct alt_IMValueString* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueString* alt_IMValue_to_alt_IMValueString(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueString_to_alt_IMValue(struct alt_IMValueString* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueString_GetType(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueString_ToString(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueString_ToNumber(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueString_Clone(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:105:22
// alt::IMValueString::Value
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IMValueString_Value(struct alt_IMValueString* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// alt::IMValueString::IMValueString
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// alt::IMValueString::IMValueString
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// alt::IMValueString::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// alt::IMValueString::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:102:8
// alt::IMValueString::~IMValueString
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// class alt::IMValueList
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// class alt::IMValueList
// functions from class alt::IMValueList
CAPI void alt_IMValueList_free(struct alt_IMValueList* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueList* alt_CRefCountable_to_alt_IMValueList(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueList_to_alt_CRefCountable(struct alt_IMValueList* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueList_GetRefCount(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueList_AddRef(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueList_RemoveRef(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueList_AddWeakRef(struct alt_IMValueList* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueList_RemoveWeakRef(struct alt_IMValueList* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueList* alt_IMValue_to_alt_IMValueList(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueList_to_alt_IMValue(struct alt_IMValueList* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueList_GetType(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueList_ToString(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueList_ToNumber(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueList_Clone(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:111:16
// alt::IMValueList::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueList_GetSize(struct alt_IMValueList* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:112:18
// alt::IMValueList::Get
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueList_Get(struct alt_IMValueList* _instance, unsigned long long i);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:113:23
// alt::IMValueList::Get
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IMValueList_Get_1(struct alt_IMValueList* _instance, unsigned long long i);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:116:16
// alt::IMValueList::Set
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IMValueList_Set(struct alt_IMValueList* _instance, unsigned long long i, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:117:16
// alt::IMValueList::Push
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IMValueList_Push(struct alt_IMValueList* _instance, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:120:16
// alt::IMValueList::SetConst
// Return type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI void alt_IMValueList_SetConst(struct alt_IMValueList* _instance, unsigned long long i, struct alt_RefBase_RefStore_constIMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:121:16
// alt::IMValueList::PushConst
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI void alt_IMValueList_PushConst(struct alt_IMValueList* _instance, struct alt_RefBase_RefStore_constIMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// alt::IMValueList::IMValueList
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// alt::IMValueList::IMValueList
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// alt::IMValueList::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// alt::IMValueList::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:108:8
// alt::IMValueList::~IMValueList
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// class alt::IMValueDict
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// class alt::IMValueDict
// functions from class alt::IMValueDict
CAPI void alt_IMValueDict_free(struct alt_IMValueDict* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueDict* alt_CRefCountable_to_alt_IMValueDict(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueDict_to_alt_CRefCountable(struct alt_IMValueDict* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueDict_GetRefCount(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueDict_AddRef(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueDict_RemoveRef(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueDict_AddWeakRef(struct alt_IMValueDict* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueDict_RemoveWeakRef(struct alt_IMValueDict* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueDict* alt_IMValue_to_alt_IMValueDict(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueDict_to_alt_IMValue(struct alt_IMValueDict* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueDict_GetType(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueDict_ToString(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueDict_ToNumber(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueDict_Clone(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:134:16
// alt::IMValueDict::GetSize
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueDict_GetSize(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:135:18
// alt::IMValueDict::Get
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// cpptype class alt::String
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueDict_Get(struct alt_IMValueDict* _instance, struct alt_String* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:136:23
// alt::IMValueDict::Get
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::String
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IMValueDict_Get_1(struct alt_IMValueDict* _instance, struct alt_String* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:139:16
// alt::IMValueDict::Set
// Return type
// cpptype void
// fundamental
// cpptype class alt::String
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IMValueDict_Set(struct alt_IMValueDict* _instance, struct alt_String* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:142:16
// alt::IMValueDict::SetConst
// Return type
// cpptype void
// fundamental
// cpptype class alt::String
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
CAPI void alt_IMValueDict_SetConst(struct alt_IMValueDict* _instance, struct alt_String* key, struct alt_RefBase_RefStore_constIMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:144:16
// alt::IMValueDict::Delete
// Return type
// cpptype void
// fundamental
// cpptype class alt::String
CAPI void alt_IMValueDict_Delete(struct alt_IMValueDict* _instance, struct alt_String* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:146:21
// alt::IMValueDict::Begin
// Return type
// cpptype class alt::IMValueDict::Iterator *
// Pointer type
// cpptype class alt::IMValueDict::Iterator
CAPI struct alt_IMValueDict_Iterator* alt_IMValueDict_Begin(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:147:21
// alt::IMValueDict::Next
// Return type
// cpptype class alt::IMValueDict::Iterator *
// Pointer type
// cpptype class alt::IMValueDict::Iterator
CAPI struct alt_IMValueDict_Iterator* alt_IMValueDict_Next(struct alt_IMValueDict* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// alt::IMValueDict::IMValueDict
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// alt::IMValueDict::IMValueDict
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// alt::IMValueDict::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// alt::IMValueDict::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:124:8
// alt::IMValueDict::~IMValueDict
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:127:9
// class alt::IMValueDict::Iterator
typedef struct alt_IMValueDict_Iterator alt_IMValueDict_Iterator;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:127:9
// class alt::IMValueDict::Iterator
// functions from class alt::IMValueDict::Iterator
CAPI void alt_IMValueDict_Iterator_free(struct alt_IMValueDict_Iterator* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:130:19
// alt::IMValueDict::Iterator::GetKey
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueDict_Iterator_GetKey(struct alt_IMValueDict_Iterator* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:131:24
// alt::IMValueDict::Iterator::GetValue
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IMValueDict_Iterator_GetValue(struct alt_IMValueDict_Iterator* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:127:9
// alt::IMValueDict::Iterator::operator=
// Overloaded operator
// Return type
// cpptype class alt::IMValueDict::Iterator &
// Reference type
// cpptype class alt::IMValueDict::Iterator
// cpptype const class alt::IMValueDict::Iterator &
// Reference type
// cpptype class alt::IMValueDict::Iterator
CAPI void alt_IMValueDict_Iterator_Assign_constIMValueDict_IteratorRef(struct alt_IMValueDict_Iterator* _instance, struct alt_IMValueDict_Iterator* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:127:9
// alt::IMValueDict::Iterator::operator=
// Overloaded operator
// Return type
// cpptype class alt::IMValueDict::Iterator &
// Reference type
// cpptype class alt::IMValueDict::Iterator
// cpptype class alt::IMValueDict::Iterator &&
// Reference type
// cpptype class alt::IMValueDict::Iterator
CAPI void alt_IMValueDict_Iterator_Assign_IMValueDict_IteratorRefRef(struct alt_IMValueDict_Iterator* _instance, struct alt_IMValueDict_Iterator* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:127:9
// alt::IMValueDict::Iterator::~Iterator
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// class alt::IMValueBaseObject
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// class alt::IMValueBaseObject
// functions from class alt::IMValueBaseObject
CAPI void alt_IMValueBaseObject_free(struct alt_IMValueBaseObject* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueBaseObject* alt_CRefCountable_to_alt_IMValueBaseObject(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueBaseObject_to_alt_CRefCountable(struct alt_IMValueBaseObject* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueBaseObject_GetRefCount(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueBaseObject_AddRef(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueBaseObject_RemoveRef(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueBaseObject_AddWeakRef(struct alt_IMValueBaseObject* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueBaseObject_RemoveWeakRef(struct alt_IMValueBaseObject* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueBaseObject* alt_IMValue_to_alt_IMValueBaseObject(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueBaseObject_to_alt_IMValue(struct alt_IMValueBaseObject* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueBaseObject_GetType(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueBaseObject_ToString(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueBaseObject_ToNumber(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueBaseObject_Clone(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:153:28
// alt::IMValueBaseObject::Value
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IBaseObject_free()
CAPI struct alt_RefBase_RefStore_IBaseObject* alt_IMValueBaseObject_Value(struct alt_IMValueBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// alt::IMValueBaseObject::IMValueBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// alt::IMValueBaseObject::IMValueBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// alt::IMValueBaseObject::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// alt::IMValueBaseObject::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:150:8
// alt::IMValueBaseObject::~IMValueBaseObject
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// class alt::IMValueFunction
// derives from class alt::IMValue
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// class alt::IMValueFunction
// functions from class alt::IMValueFunction
CAPI void alt_IMValueFunction_free(struct alt_IMValueFunction* ptr);

// functions derived from IMValue

// functions derived from CRefCountable

CAPI struct alt_IMValueFunction* alt_CRefCountable_to_alt_IMValueFunction(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IMValueFunction_to_alt_CRefCountable(struct alt_IMValueFunction* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IMValueFunction_GetRefCount(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueFunction_AddRef(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueFunction_RemoveRef(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueFunction_AddWeakRef(struct alt_IMValueFunction* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IMValueFunction_RemoveWeakRef(struct alt_IMValueFunction* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IMValueFunction* alt_IMValue_to_alt_IMValueFunction(struct alt_IMValue* from);

CAPI struct alt_IMValue* alt_IMValueFunction_to_alt_IMValue(struct alt_IMValueFunction* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:68:11
// alt::IMValue::~IMValue
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:70:16
// alt::IMValue::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IMValue::Type
// enumaral type
CAPI alt_IMValue_Type alt_IMValueFunction_GetType(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:71:18
// alt::IMValue::ToString
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IMValueFunction_ToString(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:72:18
// alt::IMValue::ToNumber
// Return type
// cpptype double
// fundamental
CAPI double alt_IMValueFunction_ToNumber(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:73:18
// alt::IMValue::Clone
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueFunction_Clone(struct alt_IMValueFunction* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::IMValue
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:51:8
// alt::IMValue::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:179:18
// alt::IMValueFunction::Call
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueFunction_Call(struct alt_IMValueFunction* _instance, struct alt_Array_RefBase_RefStore_constIMValue* args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// alt::IMValueFunction::IMValueFunction
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// alt::IMValueFunction::IMValueFunction
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// alt::IMValueFunction::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// alt::IMValueFunction::operator=
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:156:8
// alt::IMValueFunction::~IMValueFunction
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:159:9
// class alt::IMValueFunction::Impl
// cpptype unsigned long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:176:9
    // alt::Size refCount

typedef struct alt_IMValueFunction_Impl {
    unsigned long long refCount;
} alt_IMValueFunction_Impl;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:159:9
// class alt::IMValueFunction::Impl
// functions from class alt::IMValueFunction::Impl
// has no accessible destructor for 'Free' function

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:162:19
// alt::IMValueFunction::Impl::Call
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_IMValueFunction_Impl_Call(struct alt_IMValueFunction_Impl* _instance, struct alt_Array_RefBase_RefStore_constIMValue* args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:164:17
// alt::IMValueFunction::Impl::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueFunction_Impl_AddRef(struct alt_IMValueFunction_Impl* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:166:17
// alt::IMValueFunction::Impl::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IMValueFunction_Impl_RemoveRef(struct alt_IMValueFunction_Impl* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:173:4
// alt::IMValueFunction::Impl::~Impl
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:159:9
// alt::IMValueFunction::Impl::operator=
// Overloaded operator
// Return type
// cpptype class alt::IMValueFunction::Impl &
// Reference type
// cpptype class alt::IMValueFunction::Impl
// cpptype const class alt::IMValueFunction::Impl &
// Reference type
// cpptype class alt::IMValueFunction::Impl
CAPI void alt_IMValueFunction_Impl_Assign_constIMValueFunction_ImplRef(struct alt_IMValueFunction_Impl* _instance, struct alt_IMValueFunction_Impl* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// class alt::IBaseObject
// functions from class alt::IBaseObject
// has no accessible destructor for 'Free' function

// functions derived from CRefCountable

CAPI struct alt_IBaseObject* alt_CRefCountable_to_alt_IBaseObject(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IBaseObject_to_alt_CRefCountable(struct alt_IBaseObject* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IBaseObject_GetRefCount(struct alt_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IBaseObject_AddRef(struct alt_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IBaseObject_RemoveRef(struct alt_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IBaseObject_AddWeakRef(struct alt_IBaseObject* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IBaseObject_RemoveWeakRef(struct alt_IBaseObject* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
typedef enum alt_IBaseObject_Type {
    ALT_IBASEOBJECT_TYPE_PLAYER = 0,
    ALT_IBASEOBJECT_TYPE_VEHICLE = 1,
    ALT_IBASEOBJECT_TYPE_BLIP = 2,
    ALT_IBASEOBJECT_TYPE_WEBVIEW = 3,
    ALT_IBASEOBJECT_TYPE_VOICE_CHANNEL = 4,
    ALT_IBASEOBJECT_TYPE_COLSHAPE = 5,
    ALT_IBASEOBJECT_TYPE_CHECKPOINT = 6
};

// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IBaseObject_GetType(struct alt_IBaseObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IBaseObject_GetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IBaseObject_SetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// class alt::IWorldObject
// functions from class alt::IWorldObject
// has no accessible destructor for 'Free' function

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IWorldObject* alt_CRefCountable_to_alt_IWorldObject(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IWorldObject_to_alt_CRefCountable(struct alt_IWorldObject* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IWorldObject_GetRefCount(struct alt_IWorldObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IWorldObject_AddRef(struct alt_IWorldObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IWorldObject_RemoveRef(struct alt_IWorldObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IWorldObject_AddWeakRef(struct alt_IWorldObject* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IWorldObject_RemoveWeakRef(struct alt_IWorldObject* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IWorldObject* alt_IBaseObject_to_alt_IWorldObject(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IWorldObject_to_alt_IBaseObject(struct alt_IWorldObject* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IWorldObject_GetType(struct alt_IWorldObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IWorldObject_GetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IWorldObject_SetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IWorldObject_GetPosition(struct alt_IWorldObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_IWorldObject_SetPosition(struct alt_IWorldObject* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_IWorldObject_GetDimension(struct alt_IWorldObject* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IWorldObject_SetDimension(struct alt_IWorldObject* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// class alt::IEntity
// derives from class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// class alt::IEntity
// functions from class alt::IEntity
// has no accessible destructor for 'Free' function

// functions derived from IWorldObject

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IEntity* alt_CRefCountable_to_alt_IEntity(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IEntity_to_alt_CRefCountable(struct alt_IEntity* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IEntity_GetRefCount(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IEntity_AddRef(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IEntity_RemoveRef(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IEntity_AddWeakRef(struct alt_IEntity* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IEntity_RemoveWeakRef(struct alt_IEntity* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IEntity* alt_IBaseObject_to_alt_IEntity(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IEntity_to_alt_IBaseObject(struct alt_IEntity* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IEntity_GetType(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IEntity_GetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IEntity_SetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

CAPI struct alt_IEntity* alt_IWorldObject_to_alt_IEntity(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IEntity_to_alt_IWorldObject(struct alt_IEntity* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IEntity_GetPosition(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_IEntity_SetPosition(struct alt_IEntity* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_IEntity_GetDimension(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IEntity_SetDimension(struct alt_IEntity* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:15:11
// alt::IEntity::~IEntity
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:17:20
// alt::IEntity::GetID
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IEntity_GetID(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:19:24
// alt::IEntity::GetNetworkOwner
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IEntity_GetNetworkOwner(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:21:20
// alt::IEntity::GetModel
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IEntity_GetModel(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:23:20
// alt::IEntity::GetRotation
// Return type
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IEntity_GetRotation(struct alt_IEntity* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:24:16
// alt::IEntity::SetRotation
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
CAPI void alt_IEntity_SetRotation(struct alt_IEntity* _instance, struct alt_Vector_float_3_RotationLayout* rot);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:26:23
// alt::IEntity::GetSyncedMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IEntity_GetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:27:23
// alt::IEntity::GetStreamSyncedMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IEntity_GetStreamSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:30:16
// alt::IEntity::SetSyncedMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IEntity_SetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:31:16
// alt::IEntity::SetStreamSyncedMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IEntity_SetStreamSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// alt::IEntity::IEntity
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// alt::IEntity::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:9:8
// class alt::IPlayer
// derives from class alt::IEntity
// derives from class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:9:8
// class alt::IPlayer
// functions from class alt::IPlayer
// has no accessible destructor for 'Free' function

// functions derived from IEntity

// functions derived from IWorldObject

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IPlayer* alt_CRefCountable_to_alt_IPlayer(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IPlayer_to_alt_CRefCountable(struct alt_IPlayer* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IPlayer_GetRefCount(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IPlayer_AddRef(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IPlayer_RemoveRef(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IPlayer_AddWeakRef(struct alt_IPlayer* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IPlayer_RemoveWeakRef(struct alt_IPlayer* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IPlayer* alt_IBaseObject_to_alt_IPlayer(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IPlayer_to_alt_IBaseObject(struct alt_IPlayer* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IPlayer_GetType(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IPlayer_GetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IPlayer_SetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

CAPI struct alt_IPlayer* alt_IWorldObject_to_alt_IPlayer(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IPlayer_to_alt_IWorldObject(struct alt_IPlayer* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetPosition(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_IPlayer_SetPosition(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_IPlayer_GetDimension(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IPlayer_SetDimension(struct alt_IPlayer* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

CAPI struct alt_IPlayer* alt_IEntity_to_alt_IPlayer(struct alt_IEntity* from);

CAPI struct alt_IEntity* alt_IPlayer_to_alt_IEntity(struct alt_IPlayer* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:15:11
// alt::IEntity::~IEntity
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:17:20
// alt::IEntity::GetID
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IPlayer_GetID(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:19:24
// alt::IEntity::GetNetworkOwner
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IPlayer_GetNetworkOwner(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:21:20
// alt::IEntity::GetModel
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IPlayer_GetModel(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:23:20
// alt::IEntity::GetRotation
// Return type
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetRotation(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:24:16
// alt::IEntity::SetRotation
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
CAPI void alt_IPlayer_SetRotation(struct alt_IPlayer* _instance, struct alt_Vector_float_3_RotationLayout* rot);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:26:23
// alt::IEntity::GetSyncedMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IPlayer_GetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:27:23
// alt::IEntity::GetStreamSyncedMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IPlayer_GetStreamSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:30:16
// alt::IEntity::SetSyncedMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IPlayer_SetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:31:16
// alt::IEntity::SetStreamSyncedMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IPlayer_SetStreamSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// alt::IEntity::IEntity
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// alt::IEntity::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:12:11
// alt::IPlayer::~IPlayer
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:14:16
// alt::IPlayer::IsConnected
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsConnected(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:16:20
// alt::IPlayer::GetPing
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IPlayer_GetPing(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:17:22
// alt::IPlayer::GetIP
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IPlayer_GetIP(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:19:16
// alt::IPlayer::Spawn
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_Spawn(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos, unsigned int delayMs);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:20:16
// alt::IPlayer::Despawn
// Return type
// cpptype void
// fundamental
CAPI void alt_IPlayer_Despawn(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:22:22
// alt::IPlayer::GetName
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IPlayer_GetName(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:24:20
// alt::IPlayer::GetSocialID
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IPlayer_GetSocialID(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:25:20
// alt::IPlayer::GetHwidHash
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IPlayer_GetHwidHash(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:26:20
// alt::IPlayer::GetHwidExHash
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IPlayer_GetHwidExHash(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:27:22
// alt::IPlayer::GetAuthToken
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IPlayer_GetAuthToken(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:29:20
// alt::IPlayer::GetHealth
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IPlayer_GetHealth(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:30:16
// alt::IPlayer::SetHealth
// Return type
// cpptype void
// fundamental
// cpptype unsigned short
// fundamental
CAPI void alt_IPlayer_SetHealth(struct alt_IPlayer* _instance, unsigned short health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:31:20
// alt::IPlayer::GetMaxHealth
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IPlayer_GetMaxHealth(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:32:16
// alt::IPlayer::SetMaxHealth
// Return type
// cpptype void
// fundamental
// cpptype unsigned short
// fundamental
CAPI void alt_IPlayer_SetMaxHealth(struct alt_IPlayer* _instance, unsigned short health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:34:16
// alt::IPlayer::SetDateTime
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
// cpptype int
// fundamental
// cpptype int
// fundamental
// cpptype int
// fundamental
// cpptype int
// fundamental
// cpptype int
// fundamental
CAPI void alt_IPlayer_SetDateTime(struct alt_IPlayer* _instance, int day, int month, int year, int hour, int minute, int second);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:35:16
// alt::IPlayer::SetWeather
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_SetWeather(struct alt_IPlayer* _instance, unsigned int weather);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:37:16
// alt::IPlayer::GiveWeapon
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
// cpptype int
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IPlayer_GiveWeapon(struct alt_IPlayer* _instance, unsigned int weapon, int ammo, _Bool selectWeapon);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:38:16
// alt::IPlayer::RemoveWeapon
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_RemoveWeapon(struct alt_IPlayer* _instance, unsigned int weapon);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:39:16
// alt::IPlayer::RemoveAllWeapons
// Return type
// cpptype void
// fundamental
CAPI void alt_IPlayer_RemoveAllWeapons(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:41:16
// alt::IPlayer::AddWeaponComponent
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_AddWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:42:16
// alt::IPlayer::RemoveWeaponComponent
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_RemoveWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:43:27
// alt::IPlayer::GetCurrentWeaponComponents
// Return type
// cpptype class alt::Array<unsigned int>
// Return ptr must be manually freed with alt_Array_unsignedint_free()
CAPI struct alt_Array_unsignedint* alt_IPlayer_GetCurrentWeaponComponents(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:45:16
// alt::IPlayer::SetWeaponTintIndex
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IPlayer_SetWeaponTintIndex(struct alt_IPlayer* _instance, unsigned int weapon, unsigned char tintIndex);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:46:19
// alt::IPlayer::GetCurrentWeaponTintIndex
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IPlayer_GetCurrentWeaponTintIndex(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:48:20
// alt::IPlayer::GetCurrentWeapon
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IPlayer_GetCurrentWeapon(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:49:16
// alt::IPlayer::SetCurrentWeapon
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_SetCurrentWeapon(struct alt_IPlayer* _instance, unsigned int weapon);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:51:16
// alt::IPlayer::IsDead
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsDead(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:53:16
// alt::IPlayer::IsJumping
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsJumping(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:54:16
// alt::IPlayer::IsInRagdoll
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsInRagdoll(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:55:16
// alt::IPlayer::IsAiming
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsAiming(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:56:16
// alt::IPlayer::IsShooting
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsShooting(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:57:16
// alt::IPlayer::IsReloading
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsReloading(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:59:20
// alt::IPlayer::GetArmour
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IPlayer_GetArmour(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:60:16
// alt::IPlayer::SetArmour
// Return type
// cpptype void
// fundamental
// cpptype unsigned short
// fundamental
CAPI void alt_IPlayer_SetArmour(struct alt_IPlayer* _instance, unsigned short armor);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:61:20
// alt::IPlayer::GetMaxArmour
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IPlayer_GetMaxArmour(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:62:16
// alt::IPlayer::SetMaxArmour
// Return type
// cpptype void
// fundamental
// cpptype unsigned short
// fundamental
CAPI void alt_IPlayer_SetMaxArmour(struct alt_IPlayer* _instance, unsigned short armor);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:64:17
// alt::IPlayer::GetMoveSpeed
// Return type
// cpptype float
// fundamental
CAPI float alt_IPlayer_GetMoveSpeed(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:66:20
// alt::IPlayer::GetWeapon
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IPlayer_GetWeapon(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:67:20
// alt::IPlayer::GetAmmo
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IPlayer_GetAmmo(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:69:20
// alt::IPlayer::GetAimPos
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetAimPos(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:70:20
// alt::IPlayer::GetHeadRotation
// Return type
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetHeadRotation(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:72:16
// alt::IPlayer::IsInVehicle
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsInVehicle(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:73:25
// alt::IPlayer::GetVehicle
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_IPlayer_GetVehicle(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:74:19
// alt::IPlayer::GetSeat
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IPlayer_GetSeat(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:76:24
// alt::IPlayer::GetEntityAimingAt
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_IPlayer_GetEntityAimingAt(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:77:20
// alt::IPlayer::GetEntityAimOffset
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetEntityAimOffset(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:79:16
// alt::IPlayer::IsFlashlightActive
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IPlayer_IsFlashlightActive(struct alt_IPlayer* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:81:16
// alt::IPlayer::Kick
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IPlayer_Kick(struct alt_IPlayer* _instance, struct alt_StringView* reason);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:84:16
// alt::IPlayer::SetModel
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IPlayer_SetModel(struct alt_IPlayer* _instance, unsigned int model);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:9:8
// alt::IPlayer::IPlayer
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../entities/IPlayer.h:9:8
// alt::IPlayer::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:14:8
// class alt::IVehicle
// derives from class alt::IEntity
// derives from class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:14:8
// class alt::IVehicle
// functions from class alt::IVehicle
// has no accessible destructor for 'Free' function

// functions derived from IEntity

// functions derived from IWorldObject

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IVehicle* alt_CRefCountable_to_alt_IVehicle(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IVehicle_to_alt_CRefCountable(struct alt_IVehicle* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IVehicle_GetRefCount(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IVehicle_AddRef(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IVehicle_RemoveRef(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IVehicle_AddWeakRef(struct alt_IVehicle* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IVehicle_RemoveWeakRef(struct alt_IVehicle* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IVehicle* alt_IBaseObject_to_alt_IVehicle(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IVehicle_to_alt_IBaseObject(struct alt_IVehicle* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IVehicle_GetType(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVehicle_GetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IVehicle_SetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

CAPI struct alt_IVehicle* alt_IWorldObject_to_alt_IVehicle(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IVehicle_to_alt_IWorldObject(struct alt_IVehicle* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IVehicle_GetPosition(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_IVehicle_SetPosition(struct alt_IVehicle* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_IVehicle_GetDimension(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IVehicle_SetDimension(struct alt_IVehicle* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

CAPI struct alt_IVehicle* alt_IEntity_to_alt_IVehicle(struct alt_IEntity* from);

CAPI struct alt_IEntity* alt_IVehicle_to_alt_IEntity(struct alt_IVehicle* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:15:11
// alt::IEntity::~IEntity
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:17:20
// alt::IEntity::GetID
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_IVehicle_GetID(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:19:24
// alt::IEntity::GetNetworkOwner
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IVehicle_GetNetworkOwner(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:21:20
// alt::IEntity::GetModel
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IVehicle_GetModel(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:23:20
// alt::IEntity::GetRotation
// Return type
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
// Return ptr must be manually freed with alt_Vector_float_3_RotationLayout_free()
CAPI struct alt_Vector_float_3_RotationLayout* alt_IVehicle_GetRotation(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:24:16
// alt::IEntity::SetRotation
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
CAPI void alt_IVehicle_SetRotation(struct alt_IVehicle* _instance, struct alt_Vector_float_3_RotationLayout* rot);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:26:23
// alt::IEntity::GetSyncedMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVehicle_GetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:27:23
// alt::IEntity::GetStreamSyncedMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVehicle_GetStreamSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:30:16
// alt::IEntity::SetSyncedMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IVehicle_SetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:31:16
// alt::IEntity::SetStreamSyncedMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IVehicle_SetStreamSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// alt::IEntity::IEntity
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../entities/IEntity.h:12:8
// alt::IEntity::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:17:11
// alt::IVehicle::~IVehicle
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:19:24
// alt::IVehicle::GetDriver
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IVehicle_GetDriver(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:21:19
// alt::IVehicle::GetMod
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetMod(struct alt_IVehicle* _instance, unsigned char category);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:22:19
// alt::IVehicle::GetModsCount
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetModsCount(struct alt_IVehicle* _instance, unsigned char category);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:23:16
// alt::IVehicle::SetMod
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_SetMod(struct alt_IVehicle* _instance, unsigned char category, unsigned char id);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:25:19
// alt::IVehicle::GetModKitsCount
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetModKitsCount(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:26:19
// alt::IVehicle::GetModKit
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetModKit(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:27:16
// alt::IVehicle::SetModKit
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_SetModKit(struct alt_IVehicle* _instance, unsigned char id);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:29:16
// alt::IVehicle::IsPrimaryColorRGB
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsPrimaryColorRGB(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:30:19
// alt::IVehicle::GetPrimaryColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetPrimaryColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:31:16
// alt::IVehicle::GetPrimaryColorRGB
// Return type
// cpptype struct alt::RGBA
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetPrimaryColorRGB(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:32:16
// alt::IVehicle::SetPrimaryColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetPrimaryColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:33:16
// alt::IVehicle::SetPrimaryColorRGB
// Return type
// cpptype void
// fundamental
// cpptype struct alt::RGBA
CAPI void alt_IVehicle_SetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:35:16
// alt::IVehicle::IsSecondaryColorRGB
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsSecondaryColorRGB(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:36:19
// alt::IVehicle::GetSecondaryColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetSecondaryColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:37:16
// alt::IVehicle::GetSecondaryColorRGB
// Return type
// cpptype struct alt::RGBA
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetSecondaryColorRGB(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:38:16
// alt::IVehicle::SetSecondaryColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetSecondaryColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:39:16
// alt::IVehicle::SetSecondaryColorRGB
// Return type
// cpptype void
// fundamental
// cpptype struct alt::RGBA
CAPI void alt_IVehicle_SetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:41:19
// alt::IVehicle::GetPearlColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetPearlColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:42:16
// alt::IVehicle::SetPearlColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetPearlColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:44:19
// alt::IVehicle::GetWheelColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetWheelColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:45:16
// alt::IVehicle::SetWheelColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetWheelColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:47:19
// alt::IVehicle::GetInteriorColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetInteriorColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:48:16
// alt::IVehicle::SetInteriorColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetInteriorColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:50:19
// alt::IVehicle::GetDashboardColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetDashboardColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:51:16
// alt::IVehicle::SetDashboardColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetDashboardColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:53:16
// alt::IVehicle::IsTireSmokeColorCustom
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsTireSmokeColorCustom(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:54:16
// alt::IVehicle::GetTireSmokeColor
// Return type
// cpptype struct alt::RGBA
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetTireSmokeColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:55:16
// alt::IVehicle::SetTireSmokeColor
// Return type
// cpptype void
// fundamental
// cpptype struct alt::RGBA
CAPI void alt_IVehicle_SetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:57:19
// alt::IVehicle::GetWheelType
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetWheelType(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:58:19
// alt::IVehicle::GetWheelVariation
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetWheelVariation(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:59:19
// alt::IVehicle::GetRearWheelVariation
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetRearWheelVariation(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:60:16
// alt::IVehicle::SetWheels
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetWheels(struct alt_IVehicle* _instance, unsigned char type, unsigned char variation);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:61:16
// alt::IVehicle::SetRearWheels
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetRearWheels(struct alt_IVehicle* _instance, unsigned char variation);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:63:16
// alt::IVehicle::GetCustomTires
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_GetCustomTires(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:64:16
// alt::IVehicle::SetCustomTires
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetCustomTires(struct alt_IVehicle* _instance, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:66:19
// alt::IVehicle::GetSpecialDarkness
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetSpecialDarkness(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:67:16
// alt::IVehicle::SetSpecialDarkness
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetSpecialDarkness(struct alt_IVehicle* _instance, unsigned char value);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:69:20
// alt::IVehicle::GetNumberplateIndex
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IVehicle_GetNumberplateIndex(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:70:16
// alt::IVehicle::SetNumberplateIndex
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IVehicle_SetNumberplateIndex(struct alt_IVehicle* _instance, unsigned int index);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:72:22
// alt::IVehicle::GetNumberplateText
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IVehicle_GetNumberplateText(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:73:16
// alt::IVehicle::SetNumberplateText
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IVehicle_SetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* text);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:75:19
// alt::IVehicle::GetWindowTint
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetWindowTint(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:76:16
// alt::IVehicle::SetWindowTint
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetWindowTint(struct alt_IVehicle* _instance, unsigned char tint);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:78:19
// alt::IVehicle::GetDirtLevel
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetDirtLevel(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:79:16
// alt::IVehicle::SetDirtLevel
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetDirtLevel(struct alt_IVehicle* _instance, unsigned char level);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:81:16
// alt::IVehicle::IsExtraOn
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsExtraOn(struct alt_IVehicle* _instance, unsigned char extraID);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:82:16
// alt::IVehicle::ToggleExtra
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_ToggleExtra(struct alt_IVehicle* _instance, unsigned char extraID, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:84:16
// alt::IVehicle::IsNeonActive
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsNeonActive(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:85:16
// alt::IVehicle::GetNeonActive
// Return type
// cpptype void
// fundamental
// cpptype _Bool *
// Pointer type
// cpptype _Bool
// fundamental
// cpptype _Bool *
// Pointer type
// cpptype _Bool
// fundamental
// cpptype _Bool *
// Pointer type
// cpptype _Bool
// fundamental
// cpptype _Bool *
// Pointer type
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_GetNeonActive(struct alt_IVehicle* _instance, _Bool* left, _Bool* right, _Bool* front, _Bool* back);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:86:16
// alt::IVehicle::SetNeonActive
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
// cpptype _Bool
// fundamental
// cpptype _Bool
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetNeonActive(struct alt_IVehicle* _instance, _Bool left, _Bool right, _Bool front, _Bool back);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:87:16
// alt::IVehicle::GetNeonColor
// Return type
// cpptype struct alt::RGBA
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_IVehicle_GetNeonColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:88:16
// alt::IVehicle::SetNeonColor
// Return type
// cpptype void
// fundamental
// cpptype struct alt::RGBA
CAPI void alt_IVehicle_SetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:90:19
// alt::IVehicle::GetLivery
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetLivery(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:91:16
// alt::IVehicle::SetLivery
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetLivery(struct alt_IVehicle* _instance, unsigned char livery);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:92:19
// alt::IVehicle::GetRoofLivery
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetRoofLivery(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:93:16
// alt::IVehicle::SetRoofLivery
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetRoofLivery(struct alt_IVehicle* _instance, unsigned char roofLivery);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:95:18
// alt::IVehicle::GetAppearanceDataBase64
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetAppearanceDataBase64(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:96:16
// alt::IVehicle::LoadAppearanceDataFromBase64
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IVehicle_LoadAppearanceDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:99:16
// alt::IVehicle::IsEngineOn
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsEngineOn(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:100:16
// alt::IVehicle::SetEngineOn
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetEngineOn(struct alt_IVehicle* _instance, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:102:16
// alt::IVehicle::IsHandbrakeActive
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsHandbrakeActive(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:104:19
// alt::IVehicle::GetHeadlightColor
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetHeadlightColor(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:105:16
// alt::IVehicle::SetHeadlightColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetHeadlightColor(struct alt_IVehicle* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:107:20
// alt::IVehicle::GetRadioStationIndex
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IVehicle_GetRadioStationIndex(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:108:16
// alt::IVehicle::SetRadioStationIndex
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IVehicle_SetRadioStationIndex(struct alt_IVehicle* _instance, unsigned int stationIndex);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:110:16
// alt::IVehicle::IsSirenActive
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsSirenActive(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:111:16
// alt::IVehicle::SetSirenActive
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetSirenActive(struct alt_IVehicle* _instance, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:114:19
// alt::IVehicle::GetLockState
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetLockState(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:115:16
// alt::IVehicle::SetLockState
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetLockState(struct alt_IVehicle* _instance, unsigned char state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:118:19
// alt::IVehicle::GetDoorState
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetDoorState(struct alt_IVehicle* _instance, unsigned char doorId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:119:16
// alt::IVehicle::SetDoorState
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetDoorState(struct alt_IVehicle* _instance, unsigned char doorId, unsigned char state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:121:16
// alt::IVehicle::IsWindowOpened
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:122:16
// alt::IVehicle::SetWindowOpened
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:124:16
// alt::IVehicle::IsDaylightOn
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsDaylightOn(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:125:16
// alt::IVehicle::IsNightlightOn
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsNightlightOn(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:127:16
// alt::IVehicle::IsRoofOpened
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsRoofOpened(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:128:16
// alt::IVehicle::SetRoofOpened
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetRoofOpened(struct alt_IVehicle* _instance, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:130:16
// alt::IVehicle::IsFlamethrowerActive
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsFlamethrowerActive(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:132:17
// alt::IVehicle::GetLightsMultiplier
// Return type
// cpptype float
// fundamental
CAPI float alt_IVehicle_GetLightsMultiplier(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:133:16
// alt::IVehicle::SetLightsMultiplier
// Return type
// cpptype void
// fundamental
// cpptype float
// fundamental
CAPI void alt_IVehicle_SetLightsMultiplier(struct alt_IVehicle* _instance, float multiplier);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:135:18
// alt::IVehicle::GetGameStateBase64
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetGameStateBase64(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:136:16
// alt::IVehicle::LoadGameStateFromBase64
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IVehicle_LoadGameStateFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:139:19
// alt::IVehicle::GetEngineHealth
// Return type
// cpptype int
// fundamental
CAPI int alt_IVehicle_GetEngineHealth(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:140:16
// alt::IVehicle::SetEngineHealth
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IVehicle_SetEngineHealth(struct alt_IVehicle* _instance, int health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:142:19
// alt::IVehicle::GetPetrolTankHealth
// Return type
// cpptype int
// fundamental
CAPI int alt_IVehicle_GetPetrolTankHealth(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:143:16
// alt::IVehicle::SetPetrolTankHealth
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IVehicle_SetPetrolTankHealth(struct alt_IVehicle* _instance, int health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:145:19
// alt::IVehicle::GetWheelsCount
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetWheelsCount(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:147:16
// alt::IVehicle::IsWheelBurst
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:148:16
// alt::IVehicle::SetWheelBurst
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:150:16
// alt::IVehicle::DoesWheelHasTire
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_DoesWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:151:16
// alt::IVehicle::SetWheelHasTire
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:153:16
// alt::IVehicle::IsWheelDetached
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsWheelDetached(struct alt_IVehicle* _instance, unsigned char wheelId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:154:16
// alt::IVehicle::SetWheelDetached
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetWheelDetached(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:156:16
// alt::IVehicle::IsWheelOnFire
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsWheelOnFire(struct alt_IVehicle* _instance, unsigned char wheelId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:157:16
// alt::IVehicle::SetWheelOnFire
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetWheelOnFire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:159:17
// alt::IVehicle::GetWheelHealth
// Return type
// cpptype float
// fundamental
// cpptype unsigned char
// fundamental
CAPI float alt_IVehicle_GetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:160:16
// alt::IVehicle::SetWheelHealth
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype float
// fundamental
CAPI void alt_IVehicle_SetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId, float health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:162:19
// alt::IVehicle::GetRepairsCount
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetRepairsCount(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:168:20
// alt::IVehicle::GetBodyHealth
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IVehicle_GetBodyHealth(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:169:16
// alt::IVehicle::SetBodyHealth
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IVehicle_SetBodyHealth(struct alt_IVehicle* _instance, unsigned int health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:170:20
// alt::IVehicle::GetBodyAdditionalHealth
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_IVehicle_GetBodyAdditionalHealth(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:171:16
// alt::IVehicle::SetBodyAdditionalHealth
// Return type
// cpptype void
// fundamental
// cpptype unsigned int
// fundamental
CAPI void alt_IVehicle_SetBodyAdditionalHealth(struct alt_IVehicle* _instance, unsigned int health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:173:18
// alt::IVehicle::GetHealthDataBase64
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetHealthDataBase64(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:174:16
// alt::IVehicle::LoadHealthDataFromBase64
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IVehicle_LoadHealthDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:177:19
// alt::IVehicle::GetPartDamageLevel
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:178:16
// alt::IVehicle::SetPartDamageLevel
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId, unsigned char damage);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:179:19
// alt::IVehicle::GetPartBulletHoles
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:180:16
// alt::IVehicle::SetPartBulletHoles
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId, unsigned char shootsCount);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:181:16
// alt::IVehicle::IsLightDamaged
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:182:16
// alt::IVehicle::SetLightDamaged
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId, _Bool isDamaged);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:183:16
// alt::IVehicle::IsWindowDamaged
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:184:16
// alt::IVehicle::SetWindowDamaged
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId, _Bool isDamaged);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:185:16
// alt::IVehicle::IsSpecialLightDamaged
// Return type
// cpptype _Bool
// fundamental
// cpptype unsigned char
// fundamental
CAPI _Bool alt_IVehicle_IsSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:186:16
// alt::IVehicle::SetSpecialLightDamaged
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId, _Bool isDamaged);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:187:16
// alt::IVehicle::HasArmoredWindows
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_HasArmoredWindows(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:188:17
// alt::IVehicle::GetArmoredWindowHealth
// Return type
// cpptype float
// fundamental
// cpptype unsigned char
// fundamental
CAPI float alt_IVehicle_GetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:189:16
// alt::IVehicle::SetArmoredWindowHealth
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype float
// fundamental
CAPI void alt_IVehicle_SetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId, float health);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:190:19
// alt::IVehicle::GetArmoredWindowShootCount
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:191:16
// alt::IVehicle::SetArmoredWindowShootCount
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId, unsigned char count);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:192:19
// alt::IVehicle::GetBumperDamageLevel
// Return type
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_IVehicle_GetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:193:16
// alt::IVehicle::SetBumperDamageLevel
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IVehicle_SetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId, unsigned char damageLevel);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:195:18
// alt::IVehicle::GetDamageDataBase64
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetDamageDataBase64(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:196:16
// alt::IVehicle::LoadDamageDataFromBase64
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IVehicle_LoadDamageDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:199:16
// alt::IVehicle::SetManualEngineControl
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IVehicle_SetManualEngineControl(struct alt_IVehicle* _instance, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:200:16
// alt::IVehicle::IsManualEngineControl
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVehicle_IsManualEngineControl(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:202:18
// alt::IVehicle::GetScriptDataBase64
// Return type
// cpptype class alt::String
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_IVehicle_GetScriptDataBase64(struct alt_IVehicle* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:203:16
// alt::IVehicle::LoadScriptDataFromBase64
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_IVehicle_LoadScriptDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:14:8
// alt::IVehicle::IVehicle
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/IVehicle.h:14:8
// alt::IVehicle::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:14:8
// class alt::IColShape
// derives from class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:14:8
// class alt::IColShape
// functions from class alt::IColShape
// has no accessible destructor for 'Free' function

// functions derived from IWorldObject

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IColShape* alt_CRefCountable_to_alt_IColShape(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IColShape_to_alt_CRefCountable(struct alt_IColShape* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IColShape_GetRefCount(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IColShape_AddRef(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IColShape_RemoveRef(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IColShape_AddWeakRef(struct alt_IColShape* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IColShape_RemoveWeakRef(struct alt_IColShape* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IColShape* alt_IBaseObject_to_alt_IColShape(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IColShape_to_alt_IBaseObject(struct alt_IColShape* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IColShape_GetType(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IColShape_GetMetaData(struct alt_IColShape* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IColShape_SetMetaData(struct alt_IColShape* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

CAPI struct alt_IColShape* alt_IWorldObject_to_alt_IColShape(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IColShape_to_alt_IWorldObject(struct alt_IColShape* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IColShape_GetPosition(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_IColShape_SetPosition(struct alt_IColShape* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_IColShape_GetDimension(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IColShape_SetDimension(struct alt_IColShape* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:27:11
// alt::IColShape::~IColShape
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:29:24
// alt::IColShape::GetColshapeType
// Return type
typedef enum alt_IColShape_ColShapeType {
    ALT_ICOLSHAPE_COLSHAPETYPE_SPHERE = 0,
    ALT_ICOLSHAPE_COLSHAPETYPE_CYLINDER = 1,
    ALT_ICOLSHAPE_COLSHAPETYPE_CIRCLE = 2,
    ALT_ICOLSHAPE_COLSHAPETYPE_CUBOID = 3,
    ALT_ICOLSHAPE_COLSHAPETYPE_RECT = 4,
    ALT_ICOLSHAPE_COLSHAPETYPE_CHECKPOINT_CYLINDER = 5
};

// cpptype enum alt::IColShape::ColShapeType
// enumaral type
CAPI alt_IColShape_ColShapeType alt_IColShape_GetColshapeType(struct alt_IColShape* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:31:16
// alt::IColShape::IsEntityIn
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
CAPI _Bool alt_IColShape_IsEntityIn(struct alt_IColShape* _instance, struct alt_RefBase_RefStore_IEntity* ent);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:32:16
// alt::IColShape::IsPointIn
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI _Bool alt_IColShape_IsPointIn(struct alt_IColShape* _instance, struct alt_Vector_float_3_PointLayout* p);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:14:8
// alt::IColShape::IColShape
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:14:8
// alt::IColShape::operator=
// Deleted

// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:13:8
// class alt::ICheckpoint
// derives from class alt::IColShape
// derives from class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:13:8
// class alt::ICheckpoint
// functions from class alt::ICheckpoint
// has no accessible destructor for 'Free' function

// functions derived from IColShape

// functions derived from IWorldObject

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_ICheckpoint* alt_CRefCountable_to_alt_ICheckpoint(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_ICheckpoint_to_alt_CRefCountable(struct alt_ICheckpoint* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_ICheckpoint_GetRefCount(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_ICheckpoint_AddRef(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_ICheckpoint_RemoveRef(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_ICheckpoint_AddWeakRef(struct alt_ICheckpoint* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_ICheckpoint_RemoveWeakRef(struct alt_ICheckpoint* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_ICheckpoint* alt_IBaseObject_to_alt_ICheckpoint(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_ICheckpoint_to_alt_IBaseObject(struct alt_ICheckpoint* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_ICheckpoint_GetType(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_ICheckpoint_GetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_ICheckpoint_SetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

CAPI struct alt_ICheckpoint* alt_IWorldObject_to_alt_ICheckpoint(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_ICheckpoint_to_alt_IWorldObject(struct alt_ICheckpoint* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_ICheckpoint_GetPosition(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_ICheckpoint_SetPosition(struct alt_ICheckpoint* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_ICheckpoint_GetDimension(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_ICheckpoint_SetDimension(struct alt_ICheckpoint* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

CAPI struct alt_ICheckpoint* alt_IColShape_to_alt_ICheckpoint(struct alt_IColShape* from);

CAPI struct alt_IColShape* alt_ICheckpoint_to_alt_IColShape(struct alt_ICheckpoint* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:27:11
// alt::IColShape::~IColShape
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:29:24
// alt::IColShape::GetColshapeType
// Return type
// Symbol is already defined
// cpptype enum alt::IColShape::ColShapeType
// enumaral type
CAPI alt_IColShape_ColShapeType alt_ICheckpoint_GetColshapeType(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:31:16
// alt::IColShape::IsEntityIn
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
CAPI _Bool alt_ICheckpoint_IsEntityIn(struct alt_ICheckpoint* _instance, struct alt_RefBase_RefStore_IEntity* ent);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:32:16
// alt::IColShape::IsPointIn
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI _Bool alt_ICheckpoint_IsPointIn(struct alt_ICheckpoint* _instance, struct alt_Vector_float_3_PointLayout* p);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:14:8
// alt::IColShape::IColShape
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IColShape.h:14:8
// alt::IColShape::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:16:11
// alt::ICheckpoint::~ICheckpoint
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:18:19
// alt::ICheckpoint::GetCheckpointType
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_ICheckpoint_GetCheckpointType(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:19:17
// alt::ICheckpoint::GetHeight
// Return type
// cpptype float
// fundamental
CAPI float alt_ICheckpoint_GetHeight(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:20:17
// alt::ICheckpoint::GetRadius
// Return type
// cpptype float
// fundamental
CAPI float alt_ICheckpoint_GetRadius(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:21:16
// alt::ICheckpoint::GetColor
// Return type
// cpptype struct alt::RGBA
// Return ptr must be manually freed with alt_RGBA_free()
CAPI struct alt_RGBA* alt_ICheckpoint_GetColor(struct alt_ICheckpoint* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:13:8
// alt::ICheckpoint::ICheckpoint
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/ICheckpoint.h:13:8
// alt::ICheckpoint::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:13:8
// class alt::IBlip
// derives from class alt::IWorldObject
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:13:8
// class alt::IBlip
// functions from class alt::IBlip
// has no accessible destructor for 'Free' function

// functions derived from IWorldObject

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IBlip* alt_CRefCountable_to_alt_IBlip(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IBlip_to_alt_CRefCountable(struct alt_IBlip* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IBlip_GetRefCount(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IBlip_AddRef(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IBlip_RemoveRef(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IBlip_AddWeakRef(struct alt_IBlip* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IBlip_RemoveWeakRef(struct alt_IBlip* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IBlip* alt_IBaseObject_to_alt_IBlip(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IBlip_to_alt_IBaseObject(struct alt_IBlip* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IBlip_GetType(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IBlip_GetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IBlip_SetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

CAPI struct alt_IBlip* alt_IWorldObject_to_alt_IBlip(struct alt_IWorldObject* from);

CAPI struct alt_IWorldObject* alt_IBlip_to_alt_IWorldObject(struct alt_IBlip* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:13:11
// alt::IWorldObject::~IWorldObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:15:20
// alt::IWorldObject::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_IBlip_GetPosition(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:16:16
// alt::IWorldObject::SetPosition
// Return type
// cpptype void
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
CAPI void alt_IBlip_SetPosition(struct alt_IBlip* _instance, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:18:19
// alt::IWorldObject::GetDimension
// Return type
// cpptype int
// fundamental
CAPI int alt_IBlip_GetDimension(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:19:16
// alt::IWorldObject::SetDimension
// Return type
// cpptype void
// fundamental
// cpptype int
// fundamental
CAPI void alt_IBlip_SetDimension(struct alt_IBlip* _instance, int dimension);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::IWorldObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IWorldObject.h:10:8
// alt::IWorldObject::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:32:11
// alt::IBlip::~IBlip
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:34:16
// alt::IBlip::IsGlobal
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IBlip_IsGlobal(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:35:24
// alt::IBlip::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_IBlip_GetTarget(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:37:16
// alt::IBlip::IsAttached
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IBlip_IsAttached(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:38:24
// alt::IBlip::AttachedTo
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_IBlip_AttachedTo(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:39:20
// alt::IBlip::GetBlipType
// Return type
typedef enum alt_IBlip_BlipType {
    ALT_IBLIP_BLIPTYPE_VEHICLE = 1,
    ALT_IBLIP_BLIPTYPE_PED = 2,
    ALT_IBLIP_BLIPTYPE_OBJECT = 3,
    ALT_IBLIP_BLIPTYPE_DESTINATION = 4,
    ALT_IBLIP_BLIPTYPE_CONT = 5,
    ALT_IBLIP_BLIPTYPE_PICKUP_UNK = 6,
    ALT_IBLIP_BLIPTYPE_RADIUS = 7,
    ALT_IBLIP_BLIPTYPE_PICKUP = 8,
    ALT_IBLIP_BLIPTYPE_COP = 9,
    ALT_IBLIP_BLIPTYPE_AREA = 11,
    ALT_IBLIP_BLIPTYPE_GALLERY = 12,
    ALT_IBLIP_BLIPTYPE_PICKUP_OBJECT = 13
};

// cpptype enum alt::IBlip::BlipType
// enumaral type
CAPI alt_IBlip_BlipType alt_IBlip_GetBlipType(struct alt_IBlip* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:41:16
// alt::IBlip::SetSprite
// Return type
// cpptype void
// fundamental
// cpptype unsigned short
// fundamental
CAPI void alt_IBlip_SetSprite(struct alt_IBlip* _instance, unsigned short sprite);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:42:16
// alt::IBlip::SetColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IBlip_SetColor(struct alt_IBlip* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:43:16
// alt::IBlip::SetRoute
// Return type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
CAPI void alt_IBlip_SetRoute(struct alt_IBlip* _instance, _Bool state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:44:16
// alt::IBlip::SetRouteColor
// Return type
// cpptype void
// fundamental
// cpptype unsigned char
// fundamental
CAPI void alt_IBlip_SetRouteColor(struct alt_IBlip* _instance, unsigned char color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:13:8
// alt::IBlip::IBlip
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IBlip.h:13:8
// alt::IBlip::operator=
// Deleted

// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:11:8
// class alt::IVoiceChannel
// derives from class alt::IBaseObject
// derives from class alt::CRefCountable
// cpptype struct std::atomic<unsigned long long>
// type is in STD
// Could not retrieve field type

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:11:8
// class alt::IVoiceChannel
// functions from class alt::IVoiceChannel
// has no accessible destructor for 'Free' function

// functions derived from IBaseObject

// functions derived from CRefCountable

CAPI struct alt_IVoiceChannel* alt_CRefCountable_to_alt_IVoiceChannel(struct alt_CRefCountable* from);

CAPI struct alt_CRefCountable* alt_IVoiceChannel_to_alt_CRefCountable(struct alt_IVoiceChannel* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:19:20
// alt::CRefCountable::GetRefCount
// Return type
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IVoiceChannel_GetRefCount(struct alt_IVoiceChannel* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:21:16
// alt::CRefCountable::AddRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IVoiceChannel_AddRef(struct alt_IVoiceChannel* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:23:16
// alt::CRefCountable::RemoveRef
// Return type
// cpptype void
// fundamental
CAPI void alt_IVoiceChannel_RemoveRef(struct alt_IVoiceChannel* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:37:16
// alt::CRefCountable::AddWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IVoiceChannel_AddWeakRef(struct alt_IVoiceChannel* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:43:16
// alt::CRefCountable::RemoveWeakRef
// Return type
// cpptype void
// fundamental
// cpptype class alt::IWeakRef *
// Pointer type
// cpptype class alt::IWeakRef
CAPI void alt_IVoiceChannel_RemoveWeakRef(struct alt_IVoiceChannel* _instance, struct alt_IWeakRef* ref);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:50:11
// alt::CRefCountable::~CRefCountable
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::CRefCountable
// Deleted
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/CRefCountable.h:16:8
// alt::CRefCountable::operator=
// Deleted

CAPI struct alt_IVoiceChannel* alt_IBaseObject_to_alt_IVoiceChannel(struct alt_IBaseObject* from);

CAPI struct alt_IBaseObject* alt_IVoiceChannel_to_alt_IBaseObject(struct alt_IVoiceChannel* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:23:11
// alt::IBaseObject::~IBaseObject
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:25:16
// alt::IBaseObject::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::IBaseObject::Type
// enumaral type
CAPI alt_IBaseObject_Type alt_IVoiceChannel_GetType(struct alt_IVoiceChannel* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:27:23
// alt::IBaseObject::GetMetaData
// Return type
// cpptype class alt::RefBase<class alt::RefStore<const class alt::IMValue> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_RefBase_RefStore_constIMValue_free()
CAPI struct alt_RefBase_RefStore_constIMValue* alt_IVoiceChannel_GetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:28:16
// alt::IBaseObject::SetMetaData
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
CAPI void alt_IVoiceChannel_SetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key, struct alt_RefBase_RefStore_IMValue* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::IBaseObject
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/../IBaseObject.h:9:8
// alt::IBaseObject::operator=
// Deleted

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:14:11
// alt::IVoiceChannel::~IVoiceChannel
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:16:16
// alt::IVoiceChannel::IsSpatial
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IVoiceChannel_IsSpatial(struct alt_IVoiceChannel* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:17:17
// alt::IVoiceChannel::GetMaxDistance
// Return type
// cpptype float
// fundamental
CAPI float alt_IVoiceChannel_GetMaxDistance(struct alt_IVoiceChannel* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:19:16
// alt::IVoiceChannel::HasPlayer
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI _Bool alt_IVoiceChannel_HasPlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:20:16
// alt::IVoiceChannel::AddPlayer
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI void alt_IVoiceChannel_AddPlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:21:16
// alt::IVoiceChannel::RemovePlayer
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI void alt_IVoiceChannel_RemovePlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:23:16
// alt::IVoiceChannel::IsPlayerMuted
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI _Bool alt_IVoiceChannel_IsPlayerMuted(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:24:16
// alt::IVoiceChannel::MutePlayer
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI void alt_IVoiceChannel_MutePlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:25:16
// alt::IVoiceChannel::UnmutePlayer
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
CAPI void alt_IVoiceChannel_UnmutePlayer(struct alt_IVoiceChannel* _instance, struct alt_RefBase_RefStore_IPlayer* player);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:11:8
// alt::IVoiceChannel::IVoiceChannel
// Constructor
// class is abstract
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/script-objects/IVoiceChannel.h:11:8
// alt::IVoiceChannel::operator=
// Deleted

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// class alt::CEvent
typedef enum alt_CEvent_Type {
    ALT_CEVENT_TYPE_NONE = 0,
    ALT_CEVENT_TYPE_PLAYER_CONNECT = 1,
    ALT_CEVENT_TYPE_PLAYER_DISCONNECT = 2,
    ALT_CEVENT_TYPE_RESOURCE_START = 3,
    ALT_CEVENT_TYPE_RESOURCE_STOP = 4,
    ALT_CEVENT_TYPE_RESOURCE_ERROR = 5,
    ALT_CEVENT_TYPE_SERVER_SCRIPT_EVENT = 6,
    ALT_CEVENT_TYPE_CLIENT_SCRIPT_EVENT = 7,
    ALT_CEVENT_TYPE_META_CHANGE = 8,
    ALT_CEVENT_TYPE_SYNCED_META_CHANGE = 9,
    ALT_CEVENT_TYPE_PLAYER_DAMAGE = 10,
    ALT_CEVENT_TYPE_PLAYER_DEATH = 11,
    ALT_CEVENT_TYPE_FIRE_EVENT = 12,
    ALT_CEVENT_TYPE_EXPLOSION_EVENT = 13,
    ALT_CEVENT_TYPE_WEAPON_DAMAGE_EVENT = 14,
    ALT_CEVENT_TYPE_CHECKPOINT_EVENT = 15,
    ALT_CEVENT_TYPE_COLSHAPE_EVENT = 16,
    ALT_CEVENT_TYPE_PLAYER_ENTER_VEHICLE = 17,
    ALT_CEVENT_TYPE_PLAYER_LEAVE_VEHICLE = 18,
    ALT_CEVENT_TYPE_PLAYER_CHANGE_VEHICLE_SEAT = 19,
    ALT_CEVENT_TYPE_REMOVE_ENTITY_EVENT = 20,
    ALT_CEVENT_TYPE_DATA_NODE_RECEIVED_EVENT = 21,
    ALT_CEVENT_TYPE_CONSOLE_COMMAND_EVENT = 22,
    ALT_CEVENT_TYPE_CONNECTION_COMPLETE = 23,
    ALT_CEVENT_TYPE_DISCONNECT_EVENT = 24,
    ALT_CEVENT_TYPE_WEB_VIEW_EVENT = 25,
    ALT_CEVENT_TYPE_KEYBOARD_EVENT = 26,
    ALT_CEVENT_TYPE_GAME_ENTITY_CREATE = 27,
    ALT_CEVENT_TYPE_GAME_ENTITY_DESTROY = 28,
    ALT_CEVENT_TYPE_ALL = 29,
    ALT_CEVENT_TYPE_SIZE = 30
};

// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

typedef struct alt_CEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
} alt_CEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// class alt::CEvent
// functions from class alt::CEvent
CAPI void alt_CEvent_free(struct alt_CEvent* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CEvent_free()
CAPI struct alt_CEvent* alt_CEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CEvent_GetType(struct alt_CEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CEvent_WasCancelled(struct alt_CEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CEvent_Cancel(struct alt_CEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CEvent_free()
CAPI struct alt_CEvent* alt_CEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CEvent_Assign_constCEventRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CEvent_free()
CAPI struct alt_CEvent* alt_CEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CEvent_Assign_CEventRefRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0);


// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// class alt::CServerScriptEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:26:10
    // class alt::String name

// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:27:14
    // alt::MValueArgs args

typedef struct alt_CServerScriptEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_Array_RefBase_RefStore_constIMValue args;
} alt_CServerScriptEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// class alt::CServerScriptEvent
// functions from class alt::CServerScriptEvent
CAPI void alt_CServerScriptEvent_free(struct alt_CServerScriptEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CServerScriptEvent* alt_CEvent_to_alt_CServerScriptEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CServerScriptEvent_to_alt_CEvent(struct alt_CServerScriptEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CServerScriptEvent_GetType(struct alt_CServerScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CServerScriptEvent_WasCancelled(struct alt_CServerScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CServerScriptEvent_Cancel(struct alt_CServerScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CServerScriptEvent_Assign_constCEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CServerScriptEvent_Assign_CEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:14:3
// alt::CServerScriptEvent::CServerScriptEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype const class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_3(struct alt_StringView* _name, struct alt_Array_RefBase_RefStore_constIMValue* _args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:22:14
// alt::CServerScriptEvent::GetName
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CServerScriptEvent_GetName(struct alt_CServerScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:23:21
// alt::CServerScriptEvent::GetArgs
// Return type
// cpptype const class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_CServerScriptEvent_GetArgs(struct alt_CServerScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// alt::CServerScriptEvent::CServerScriptEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CServerScriptEvent &
// Reference type
// cpptype class alt::CServerScriptEvent
// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_4(struct alt_CServerScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// alt::CServerScriptEvent::CServerScriptEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CServerScriptEvent &&
// Reference type
// cpptype class alt::CServerScriptEvent
// Return ptr must be manually freed with alt_CServerScriptEvent_free()
CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_5(struct alt_CServerScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// alt::CServerScriptEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CServerScriptEvent &
// Reference type
// cpptype class alt::CServerScriptEvent
// cpptype const class alt::CServerScriptEvent &
// Reference type
// cpptype class alt::CServerScriptEvent
CAPI void alt_CServerScriptEvent_Assign_constCServerScriptEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// alt::CServerScriptEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CServerScriptEvent &
// Reference type
// cpptype class alt::CServerScriptEvent
// cpptype class alt::CServerScriptEvent &&
// Reference type
// cpptype class alt::CServerScriptEvent
CAPI void alt_CServerScriptEvent_Assign_CServerScriptEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CServerScriptEvent.h:11:8
// alt::CServerScriptEvent::~CServerScriptEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// class alt::CClientScriptEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:31:16
    // Ref<class alt::IPlayer> target

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:32:10
    // class alt::String name

// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:33:14
    // alt::MValueArgs args

typedef struct alt_CClientScriptEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_String name;
    struct alt_Array_RefBase_RefStore_constIMValue args;
} alt_CClientScriptEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// class alt::CClientScriptEvent
// functions from class alt::CClientScriptEvent
CAPI void alt_CClientScriptEvent_free(struct alt_CClientScriptEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CClientScriptEvent* alt_CEvent_to_alt_CClientScriptEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CClientScriptEvent_to_alt_CEvent(struct alt_CClientScriptEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CClientScriptEvent_GetType(struct alt_CClientScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CClientScriptEvent_WasCancelled(struct alt_CClientScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CClientScriptEvent_Cancel(struct alt_CClientScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CClientScriptEvent_Assign_constCEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CClientScriptEvent_Assign_CEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:17:3
// alt::CClientScriptEvent::CClientScriptEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype class alt::StringView
// cpptype const class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_StringView* _name, struct alt_Array_RefBase_RefStore_constIMValue* _args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:26:16
// alt::CClientScriptEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CClientScriptEvent_GetTarget(struct alt_CClientScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:27:14
// alt::CClientScriptEvent::GetName
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CClientScriptEvent_GetName(struct alt_CClientScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:28:21
// alt::CClientScriptEvent::GetArgs
// Return type
// cpptype const class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > > &
// Reference type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI struct alt_Array_RefBase_RefStore_constIMValue* alt_CClientScriptEvent_GetArgs(struct alt_CClientScriptEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// alt::CClientScriptEvent::CClientScriptEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CClientScriptEvent &
// Reference type
// cpptype class alt::CClientScriptEvent
// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_4(struct alt_CClientScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// alt::CClientScriptEvent::CClientScriptEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CClientScriptEvent &&
// Reference type
// cpptype class alt::CClientScriptEvent
// Return ptr must be manually freed with alt_CClientScriptEvent_free()
CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_5(struct alt_CClientScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// alt::CClientScriptEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CClientScriptEvent &
// Reference type
// cpptype class alt::CClientScriptEvent
// cpptype const class alt::CClientScriptEvent &
// Reference type
// cpptype class alt::CClientScriptEvent
CAPI void alt_CClientScriptEvent_Assign_constCClientScriptEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// alt::CClientScriptEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CClientScriptEvent &
// Reference type
// cpptype class alt::CClientScriptEvent
// cpptype class alt::CClientScriptEvent &&
// Reference type
// cpptype class alt::CClientScriptEvent
CAPI void alt_CClientScriptEvent_Assign_CClientScriptEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CClientScriptEvent.h:14:8
// alt::CClientScriptEvent::~CClientScriptEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// class alt::CPlayerConnectEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:32:16
    // Ref<class alt::IPlayer> target

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:33:10
    // class alt::String reason

typedef struct alt_CPlayerConnectEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_String reason;
} alt_CPlayerConnectEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// class alt::CPlayerConnectEvent
// functions from class alt::CPlayerConnectEvent
CAPI void alt_CPlayerConnectEvent_free(struct alt_CPlayerConnectEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerConnectEvent* alt_CEvent_to_alt_CPlayerConnectEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerConnectEvent_to_alt_CEvent(struct alt_CPlayerConnectEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerConnectEvent_GetType(struct alt_CPlayerConnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerConnectEvent_WasCancelled(struct alt_CPlayerConnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerConnectEvent_Cancel(struct alt_CPlayerConnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerConnectEvent_Assign_constCEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerConnectEvent_Assign_CEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:16:3
// alt::CPlayerConnectEvent::CPlayerConnectEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _target);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:22:16
// alt::CPlayerConnectEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerConnectEvent_GetTarget(struct alt_CPlayerConnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:23:14
// alt::CPlayerConnectEvent::GetReason
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CPlayerConnectEvent_GetReason(struct alt_CPlayerConnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:25:8
// alt::CPlayerConnectEvent::Cancel
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_CPlayerConnectEvent_Cancel_1(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _reason);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// alt::CPlayerConnectEvent::CPlayerConnectEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerConnectEvent &
// Reference type
// cpptype class alt::CPlayerConnectEvent
// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_4(struct alt_CPlayerConnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// alt::CPlayerConnectEvent::CPlayerConnectEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerConnectEvent &&
// Reference type
// cpptype class alt::CPlayerConnectEvent
// Return ptr must be manually freed with alt_CPlayerConnectEvent_free()
CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_5(struct alt_CPlayerConnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// alt::CPlayerConnectEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerConnectEvent &
// Reference type
// cpptype class alt::CPlayerConnectEvent
// cpptype const class alt::CPlayerConnectEvent &
// Reference type
// cpptype class alt::CPlayerConnectEvent
CAPI void alt_CPlayerConnectEvent_Assign_constCPlayerConnectEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// alt::CPlayerConnectEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerConnectEvent &
// Reference type
// cpptype class alt::CPlayerConnectEvent
// cpptype class alt::CPlayerConnectEvent &&
// Reference type
// cpptype class alt::CPlayerConnectEvent
CAPI void alt_CPlayerConnectEvent_Assign_CPlayerConnectEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerConnectEvent.h:13:8
// alt::CPlayerConnectEvent::~CPlayerConnectEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// class alt::CPlayerDisconnectEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:28:16
    // Ref<class alt::IPlayer> target

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:29:10
    // class alt::String reason

typedef struct alt_CPlayerDisconnectEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_String reason;
} alt_CPlayerDisconnectEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// class alt::CPlayerDisconnectEvent
// functions from class alt::CPlayerDisconnectEvent
CAPI void alt_CPlayerDisconnectEvent_free(struct alt_CPlayerDisconnectEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerDisconnectEvent* alt_CEvent_to_alt_CPlayerDisconnectEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerDisconnectEvent_to_alt_CEvent(struct alt_CPlayerDisconnectEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerDisconnectEvent_GetType(struct alt_CPlayerDisconnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerDisconnectEvent_WasCancelled(struct alt_CPlayerDisconnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerDisconnectEvent_Cancel(struct alt_CPlayerDisconnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerDisconnectEvent_Assign_constCEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerDisconnectEvent_Assign_CEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:16:3
// alt::CPlayerDisconnectEvent::CPlayerDisconnectEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_StringView* _reason);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:24:16
// alt::CPlayerDisconnectEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerDisconnectEvent_GetTarget(struct alt_CPlayerDisconnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:25:14
// alt::CPlayerDisconnectEvent::GetReason
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CPlayerDisconnectEvent_GetReason(struct alt_CPlayerDisconnectEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// alt::CPlayerDisconnectEvent::CPlayerDisconnectEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerDisconnectEvent &
// Reference type
// cpptype class alt::CPlayerDisconnectEvent
// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_4(struct alt_CPlayerDisconnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// alt::CPlayerDisconnectEvent::CPlayerDisconnectEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerDisconnectEvent &&
// Reference type
// cpptype class alt::CPlayerDisconnectEvent
// Return ptr must be manually freed with alt_CPlayerDisconnectEvent_free()
CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_5(struct alt_CPlayerDisconnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// alt::CPlayerDisconnectEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerDisconnectEvent &
// Reference type
// cpptype class alt::CPlayerDisconnectEvent
// cpptype const class alt::CPlayerDisconnectEvent &
// Reference type
// cpptype class alt::CPlayerDisconnectEvent
CAPI void alt_CPlayerDisconnectEvent_Assign_constCPlayerDisconnectEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// alt::CPlayerDisconnectEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerDisconnectEvent &
// Reference type
// cpptype class alt::CPlayerDisconnectEvent
// cpptype class alt::CPlayerDisconnectEvent &&
// Reference type
// cpptype class alt::CPlayerDisconnectEvent
CAPI void alt_CPlayerDisconnectEvent_Assign_CPlayerDisconnectEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDisconnectEvent.h:13:8
// alt::CPlayerDisconnectEvent::~CPlayerDisconnectEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// class alt::CPlayerDamageEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:32:16
    // Ref<class alt::IPlayer> target

// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:33:16
    // Ref<class alt::IEntity> attacker

// cpptype unsigned short
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:34:12
    // uint16_t damage

// cpptype unsigned int
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:35:12
    // uint32_t weapon

typedef struct alt_CPlayerDamageEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_RefBase_RefStore_IEntity attacker;
    unsigned short damage;
    unsigned int weapon;
} alt_CPlayerDamageEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// class alt::CPlayerDamageEvent
// functions from class alt::CPlayerDamageEvent
CAPI void alt_CPlayerDamageEvent_free(struct alt_CPlayerDamageEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerDamageEvent* alt_CEvent_to_alt_CPlayerDamageEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerDamageEvent_to_alt_CEvent(struct alt_CPlayerDamageEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerDamageEvent_GetType(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerDamageEvent_WasCancelled(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerDamageEvent_Cancel(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerDamageEvent_Assign_constCEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerDamageEvent_Assign_CEventRefRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:16:3
// alt::CPlayerDamageEvent::CPlayerDamageEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype unsigned short
// fundamental
// cpptype unsigned int
// fundamental
// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_RefBase_RefStore_IEntity* _attacker, unsigned short _damage, unsigned int _weapon);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:26:16
// alt::CPlayerDamageEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerDamageEvent_GetTarget(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:27:16
// alt::CPlayerDamageEvent::GetAttacker
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CPlayerDamageEvent_GetAttacker(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:28:12
// alt::CPlayerDamageEvent::GetDamage
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_CPlayerDamageEvent_GetDamage(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:29:12
// alt::CPlayerDamageEvent::GetWeapon
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_CPlayerDamageEvent_GetWeapon(struct alt_CPlayerDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// alt::CPlayerDamageEvent::CPlayerDamageEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerDamageEvent &
// Reference type
// cpptype class alt::CPlayerDamageEvent
// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_4(struct alt_CPlayerDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// alt::CPlayerDamageEvent::CPlayerDamageEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerDamageEvent &&
// Reference type
// cpptype class alt::CPlayerDamageEvent
// Return ptr must be manually freed with alt_CPlayerDamageEvent_free()
CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_5(struct alt_CPlayerDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// alt::CPlayerDamageEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerDamageEvent &
// Reference type
// cpptype class alt::CPlayerDamageEvent
// cpptype const class alt::CPlayerDamageEvent &
// Reference type
// cpptype class alt::CPlayerDamageEvent
CAPI void alt_CPlayerDamageEvent_Assign_constCPlayerDamageEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CPlayerDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// alt::CPlayerDamageEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerDamageEvent &
// Reference type
// cpptype class alt::CPlayerDamageEvent
// cpptype class alt::CPlayerDamageEvent &&
// Reference type
// cpptype class alt::CPlayerDamageEvent
CAPI void alt_CPlayerDamageEvent_Assign_CPlayerDamageEventRefRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CPlayerDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDamageEvent.h:13:8
// alt::CPlayerDamageEvent::~CPlayerDamageEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// class alt::CPlayerDeathEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:30:16
    // Ref<class alt::IPlayer> target

// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:31:16
    // Ref<class alt::IEntity> killer

// cpptype unsigned int
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:32:12
    // uint32_t weapon

typedef struct alt_CPlayerDeathEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer target;
    struct alt_RefBase_RefStore_IEntity killer;
    unsigned int weapon;
} alt_CPlayerDeathEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// class alt::CPlayerDeathEvent
// functions from class alt::CPlayerDeathEvent
CAPI void alt_CPlayerDeathEvent_free(struct alt_CPlayerDeathEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerDeathEvent* alt_CEvent_to_alt_CPlayerDeathEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerDeathEvent_to_alt_CEvent(struct alt_CPlayerDeathEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerDeathEvent_GetType(struct alt_CPlayerDeathEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerDeathEvent_WasCancelled(struct alt_CPlayerDeathEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerDeathEvent_Cancel(struct alt_CPlayerDeathEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerDeathEvent_Assign_constCEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerDeathEvent_Assign_CEventRefRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:16:3
// alt::CPlayerDeathEvent::CPlayerDeathEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype unsigned int
// fundamental
// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _target, struct alt_RefBase_RefStore_IEntity* _killer, unsigned int _weapon);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:25:16
// alt::CPlayerDeathEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerDeathEvent_GetTarget(struct alt_CPlayerDeathEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:26:16
// alt::CPlayerDeathEvent::GetKiller
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CPlayerDeathEvent_GetKiller(struct alt_CPlayerDeathEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:27:12
// alt::CPlayerDeathEvent::GetWeapon
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_CPlayerDeathEvent_GetWeapon(struct alt_CPlayerDeathEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// alt::CPlayerDeathEvent::CPlayerDeathEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerDeathEvent &
// Reference type
// cpptype class alt::CPlayerDeathEvent
// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_4(struct alt_CPlayerDeathEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// alt::CPlayerDeathEvent::CPlayerDeathEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerDeathEvent &&
// Reference type
// cpptype class alt::CPlayerDeathEvent
// Return ptr must be manually freed with alt_CPlayerDeathEvent_free()
CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_5(struct alt_CPlayerDeathEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// alt::CPlayerDeathEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerDeathEvent &
// Reference type
// cpptype class alt::CPlayerDeathEvent
// cpptype const class alt::CPlayerDeathEvent &
// Reference type
// cpptype class alt::CPlayerDeathEvent
CAPI void alt_CPlayerDeathEvent_Assign_constCPlayerDeathEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CPlayerDeathEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// alt::CPlayerDeathEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerDeathEvent &
// Reference type
// cpptype class alt::CPlayerDeathEvent
// cpptype class alt::CPlayerDeathEvent &&
// Reference type
// cpptype class alt::CPlayerDeathEvent
CAPI void alt_CPlayerDeathEvent_Assign_CPlayerDeathEventRefRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CPlayerDeathEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerDeathEvent.h:13:8
// alt::CPlayerDeathEvent::~CPlayerDeathEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// class alt::CColShapeEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:28:18
    // Ref<class alt::IColShape> target

// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:29:16
    // Ref<class alt::IEntity> entity

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:30:8
    // _Bool state

typedef struct alt_CColShapeEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IColShape target;
    struct alt_RefBase_RefStore_IEntity entity;
    _Bool state;
} alt_CColShapeEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// class alt::CColShapeEvent
// functions from class alt::CColShapeEvent
CAPI void alt_CColShapeEvent_free(struct alt_CColShapeEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CColShapeEvent* alt_CEvent_to_alt_CColShapeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CColShapeEvent_to_alt_CEvent(struct alt_CColShapeEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CColShapeEvent_GetType(struct alt_CColShapeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CColShapeEvent_WasCancelled(struct alt_CColShapeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CColShapeEvent_Cancel(struct alt_CColShapeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CColShapeEvent_Assign_constCEventRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CColShapeEvent_Assign_CEventRefRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:14:3
// alt::CColShapeEvent::CColShapeEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype _Bool
// fundamental
// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_3(struct alt_RefBase_RefStore_IColShape* _target, struct alt_RefBase_RefStore_IEntity* _entity, _Bool _state);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:23:18
// alt::CColShapeEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_CColShapeEvent_GetTarget(struct alt_CColShapeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:24:16
// alt::CColShapeEvent::GetEntity
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CColShapeEvent_GetEntity(struct alt_CColShapeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:25:8
// alt::CColShapeEvent::GetState
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CColShapeEvent_GetState(struct alt_CColShapeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// alt::CColShapeEvent::CColShapeEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CColShapeEvent &
// Reference type
// cpptype class alt::CColShapeEvent
// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_4(struct alt_CColShapeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// alt::CColShapeEvent::CColShapeEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CColShapeEvent &&
// Reference type
// cpptype class alt::CColShapeEvent
// Return ptr must be manually freed with alt_CColShapeEvent_free()
CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_5(struct alt_CColShapeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// alt::CColShapeEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CColShapeEvent &
// Reference type
// cpptype class alt::CColShapeEvent
// cpptype const class alt::CColShapeEvent &
// Reference type
// cpptype class alt::CColShapeEvent
CAPI void alt_CColShapeEvent_Assign_constCColShapeEventRef(struct alt_CColShapeEvent* _instance, struct alt_CColShapeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// alt::CColShapeEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CColShapeEvent &
// Reference type
// cpptype class alt::CColShapeEvent
// cpptype class alt::CColShapeEvent &&
// Reference type
// cpptype class alt::CColShapeEvent
CAPI void alt_CColShapeEvent_Assign_CColShapeEventRefRef(struct alt_CColShapeEvent* _instance, struct alt_CColShapeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CColShapeEvent.h:11:8
// alt::CColShapeEvent::~CColShapeEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// class alt::CPlayerEnterVehicleEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:28:17
    // Ref<class alt::IVehicle> target

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:29:16
    // Ref<class alt::IPlayer> player

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:30:11
    // uint8_t seat

typedef struct alt_CPlayerEnterVehicleEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
    struct alt_RefBase_RefStore_IPlayer player;
    unsigned char seat;
} alt_CPlayerEnterVehicleEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// class alt::CPlayerEnterVehicleEvent
// functions from class alt::CPlayerEnterVehicleEvent
CAPI void alt_CPlayerEnterVehicleEvent_free(struct alt_CPlayerEnterVehicleEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CEvent_to_alt_CPlayerEnterVehicleEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerEnterVehicleEvent_to_alt_CEvent(struct alt_CPlayerEnterVehicleEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerEnterVehicleEvent_GetType(struct alt_CPlayerEnterVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerEnterVehicleEvent_WasCancelled(struct alt_CPlayerEnterVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerEnterVehicleEvent_Cancel(struct alt_CPlayerEnterVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerEnterVehicleEvent_Assign_CEventRefRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:14:3
// alt::CPlayerEnterVehicleEvent::CPlayerEnterVehicleEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype unsigned char
// fundamental
// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_3(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _seat);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:23:17
// alt::CPlayerEnterVehicleEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CPlayerEnterVehicleEvent_GetTarget(struct alt_CPlayerEnterVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:24:16
// alt::CPlayerEnterVehicleEvent::GetPlayer
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerEnterVehicleEvent_GetPlayer(struct alt_CPlayerEnterVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:25:11
// alt::CPlayerEnterVehicleEvent::GetSeat
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_CPlayerEnterVehicleEvent_GetSeat(struct alt_CPlayerEnterVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// alt::CPlayerEnterVehicleEvent::CPlayerEnterVehicleEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerEnterVehicleEvent &
// Reference type
// cpptype class alt::CPlayerEnterVehicleEvent
// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_4(struct alt_CPlayerEnterVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// alt::CPlayerEnterVehicleEvent::CPlayerEnterVehicleEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerEnterVehicleEvent &&
// Reference type
// cpptype class alt::CPlayerEnterVehicleEvent
// Return ptr must be manually freed with alt_CPlayerEnterVehicleEvent_free()
CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_5(struct alt_CPlayerEnterVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// alt::CPlayerEnterVehicleEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerEnterVehicleEvent &
// Reference type
// cpptype class alt::CPlayerEnterVehicleEvent
// cpptype const class alt::CPlayerEnterVehicleEvent &
// Reference type
// cpptype class alt::CPlayerEnterVehicleEvent
CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCPlayerEnterVehicleEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CPlayerEnterVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// alt::CPlayerEnterVehicleEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerEnterVehicleEvent &
// Reference type
// cpptype class alt::CPlayerEnterVehicleEvent
// cpptype class alt::CPlayerEnterVehicleEvent &&
// Reference type
// cpptype class alt::CPlayerEnterVehicleEvent
CAPI void alt_CPlayerEnterVehicleEvent_Assign_CPlayerEnterVehicleEventRefRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CPlayerEnterVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerEnterVehicleEvent.h:11:8
// alt::CPlayerEnterVehicleEvent::~CPlayerEnterVehicleEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// class alt::CPlayerLeaveVehicleEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:28:17
    // Ref<class alt::IVehicle> target

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:29:16
    // Ref<class alt::IPlayer> player

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:30:11
    // uint8_t seat

typedef struct alt_CPlayerLeaveVehicleEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
    struct alt_RefBase_RefStore_IPlayer player;
    unsigned char seat;
} alt_CPlayerLeaveVehicleEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// class alt::CPlayerLeaveVehicleEvent
// functions from class alt::CPlayerLeaveVehicleEvent
CAPI void alt_CPlayerLeaveVehicleEvent_free(struct alt_CPlayerLeaveVehicleEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CEvent_to_alt_CPlayerLeaveVehicleEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerLeaveVehicleEvent_to_alt_CEvent(struct alt_CPlayerLeaveVehicleEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerLeaveVehicleEvent_GetType(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerLeaveVehicleEvent_WasCancelled(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerLeaveVehicleEvent_Cancel(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerLeaveVehicleEvent_Assign_CEventRefRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:14:3
// alt::CPlayerLeaveVehicleEvent::CPlayerLeaveVehicleEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype unsigned char
// fundamental
// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_3(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _seat);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:23:17
// alt::CPlayerLeaveVehicleEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CPlayerLeaveVehicleEvent_GetTarget(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:24:16
// alt::CPlayerLeaveVehicleEvent::GetPlayer
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerLeaveVehicleEvent_GetPlayer(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:25:11
// alt::CPlayerLeaveVehicleEvent::GetSeat
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_CPlayerLeaveVehicleEvent_GetSeat(struct alt_CPlayerLeaveVehicleEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// alt::CPlayerLeaveVehicleEvent::CPlayerLeaveVehicleEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerLeaveVehicleEvent &
// Reference type
// cpptype class alt::CPlayerLeaveVehicleEvent
// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_4(struct alt_CPlayerLeaveVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// alt::CPlayerLeaveVehicleEvent::CPlayerLeaveVehicleEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerLeaveVehicleEvent &&
// Reference type
// cpptype class alt::CPlayerLeaveVehicleEvent
// Return ptr must be manually freed with alt_CPlayerLeaveVehicleEvent_free()
CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_5(struct alt_CPlayerLeaveVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// alt::CPlayerLeaveVehicleEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerLeaveVehicleEvent &
// Reference type
// cpptype class alt::CPlayerLeaveVehicleEvent
// cpptype const class alt::CPlayerLeaveVehicleEvent &
// Reference type
// cpptype class alt::CPlayerLeaveVehicleEvent
CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCPlayerLeaveVehicleEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CPlayerLeaveVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// alt::CPlayerLeaveVehicleEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerLeaveVehicleEvent &
// Reference type
// cpptype class alt::CPlayerLeaveVehicleEvent
// cpptype class alt::CPlayerLeaveVehicleEvent &&
// Reference type
// cpptype class alt::CPlayerLeaveVehicleEvent
CAPI void alt_CPlayerLeaveVehicleEvent_Assign_CPlayerLeaveVehicleEventRefRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CPlayerLeaveVehicleEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerLeaveVehicleEvent.h:11:8
// alt::CPlayerLeaveVehicleEvent::~CPlayerLeaveVehicleEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// class alt::CPlayerChangeVehicleSeatEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:31:17
    // Ref<class alt::IVehicle> target

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:32:16
    // Ref<class alt::IPlayer> player

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:33:11
    // uint8_t oldSeat

// cpptype unsigned char
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:34:11
    // uint8_t newSeat

typedef struct alt_CPlayerChangeVehicleSeatEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IVehicle target;
    struct alt_RefBase_RefStore_IPlayer player;
    unsigned char oldSeat;
    unsigned char newSeat;
} alt_CPlayerChangeVehicleSeatEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// class alt::CPlayerChangeVehicleSeatEvent
// functions from class alt::CPlayerChangeVehicleSeatEvent
CAPI void alt_CPlayerChangeVehicleSeatEvent_free(struct alt_CPlayerChangeVehicleSeatEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CEvent_to_alt_CPlayerChangeVehicleSeatEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CPlayerChangeVehicleSeatEvent_to_alt_CEvent(struct alt_CPlayerChangeVehicleSeatEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CPlayerChangeVehicleSeatEvent_GetType(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CPlayerChangeVehicleSeatEvent_WasCancelled(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CPlayerChangeVehicleSeatEvent_Cancel(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_CEventRefRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:15:3
// alt::CPlayerChangeVehicleSeatEvent::CPlayerChangeVehicleSeatEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype unsigned char
// fundamental
// cpptype unsigned char
// fundamental
// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_3(struct alt_RefBase_RefStore_IVehicle* _target, struct alt_RefBase_RefStore_IPlayer* _player, unsigned char _oldSeat, unsigned char _newSeat);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:25:17
// alt::CPlayerChangeVehicleSeatEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_CPlayerChangeVehicleSeatEvent_GetTarget(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:26:16
// alt::CPlayerChangeVehicleSeatEvent::GetPlayer
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CPlayerChangeVehicleSeatEvent_GetPlayer(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:27:11
// alt::CPlayerChangeVehicleSeatEvent::GetOldSeat
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetOldSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:28:11
// alt::CPlayerChangeVehicleSeatEvent::GetNewSeat
// Return type
// cpptype unsigned char
// fundamental
CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetNewSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// alt::CPlayerChangeVehicleSeatEvent::CPlayerChangeVehicleSeatEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CPlayerChangeVehicleSeatEvent &
// Reference type
// cpptype class alt::CPlayerChangeVehicleSeatEvent
// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_4(struct alt_CPlayerChangeVehicleSeatEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// alt::CPlayerChangeVehicleSeatEvent::CPlayerChangeVehicleSeatEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CPlayerChangeVehicleSeatEvent &&
// Reference type
// cpptype class alt::CPlayerChangeVehicleSeatEvent
// Return ptr must be manually freed with alt_CPlayerChangeVehicleSeatEvent_free()
CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_5(struct alt_CPlayerChangeVehicleSeatEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// alt::CPlayerChangeVehicleSeatEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerChangeVehicleSeatEvent &
// Reference type
// cpptype class alt::CPlayerChangeVehicleSeatEvent
// cpptype const class alt::CPlayerChangeVehicleSeatEvent &
// Reference type
// cpptype class alt::CPlayerChangeVehicleSeatEvent
CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCPlayerChangeVehicleSeatEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CPlayerChangeVehicleSeatEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// alt::CPlayerChangeVehicleSeatEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CPlayerChangeVehicleSeatEvent &
// Reference type
// cpptype class alt::CPlayerChangeVehicleSeatEvent
// cpptype class alt::CPlayerChangeVehicleSeatEvent &&
// Reference type
// cpptype class alt::CPlayerChangeVehicleSeatEvent
CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_CPlayerChangeVehicleSeatEventRefRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CPlayerChangeVehicleSeatEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CPlayerChangeVehicleSeatEvent.h:12:8
// alt::CPlayerChangeVehicleSeatEvent::~CPlayerChangeVehicleSeatEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// class alt::CDataNodeReceivedEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:27:10
    // class alt::String name

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:28:10
    // class alt::String json

typedef struct alt_CDataNodeReceivedEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_String name;
    struct alt_String json;
} alt_CDataNodeReceivedEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// class alt::CDataNodeReceivedEvent
// functions from class alt::CDataNodeReceivedEvent
CAPI void alt_CDataNodeReceivedEvent_free(struct alt_CDataNodeReceivedEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CDataNodeReceivedEvent* alt_CEvent_to_alt_CDataNodeReceivedEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CDataNodeReceivedEvent_to_alt_CEvent(struct alt_CDataNodeReceivedEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CDataNodeReceivedEvent_GetType(struct alt_CDataNodeReceivedEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CDataNodeReceivedEvent_WasCancelled(struct alt_CDataNodeReceivedEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CDataNodeReceivedEvent_Cancel(struct alt_CDataNodeReceivedEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CDataNodeReceivedEvent_Assign_constCEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CDataNodeReceivedEvent_Assign_CEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:15:3
// alt::CDataNodeReceivedEvent::CDataNodeReceivedEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_3(struct alt_StringView* _name, struct alt_StringView* _logJson);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:23:14
// alt::CDataNodeReceivedEvent::GetName
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetName(struct alt_CDataNodeReceivedEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:24:14
// alt::CDataNodeReceivedEvent::GetJson
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetJson(struct alt_CDataNodeReceivedEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// alt::CDataNodeReceivedEvent::CDataNodeReceivedEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CDataNodeReceivedEvent &
// Reference type
// cpptype class alt::CDataNodeReceivedEvent
// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_4(struct alt_CDataNodeReceivedEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// alt::CDataNodeReceivedEvent::CDataNodeReceivedEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CDataNodeReceivedEvent &&
// Reference type
// cpptype class alt::CDataNodeReceivedEvent
// Return ptr must be manually freed with alt_CDataNodeReceivedEvent_free()
CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_5(struct alt_CDataNodeReceivedEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// alt::CDataNodeReceivedEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CDataNodeReceivedEvent &
// Reference type
// cpptype class alt::CDataNodeReceivedEvent
// cpptype const class alt::CDataNodeReceivedEvent &
// Reference type
// cpptype class alt::CDataNodeReceivedEvent
CAPI void alt_CDataNodeReceivedEvent_Assign_constCDataNodeReceivedEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// alt::CDataNodeReceivedEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CDataNodeReceivedEvent &
// Reference type
// cpptype class alt::CDataNodeReceivedEvent
// cpptype class alt::CDataNodeReceivedEvent &&
// Reference type
// cpptype class alt::CDataNodeReceivedEvent
CAPI void alt_CDataNodeReceivedEvent_Assign_CDataNodeReceivedEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CDataNodeReceivedEvent.h:12:8
// alt::CDataNodeReceivedEvent::~CDataNodeReceivedEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// class alt::CRemoveEntityEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:23:16
    // Ref<class alt::IEntity> target

typedef struct alt_CRemoveEntityEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IEntity target;
} alt_CRemoveEntityEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// class alt::CRemoveEntityEvent
// functions from class alt::CRemoveEntityEvent
CAPI void alt_CRemoveEntityEvent_free(struct alt_CRemoveEntityEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CRemoveEntityEvent* alt_CEvent_to_alt_CRemoveEntityEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CRemoveEntityEvent_to_alt_CEvent(struct alt_CRemoveEntityEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CRemoveEntityEvent_GetType(struct alt_CRemoveEntityEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CRemoveEntityEvent_WasCancelled(struct alt_CRemoveEntityEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CRemoveEntityEvent_Cancel(struct alt_CRemoveEntityEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CRemoveEntityEvent_Assign_constCEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CRemoveEntityEvent_Assign_CEventRefRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:13:3
// alt::CRemoveEntityEvent::CRemoveEntityEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_3(struct alt_RefBase_RefStore_IEntity* _target);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:20:16
// alt::CRemoveEntityEvent::GetEntity
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CRemoveEntityEvent_GetEntity(struct alt_CRemoveEntityEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// alt::CRemoveEntityEvent::CRemoveEntityEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CRemoveEntityEvent &
// Reference type
// cpptype class alt::CRemoveEntityEvent
// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_4(struct alt_CRemoveEntityEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// alt::CRemoveEntityEvent::CRemoveEntityEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CRemoveEntityEvent &&
// Reference type
// cpptype class alt::CRemoveEntityEvent
// Return ptr must be manually freed with alt_CRemoveEntityEvent_free()
CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_5(struct alt_CRemoveEntityEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// alt::CRemoveEntityEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CRemoveEntityEvent &
// Reference type
// cpptype class alt::CRemoveEntityEvent
// cpptype const class alt::CRemoveEntityEvent &
// Reference type
// cpptype class alt::CRemoveEntityEvent
CAPI void alt_CRemoveEntityEvent_Assign_constCRemoveEntityEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CRemoveEntityEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// alt::CRemoveEntityEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CRemoveEntityEvent &
// Reference type
// cpptype class alt::CRemoveEntityEvent
// cpptype class alt::CRemoveEntityEvent &&
// Reference type
// cpptype class alt::CRemoveEntityEvent
CAPI void alt_CRemoveEntityEvent_Assign_CRemoveEntityEventRefRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CRemoveEntityEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CRemoveEntityEvent.h:10:8
// alt::CRemoveEntityEvent::~CRemoveEntityEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// class alt::CConsoleCommandEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::StringView
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:25:14
    // class alt::StringView name

// cpptype class alt::Array<class alt::StringView>
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:26:21
    // Array<class alt::StringView> args

typedef struct alt_CConsoleCommandEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_StringView name;
    struct alt_Array_StringView args;
} alt_CConsoleCommandEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// class alt::CConsoleCommandEvent
// functions from class alt::CConsoleCommandEvent
CAPI void alt_CConsoleCommandEvent_free(struct alt_CConsoleCommandEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CConsoleCommandEvent* alt_CEvent_to_alt_CConsoleCommandEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CConsoleCommandEvent_to_alt_CEvent(struct alt_CConsoleCommandEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CConsoleCommandEvent_GetType(struct alt_CConsoleCommandEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CConsoleCommandEvent_WasCancelled(struct alt_CConsoleCommandEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CConsoleCommandEvent_Cancel(struct alt_CConsoleCommandEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CConsoleCommandEvent_Assign_constCEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CConsoleCommandEvent_Assign_CEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:13:3
// alt::CConsoleCommandEvent::CConsoleCommandEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::Array<class alt::StringView>
// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_3(struct alt_StringView* _name, struct alt_Array_StringView* _args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:21:14
// alt::CConsoleCommandEvent::GetName
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CConsoleCommandEvent_GetName(struct alt_CConsoleCommandEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:22:28
// alt::CConsoleCommandEvent::GetArgs
// Return type
// cpptype const class alt::Array<class alt::StringView> &
// Reference type
// cpptype class alt::Array<class alt::StringView>
CAPI struct alt_Array_StringView* alt_CConsoleCommandEvent_GetArgs(struct alt_CConsoleCommandEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// alt::CConsoleCommandEvent::CConsoleCommandEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CConsoleCommandEvent &
// Reference type
// cpptype class alt::CConsoleCommandEvent
// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_4(struct alt_CConsoleCommandEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// alt::CConsoleCommandEvent::CConsoleCommandEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CConsoleCommandEvent &&
// Reference type
// cpptype class alt::CConsoleCommandEvent
// Return ptr must be manually freed with alt_CConsoleCommandEvent_free()
CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_5(struct alt_CConsoleCommandEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// alt::CConsoleCommandEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CConsoleCommandEvent &
// Reference type
// cpptype class alt::CConsoleCommandEvent
// cpptype const class alt::CConsoleCommandEvent &
// Reference type
// cpptype class alt::CConsoleCommandEvent
CAPI void alt_CConsoleCommandEvent_Assign_constCConsoleCommandEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// alt::CConsoleCommandEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CConsoleCommandEvent &
// Reference type
// cpptype class alt::CConsoleCommandEvent
// cpptype class alt::CConsoleCommandEvent &&
// Reference type
// cpptype class alt::CConsoleCommandEvent
CAPI void alt_CConsoleCommandEvent_Assign_CConsoleCommandEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CConsoleCommandEvent.h:10:8
// alt::CConsoleCommandEvent::~CConsoleCommandEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// class alt::CWeaponDamageEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:63:16
    // Ref<class alt::IPlayer> source

// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:64:16
    // Ref<class alt::IEntity> target

// cpptype unsigned int
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:65:12
    // uint32_t weaponHash

// cpptype unsigned short
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:66:12
    // uint16_t damageValue

// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:67:12
    // alt::Vector3f shotOffset

typedef enum alt_CWeaponDamageEvent_BodyPart {
    ALT_CWEAPONDAMAGEEVENT_BODYPART_PELVIS = 0,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_HIP = 1,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_LEG = 2,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_FOOT = 3,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_HIP = 4,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_LEG = 5,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_FOOT = 6,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LOWER_TORSO = 7,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UPPER_TORSO = 8,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_CHEST = 9,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UNDER_NECK = 10,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_SHOULDER = 11,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_UPPER_ARM = 12,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_ELBROW = 13,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_LEFT_WRIST = 14,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_SHOULDER = 15,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_UPPER_ARM = 16,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_ELBROW = 17,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_RIGHT_WRIST = 18,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_NECK = 19,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_HEAD = 20,
    ALT_CWEAPONDAMAGEEVENT_BODYPART_UNKNOWN = 255
};

// cpptype enum alt::CWeaponDamageEvent::BodyPart
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:68:12
    // enum alt::CWeaponDamageEvent::BodyPart bodyPart

typedef struct alt_CWeaponDamageEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer source;
    struct alt_RefBase_RefStore_IEntity target;
    unsigned int weaponHash;
    unsigned short damageValue;
    struct alt_Vector_float_3_VectorLayout_float_3 shotOffset;
    alt_CWeaponDamageEvent_BodyPart bodyPart;
} alt_CWeaponDamageEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// class alt::CWeaponDamageEvent
// functions from class alt::CWeaponDamageEvent
CAPI void alt_CWeaponDamageEvent_free(struct alt_CWeaponDamageEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CWeaponDamageEvent* alt_CEvent_to_alt_CWeaponDamageEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CWeaponDamageEvent_to_alt_CEvent(struct alt_CWeaponDamageEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CWeaponDamageEvent_free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CWeaponDamageEvent_GetType(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CWeaponDamageEvent_WasCancelled(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CWeaponDamageEvent_Cancel(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CWeaponDamageEvent_free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CWeaponDamageEvent_Assign_constCEventRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CWeaponDamageEvent_free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CWeaponDamageEvent_Assign_CEventRefRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:43:3
// alt::CWeaponDamageEvent::CWeaponDamageEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype unsigned int
// fundamental
// cpptype unsigned short
// fundamental
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// Symbol is already defined
// cpptype enum alt::CWeaponDamageEvent::BodyPart
// enumaral type
// Return ptr must be manually freed with alt_CWeaponDamageEvent_free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _source, struct alt_RefBase_RefStore_IEntity* _target, unsigned int _weaponHash, unsigned short _damageValue, struct alt_Vector_float_3_VectorLayout_float_3* _shotOffset, alt_CWeaponDamageEvent_BodyPart _bodyPart);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:55:16
// alt::CWeaponDamageEvent::GetSource
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CWeaponDamageEvent_GetSource(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:56:16
// alt::CWeaponDamageEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CWeaponDamageEvent_GetTarget(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:57:12
// alt::CWeaponDamageEvent::GetWeaponHash
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_CWeaponDamageEvent_GetWeaponHash(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:58:12
// alt::CWeaponDamageEvent::GetDamageValue
// Return type
// cpptype unsigned short
// fundamental
CAPI unsigned short alt_CWeaponDamageEvent_GetDamageValue(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:59:12
// alt::CWeaponDamageEvent::GetShotOffset
// Return type
// cpptype class alt::Vector<float, 3, class alt::VectorLayout<float, 3> >
// Return ptr must be manually freed with alt_Vector_float_3_VectorLayout_float_3_free()
CAPI struct alt_Vector_float_3_VectorLayout_float_3* alt_CWeaponDamageEvent_GetShotOffset(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:60:12
// alt::CWeaponDamageEvent::GetBodyPart
// Return type
// Symbol is already defined
// cpptype enum alt::CWeaponDamageEvent::BodyPart
// enumaral type
CAPI alt_CWeaponDamageEvent_BodyPart alt_CWeaponDamageEvent_GetBodyPart(struct alt_CWeaponDamageEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// alt::CWeaponDamageEvent::CWeaponDamageEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CWeaponDamageEvent &
// Reference type
// cpptype class alt::CWeaponDamageEvent
// Return ptr must be manually freed with alt_CWeaponDamageEvent_free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_4(struct alt_CWeaponDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// alt::CWeaponDamageEvent::CWeaponDamageEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CWeaponDamageEvent &&
// Reference type
// cpptype class alt::CWeaponDamageEvent
// Return ptr must be manually freed with alt_CWeaponDamageEvent_free()
CAPI struct alt_CWeaponDamageEvent* alt_CWeaponDamageEvent_Create_5(struct alt_CWeaponDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// alt::CWeaponDamageEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CWeaponDamageEvent &
// Reference type
// cpptype class alt::CWeaponDamageEvent
// cpptype const class alt::CWeaponDamageEvent &
// Reference type
// cpptype class alt::CWeaponDamageEvent
CAPI void alt_CWeaponDamageEvent_Assign_constCWeaponDamageEventRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CWeaponDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// alt::CWeaponDamageEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CWeaponDamageEvent &
// Reference type
// cpptype class alt::CWeaponDamageEvent
// cpptype class alt::CWeaponDamageEvent &&
// Reference type
// cpptype class alt::CWeaponDamageEvent
CAPI void alt_CWeaponDamageEvent_Assign_CWeaponDamageEventRefRef(struct alt_CWeaponDamageEvent* _instance, struct alt_CWeaponDamageEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CWeaponDamageEvent.h:13:8
// alt::CWeaponDamageEvent::~CWeaponDamageEvent
// Destructor


// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// class alt::CExplosionEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:77:16
    // Ref<class alt::IPlayer> source

typedef enum alt_CExplosionEvent_ExplosionType {
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GRENADE = 0,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GRENADELAUNCHER = 1,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_STICKYBOMB = 2,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_MOLOTOV = 3,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_ROCKET = 4,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TANKSHELL = 5,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_HI_OCTANE = 6,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_CAR = 7,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PLANE = 8,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PETROL_PUMP = 9,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BIKE = 10,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_STEAM = 11,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_FLAME = 12,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_WATER_HYDRANT = 13,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_GAS_CANISTER = 14,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BOAT = 15,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SHIP_DESTROY = 16,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TRUCK = 17,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BULLET = 18,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SMOKEGRENADELAUNCHER = 19,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SMOKEGRENADE = 20,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BZGAS = 21,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_FLARE = 22,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GAS_CANISTER = 23,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_EXTINGUISHER = 24,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROGRAMMABLEAR = 25,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TRAIN = 26,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BARREL = 27,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROPANE = 28,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_BLIMP = 29,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_DIR_FLAME_EXPLODE = 30,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_TANKER = 31,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PLANE_ROCKET = 32,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_VEHICLE_BULLET = 33,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_GAS_TANK = 34,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_FIREWORK = 35,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_SNOWBALL = 36,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_PROXMINE = 37,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_VALKYRIE_CANNON = 38,
    ALT_CEXPLOSIONEVENT_EXPLOSIONTYPE_UNKNOWN = 255
};

// cpptype enum alt::CExplosionEvent::ExplosionType
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:78:17
    // enum alt::CExplosionEvent::ExplosionType explosionType

// cpptype class alt::Vector<float, 3, class alt::PointLayout>
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:79:12
    // alt::Position position

// cpptype unsigned int
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:80:12
    // uint32_t explosionFX

typedef struct alt_CExplosionEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IPlayer source;
    alt_CExplosionEvent_ExplosionType explosionType;
    struct alt_Vector_float_3_PointLayout position;
    unsigned int explosionFX;
} alt_CExplosionEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// class alt::CExplosionEvent
// functions from class alt::CExplosionEvent
CAPI void alt_CExplosionEvent_free(struct alt_CExplosionEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CExplosionEvent* alt_CEvent_to_alt_CExplosionEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CExplosionEvent_to_alt_CEvent(struct alt_CExplosionEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CExplosionEvent_free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CExplosionEvent_GetType(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CExplosionEvent_WasCancelled(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CExplosionEvent_Cancel(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CExplosionEvent_free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CExplosionEvent_Assign_constCEventRef(struct alt_CExplosionEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CExplosionEvent_free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CExplosionEvent_Assign_CEventRefRef(struct alt_CExplosionEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:61:3
// alt::CExplosionEvent::CExplosionEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Symbol is already defined
// cpptype enum alt::CExplosionEvent::ExplosionType
// enumaral type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype unsigned int
// fundamental
// Return ptr must be manually freed with alt_CExplosionEvent_free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_3(struct alt_RefBase_RefStore_IPlayer* _source, alt_CExplosionEvent_ExplosionType _explosionType, struct alt_Vector_float_3_PointLayout* _position, unsigned int _explosionFX);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:71:16
// alt::CExplosionEvent::GetSource
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IPlayer_free()
CAPI struct alt_RefBase_RefStore_IPlayer* alt_CExplosionEvent_GetSource(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:72:17
// alt::CExplosionEvent::GetExplosionType
// Return type
// Symbol is already defined
// cpptype enum alt::CExplosionEvent::ExplosionType
// enumaral type
CAPI alt_CExplosionEvent_ExplosionType alt_CExplosionEvent_GetExplosionType(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:73:12
// alt::CExplosionEvent::GetPosition
// Return type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_Vector_float_3_PointLayout_free()
CAPI struct alt_Vector_float_3_PointLayout* alt_CExplosionEvent_GetPosition(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:74:12
// alt::CExplosionEvent::GetExplosionFX
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_CExplosionEvent_GetExplosionFX(struct alt_CExplosionEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// alt::CExplosionEvent::CExplosionEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CExplosionEvent &
// Reference type
// cpptype class alt::CExplosionEvent
// Return ptr must be manually freed with alt_CExplosionEvent_free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_4(struct alt_CExplosionEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// alt::CExplosionEvent::CExplosionEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CExplosionEvent &&
// Reference type
// cpptype class alt::CExplosionEvent
// Return ptr must be manually freed with alt_CExplosionEvent_free()
CAPI struct alt_CExplosionEvent* alt_CExplosionEvent_Create_5(struct alt_CExplosionEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// alt::CExplosionEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CExplosionEvent &
// Reference type
// cpptype class alt::CExplosionEvent
// cpptype const class alt::CExplosionEvent &
// Reference type
// cpptype class alt::CExplosionEvent
CAPI void alt_CExplosionEvent_Assign_constCExplosionEventRef(struct alt_CExplosionEvent* _instance, struct alt_CExplosionEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// alt::CExplosionEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CExplosionEvent &
// Reference type
// cpptype class alt::CExplosionEvent
// cpptype class alt::CExplosionEvent &&
// Reference type
// cpptype class alt::CExplosionEvent
CAPI void alt_CExplosionEvent_Assign_CExplosionEventRefRef(struct alt_CExplosionEvent* _instance, struct alt_CExplosionEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CExplosionEvent.h:13:8
// alt::CExplosionEvent::~CExplosionEvent
// Destructor


// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:13:8
// class alt::IResource
typedef struct alt_IResource alt_IResource;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:13:8
// class alt::IResource
// functions from class alt::IResource
// has no accessible destructor for 'Free' function

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:42:27
// alt::IResource::GetRuntime
// Return type
// cpptype class alt::IScriptRuntime *
// Pointer type
// cpptype class alt::IScriptRuntime
CAPI struct alt_IScriptRuntime* alt_IResource_GetRuntime(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:43:17
// alt::IResource::GetImpl
// Return type
// cpptype class alt::IResource::Impl *
// Pointer type
// cpptype class alt::IResource::Impl
CAPI struct alt_IResource_Impl* alt_IResource_GetImpl(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:45:16
// alt::IResource::IsStarted
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IResource_IsStarted(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:47:22
// alt::IResource::GetType
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetType(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:48:22
// alt::IResource::GetName
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetName(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:49:22
// alt::IResource::GetPath
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetPath(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:50:22
// alt::IResource::GetMain
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_IResource_GetMain(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:51:21
// alt::IResource::GetPackage
// Return type
// cpptype class alt::IPackage *
// Pointer type
// cpptype class alt::IPackage
CAPI struct alt_IPackage* alt_IResource_GetPackage(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:52:22
// alt::IResource::GetExports
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueDict> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueDict_free()
CAPI struct alt_RefBase_RefStore_IMValueDict* alt_IResource_GetExports(struct alt_IResource* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:54:16
// alt::IResource::SetExports
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueDict> >
CAPI void alt_IResource_SetExports(struct alt_IResource* _instance, struct alt_RefBase_RefStore_IMValueDict* exports);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:57:11
// alt::IResource::~IResource
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:13:8
// alt::IResource::operator=
// Overloaded operator
// Return type
// cpptype class alt::IResource &
// Reference type
// cpptype class alt::IResource
// cpptype const class alt::IResource &
// Reference type
// cpptype class alt::IResource
CAPI void alt_IResource_Assign_constIResourceRef(struct alt_IResource* _instance, struct alt_IResource* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:16:10
// struct alt::IResource::CreationInfo
// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:18:11
    // class alt::String type

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:19:11
    // class alt::String name

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:20:11
    // class alt::String main

// cpptype class alt::IPackage *
// Pointer type
// cpptype class alt::IPackage
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:21:14
    // class alt::IPackage * pkg

typedef struct alt_IResource_CreationInfo {
    struct alt_String type;
    struct alt_String name;
    struct alt_String main;
    struct alt_IPackage* pkg;
} alt_IResource_CreationInfo;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:16:10
// struct alt::IResource::CreationInfo
// functions from struct alt::IResource::CreationInfo
CAPI void alt_IResource_CreationInfo_free(struct alt_IResource_CreationInfo* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:16:10
// alt::IResource::CreationInfo::CreationInfo
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const struct alt::IResource::CreationInfo &
// Reference type
// cpptype struct alt::IResource::CreationInfo
// Return ptr must be manually freed with alt_IResource_CreationInfo_free()
CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create(struct alt_IResource_CreationInfo* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:16:10
// alt::IResource::CreationInfo::CreationInfo
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype struct alt::IResource::CreationInfo &&
// Reference type
// cpptype struct alt::IResource::CreationInfo
// Return ptr must be manually freed with alt_IResource_CreationInfo_free()
CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create_1(struct alt_IResource_CreationInfo* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:16:10
// alt::IResource::CreationInfo::operator=
// Overloaded operator
// Return type
// cpptype struct alt::IResource::CreationInfo &
// Reference type
// cpptype struct alt::IResource::CreationInfo
// cpptype struct alt::IResource::CreationInfo &&
// Reference type
// cpptype struct alt::IResource::CreationInfo
CAPI void alt_IResource_CreationInfo_Assign_IResource_CreationInfoRefRef(struct alt_IResource_CreationInfo* _instance, struct alt_IResource_CreationInfo* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:16:10
// alt::IResource::CreationInfo::~CreationInfo
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:24:9
// class alt::IResource::Impl
typedef struct alt_IResource_Impl alt_IResource_Impl;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:24:9
// class alt::IResource::Impl
// functions from class alt::IResource::Impl
CAPI void alt_IResource_Impl_free(struct alt_IResource_Impl* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:28:17
// alt::IResource::Impl::MakeClient
// Return type
// cpptype _Bool
// fundamental
// cpptype struct alt::IResource::CreationInfo *
// Pointer type
// cpptype struct alt::IResource::CreationInfo
// cpptype class alt::Array<class alt::String>
CAPI _Bool alt_IResource_Impl_MakeClient(struct alt_IResource_Impl* _instance, struct alt_IResource_CreationInfo* info, struct alt_Array_String* files);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:30:17
// alt::IResource::Impl::Start
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IResource_Impl_Start(struct alt_IResource_Impl* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:31:17
// alt::IResource::Impl::Stop
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_IResource_Impl_Stop(struct alt_IResource_Impl* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:33:17
// alt::IResource::Impl::OnEvent
// Return type
// cpptype _Bool
// fundamental
// cpptype const class alt::CEvent *
// Pointer type
// cpptype class alt::CEvent
CAPI _Bool alt_IResource_Impl_OnEvent(struct alt_IResource_Impl* _instance, struct alt_CEvent* ev);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:34:17
// alt::IResource::Impl::OnTick
// Return type
// cpptype void
// fundamental
CAPI void alt_IResource_Impl_OnTick(struct alt_IResource_Impl* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:36:17
// alt::IResource::Impl::OnCreateBaseObject
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
CAPI void alt_IResource_Impl_OnCreateBaseObject(struct alt_IResource_Impl* _instance, struct alt_RefBase_RefStore_IBaseObject* object);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:37:17
// alt::IResource::Impl::OnRemoveBaseObject
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
CAPI void alt_IResource_Impl_OnRemoveBaseObject(struct alt_IResource_Impl* _instance, struct alt_RefBase_RefStore_IBaseObject* object);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:39:12
// alt::IResource::Impl::~Impl
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IResource.h:24:9
// alt::IResource::Impl::operator=
// Overloaded operator
// Return type
// cpptype class alt::IResource::Impl &
// Reference type
// cpptype class alt::IResource::Impl
// cpptype const class alt::IResource::Impl &
// Reference type
// cpptype class alt::IResource::Impl
CAPI void alt_IResource_Impl_Assign_constIResource_ImplRef(struct alt_IResource_Impl* _instance, struct alt_IResource_Impl* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:9:8
// class alt::CResourceStartEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:22:14
    // class alt::IResource * resource

typedef struct alt_CResourceStartEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IResource* resource;
} alt_CResourceStartEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:9:8
// class alt::CResourceStartEvent
// functions from class alt::CResourceStartEvent
CAPI void alt_CResourceStartEvent_free(struct alt_CResourceStartEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CResourceStartEvent* alt_CEvent_to_alt_CResourceStartEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CResourceStartEvent_to_alt_CEvent(struct alt_CResourceStartEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CResourceStartEvent_free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CResourceStartEvent_GetType(struct alt_CResourceStartEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CResourceStartEvent_WasCancelled(struct alt_CResourceStartEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CResourceStartEvent_Cancel(struct alt_CResourceStartEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CResourceStartEvent_free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CResourceStartEvent_Assign_constCEventRef(struct alt_CResourceStartEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CResourceStartEvent_free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CResourceStartEvent_Assign_CEventRefRef(struct alt_CResourceStartEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:12:3
// alt::CResourceStartEvent::CResourceStartEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
// Return ptr must be manually freed with alt_CResourceStartEvent_free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_3(struct alt_IResource* _resource);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:19:14
// alt::CResourceStartEvent::GetResource
// Return type
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
CAPI struct alt_IResource* alt_CResourceStartEvent_GetResource(struct alt_CResourceStartEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:9:8
// alt::CResourceStartEvent::CResourceStartEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CResourceStartEvent &
// Reference type
// cpptype class alt::CResourceStartEvent
// Return ptr must be manually freed with alt_CResourceStartEvent_free()
CAPI struct alt_CResourceStartEvent* alt_CResourceStartEvent_Create_4(struct alt_CResourceStartEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStartEvent.h:9:8
// alt::CResourceStartEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CResourceStartEvent &
// Reference type
// cpptype class alt::CResourceStartEvent
// cpptype const class alt::CResourceStartEvent &
// Reference type
// cpptype class alt::CResourceStartEvent
CAPI void alt_CResourceStartEvent_Assign_constCResourceStartEventRef(struct alt_CResourceStartEvent* _instance, struct alt_CResourceStartEvent* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:9:8
// class alt::CResourceStopEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:22:14
    // class alt::IResource * resource

typedef struct alt_CResourceStopEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IResource* resource;
} alt_CResourceStopEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:9:8
// class alt::CResourceStopEvent
// functions from class alt::CResourceStopEvent
CAPI void alt_CResourceStopEvent_free(struct alt_CResourceStopEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CResourceStopEvent* alt_CEvent_to_alt_CResourceStopEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CResourceStopEvent_to_alt_CEvent(struct alt_CResourceStopEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CResourceStopEvent_free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CResourceStopEvent_GetType(struct alt_CResourceStopEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CResourceStopEvent_WasCancelled(struct alt_CResourceStopEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CResourceStopEvent_Cancel(struct alt_CResourceStopEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CResourceStopEvent_free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CResourceStopEvent_Assign_constCEventRef(struct alt_CResourceStopEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CResourceStopEvent_free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CResourceStopEvent_Assign_CEventRefRef(struct alt_CResourceStopEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:12:3
// alt::CResourceStopEvent::CResourceStopEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
// Return ptr must be manually freed with alt_CResourceStopEvent_free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_3(struct alt_IResource* _resource);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:19:14
// alt::CResourceStopEvent::GetResource
// Return type
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
CAPI struct alt_IResource* alt_CResourceStopEvent_GetResource(struct alt_CResourceStopEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:9:8
// alt::CResourceStopEvent::CResourceStopEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CResourceStopEvent &
// Reference type
// cpptype class alt::CResourceStopEvent
// Return ptr must be manually freed with alt_CResourceStopEvent_free()
CAPI struct alt_CResourceStopEvent* alt_CResourceStopEvent_Create_4(struct alt_CResourceStopEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceStopEvent.h:9:8
// alt::CResourceStopEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CResourceStopEvent &
// Reference type
// cpptype class alt::CResourceStopEvent
// cpptype const class alt::CResourceStopEvent &
// Reference type
// cpptype class alt::CResourceStopEvent
CAPI void alt_CResourceStopEvent_Assign_constCResourceStopEventRef(struct alt_CResourceStopEvent* _instance, struct alt_CResourceStopEvent* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:9:8
// class alt::CResourceErrorEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:22:14
    // class alt::IResource * resource

typedef struct alt_CResourceErrorEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_IResource* resource;
} alt_CResourceErrorEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:9:8
// class alt::CResourceErrorEvent
// functions from class alt::CResourceErrorEvent
CAPI void alt_CResourceErrorEvent_free(struct alt_CResourceErrorEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CResourceErrorEvent* alt_CEvent_to_alt_CResourceErrorEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CResourceErrorEvent_to_alt_CEvent(struct alt_CResourceErrorEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CResourceErrorEvent_free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CResourceErrorEvent_GetType(struct alt_CResourceErrorEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CResourceErrorEvent_WasCancelled(struct alt_CResourceErrorEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CResourceErrorEvent_Cancel(struct alt_CResourceErrorEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CResourceErrorEvent_free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CResourceErrorEvent_Assign_constCEventRef(struct alt_CResourceErrorEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CResourceErrorEvent_free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CResourceErrorEvent_Assign_CEventRefRef(struct alt_CResourceErrorEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:12:3
// alt::CResourceErrorEvent::CResourceErrorEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
// Return ptr must be manually freed with alt_CResourceErrorEvent_free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_3(struct alt_IResource* _resource);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:19:14
// alt::CResourceErrorEvent::GetResource
// Return type
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
CAPI struct alt_IResource* alt_CResourceErrorEvent_GetResource(struct alt_CResourceErrorEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:9:8
// alt::CResourceErrorEvent::CResourceErrorEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CResourceErrorEvent &
// Reference type
// cpptype class alt::CResourceErrorEvent
// Return ptr must be manually freed with alt_CResourceErrorEvent_free()
CAPI struct alt_CResourceErrorEvent* alt_CResourceErrorEvent_Create_4(struct alt_CResourceErrorEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CResourceErrorEvent.h:9:8
// alt::CResourceErrorEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CResourceErrorEvent &
// Reference type
// cpptype class alt::CResourceErrorEvent
// cpptype const class alt::CResourceErrorEvent &
// Reference type
// cpptype class alt::CResourceErrorEvent
CAPI void alt_CResourceErrorEvent_Assign_constCResourceErrorEventRef(struct alt_CResourceErrorEvent* _instance, struct alt_CResourceErrorEvent* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// class alt::CSyncedMetaDataChangeEvent
// derives from class alt::CEvent
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:65:8
    // enum alt::CEvent::Type type

// cpptype _Bool
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:66:16
    // _Bool cancelled

// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:30:16
    // Ref<class alt::IEntity> target

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:31:10
    // class alt::String key

// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:32:10
    // alt::MValue val

typedef struct alt_CSyncedMetaDataChangeEvent {
    alt_CEvent_Type type;
    _Bool cancelled;
    struct alt_RefBase_RefStore_IEntity target;
    struct alt_String key;
    struct alt_RefBase_RefStore_IMValue val;
} alt_CSyncedMetaDataChangeEvent;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// class alt::CSyncedMetaDataChangeEvent
// functions from class alt::CSyncedMetaDataChangeEvent
CAPI void alt_CSyncedMetaDataChangeEvent_free(struct alt_CSyncedMetaDataChangeEvent* ptr);

// functions derived from CEvent

CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CEvent_to_alt_CSyncedMetaDataChangeEvent(struct alt_CEvent* from);

CAPI struct alt_CEvent* alt_CSyncedMetaDataChangeEvent_to_alt_CEvent(struct alt_CSyncedMetaDataChangeEvent* from);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:58:3
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create(alt_CEvent_Type _type);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:60:8
// alt::CEvent::GetType
// Return type
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
CAPI alt_CEvent_Type alt_CSyncedMetaDataChangeEvent_GetType(struct alt_CSyncedMetaDataChangeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:61:8
// alt::CEvent::WasCancelled
// Return type
// cpptype _Bool
// fundamental
CAPI _Bool alt_CSyncedMetaDataChangeEvent_WasCancelled(struct alt_CSyncedMetaDataChangeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:62:8
// alt::CEvent::Cancel
// Return type
// cpptype void
// fundamental
CAPI void alt_CSyncedMetaDataChangeEvent_Cancel(struct alt_CSyncedMetaDataChangeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_1(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype const class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CSyncedMetaDataChangeEvent_Assign_constCEventRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::CEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_2(struct alt_CEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::~CEvent
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CEvent.h:7:8
// alt::CEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CEvent &
// Reference type
// cpptype class alt::CEvent
// cpptype class alt::CEvent &&
// Reference type
// cpptype class alt::CEvent
CAPI void alt_CSyncedMetaDataChangeEvent_Assign_CEventRefRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CEvent* _p0);


// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:16:3
// alt::CSyncedMetaDataChangeEvent::CSyncedMetaDataChangeEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype class alt::StringView
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_3(struct alt_RefBase_RefStore_IEntity* _target, struct alt_StringView* _key, struct alt_RefBase_RefStore_IMValue* _val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:25:16
// alt::CSyncedMetaDataChangeEvent::GetTarget
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_CSyncedMetaDataChangeEvent_GetTarget(struct alt_CSyncedMetaDataChangeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:26:14
// alt::CSyncedMetaDataChangeEvent::GetKey
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_CSyncedMetaDataChangeEvent_GetKey(struct alt_CSyncedMetaDataChangeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:27:10
// alt::CSyncedMetaDataChangeEvent::GetVal
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValue> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValue_free()
CAPI struct alt_RefBase_RefStore_IMValue* alt_CSyncedMetaDataChangeEvent_GetVal(struct alt_CSyncedMetaDataChangeEvent* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// alt::CSyncedMetaDataChangeEvent::CSyncedMetaDataChangeEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const class alt::CSyncedMetaDataChangeEvent &
// Reference type
// cpptype class alt::CSyncedMetaDataChangeEvent
// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_4(struct alt_CSyncedMetaDataChangeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// alt::CSyncedMetaDataChangeEvent::CSyncedMetaDataChangeEvent
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype class alt::CSyncedMetaDataChangeEvent &&
// Reference type
// cpptype class alt::CSyncedMetaDataChangeEvent
// Return ptr must be manually freed with alt_CSyncedMetaDataChangeEvent_free()
CAPI struct alt_CSyncedMetaDataChangeEvent* alt_CSyncedMetaDataChangeEvent_Create_5(struct alt_CSyncedMetaDataChangeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// alt::CSyncedMetaDataChangeEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CSyncedMetaDataChangeEvent &
// Reference type
// cpptype class alt::CSyncedMetaDataChangeEvent
// cpptype const class alt::CSyncedMetaDataChangeEvent &
// Reference type
// cpptype class alt::CSyncedMetaDataChangeEvent
CAPI void alt_CSyncedMetaDataChangeEvent_Assign_constCSyncedMetaDataChangeEventRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CSyncedMetaDataChangeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// alt::CSyncedMetaDataChangeEvent::operator=
// Overloaded operator
// Return type
// cpptype class alt::CSyncedMetaDataChangeEvent &
// Reference type
// cpptype class alt::CSyncedMetaDataChangeEvent
// cpptype class alt::CSyncedMetaDataChangeEvent &&
// Reference type
// cpptype class alt::CSyncedMetaDataChangeEvent
CAPI void alt_CSyncedMetaDataChangeEvent_Assign_CSyncedMetaDataChangeEventRefRef(struct alt_CSyncedMetaDataChangeEvent* _instance, struct alt_CSyncedMetaDataChangeEvent* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/CSyncedMetaDataChangeEvent.h:13:8
// alt::CSyncedMetaDataChangeEvent::~CSyncedMetaDataChangeEvent
// Destructor


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:8:8
// class alt::IPackage
typedef struct alt_IPackage alt_IPackage;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:8:8
// class alt::IPackage
// functions from class alt::IPackage
CAPI void alt_IPackage_free(struct alt_IPackage* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:30:11
// alt::IPackage::~IPackage
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:32:16
// alt::IPackage::GetMode
// Return type
typedef enum alt_IPackage_Mode {
    ALT_IPACKAGE_MODE_READ = 0,
    ALT_IPACKAGE_MODE_WRITE = 1
};

// cpptype enum alt::IPackage::Mode
// enumaral type
CAPI alt_IPackage_Mode alt_IPackage_GetMode(struct alt_IPackage* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:34:16
// alt::IPackage::FileExists
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::StringView
CAPI _Bool alt_IPackage_FileExists(struct alt_IPackage* _instance, struct alt_StringView* path);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:36:17
// alt::IPackage::OpenFile
// Return type
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
// cpptype class alt::StringView
CAPI struct alt_IPackage_File* alt_IPackage_OpenFile(struct alt_IPackage* _instance, struct alt_StringView* path);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:37:16
// alt::IPackage::CloseFile
// Return type
// cpptype void
// fundamental
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
CAPI void alt_IPackage_CloseFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:39:20
// alt::IPackage::GetFileSize
// Return type
// cpptype unsigned long long
// fundamental
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
CAPI unsigned long long alt_IPackage_GetFileSize(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:40:16
// alt::IPackage::SeekFile
// Return type
// cpptype void
// fundamental
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
// cpptype unsigned long long
// fundamental
typedef enum alt_IPackage_SeekOrigin {
    ALT_IPACKAGE_SEEKORIGIN_SET = 0,
    ALT_IPACKAGE_SEEKORIGIN_CUR = 1,
    ALT_IPACKAGE_SEEKORIGIN_END = 2
};

// cpptype enum alt::IPackage::SeekOrigin
// enumaral type
CAPI void alt_IPackage_SeekFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, unsigned long long offset, alt_IPackage_SeekOrigin origin);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:41:20
// alt::IPackage::TellFile
// Return type
// cpptype unsigned long long
// fundamental
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
CAPI unsigned long long alt_IPackage_TellFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:43:20
// alt::IPackage::ReadFile
// Return type
// cpptype unsigned long long
// fundamental
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IPackage_ReadFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:44:20
// alt::IPackage::WriteFile
// Return type
// cpptype unsigned long long
// fundamental
// cpptype class alt::IPackage::File *
// Pointer type
// cpptype class alt::IPackage::File
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// cpptype unsigned long long
// fundamental
CAPI unsigned long long alt_IPackage_WriteFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:47:3
// alt::IPackage::IPackage
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:50:3
// alt::IPackage::IPackage
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:51:13
// alt::IPackage::operator=
// Not public


// Symbol is already defined
// Symbol is already defined
// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:24:9
// class alt::IPackage::File
typedef struct alt_IPackage_File alt_IPackage_File;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:24:9
// class alt::IPackage::File
// functions from class alt::IPackage::File
CAPI void alt_IPackage_File_free(struct alt_IPackage_File* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:27:12
// alt::IPackage::File::~File
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IPackage.h:24:9
// alt::IPackage::File::operator=
// Overloaded operator
// Return type
// cpptype class alt::IPackage::File &
// Reference type
// cpptype class alt::IPackage::File
// cpptype const class alt::IPackage::File &
// Reference type
// cpptype class alt::IPackage::File
CAPI void alt_IPackage_File_Assign_constIPackage_FileRef(struct alt_IPackage_File* _instance, struct alt_IPackage_File* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:10:8
// class alt::IScriptRuntime
typedef struct alt_IScriptRuntime alt_IScriptRuntime;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:10:8
// class alt::IScriptRuntime
// functions from class alt::IScriptRuntime
CAPI void alt_IScriptRuntime_free(struct alt_IScriptRuntime* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:13:11
// alt::IScriptRuntime::~IScriptRuntime
// Destructor

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:15:28
// alt::IScriptRuntime::CreateImpl
// Return type
// cpptype class alt::IResource::Impl *
// Pointer type
// cpptype class alt::IResource::Impl
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
CAPI struct alt_IResource_Impl* alt_IScriptRuntime_CreateImpl(struct alt_IScriptRuntime* _instance, struct alt_IResource* resource);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:16:16
// alt::IScriptRuntime::DestroyImpl
// Return type
// cpptype void
// fundamental
// cpptype class alt::IResource::Impl *
// Pointer type
// cpptype class alt::IResource::Impl
CAPI void alt_IScriptRuntime_DestroyImpl(struct alt_IScriptRuntime* _instance, struct alt_IResource_Impl* impl);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:18:16
// alt::IScriptRuntime::OnTick
// Return type
// cpptype void
// fundamental
CAPI void alt_IScriptRuntime_OnTick(struct alt_IScriptRuntime* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:19:16
// alt::IScriptRuntime::OnDispose
// Return type
// cpptype void
// fundamental
CAPI void alt_IScriptRuntime_OnDispose(struct alt_IScriptRuntime* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/IScriptRuntime.h:10:8
// alt::IScriptRuntime::operator=
// Overloaded operator
// Return type
// cpptype class alt::IScriptRuntime &
// Reference type
// cpptype class alt::IScriptRuntime
// cpptype const class alt::IScriptRuntime &
// Reference type
// cpptype class alt::IScriptRuntime
CAPI void alt_IScriptRuntime_Assign_constIScriptRuntimeRef(struct alt_IScriptRuntime* _instance, struct alt_IScriptRuntime* _p0);


// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:7:9
// struct alt::DiscordOAuth2Token
// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:9:10
    // class alt::String token

// cpptype long long
// fundamental
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:10:11
    // int64_t expires

// cpptype class alt::String
    // D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:11:10
    // class alt::String scopes

typedef struct alt_DiscordOAuth2Token {
    struct alt_String token;
    long long expires;
    struct alt_String scopes;
} alt_DiscordOAuth2Token;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:7:9
// struct alt::DiscordOAuth2Token
// functions from struct alt::DiscordOAuth2Token
CAPI void alt_DiscordOAuth2Token_free(struct alt_DiscordOAuth2Token* ptr);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:7:9
// alt::DiscordOAuth2Token::DiscordOAuth2Token
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype const struct alt::DiscordOAuth2Token &
// Reference type
// cpptype struct alt::DiscordOAuth2Token
// Return ptr must be manually freed with alt_DiscordOAuth2Token_free()
CAPI struct alt_DiscordOAuth2Token* alt_DiscordOAuth2Token_Create(struct alt_DiscordOAuth2Token* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:7:9
// alt::DiscordOAuth2Token::DiscordOAuth2Token
// Constructor
// Return type
// cpptype void
// fundamental
// cpptype struct alt::DiscordOAuth2Token &&
// Reference type
// cpptype struct alt::DiscordOAuth2Token
// Return ptr must be manually freed with alt_DiscordOAuth2Token_free()
CAPI struct alt_DiscordOAuth2Token* alt_DiscordOAuth2Token_Create_1(struct alt_DiscordOAuth2Token* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:7:9
// alt::DiscordOAuth2Token::operator=
// Overloaded operator
// Return type
// cpptype struct alt::DiscordOAuth2Token &
// Reference type
// cpptype struct alt::DiscordOAuth2Token
// cpptype struct alt::DiscordOAuth2Token &&
// Reference type
// cpptype struct alt::DiscordOAuth2Token
CAPI void alt_DiscordOAuth2Token_Assign_DiscordOAuth2TokenRefRef(struct alt_DiscordOAuth2Token* _instance, struct alt_DiscordOAuth2Token* _p0);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:7:9
// alt::DiscordOAuth2Token::~DiscordOAuth2Token
// Destructor


// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/types/Discord.h:14:8
// alt::DiscordOAuth2Callback
// Canonical decl: alt::DiscordOAuth2Callback
// using alt::DiscordOAuth2Callback = void (*)(void *, _Bool, struct alt::DiscordOAuth2Token)
// cpptype void (*)(void *, _Bool, struct alt::DiscordOAuth2Token)
// function pointer
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// cpptype _Bool
// fundamental
// cpptype struct alt::DiscordOAuth2Token
// bad params
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:26:8
// alt::EventCallback
// Canonical decl: alt::EventCallback
// tdtd
// using alt::EventCallback = _Bool (*)(const class alt::CEvent *, void *)
// cpptype _Bool (*)(const class alt::CEvent *, void *)
// function pointer
// cpptype const class alt::CEvent *
// Pointer type
// cpptype class alt::CEvent
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// bad params
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:27:8
// alt::TickCallback
// Canonical decl: alt::TickCallback
// tdtd
// using alt::TickCallback = void (*)(void *)
// cpptype void (*)(void *)
// function pointer
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// bad params
// bad typedef

// Typedef
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:28:8
// alt::CommandCallback
// Canonical decl: alt::CommandCallback
// tdtd
// using alt::CommandCallback = void (*)(class alt::StringView, class alt::Array<class alt::StringView>, void *)
// cpptype void (*)(class alt::StringView, class alt::Array<class alt::StringView>, void *)
// function pointer
// cpptype class alt::StringView
// cpptype class alt::Array<class alt::StringView>
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// bad params
// bad typedef

// Record fields
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:30:8
// class alt::ICore
typedef struct alt_ICore alt_ICore;

// Record methods
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:30:8
// class alt::ICore
// functions from class alt::ICore
// has no accessible destructor for 'Free' function

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:36:16
// alt::ICore::LogInfo
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_ICore_LogInfo(struct alt_ICore* _instance, struct alt_StringView* str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:37:16
// alt::ICore::LogDebug
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_ICore_LogDebug(struct alt_ICore* _instance, struct alt_StringView* str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:38:16
// alt::ICore::LogWarning
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_ICore_LogWarning(struct alt_ICore* _instance, struct alt_StringView* str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:39:16
// alt::ICore::LogError
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_ICore_LogError(struct alt_ICore* _instance, struct alt_StringView* str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:40:16
// alt::ICore::LogColored
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_ICore_LogColored(struct alt_ICore* _instance, struct alt_StringView* str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:42:21
// alt::ICore::CreateMValueNil
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueNil> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueNil_free()
CAPI struct alt_RefBase_RefStore_IMValueNil* alt_ICore_CreateMValueNil(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:43:22
// alt::ICore::CreateMValueBool
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueBool> >
// cpptype _Bool
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueBool_free()
CAPI struct alt_RefBase_RefStore_IMValueBool* alt_ICore_CreateMValueBool(struct alt_ICore* _instance, _Bool val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:44:21
// alt::ICore::CreateMValueInt
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueInt> >
// cpptype long long
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueInt_free()
CAPI struct alt_RefBase_RefStore_IMValueInt* alt_ICore_CreateMValueInt(struct alt_ICore* _instance, long long val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:45:22
// alt::ICore::CreateMValueUInt
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueUInt> >
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueUInt_free()
CAPI struct alt_RefBase_RefStore_IMValueUInt* alt_ICore_CreateMValueUInt(struct alt_ICore* _instance, unsigned long long val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:46:24
// alt::ICore::CreateMValueDouble
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueDouble> >
// cpptype double
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueDouble_free()
CAPI struct alt_RefBase_RefStore_IMValueDouble* alt_ICore_CreateMValueDouble(struct alt_ICore* _instance, double val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:47:24
// alt::ICore::CreateMValueString
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueString> >
// cpptype class alt::String
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueString_free()
CAPI struct alt_RefBase_RefStore_IMValueString* alt_ICore_CreateMValueString(struct alt_ICore* _instance, struct alt_String* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:48:22
// alt::ICore::CreateMValueList
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueList> >
// cpptype unsigned long long
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueList_free()
CAPI struct alt_RefBase_RefStore_IMValueList* alt_ICore_CreateMValueList(struct alt_ICore* _instance, unsigned long long size);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:49:22
// alt::ICore::CreateMValueDict
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueDict> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueDict_free()
CAPI struct alt_RefBase_RefStore_IMValueDict* alt_ICore_CreateMValueDict(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:50:28
// alt::ICore::CreateMValueBaseObject
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueBaseObject> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueBaseObject_free()
CAPI struct alt_RefBase_RefStore_IMValueBaseObject* alt_ICore_CreateMValueBaseObject(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IBaseObject* val);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:51:26
// alt::ICore::CreateMValueFunction
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IMValueFunction> >
// cpptype class alt::IMValueFunction::Impl *
// Pointer type
// cpptype class alt::IMValueFunction::Impl
// Return ptr must be manually freed with alt_RefBase_RefStore_IMValueFunction_free()
CAPI struct alt_RefBase_RefStore_IMValueFunction* alt_ICore_CreateMValueFunction(struct alt_ICore* _instance, struct alt_IMValueFunction_Impl* impl);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:53:20
// alt::ICore::Hash
// Return type
// cpptype unsigned int
// fundamental
// cpptype class alt::StringView
CAPI unsigned int alt_ICore_Hash(struct alt_ICore* _instance, struct alt_StringView* str);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:55:16
// alt::ICore::RegisterScriptRuntime
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::StringView
// cpptype class alt::IScriptRuntime *
// Pointer type
// cpptype class alt::IScriptRuntime
CAPI _Bool alt_ICore_RegisterScriptRuntime(struct alt_ICore* _instance, struct alt_StringView* resourceType, struct alt_IScriptRuntime* runtime);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:57:16
// alt::ICore::SubscribeEvent
// Return type
// cpptype void
// fundamental
// Symbol is already defined
// cpptype enum alt::CEvent::Type
// enumaral type
// cpptype _Bool (*)(const class alt::CEvent *, void *)
// function pointer
// cpptype const class alt::CEvent *
// Pointer type
// cpptype class alt::CEvent
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// bad params
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:58:16
// alt::ICore::SubscribeTick
// Return type
// cpptype void
// fundamental
// cpptype void (*)(void *)
// function pointer
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// bad params
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:59:16
// alt::ICore::SubscribeCommand
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::StringView
// cpptype void (*)(class alt::StringView, class alt::Array<class alt::StringView>, void *)
// function pointer
// cpptype class alt::StringView
// cpptype class alt::Array<class alt::StringView>
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// bad params
// cpptype void *
// Pointer type
// cpptype void
// fundamental
// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:61:16
// alt::ICore::FileExists
// Return type
// cpptype _Bool
// fundamental
// cpptype class alt::StringView
CAPI _Bool alt_ICore_FileExists(struct alt_ICore* _instance, struct alt_StringView* path);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:62:18
// alt::ICore::FileRead
// Return type
// cpptype class alt::String
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_String_free()
CAPI struct alt_String* alt_ICore_FileRead(struct alt_ICore* _instance, struct alt_StringView* path);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:64:22
// alt::ICore::GetResource
// Return type
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
// cpptype class alt::StringView
CAPI struct alt_IResource* alt_ICore_GetResource(struct alt_ICore* _instance, struct alt_StringView* name);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:66:24
// alt::ICore::GetEntityByID
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// cpptype unsigned short
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IEntity_free()
CAPI struct alt_RefBase_RefStore_IEntity* alt_ICore_GetEntityByID(struct alt_ICore* _instance, unsigned short id);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:68:31
// alt::ICore::GetEntities
// Return type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<class alt::IEntity> > >
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IEntity_free()
CAPI struct alt_Array_RefBase_RefStore_IEntity* alt_ICore_GetEntities(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:69:31
// alt::ICore::GetPlayers
// Return type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<class alt::IPlayer> > >
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IPlayer_free()
CAPI struct alt_Array_RefBase_RefStore_IPlayer* alt_ICore_GetPlayers(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:70:32
// alt::ICore::GetVehicles
// Return type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<class alt::IVehicle> > >
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IVehicle_free()
CAPI struct alt_Array_RefBase_RefStore_IVehicle* alt_ICore_GetVehicles(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:72:16
// alt::ICore::TriggerLocalEvent
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI void alt_ICore_TriggerLocalEvent(struct alt_ICore* _instance, struct alt_StringView* ev, struct alt_Array_RefBase_RefStore_constIMValue* args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:79:22
// alt::ICore::GetRootDirectory
// Return type
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_StringView_free()
CAPI struct alt_StringView* alt_ICore_GetRootDirectory(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:81:22
// alt::ICore::StartResource
// Return type
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
// cpptype class alt::StringView
CAPI struct alt_IResource* alt_ICore_StartResource(struct alt_ICore* _instance, struct alt_StringView* name);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:82:16
// alt::ICore::StopResource
// Return type
// cpptype void
// fundamental
// cpptype class alt::StringView
CAPI void alt_ICore_StopResource(struct alt_ICore* _instance, struct alt_StringView* name);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:83:22
// alt::ICore::RestartResource
// Return type
// cpptype class alt::IResource *
// Pointer type
// cpptype class alt::IResource
// cpptype class alt::StringView
CAPI struct alt_IResource* alt_ICore_RestartResource(struct alt_ICore* _instance, struct alt_StringView* name);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:85:16
// alt::ICore::TriggerClientEvent
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// cpptype class alt::StringView
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<const class alt::IMValue> > >
CAPI void alt_ICore_TriggerClientEvent(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, struct alt_StringView* ev, struct alt_Array_RefBase_RefStore_constIMValue* args);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:87:25
// alt::ICore::CreateVehicle
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVehicle> >
// cpptype unsigned int
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype class alt::Vector<float, 3, class alt::RotationLayout>
// Return ptr must be manually freed with alt_RefBase_RefStore_IVehicle_free()
CAPI struct alt_RefBase_RefStore_IVehicle* alt_ICore_CreateVehicle(struct alt_ICore* _instance, unsigned int model, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_RotationLayout* rot);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:90:28
// alt::ICore::CreateCheckpoint
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::ICheckpoint> >
// cpptype unsigned char
// fundamental
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype struct alt::RGBA
// Return ptr must be manually freed with alt_RefBase_RefStore_ICheckpoint_free()
CAPI struct alt_RefBase_RefStore_ICheckpoint* alt_ICore_CreateCheckpoint(struct alt_ICore* _instance, unsigned char type, struct alt_Vector_float_3_PointLayout* pos, float radius, float height, struct alt_RGBA* color);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:92:22
// alt::ICore::CreateBlip
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBlip> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Symbol is already defined
// cpptype enum alt::IBlip::BlipType
// enumaral type
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_RefBase_RefStore_IBlip_free()
CAPI struct alt_RefBase_RefStore_IBlip* alt_ICore_CreateBlip(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, alt_IBlip_BlipType type, struct alt_Vector_float_3_PointLayout* pos);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:93:22
// alt::ICore::CreateBlip
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBlip> >
// cpptype class alt::RefBase<class alt::RefStore<class alt::IPlayer> >
// Symbol is already defined
// cpptype enum alt::IBlip::BlipType
// enumaral type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IEntity> >
// Return ptr must be manually freed with alt_RefBase_RefStore_IBlip_free()
CAPI struct alt_RefBase_RefStore_IBlip* alt_ICore_CreateBlip_1(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IPlayer* target, alt_IBlip_BlipType type, struct alt_RefBase_RefStore_IEntity* attachTo);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:95:30
// alt::ICore::CreateVoiceChannel
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IVoiceChannel> >
// cpptype _Bool
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IVoiceChannel_free()
CAPI struct alt_RefBase_RefStore_IVoiceChannel* alt_ICore_CreateVoiceChannel(struct alt_ICore* _instance, _Bool spatial, float maxDistance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:97:26
// alt::ICore::CreateColShapeCylinder
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeCylinder(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius, float height);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:98:26
// alt::ICore::CreateColShapeSphere
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeSphere(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:99:26
// alt::ICore::CreateColShapeCircle
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeCircle(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:100:26
// alt::ICore::CreateColShapeCube
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// cpptype class alt::Vector<float, 3, class alt::PointLayout>
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeCube(struct alt_ICore* _instance, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_PointLayout* pos2);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:101:26
// alt::ICore::CreateColShapeRectangle
// Return type
// cpptype class alt::RefBase<class alt::RefStore<class alt::IColShape> >
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// cpptype float
// fundamental
// Return ptr must be manually freed with alt_RefBase_RefStore_IColShape_free()
CAPI struct alt_RefBase_RefStore_IColShape* alt_ICore_CreateColShapeRectangle(struct alt_ICore* _instance, float x1, float y1, float x2, float y2, float z);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:103:16
// alt::ICore::DestroyBaseObject
// Return type
// cpptype void
// fundamental
// cpptype class alt::RefBase<class alt::RefStore<class alt::IBaseObject> >
CAPI void alt_ICore_DestroyBaseObject(struct alt_ICore* _instance, struct alt_RefBase_RefStore_IBaseObject* handle);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:105:31
// alt::ICore::GetPlayersByName
// Return type
// cpptype class alt::Array<class alt::RefBase<class alt::RefStore<class alt::IPlayer> > >
// cpptype class alt::StringView
// Return ptr must be manually freed with alt_Array_RefBase_RefStore_IPlayer_free()
CAPI struct alt_Array_RefBase_RefStore_IPlayer* alt_ICore_GetPlayersByName(struct alt_ICore* _instance, struct alt_StringView* name);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:107:20
// alt::ICore::GetNetTime
// Return type
// cpptype unsigned int
// fundamental
CAPI unsigned int alt_ICore_GetNetTime(struct alt_ICore* _instance);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:110:17
// alt::ICore::Instance
// Return type
// cpptype class alt::ICore &
// Reference type
// cpptype class alt::ICore
// Static method
CAPI struct alt_ICore* alt_ICore_Instance();

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:111:15
// alt::ICore::SetInstance
// Return type
// cpptype void
// fundamental
// Static method
// cpptype class alt::ICore *
// Pointer type
// cpptype class alt::ICore
CAPI void alt_ICore_SetInstance(struct alt_ICore* server);

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:114:11
// alt::ICore::~ICore
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:117:18
// alt::ICore::_instance
// Not public

// Method
// D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/ICore.h:30:8
// alt::ICore::operator=
// Overloaded operator
// Return type
// cpptype class alt::ICore &
// Reference type
// cpptype class alt::ICore
// cpptype const class alt::ICore &
// Reference type
// cpptype class alt::ICore
CAPI void alt_ICore_Assign_constICoreRef(struct alt_ICore* _instance, struct alt_ICore* _p0);




#include "../altv-capi-extra.h"

#endif // _CAPI_H_
