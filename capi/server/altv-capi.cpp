
/**
 * THIS HEADER IS AUTOGENERATED
 * Aug 27 2019 03:29:21
 * 
 * Source implementation for alt:V C API
 */


#include "altv-capi-sourcedefs.hpp"

using namespace alt;

CAPI void alt_VectorLayout_float_4_free(struct alt_VectorLayout_float_4* ptr)
{
    delete (class alt::VectorLayout<float, 4> *)ptr;
}

CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create()
{
    return (struct alt_VectorLayout_float_4*)new alt::VectorLayout<float, 4>();
}

CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_1(float* _elements)
{
    return (struct alt_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((float const (&)[4])_elements);
}

CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_2(float* el)
{
    return (struct alt_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((const float &)el);
}

CAPI float* alt_VectorLayout_float_4_Access_size_t(struct alt_VectorLayout_float_4* _instance, unsigned long long key)
{
    return (float*)&((alt::VectorLayout<float, 4> *)_instance)->operator[]((unsigned long long)key);
}

CAPI float* alt_VectorLayout_float_4_Access_size_t_1(struct alt_VectorLayout_float_4* _instance, unsigned long long key)
{
    return (float*)&((alt::VectorLayout<float, 4> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0)
{
    return (struct alt_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((const class alt::VectorLayout<float, 4> &)_p0);
}

CAPI struct alt_VectorLayout_float_4* alt_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0)
{
    return (struct alt_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((class alt::VectorLayout<float, 4> &&)_p0);
}

CAPI void alt_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0)
{
    ((alt::VectorLayout<float, 4> *)_instance)->operator=((const class alt::VectorLayout<float, 4> &)_p0);
}

CAPI void alt_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0)
{
    ((alt::VectorLayout<float, 4> *)_instance)->operator=((class alt::VectorLayout<float, 4> &&)_p0);
}

CAPI void alt_Vector_float_4_VectorLayout_float_4_free(struct alt_Vector_float_4_VectorLayout_float_4* ptr)
{
    delete (class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > *)ptr;
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create()
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::VectorLayout<float, 4>();
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_1(float* _elements)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((float const (&)[4])_elements);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_2(float* el)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((const float &)el);
}

CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key)
{
    return (float*)&static_cast<alt::VectorLayout<float, 4> *>((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->operator[]((unsigned long long)key);
}

CAPI float* alt_Vector_float_4_VectorLayout_float_4_Access_size_t_1(struct alt_Vector_float_4_VectorLayout_float_4* _instance, unsigned long long key)
{
    return (float*)&static_cast<alt::VectorLayout<float, 4> *>((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_3(struct alt_VectorLayout_float_4* _p0)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((const class alt::VectorLayout<float, 4> &)_p0);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_4(struct alt_VectorLayout_float_4* _p0)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::VectorLayout<float, 4>((class alt::VectorLayout<float, 4> &&)_p0);
}

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0)
{
    static_cast<alt::VectorLayout<float, 4> *>((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->operator=((const class alt::VectorLayout<float, 4> &)_p0);
}

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_VectorLayout_float_4* _p0)
{
    static_cast<alt::VectorLayout<float, 4> *>((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->operator=((class alt::VectorLayout<float, 4> &&)_p0);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_5()
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::Vector<float, 4, alt::VectorLayout<float, 4> >();
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_6(float* _elements)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::Vector<float, 4, alt::VectorLayout<float, 4> >((float const (&)[4])_elements);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_7(struct alt_VectorLayout_float_4* layout)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::Vector<float, 4, alt::VectorLayout<float, 4> >((const class alt::VectorLayout<float, 4> &)layout);
}

CAPI float alt_Vector_float_4_VectorLayout_float_4_LengthSqr(struct alt_Vector_float_4_VectorLayout_float_4* _instance)
{
    return (float)((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->LengthSqr();
}

CAPI float alt_Vector_float_4_VectorLayout_float_4_Length(struct alt_Vector_float_4_VectorLayout_float_4* _instance)
{
    return (float)((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->Length();
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_8(struct alt_Vector_float_4_VectorLayout_float_4* _p0)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::Vector<float, 4, alt::VectorLayout<float, 4> >((const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)_p0);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_Vector_float_4_VectorLayout_float_4_Create_9(struct alt_Vector_float_4_VectorLayout_float_4* _p0)
{
    return (struct alt_Vector_float_4_VectorLayout_float_4*)new alt::Vector<float, 4, alt::VectorLayout<float, 4> >((class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &&)_p0);
}

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_constVector_float_4_VectorLayout_float_4Ref(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0)
{
    ((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->operator=((const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)_p0);
}

CAPI void alt_Vector_float_4_VectorLayout_float_4_Assign_Vector_float_4_VectorLayout_float_4RefRef(struct alt_Vector_float_4_VectorLayout_float_4* _instance, struct alt_Vector_float_4_VectorLayout_float_4* _p0)
{
    ((alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)_instance)->operator=((class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &&)_p0);
}

CAPI void alt_PointLayout_free(struct alt_PointLayout* ptr)
{
    delete (class alt::PointLayout *)ptr;
}

CAPI struct alt_PointLayout* alt_PointLayout_Create()
{
    return (struct alt_PointLayout*)new alt::PointLayout();
}

CAPI struct alt_PointLayout* alt_PointLayout_Create_1(float _x, float _y, float _z)
{
    return (struct alt_PointLayout*)new alt::PointLayout((float)_x, (float)_y, (float)_z);
}

CAPI struct alt_PointLayout* alt_PointLayout_Create_2(float* elements)
{
    return (struct alt_PointLayout*)new alt::PointLayout((float const (&)[3])elements);
}

CAPI float* alt_PointLayout_Access_size_t(struct alt_PointLayout* _instance, unsigned long long key)
{
    return (float*)&((alt::PointLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI float* alt_PointLayout_Access_size_t_1(struct alt_PointLayout* _instance, unsigned long long key)
{
    return (float*)&((alt::PointLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_PointLayout* alt_PointLayout_Create_3(struct alt_PointLayout* _p0)
{
    return (struct alt_PointLayout*)new alt::PointLayout((const class alt::PointLayout &)_p0);
}

CAPI struct alt_PointLayout* alt_PointLayout_Create_4(struct alt_PointLayout* _p0)
{
    return (struct alt_PointLayout*)new alt::PointLayout((class alt::PointLayout &&)_p0);
}

CAPI void alt_PointPaddedLayout_free(struct alt_PointPaddedLayout* ptr)
{
    delete (class alt::PointPaddedLayout *)ptr;
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create()
{
    return (struct alt_PointPaddedLayout*)new alt::PointLayout();
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_1(float _x, float _y, float _z)
{
    return (struct alt_PointPaddedLayout*)new alt::PointLayout((float)_x, (float)_y, (float)_z);
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_2(float* elements)
{
    return (struct alt_PointPaddedLayout*)new alt::PointLayout((float const (&)[3])elements);
}

CAPI float* alt_PointPaddedLayout_Access_size_t(struct alt_PointPaddedLayout* _instance, unsigned long long key)
{
    return (float*)&static_cast<alt::PointLayout *>((alt::PointPaddedLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI float* alt_PointPaddedLayout_Access_size_t_1(struct alt_PointPaddedLayout* _instance, unsigned long long key)
{
    return (float*)&static_cast<alt::PointLayout *>((alt::PointPaddedLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_3(struct alt_PointLayout* _p0)
{
    return (struct alt_PointPaddedLayout*)new alt::PointLayout((const class alt::PointLayout &)_p0);
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_4(struct alt_PointLayout* _p0)
{
    return (struct alt_PointPaddedLayout*)new alt::PointLayout((class alt::PointLayout &&)_p0);
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_5()
{
    return (struct alt_PointPaddedLayout*)new alt::PointPaddedLayout();
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_6(float x, float y, float z)
{
    return (struct alt_PointPaddedLayout*)new alt::PointPaddedLayout((float)x, (float)y, (float)z);
}

CAPI struct alt_PointPaddedLayout* alt_PointPaddedLayout_Create_7(float* elements)
{
    return (struct alt_PointPaddedLayout*)new alt::PointPaddedLayout((float const (&)[3])elements);
}

CAPI void alt_RotationLayout_free(struct alt_RotationLayout* ptr)
{
    delete (class alt::RotationLayout *)ptr;
}

CAPI struct alt_RotationLayout* alt_RotationLayout_Create(float _roll, float _pitch, float _yaw)
{
    return (struct alt_RotationLayout*)new alt::RotationLayout((float)_roll, (float)_pitch, (float)_yaw);
}

CAPI struct alt_RotationLayout* alt_RotationLayout_Create_1()
{
    return (struct alt_RotationLayout*)new alt::RotationLayout();
}

CAPI struct alt_RotationLayout* alt_RotationLayout_Create_2(float* elements)
{
    return (struct alt_RotationLayout*)new alt::RotationLayout((float const (&)[3])elements);
}

CAPI float* alt_RotationLayout_Access_size_t(struct alt_RotationLayout* _instance, unsigned long long key)
{
    return (float*)&((alt::RotationLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI float* alt_RotationLayout_Access_size_t_1(struct alt_RotationLayout* _instance, unsigned long long key)
{
    return (float*)&((alt::RotationLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI void alt_RotationLayout_Normalize(struct alt_RotationLayout* _instance)
{
    ((alt::RotationLayout *)_instance)->Normalize();
}

CAPI struct alt_RotationLayout* alt_RotationLayout_Create_3(struct alt_RotationLayout* _p0)
{
    return (struct alt_RotationLayout*)new alt::RotationLayout((const class alt::RotationLayout &)_p0);
}

CAPI struct alt_RotationLayout* alt_RotationLayout_Create_4(struct alt_RotationLayout* _p0)
{
    return (struct alt_RotationLayout*)new alt::RotationLayout((class alt::RotationLayout &&)_p0);
}

CAPI void alt_RotationPaddedLayout_free(struct alt_RotationPaddedLayout* ptr)
{
    delete (class alt::RotationPaddedLayout *)ptr;
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create(float _roll, float _pitch, float _yaw)
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationLayout((float)_roll, (float)_pitch, (float)_yaw);
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_1()
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationLayout();
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_2(float* elements)
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationLayout((float const (&)[3])elements);
}

CAPI float* alt_RotationPaddedLayout_Access_size_t(struct alt_RotationPaddedLayout* _instance, unsigned long long key)
{
    return (float*)&static_cast<alt::RotationLayout *>((alt::RotationPaddedLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI float* alt_RotationPaddedLayout_Access_size_t_1(struct alt_RotationPaddedLayout* _instance, unsigned long long key)
{
    return (float*)&static_cast<alt::RotationLayout *>((alt::RotationPaddedLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI void alt_RotationPaddedLayout_Normalize(struct alt_RotationPaddedLayout* _instance)
{
    static_cast<alt::RotationLayout *>((alt::RotationPaddedLayout *)_instance)->Normalize();
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_3(struct alt_RotationLayout* _p0)
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationLayout((const class alt::RotationLayout &)_p0);
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_4(struct alt_RotationLayout* _p0)
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationLayout((class alt::RotationLayout &&)_p0);
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_5()
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationPaddedLayout();
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_6(float roll, float pitch, float yaw)
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationPaddedLayout((float)roll, (float)pitch, (float)yaw);
}

CAPI struct alt_RotationPaddedLayout* alt_RotationPaddedLayout_Create_7(float* elements)
{
    return (struct alt_RotationPaddedLayout*)new alt::RotationPaddedLayout((float const (&)[3])elements);
}

CAPI void alt_ViewMatrixLayout_free(struct alt_ViewMatrixLayout* ptr)
{
    delete (class alt::ViewMatrixLayout *)ptr;
}

CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create()
{
    return (struct alt_ViewMatrixLayout*)new alt::ViewMatrixLayout();
}

CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_1(struct alt_Vector_float_4_VectorLayout_float_4* _rows)
{
    return (struct alt_ViewMatrixLayout*)new alt::ViewMatrixLayout((class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > const (&)[4])_rows);
}

CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_2(struct alt_Vector_float_4_VectorLayout_float_4* row)
{
    return (struct alt_ViewMatrixLayout*)new alt::ViewMatrixLayout((const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)row);
}

CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_3(float* elements)
{
    return (struct alt_ViewMatrixLayout*)new alt::ViewMatrixLayout((float const (&)[16])elements);
}

CAPI struct alt_ViewMatrixLayout* alt_ViewMatrixLayout_Create_4(struct alt_Vector_float_4_VectorLayout_float_4* _right, struct alt_Vector_float_4_VectorLayout_float_4* _up, struct alt_Vector_float_4_VectorLayout_float_4* _forward, struct alt_Vector_float_4_VectorLayout_float_4* _pos)
{
    return (struct alt_ViewMatrixLayout*)new alt::ViewMatrixLayout((const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)_right, (const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)_up, (const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)_forward, (const class alt::Vector<float, 4, class alt::VectorLayout<float, 4> > &)_pos);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t(struct alt_ViewMatrixLayout* _instance, unsigned long long key)
{
    return (alt_Vector_float_4_VectorLayout_float_4*)&((alt::ViewMatrixLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_Vector_float_4_VectorLayout_float_4* alt_ViewMatrixLayout_Access_size_t_1(struct alt_ViewMatrixLayout* _instance, unsigned long long key)
{
    return (alt_Vector_float_4_VectorLayout_float_4*)&((alt::ViewMatrixLayout *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_String* alt_String_Create(unsigned long long _size, char fill)
{
    return (struct alt_String*)new alt::String((unsigned long long)_size, (char)fill);
}

CAPI struct alt_String* alt_String_Create_1(char* _data, unsigned long long size)
{
    return (struct alt_String*)new alt::String((const char *)_data, (unsigned long long)size);
}

CAPI struct alt_String* alt_String_Create_2()
{
    return (struct alt_String*)new alt::String();
}

CAPI struct alt_String* alt_String_Create_3(char* _str)
{
    return (struct alt_String*)new alt::String((const char *)_str);
}

CAPI struct alt_String* alt_String_Create_5(struct alt_String* that)
{
    return (struct alt_String*)new alt::String((const class alt::String &)that);
}

CAPI struct alt_String* alt_String_Create_6(struct alt_String* that)
{
    return (struct alt_String*)new alt::String((class alt::String &&)that);
}

CAPI char* alt_String_Access_uint64_t(struct alt_String* _instance, unsigned long long key)
{
    return (char*)&((alt::String *)_instance)->operator[]((unsigned long long)key);
}

CAPI char alt_String_Access_uint64_t_1(struct alt_String* _instance, unsigned long long key)
{
    return (char)((alt::String *)_instance)->operator[]((unsigned long long)key);
}

CAPI void alt_String_Assign_constStringRef(struct alt_String* _instance, struct alt_String* that)
{
    ((alt::String *)_instance)->operator=((const class alt::String &)that);
}

CAPI void alt_String_Assign_StringRefRef(struct alt_String* _instance, struct alt_String* that)
{
    ((alt::String *)_instance)->operator=((class alt::String &&)that);
}

CAPI _Bool alt_String_IsEmpty(struct alt_String* _instance)
{
    return (_Bool)((alt::String *)_instance)->IsEmpty();
}

CAPI char* alt_String_GetData(struct alt_String* _instance)
{
    return (char*)((alt::String *)_instance)->GetData();
}

CAPI char* alt_String_GetData_1(struct alt_String* _instance)
{
    return (char*)((alt::String *)_instance)->GetData();
}

CAPI unsigned long long alt_String_GetSize(struct alt_String* _instance)
{
    return (unsigned long long)((alt::String *)_instance)->GetSize();
}

CAPI _Bool alt_String_Equals_String(struct alt_String* _instance, struct alt_String* that)
{
    return (_Bool)((alt::String *)_instance)->operator==(*(class alt::String*)that);
}

CAPI _Bool alt_String_NotEquals_String(struct alt_String* _instance, struct alt_String* that)
{
    return (_Bool)((alt::String *)_instance)->operator!=(*(class alt::String*)that);
}

CAPI char* alt_String_CStr(struct alt_String* _instance)
{
    return (char*)((alt::String *)_instance)->CStr();
}

CAPI void alt_StringView_free(struct alt_StringView* ptr)
{
    delete (class alt::StringView *)ptr;
}

CAPI struct alt_StringView* alt_StringView_Create(char* _data, unsigned long long _size)
{
    return (struct alt_StringView*)new alt::StringView((const char *)_data, (unsigned long long)_size);
}

CAPI struct alt_StringView* alt_StringView_Create_1()
{
    return (struct alt_StringView*)new alt::StringView();
}

CAPI struct alt_StringView* alt_StringView_Create_2(char* _str)
{
    return (struct alt_StringView*)new alt::StringView((const char *)_str);
}

CAPI struct alt_StringView* alt_StringView_Create_4(struct alt_String* _str)
{
    return (struct alt_StringView*)new alt::StringView((const class alt::String &)_str);
}

CAPI _Bool alt_StringView_IsEmpty(struct alt_StringView* _instance)
{
    return (_Bool)((alt::StringView *)_instance)->IsEmpty();
}

CAPI char* alt_StringView_GetData(struct alt_StringView* _instance)
{
    return (char*)((alt::StringView *)_instance)->GetData();
}

CAPI unsigned long long alt_StringView_GetSize(struct alt_StringView* _instance)
{
    return (unsigned long long)((alt::StringView *)_instance)->GetSize();
}

CAPI char alt_StringView_Access_uint64_t(struct alt_StringView* _instance, unsigned long long key)
{
    return (char)((alt::StringView *)_instance)->operator[]((unsigned long long)key);
}

CAPI _Bool alt_StringView_Equals_StringView(struct alt_StringView* _instance, struct alt_StringView* that)
{
    return (_Bool)((alt::StringView *)_instance)->operator==(*(class alt::StringView*)that);
}

CAPI _Bool alt_StringView_NotEquals_StringView(struct alt_StringView* _instance, struct alt_StringView* that)
{
    return (_Bool)((alt::StringView *)_instance)->operator!=(*(class alt::StringView*)that);
}

CAPI struct alt_String* alt_StringView_To_String(struct alt_StringView* _instance)
{
    return (alt_String*)new class alt::String(((alt::StringView *)_instance)->operator String());
}

CAPI char* alt_StringView_CStr(struct alt_StringView* _instance)
{
    return (char*)((alt::StringView *)_instance)->CStr();
}

CAPI struct alt_StringView* alt_StringView_Create_6(struct alt_StringView* _p0)
{
    return (struct alt_StringView*)new alt::StringView((const class alt::StringView &)_p0);
}

CAPI struct alt_StringView* alt_StringView_Create_7(struct alt_StringView* _p0)
{
    return (struct alt_StringView*)new alt::StringView((class alt::StringView &&)_p0);
}

CAPI void alt_StringView_Assign_constStringViewRef(struct alt_StringView* _instance, struct alt_StringView* _p0)
{
    ((alt::StringView *)_instance)->operator=((const class alt::StringView &)_p0);
}

CAPI void alt_StringView_Assign_StringViewRefRef(struct alt_StringView* _instance, struct alt_StringView* _p0)
{
    ((alt::StringView *)_instance)->operator=((class alt::StringView &&)_p0);
}

CAPI void alt_RGBA_free(struct alt_RGBA* ptr)
{
    delete (struct alt::RGBA *)ptr;
}

CAPI struct alt_RGBA* alt_RGBA_Create()
{
    return (struct alt_RGBA*)new alt::RGBA();
}

CAPI struct alt_RGBA* alt_RGBA_Create_1(unsigned char _r, unsigned char _g, unsigned char _b, unsigned char _a)
{
    return (struct alt_RGBA*)new alt::RGBA((unsigned char)_r, (unsigned char)_g, (unsigned char)_b, (unsigned char)_a);
}

CAPI struct alt_Array_MValue* alt_Array_MValue_Create()
{
    return (struct alt_Array_MValue*)new alt::Array<alt::MValue>();
}

CAPI struct alt_Array_MValue* alt_Array_MValue_Create_1(struct alt_MValue* _data, unsigned long long _size)
{
    return (struct alt_Array_MValue*)new alt::Array<alt::MValue>((const class alt::MValue *)_data, (unsigned long long)_size);
}

CAPI struct alt_Array_MValue* alt_Array_MValue_Create_2(unsigned long long _size, struct alt_MValue* fill)
{
    return (struct alt_Array_MValue*)new alt::Array<alt::MValue>((unsigned long long)_size, (const class alt::MValue &)fill);
}

CAPI struct alt_Array_MValue* alt_Array_MValue_Create_3(struct alt_Array_MValue* that)
{
    return (struct alt_Array_MValue*)new alt::Array<alt::MValue>((const class alt::Array<class alt::MValue> &)that);
}

CAPI struct alt_Array_MValue* alt_Array_MValue_Create_4(struct alt_Array_MValue* that)
{
    return (struct alt_Array_MValue*)new alt::Array<alt::MValue>((class alt::Array<class alt::MValue> &&)that);
}

CAPI void alt_Array_MValue_Assign_constArray_MValueRef(struct alt_Array_MValue* _instance, struct alt_Array_MValue* that)
{
    ((alt::Array<alt::MValue> *)_instance)->operator=((const class alt::Array<class alt::MValue> &)that);
}

CAPI void alt_Array_MValue_Assign_Array_MValueRefRef(struct alt_Array_MValue* _instance, struct alt_Array_MValue* that)
{
    ((alt::Array<alt::MValue> *)_instance)->operator=((class alt::Array<class alt::MValue> &&)that);
}

CAPI void alt_Array_MValue_Push(struct alt_Array_MValue* _instance, struct alt_MValue* el)
{
    ((alt::Array<alt::MValue> *)_instance)->Push((const class alt::MValue &)el);
}

CAPI unsigned long long alt_Array_MValue_GetSize(struct alt_Array_MValue* _instance)
{
    return (unsigned long long)((alt::Array<alt::MValue> *)_instance)->GetSize();
}

CAPI unsigned long long alt_Array_MValue_GetCapacity(struct alt_Array_MValue* _instance)
{
    return (unsigned long long)((alt::Array<alt::MValue> *)_instance)->GetCapacity();
}

CAPI struct alt_MValue* alt_Array_MValue_Access_uint64_t(struct alt_Array_MValue* _instance, unsigned long long key)
{
    return (alt_MValue*)&((alt::Array<alt::MValue> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_MValue* alt_Array_MValue_Access_uint64_t_1(struct alt_Array_MValue* _instance, unsigned long long key)
{
    return (alt_MValue*)&((alt::Array<alt::MValue> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_MValue* alt_Array_MValue_begin(struct alt_Array_MValue* _instance)
{
    return (alt_MValue*)((alt::Array<alt::MValue> *)_instance)->begin();
}

CAPI struct alt_MValue* alt_Array_MValue_begin_1(struct alt_Array_MValue* _instance)
{
    return (alt_MValue*)((alt::Array<alt::MValue> *)_instance)->begin();
}

CAPI struct alt_MValue* alt_Array_MValue_end(struct alt_Array_MValue* _instance)
{
    return (alt_MValue*)((alt::Array<alt::MValue> *)_instance)->end();
}

CAPI struct alt_MValue* alt_Array_MValue_end_1(struct alt_Array_MValue* _instance)
{
    return (alt_MValue*)((alt::Array<alt::MValue> *)_instance)->end();
}

CAPI struct alt_Array_String* alt_Array_String_Create()
{
    return (struct alt_Array_String*)new alt::Array<alt::String>();
}

CAPI struct alt_Array_String* alt_Array_String_Create_1(struct alt_String* _data, unsigned long long _size)
{
    return (struct alt_Array_String*)new alt::Array<alt::String>((const class alt::String *)_data, (unsigned long long)_size);
}

CAPI struct alt_Array_String* alt_Array_String_Create_2(unsigned long long _size, struct alt_String* fill)
{
    return (struct alt_Array_String*)new alt::Array<alt::String>((unsigned long long)_size, (const class alt::String &)fill);
}

CAPI struct alt_Array_String* alt_Array_String_Create_3(struct alt_Array_String* that)
{
    return (struct alt_Array_String*)new alt::Array<alt::String>((const class alt::Array<class alt::String> &)that);
}

CAPI struct alt_Array_String* alt_Array_String_Create_4(struct alt_Array_String* that)
{
    return (struct alt_Array_String*)new alt::Array<alt::String>((class alt::Array<class alt::String> &&)that);
}

CAPI void alt_Array_String_Assign_constArray_StringRef(struct alt_Array_String* _instance, struct alt_Array_String* that)
{
    ((alt::Array<alt::String> *)_instance)->operator=((const class alt::Array<class alt::String> &)that);
}

CAPI void alt_Array_String_Assign_Array_StringRefRef(struct alt_Array_String* _instance, struct alt_Array_String* that)
{
    ((alt::Array<alt::String> *)_instance)->operator=((class alt::Array<class alt::String> &&)that);
}

CAPI void alt_Array_String_Push(struct alt_Array_String* _instance, struct alt_String* el)
{
    ((alt::Array<alt::String> *)_instance)->Push((const class alt::String &)el);
}

CAPI unsigned long long alt_Array_String_GetSize(struct alt_Array_String* _instance)
{
    return (unsigned long long)((alt::Array<alt::String> *)_instance)->GetSize();
}

CAPI unsigned long long alt_Array_String_GetCapacity(struct alt_Array_String* _instance)
{
    return (unsigned long long)((alt::Array<alt::String> *)_instance)->GetCapacity();
}

CAPI struct alt_String* alt_Array_String_Access_uint64_t(struct alt_Array_String* _instance, unsigned long long key)
{
    return (alt_String*)&((alt::Array<alt::String> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_String* alt_Array_String_Access_uint64_t_1(struct alt_Array_String* _instance, unsigned long long key)
{
    return (alt_String*)&((alt::Array<alt::String> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_String* alt_Array_String_begin(struct alt_Array_String* _instance)
{
    return (alt_String*)((alt::Array<alt::String> *)_instance)->begin();
}

CAPI struct alt_String* alt_Array_String_begin_1(struct alt_Array_String* _instance)
{
    return (alt_String*)((alt::Array<alt::String> *)_instance)->begin();
}

CAPI struct alt_String* alt_Array_String_end(struct alt_Array_String* _instance)
{
    return (alt_String*)((alt::Array<alt::String> *)_instance)->end();
}

CAPI struct alt_String* alt_Array_String_end_1(struct alt_Array_String* _instance)
{
    return (alt_String*)((alt::Array<alt::String> *)_instance)->end();
}

CAPI struct alt_Array_StringView* alt_Array_StringView_Create()
{
    return (struct alt_Array_StringView*)new alt::Array<alt::StringView>();
}

CAPI struct alt_Array_StringView* alt_Array_StringView_Create_1(struct alt_StringView* _data, unsigned long long _size)
{
    return (struct alt_Array_StringView*)new alt::Array<alt::StringView>((const class alt::StringView *)_data, (unsigned long long)_size);
}

CAPI struct alt_Array_StringView* alt_Array_StringView_Create_2(unsigned long long _size, struct alt_StringView* fill)
{
    return (struct alt_Array_StringView*)new alt::Array<alt::StringView>((unsigned long long)_size, (const class alt::StringView &)fill);
}

CAPI struct alt_Array_StringView* alt_Array_StringView_Create_3(struct alt_Array_StringView* that)
{
    return (struct alt_Array_StringView*)new alt::Array<alt::StringView>((const class alt::Array<class alt::StringView> &)that);
}

CAPI struct alt_Array_StringView* alt_Array_StringView_Create_4(struct alt_Array_StringView* that)
{
    return (struct alt_Array_StringView*)new alt::Array<alt::StringView>((class alt::Array<class alt::StringView> &&)that);
}

CAPI void alt_Array_StringView_Assign_constArray_StringViewRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that)
{
    ((alt::Array<alt::StringView> *)_instance)->operator=((const class alt::Array<class alt::StringView> &)that);
}

CAPI void alt_Array_StringView_Assign_Array_StringViewRefRef(struct alt_Array_StringView* _instance, struct alt_Array_StringView* that)
{
    ((alt::Array<alt::StringView> *)_instance)->operator=((class alt::Array<class alt::StringView> &&)that);
}

CAPI void alt_Array_StringView_Push(struct alt_Array_StringView* _instance, struct alt_StringView* el)
{
    ((alt::Array<alt::StringView> *)_instance)->Push((const class alt::StringView &)el);
}

CAPI unsigned long long alt_Array_StringView_GetSize(struct alt_Array_StringView* _instance)
{
    return (unsigned long long)((alt::Array<alt::StringView> *)_instance)->GetSize();
}

CAPI unsigned long long alt_Array_StringView_GetCapacity(struct alt_Array_StringView* _instance)
{
    return (unsigned long long)((alt::Array<alt::StringView> *)_instance)->GetCapacity();
}

CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t(struct alt_Array_StringView* _instance, unsigned long long key)
{
    return (alt_StringView*)&((alt::Array<alt::StringView> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_StringView* alt_Array_StringView_Access_uint64_t_1(struct alt_Array_StringView* _instance, unsigned long long key)
{
    return (alt_StringView*)&((alt::Array<alt::StringView> *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_StringView* alt_Array_StringView_begin(struct alt_Array_StringView* _instance)
{
    return (alt_StringView*)((alt::Array<alt::StringView> *)_instance)->begin();
}

CAPI struct alt_StringView* alt_Array_StringView_begin_1(struct alt_Array_StringView* _instance)
{
    return (alt_StringView*)((alt::Array<alt::StringView> *)_instance)->begin();
}

CAPI struct alt_StringView* alt_Array_StringView_end(struct alt_Array_StringView* _instance)
{
    return (alt_StringView*)((alt::Array<alt::StringView> *)_instance)->end();
}

CAPI struct alt_StringView* alt_Array_StringView_end_1(struct alt_Array_StringView* _instance)
{
    return (alt_StringView*)((alt::Array<alt::StringView> *)_instance)->end();
}

CAPI struct alt_MValue* alt_MValue_Create()
{
    return (struct alt_MValue*)new alt::MValue();
}

CAPI struct alt_MValue* alt_MValue_Create_1(_Bool* val)
{
    return (struct alt_MValue*)new alt::MValue((const _Bool &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_2(long long* val)
{
    return (struct alt_MValue*)new alt::MValue((const long long &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_3(unsigned long long* val)
{
    return (struct alt_MValue*)new alt::MValue((const unsigned long long &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_4(double* val)
{
    return (struct alt_MValue*)new alt::MValue((const double &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_5(struct alt_String* val)
{
    return (struct alt_MValue*)new alt::MValue((const class alt::String &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_6(struct alt_Array_MValue* val)
{
    return (struct alt_MValue*)new alt::MValue((const class alt::Array<class alt::MValue> &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_8(struct alt_IBaseObject** val)
{
    return (struct alt_MValue*)new alt::MValue((class alt::IBaseObject *const &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_9(struct alt_MValue_Function* val)
{
    return (struct alt_MValue*)new alt::MValue((const struct alt::MValue::Function &)val);
}

CAPI struct alt_MValue* alt_MValue_Create_10(int val)
{
    return (struct alt_MValue*)new alt::MValue((int)val);
}

CAPI struct alt_MValue* alt_MValue_Create_11(unsigned int val)
{
    return (struct alt_MValue*)new alt::MValue((unsigned int)val);
}

CAPI struct alt_MValue* alt_MValue_Create_12(char* val)
{
    return (struct alt_MValue*)new alt::MValue((const char *)val);
}

CAPI struct alt_MValue* alt_MValue_Create_14(struct alt_MValue* that)
{
    return (struct alt_MValue*)new alt::MValue((const class alt::MValue &)that);
}

CAPI void alt_MValue_Assign_constMValueRef(struct alt_MValue* _instance, struct alt_MValue* that)
{
    ((alt::MValue *)_instance)->operator=((const class alt::MValue &)that);
}

CAPI _Bool alt_MValue_ToBool(struct alt_MValue* _instance)
{
    return (_Bool)((alt::MValue *)_instance)->ToBool();
}

CAPI long long alt_MValue_ToInt(struct alt_MValue* _instance)
{
    return (long long)((alt::MValue *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValue_ToUInt(struct alt_MValue* _instance)
{
    return (unsigned long long)((alt::MValue *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValue_ToString(struct alt_MValue* _instance)
{
    return (alt_String*)new class alt::String(((alt::MValue *)_instance)->ToString());
}

CAPI alt_MValue_Type alt_MValue_GetType(struct alt_MValue* _instance)
{
    return (alt_MValue_Type)((alt::MValue *)_instance)->GetType();
}

CAPI void alt_MValue_Function_free(struct alt_MValue_Function* ptr)
{
    delete (struct alt::MValue::Function *)ptr;
}

CAPI struct alt_MValue_Function* alt_MValue_Function_Create()
{
    return (struct alt_MValue_Function*)new alt::MValue::Function();
}

CAPI struct alt_MValue_Function* alt_MValue_Function_Create_1(struct alt_MValue_Function* _p0)
{
    return (struct alt_MValue_Function*)new alt::MValue::Function((const struct alt::MValue::Function &)_p0);
}

CAPI struct alt_MValue_Function* alt_MValue_Function_Create_2(struct alt_MValue_Function* _p0)
{
    return (struct alt_MValue_Function*)new alt::MValue::Function((struct alt::MValue::Function &&)_p0);
}

CAPI void alt_MValue_Function_Assign_constMValue_FunctionRef(struct alt_MValue_Function* _instance, struct alt_MValue_Function* _p0)
{
    ((alt::MValue::Function *)_instance)->operator=((const struct alt::MValue::Function &)_p0);
}

CAPI void alt_MValue_Function_Assign_MValue_FunctionRefRef(struct alt_MValue_Function* _instance, struct alt_MValue_Function* _p0)
{
    ((alt::MValue::Function *)_instance)->operator=((struct alt::MValue::Function &&)_p0);
}

CAPI void alt_MValue_TypeMismatchException_free(struct alt_MValue_TypeMismatchException* ptr)
{
    delete (class alt::MValue::TypeMismatchException *)ptr;
}

CAPI char* alt_MValue_TypeMismatchException_what(struct alt_MValue_TypeMismatchException* _instance)
{
    return (char*)((alt::MValue::TypeMismatchException *)_instance)->what();
}

CAPI struct alt_MValue_TypeMismatchException* alt_MValue_TypeMismatchException_Create(struct alt_MValue_TypeMismatchException* _p0)
{
    return (struct alt_MValue_TypeMismatchException*)new alt::MValue::TypeMismatchException((const class alt::MValue::TypeMismatchException &)_p0);
}

CAPI struct alt_MValue_TypeMismatchException* alt_MValue_TypeMismatchException_Create_1(struct alt_MValue_TypeMismatchException* _p0)
{
    return (struct alt_MValue_TypeMismatchException*)new alt::MValue::TypeMismatchException((class alt::MValue::TypeMismatchException &&)_p0);
}

CAPI void alt_MValue_TypeMismatchException_Assign_constMValue_TypeMismatchExceptionRef(struct alt_MValue_TypeMismatchException* _instance, struct alt_MValue_TypeMismatchException* _p0)
{
    ((alt::MValue::TypeMismatchException *)_instance)->operator=((const class alt::MValue::TypeMismatchException &)_p0);
}

CAPI void alt_MValue_TypeMismatchException_Assign_MValue_TypeMismatchExceptionRefRef(struct alt_MValue_TypeMismatchException* _instance, struct alt_MValue_TypeMismatchException* _p0)
{
    ((alt::MValue::TypeMismatchException *)_instance)->operator=((class alt::MValue::TypeMismatchException &&)_p0);
}

CAPI struct alt_MValue_TypeMismatchException* alt_MValue_TypeMismatchException_Create_2()
{
    return (struct alt_MValue_TypeMismatchException*)new alt::MValue::TypeMismatchException();
}

CAPI void alt_MValueList_free(struct alt_MValueList* ptr)
{
    delete (class alt::MValueList *)ptr;
}

CAPI struct alt_MValueList* alt_MValueList_Create()
{
    return (struct alt_MValueList*)new alt::MValue();
}

CAPI struct alt_MValueList* alt_MValueList_Create_1(_Bool* val)
{
    return (struct alt_MValueList*)new alt::MValue((const _Bool &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_2(long long* val)
{
    return (struct alt_MValueList*)new alt::MValue((const long long &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_3(unsigned long long* val)
{
    return (struct alt_MValueList*)new alt::MValue((const unsigned long long &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_4(double* val)
{
    return (struct alt_MValueList*)new alt::MValue((const double &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_5(struct alt_String* val)
{
    return (struct alt_MValueList*)new alt::MValue((const class alt::String &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_6(struct alt_Array_MValue* val)
{
    return (struct alt_MValueList*)new alt::MValue((const class alt::Array<class alt::MValue> &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_8(struct alt_IBaseObject** val)
{
    return (struct alt_MValueList*)new alt::MValue((class alt::IBaseObject *const &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_9(struct alt_MValue_Function* val)
{
    return (struct alt_MValueList*)new alt::MValue((const struct alt::MValue::Function &)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_10(int val)
{
    return (struct alt_MValueList*)new alt::MValue((int)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_11(unsigned int val)
{
    return (struct alt_MValueList*)new alt::MValue((unsigned int)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_12(char* val)
{
    return (struct alt_MValueList*)new alt::MValue((const char *)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_14(struct alt_MValue* that)
{
    return (struct alt_MValueList*)new alt::MValue((const class alt::MValue &)that);
}

CAPI void alt_MValueList_Assign_constMValueRef(struct alt_MValueList* _instance, struct alt_MValue* that)
{
    static_cast<alt::MValue *>((alt::MValueList *)_instance)->operator=((const class alt::MValue &)that);
}

CAPI _Bool alt_MValueList_ToBool(struct alt_MValueList* _instance)
{
    return (_Bool)static_cast<alt::MValue *>((alt::MValueList *)_instance)->ToBool();
}

CAPI long long alt_MValueList_ToInt(struct alt_MValueList* _instance)
{
    return (long long)static_cast<alt::MValue *>((alt::MValueList *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValueList_ToUInt(struct alt_MValueList* _instance)
{
    return (unsigned long long)static_cast<alt::MValue *>((alt::MValueList *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValueList_ToString(struct alt_MValueList* _instance)
{
    return (alt_String*)new class alt::String(static_cast<alt::MValue *>((alt::MValueList *)_instance)->ToString());
}

CAPI alt_MValue_Type alt_MValueList_GetType(struct alt_MValueList* _instance)
{
    return (alt_MValue_Type)static_cast<alt::MValue *>((alt::MValueList *)_instance)->GetType();
}

CAPI struct alt_MValueList* alt_MValueList_Create_15()
{
    return (struct alt_MValueList*)new alt::MValueList();
}

CAPI struct alt_MValueList* alt_MValueList_Create_16(unsigned long long size)
{
    return (struct alt_MValueList*)new alt::MValueList((unsigned long long)size);
}

CAPI struct alt_MValueList* alt_MValueList_Create_17(struct alt_Array_MValue* list)
{
    return (struct alt_MValueList*)new alt::MValueList((const class alt::Array<class alt::MValue> &)list);
}

CAPI struct alt_MValueList* alt_MValueList_Create_18(struct alt_MValue* val)
{
    return (struct alt_MValueList*)new alt::MValueList(*(class alt::MValue*)val);
}

CAPI unsigned long long alt_MValueList_GetSize(struct alt_MValueList* _instance)
{
    return (unsigned long long)((alt::MValueList *)_instance)->GetSize();
}

CAPI struct alt_MValue* alt_MValueList_Access_uint64_t(struct alt_MValueList* _instance, unsigned long long key)
{
    return (alt_MValue*)&((alt::MValueList *)_instance)->operator[]((unsigned long long)key);
}

CAPI struct alt_Array_MValue* alt_MValueList_To_Array_MValue(struct alt_MValueList* _instance)
{
    return (alt_Array_MValue*)new class alt::Array<class alt::MValue>(((alt::MValueList *)_instance)->operator alt::MValue::List());
}

CAPI void alt_MValueList_Push(struct alt_MValueList* _instance, struct alt_MValue* val)
{
    ((alt::MValueList *)_instance)->Push(*(class alt::MValue*)val);
}

CAPI struct alt_MValueList* alt_MValueList_Create_19(struct alt_MValueList* _p0)
{
    return (struct alt_MValueList*)new alt::MValueList((const class alt::MValueList &)_p0);
}

CAPI struct alt_MValueList* alt_MValueList_Create_20(struct alt_MValueList* _p0)
{
    return (struct alt_MValueList*)new alt::MValueList((class alt::MValueList &&)_p0);
}

CAPI void alt_MValueList_Assign_MValueListRefRef(struct alt_MValueList* _instance, struct alt_MValueList* _p0)
{
    ((alt::MValueList *)_instance)->operator=((class alt::MValueList &&)_p0);
}

CAPI void alt_MValueList_Assign_constMValueListRef(struct alt_MValueList* _instance, struct alt_MValueList* _p0)
{
    ((alt::MValueList *)_instance)->operator=((const class alt::MValueList &)_p0);
}

CAPI void alt_MValueDict_free(struct alt_MValueDict* ptr)
{
    delete (class alt::MValueDict *)ptr;
}

CAPI struct alt_MValueDict* alt_MValueDict_Create()
{
    return (struct alt_MValueDict*)new alt::MValue();
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_1(_Bool* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const _Bool &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_2(long long* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const long long &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_3(unsigned long long* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const unsigned long long &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_4(double* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const double &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_5(struct alt_String* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const class alt::String &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_6(struct alt_Array_MValue* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const class alt::Array<class alt::MValue> &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_8(struct alt_IBaseObject** val)
{
    return (struct alt_MValueDict*)new alt::MValue((class alt::IBaseObject *const &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_9(struct alt_MValue_Function* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const struct alt::MValue::Function &)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_10(int val)
{
    return (struct alt_MValueDict*)new alt::MValue((int)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_11(unsigned int val)
{
    return (struct alt_MValueDict*)new alt::MValue((unsigned int)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_12(char* val)
{
    return (struct alt_MValueDict*)new alt::MValue((const char *)val);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_14(struct alt_MValue* that)
{
    return (struct alt_MValueDict*)new alt::MValue((const class alt::MValue &)that);
}

CAPI void alt_MValueDict_Assign_constMValueRef(struct alt_MValueDict* _instance, struct alt_MValue* that)
{
    static_cast<alt::MValue *>((alt::MValueDict *)_instance)->operator=((const class alt::MValue &)that);
}

CAPI _Bool alt_MValueDict_ToBool(struct alt_MValueDict* _instance)
{
    return (_Bool)static_cast<alt::MValue *>((alt::MValueDict *)_instance)->ToBool();
}

CAPI long long alt_MValueDict_ToInt(struct alt_MValueDict* _instance)
{
    return (long long)static_cast<alt::MValue *>((alt::MValueDict *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValueDict_ToUInt(struct alt_MValueDict* _instance)
{
    return (unsigned long long)static_cast<alt::MValue *>((alt::MValueDict *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValueDict_ToString(struct alt_MValueDict* _instance)
{
    return (alt_String*)new class alt::String(static_cast<alt::MValue *>((alt::MValueDict *)_instance)->ToString());
}

CAPI alt_MValue_Type alt_MValueDict_GetType(struct alt_MValueDict* _instance)
{
    return (alt_MValue_Type)static_cast<alt::MValue *>((alt::MValueDict *)_instance)->GetType();
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_15()
{
    return (struct alt_MValueDict*)new alt::MValueDict();
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_17(struct alt_MValue* val)
{
    return (struct alt_MValueDict*)new alt::MValueDict(*(class alt::MValue*)val);
}

CAPI struct alt_MValue* alt_MValueDict_Access_constMValue_StringRef(struct alt_MValueDict* _instance, struct alt_String* key)
{
    return (alt_MValue*)&((alt::MValueDict *)_instance)->operator[]((const class alt::String &)key);
}

CAPI void alt_MValueDict_Delete(struct alt_MValueDict* _instance, struct alt_String* key)
{
    ((alt::MValueDict *)_instance)->Delete((const class alt::String &)key);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_18(struct alt_MValueDict* _p0)
{
    return (struct alt_MValueDict*)new alt::MValueDict((const class alt::MValueDict &)_p0);
}

CAPI struct alt_MValueDict* alt_MValueDict_Create_19(struct alt_MValueDict* _p0)
{
    return (struct alt_MValueDict*)new alt::MValueDict((class alt::MValueDict &&)_p0);
}

CAPI void alt_MValueDict_Assign_MValueDictRefRef(struct alt_MValueDict* _instance, struct alt_MValueDict* _p0)
{
    ((alt::MValueDict *)_instance)->operator=((class alt::MValueDict &&)_p0);
}

CAPI void alt_MValueDict_Assign_constMValueDictRef(struct alt_MValueDict* _instance, struct alt_MValueDict* _p0)
{
    ((alt::MValueDict *)_instance)->operator=((const class alt::MValueDict &)_p0);
}

CAPI alt_IResource_State alt_IResource_GetState(struct alt_IResource* _instance)
{
    return (alt_IResource_State)((alt::IResource *)_instance)->GetState();
}

CAPI _Bool alt_IResource_IsStarted(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->IsStarted();
}

CAPI struct alt_StringView* alt_IResource_GetType(struct alt_IResource* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IResource *)_instance)->GetType());
}

CAPI struct alt_StringView* alt_IResource_GetName(struct alt_IResource* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IResource *)_instance)->GetName());
}

CAPI struct alt_StringView* alt_IResource_GetPath(struct alt_IResource* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IResource *)_instance)->GetPath());
}

CAPI struct alt_StringView* alt_IResource_GetMain(struct alt_IResource* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IResource *)_instance)->GetMain());
}

CAPI struct alt_IPackage* alt_IResource_GetPackage(struct alt_IResource* _instance)
{
    return (alt_IPackage*)((alt::IResource *)_instance)->GetPackage();
}

CAPI struct alt_MValueDict* alt_IResource_GetExports(struct alt_IResource* _instance)
{
    return (alt_MValueDict*)new class alt::MValueDict(((alt::IResource *)_instance)->GetExports());
}

CAPI void alt_IResource_MakeClient(struct alt_IResource* _instance, struct alt_IResource_CreationInfo* info, struct alt_Array_String* files)
{
    ((alt::IResource *)_instance)->MakeClient((struct alt::IResource::CreationInfo *)info, *(class alt::Array<class alt::String>*)files);
}

CAPI _Bool alt_IResource_Instantiate(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->Instantiate();
}

CAPI _Bool alt_IResource_Start(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->Start();
}

CAPI _Bool alt_IResource_Stop(struct alt_IResource* _instance)
{
    return (_Bool)((alt::IResource *)_instance)->Stop();
}

CAPI _Bool alt_IResource_OnEvent(struct alt_IResource* _instance, struct alt_CEvent* ev)
{
    return (_Bool)((alt::IResource *)_instance)->OnEvent((const class alt::CEvent *)ev);
}

CAPI void alt_IResource_OnTick(struct alt_IResource* _instance)
{
    ((alt::IResource *)_instance)->OnTick();
}

CAPI void alt_IResource_OnCreateBaseObject(struct alt_IResource* _instance, struct alt_IBaseObject* object)
{
    ((alt::IResource *)_instance)->OnCreateBaseObject((class alt::IBaseObject *)object);
}

CAPI void alt_IResource_OnRemoveBaseObject(struct alt_IResource* _instance, struct alt_IBaseObject* object)
{
    ((alt::IResource *)_instance)->OnRemoveBaseObject((class alt::IBaseObject *)object);
}

CAPI struct alt_IResource* alt_IResource_Create(struct alt_IResource* _p0)
{
    return (struct alt_IResource*)new alt::IResource((const class alt::IResource &)_p0);
}

CAPI void alt_IResource_Assign_constIResourceRef(struct alt_IResource* _instance, struct alt_IResource* _p0)
{
    ((alt::IResource *)_instance)->operator=((const class alt::IResource &)_p0);
}

CAPI void alt_IResource_CreationInfo_free(struct alt_IResource_CreationInfo* ptr)
{
    delete (struct alt::IResource::CreationInfo *)ptr;
}

CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create(struct alt_IResource_CreationInfo* _p0)
{
    return (struct alt_IResource_CreationInfo*)new alt::IResource::CreationInfo((const struct alt::IResource::CreationInfo &)_p0);
}

CAPI struct alt_IResource_CreationInfo* alt_IResource_CreationInfo_Create_1(struct alt_IResource_CreationInfo* _p0)
{
    return (struct alt_IResource_CreationInfo*)new alt::IResource::CreationInfo((struct alt::IResource::CreationInfo &&)_p0);
}

CAPI void alt_IResource_CreationInfo_Assign_IResource_CreationInfoRefRef(struct alt_IResource_CreationInfo* _instance, struct alt_IResource_CreationInfo* _p0)
{
    ((alt::IResource::CreationInfo *)_instance)->operator=((struct alt::IResource::CreationInfo &&)_p0);
}

CAPI void alt_MValueFunction_free(struct alt_MValueFunction* ptr)
{
    delete (class alt::MValueFunction *)ptr;
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create()
{
    return (struct alt_MValueFunction*)new alt::MValue();
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_1(_Bool* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const _Bool &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_2(long long* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const long long &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_3(unsigned long long* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const unsigned long long &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_4(double* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const double &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_5(struct alt_String* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const class alt::String &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_6(struct alt_Array_MValue* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const class alt::Array<class alt::MValue> &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_8(struct alt_IBaseObject** val)
{
    return (struct alt_MValueFunction*)new alt::MValue((class alt::IBaseObject *const &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_9(struct alt_MValue_Function* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const struct alt::MValue::Function &)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_10(int val)
{
    return (struct alt_MValueFunction*)new alt::MValue((int)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_11(unsigned int val)
{
    return (struct alt_MValueFunction*)new alt::MValue((unsigned int)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_12(char* val)
{
    return (struct alt_MValueFunction*)new alt::MValue((const char *)val);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_14(struct alt_MValue* that)
{
    return (struct alt_MValueFunction*)new alt::MValue((const class alt::MValue &)that);
}

CAPI void alt_MValueFunction_Assign_constMValueRef(struct alt_MValueFunction* _instance, struct alt_MValue* that)
{
    static_cast<alt::MValue *>((alt::MValueFunction *)_instance)->operator=((const class alt::MValue &)that);
}

CAPI _Bool alt_MValueFunction_ToBool(struct alt_MValueFunction* _instance)
{
    return (_Bool)static_cast<alt::MValue *>((alt::MValueFunction *)_instance)->ToBool();
}

CAPI long long alt_MValueFunction_ToInt(struct alt_MValueFunction* _instance)
{
    return (long long)static_cast<alt::MValue *>((alt::MValueFunction *)_instance)->ToInt();
}

CAPI unsigned long long alt_MValueFunction_ToUInt(struct alt_MValueFunction* _instance)
{
    return (unsigned long long)static_cast<alt::MValue *>((alt::MValueFunction *)_instance)->ToUInt();
}

CAPI struct alt_String* alt_MValueFunction_ToString(struct alt_MValueFunction* _instance)
{
    return (alt_String*)new class alt::String(static_cast<alt::MValue *>((alt::MValueFunction *)_instance)->ToString());
}

CAPI alt_MValue_Type alt_MValueFunction_GetType(struct alt_MValueFunction* _instance)
{
    return (alt_MValue_Type)static_cast<alt::MValue *>((alt::MValueFunction *)_instance)->GetType();
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_15(struct alt_MValue_Function* func)
{
    return (struct alt_MValueFunction*)new alt::MValueFunction((const struct alt::MValue::Function &)func);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_16(struct alt_MValueFunction_Invoker* invoker)
{
    return (struct alt_MValueFunction*)new alt::MValueFunction((struct alt::MValueFunction::Invoker *)invoker);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_17(struct alt_MValue* val)
{
    return (struct alt_MValueFunction*)new alt::MValueFunction(*(class alt::MValue*)val);
}

CAPI struct alt_MValueFunction_Invoker* alt_MValueFunction_GetInvoker(struct alt_MValueFunction* _instance)
{
    return (alt_MValueFunction_Invoker*)((alt::MValueFunction *)_instance)->GetInvoker();
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_18(struct alt_MValueFunction* _p0)
{
    return (struct alt_MValueFunction*)new alt::MValueFunction((const class alt::MValueFunction &)_p0);
}

CAPI struct alt_MValueFunction* alt_MValueFunction_Create_19(struct alt_MValueFunction* _p0)
{
    return (struct alt_MValueFunction*)new alt::MValueFunction((class alt::MValueFunction &&)_p0);
}

CAPI void alt_MValueFunction_Assign_MValueFunctionRefRef(struct alt_MValueFunction* _instance, struct alt_MValueFunction* _p0)
{
    ((alt::MValueFunction *)_instance)->operator=((class alt::MValueFunction &&)_p0);
}

CAPI void alt_MValueFunction_Invoker_free(struct alt_MValueFunction_Invoker* ptr)
{
    delete (struct alt::MValueFunction::Invoker *)ptr;
}

CAPI struct alt_MValue* alt_MValueFunction_Invoker_Invoke(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueList* args)
{
    return (alt_MValue*)new class alt::MValue(((alt::MValueFunction::Invoker *)_instance)->Invoke(*(class alt::MValueList*)args));
}

CAPI void alt_MValueFunction_Invoker_Assign_constMValueFunction_InvokerRef(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueFunction_Invoker* _p0)
{
    ((alt::MValueFunction::Invoker *)_instance)->operator=((const struct alt::MValueFunction::Invoker &)_p0);
}

CAPI void alt_MValueFunction_Invoker_Assign_MValueFunction_InvokerRefRef(struct alt_MValueFunction_Invoker* _instance, struct alt_MValueFunction_Invoker* _p0)
{
    ((alt::MValueFunction::Invoker *)_instance)->operator=((struct alt::MValueFunction::Invoker &&)_p0);
}

CAPI alt_IBaseObject_Type alt_IBaseObject_GetType(struct alt_IBaseObject* _instance)
{
    return (alt_IBaseObject_Type)((alt::IBaseObject *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IBaseObject_GetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(((alt::IBaseObject *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IBaseObject_SetMetaData(struct alt_IBaseObject* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    ((alt::IBaseObject *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IBaseObject_Assign_constIBaseObjectRef(struct alt_IBaseObject* _instance, struct alt_IBaseObject* _p0)
{
    ((alt::IBaseObject *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI alt_IBaseObject_Type alt_IWorldObject_GetType(struct alt_IWorldObject* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IWorldObject *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IWorldObject_GetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IWorldObject *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IWorldObject_SetMetaData(struct alt_IWorldObject* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IWorldObject *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IWorldObject_Assign_constIBaseObjectRef(struct alt_IWorldObject* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IWorldObject *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IWorldObject_GetPosition(struct alt_IWorldObject* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IWorldObject *)_instance)->GetPosition());
}

CAPI short alt_IWorldObject_GetDimension(struct alt_IWorldObject* _instance)
{
    return (short)((alt::IWorldObject *)_instance)->GetDimension();
}

CAPI void alt_IWorldObject_SetPosition(struct alt_IWorldObject* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    ((alt::IWorldObject *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_IWorldObject_SetDimension(struct alt_IWorldObject* _instance, short dimension)
{
    ((alt::IWorldObject *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_IWorldObject_Assign_constIWorldObjectRef(struct alt_IWorldObject* _instance, struct alt_IWorldObject* _p0)
{
    ((alt::IWorldObject *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI alt_IBaseObject_Type alt_IEntity_GetType(struct alt_IEntity* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IEntity *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IEntity_GetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IEntity *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IEntity_SetMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IEntity *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IEntity_Assign_constIBaseObjectRef(struct alt_IEntity* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IEntity *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IEntity_GetPosition(struct alt_IEntity* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(static_cast<alt::IWorldObject *>((alt::IEntity *)_instance)->GetPosition());
}

CAPI short alt_IEntity_GetDimension(struct alt_IEntity* _instance)
{
    return (short)static_cast<alt::IWorldObject *>((alt::IEntity *)_instance)->GetDimension();
}

CAPI void alt_IEntity_SetPosition(struct alt_IEntity* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    static_cast<alt::IWorldObject *>((alt::IEntity *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_IEntity_SetDimension(struct alt_IEntity* _instance, short dimension)
{
    static_cast<alt::IWorldObject *>((alt::IEntity *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_IEntity_Assign_constIWorldObjectRef(struct alt_IEntity* _instance, struct alt_IWorldObject* _p0)
{
    static_cast<alt::IWorldObject *>((alt::IEntity *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI unsigned short alt_IEntity_GetID(struct alt_IEntity* _instance)
{
    return (unsigned short)((alt::IEntity *)_instance)->GetID();
}

CAPI unsigned int alt_IEntity_GetModel(struct alt_IEntity* _instance)
{
    return (unsigned int)((alt::IEntity *)_instance)->GetModel();
}

CAPI struct alt_Vector_float_3_RotationLayout* alt_IEntity_GetRotation(struct alt_IEntity* _instance)
{
    return (alt_Vector_float_3_RotationLayout*)new class alt::Vector<float, 3, class alt::RotationLayout>(((alt::IEntity *)_instance)->GetRotation());
}

CAPI void alt_IEntity_SetRotation(struct alt_IEntity* _instance, struct alt_Vector_float_3_RotationLayout* rot)
{
    ((alt::IEntity *)_instance)->SetRotation(*(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_MValue* alt_IEntity_GetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(((alt::IEntity *)_instance)->GetSyncedMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IEntity_SetSyncedMetaData(struct alt_IEntity* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    ((alt::IEntity *)_instance)->SetSyncedMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IEntity_Assign_constIEntityRef(struct alt_IEntity* _instance, struct alt_IEntity* _p0)
{
    ((alt::IEntity *)_instance)->operator=((const class alt::IEntity &)_p0);
}

CAPI alt_IBaseObject_Type alt_IPlayer_GetType(struct alt_IPlayer* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IPlayer *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IPlayer_GetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IPlayer *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IPlayer_SetMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IPlayer *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IPlayer_Assign_constIBaseObjectRef(struct alt_IPlayer* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IPlayer *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetPosition(struct alt_IPlayer* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(static_cast<alt::IWorldObject *>((alt::IPlayer *)_instance)->GetPosition());
}

CAPI short alt_IPlayer_GetDimension(struct alt_IPlayer* _instance)
{
    return (short)static_cast<alt::IWorldObject *>((alt::IPlayer *)_instance)->GetDimension();
}

CAPI void alt_IPlayer_SetPosition(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    static_cast<alt::IWorldObject *>((alt::IPlayer *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_IPlayer_SetDimension(struct alt_IPlayer* _instance, short dimension)
{
    static_cast<alt::IWorldObject *>((alt::IPlayer *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_IPlayer_Assign_constIWorldObjectRef(struct alt_IPlayer* _instance, struct alt_IWorldObject* _p0)
{
    static_cast<alt::IWorldObject *>((alt::IPlayer *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI unsigned short alt_IPlayer_GetID(struct alt_IPlayer* _instance)
{
    return (unsigned short)static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->GetID();
}

CAPI unsigned int alt_IPlayer_GetModel(struct alt_IPlayer* _instance)
{
    return (unsigned int)static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->GetModel();
}

CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetRotation(struct alt_IPlayer* _instance)
{
    return (alt_Vector_float_3_RotationLayout*)new class alt::Vector<float, 3, class alt::RotationLayout>(static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->GetRotation());
}

CAPI void alt_IPlayer_SetRotation(struct alt_IPlayer* _instance, struct alt_Vector_float_3_RotationLayout* rot)
{
    static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->SetRotation(*(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_MValue* alt_IPlayer_GetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->GetSyncedMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IPlayer_SetSyncedMetaData(struct alt_IPlayer* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->SetSyncedMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IPlayer_Assign_constIEntityRef(struct alt_IPlayer* _instance, struct alt_IEntity* _p0)
{
    static_cast<alt::IEntity *>((alt::IPlayer *)_instance)->operator=((const class alt::IEntity &)_p0);
}

CAPI _Bool alt_IPlayer_IsConnected(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsConnected();
}

CAPI unsigned int alt_IPlayer_GetPing(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IPlayer *)_instance)->GetPing();
}

CAPI struct alt_StringView* alt_IPlayer_GetIP(struct alt_IPlayer* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IPlayer *)_instance)->GetIP());
}

CAPI void alt_IPlayer_Spawn(struct alt_IPlayer* _instance, struct alt_Vector_float_3_PointLayout* pos, unsigned int delayMs)
{
    ((alt::IPlayer *)_instance)->Spawn(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, (unsigned int)delayMs);
}

CAPI void alt_IPlayer_Despawn(struct alt_IPlayer* _instance)
{
    ((alt::IPlayer *)_instance)->Despawn();
}

CAPI struct alt_StringView* alt_IPlayer_GetName(struct alt_IPlayer* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IPlayer *)_instance)->GetName());
}

CAPI unsigned long long alt_IPlayer_GetSocialID(struct alt_IPlayer* _instance)
{
    return (unsigned long long)((alt::IPlayer *)_instance)->GetSocialID();
}

CAPI unsigned long long alt_IPlayer_GetHwidHash(struct alt_IPlayer* _instance)
{
    return (unsigned long long)((alt::IPlayer *)_instance)->GetHwidHash();
}

CAPI unsigned long long alt_IPlayer_GetHwidExHash(struct alt_IPlayer* _instance)
{
    return (unsigned long long)((alt::IPlayer *)_instance)->GetHwidExHash();
}

CAPI struct alt_StringView* alt_IPlayer_GetAuthToken(struct alt_IPlayer* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IPlayer *)_instance)->GetAuthToken());
}

CAPI unsigned short alt_IPlayer_GetHealth(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetHealth();
}

CAPI void alt_IPlayer_SetHealth(struct alt_IPlayer* _instance, unsigned short health)
{
    ((alt::IPlayer *)_instance)->SetHealth((unsigned short)health);
}

CAPI unsigned short alt_IPlayer_GetMaxHealth(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetMaxHealth();
}

CAPI void alt_IPlayer_SetMaxHealth(struct alt_IPlayer* _instance, unsigned short health)
{
    ((alt::IPlayer *)_instance)->SetMaxHealth((unsigned short)health);
}

CAPI void alt_IPlayer_SetDateTime(struct alt_IPlayer* _instance, int day, int month, int year, int hour, int minute, int second)
{
    ((alt::IPlayer *)_instance)->SetDateTime((int)day, (int)month, (int)year, (int)hour, (int)minute, (int)second);
}

CAPI void alt_IPlayer_SetWeather(struct alt_IPlayer* _instance, unsigned int weather)
{
    ((alt::IPlayer *)_instance)->SetWeather((unsigned int)weather);
}

CAPI void alt_IPlayer_GiveWeapon(struct alt_IPlayer* _instance, unsigned int weapon, int ammo, _Bool selectWeapon)
{
    ((alt::IPlayer *)_instance)->GiveWeapon((unsigned int)weapon, (int)ammo, (_Bool)selectWeapon);
}

CAPI void alt_IPlayer_RemoveWeapon(struct alt_IPlayer* _instance, unsigned int weapon)
{
    ((alt::IPlayer *)_instance)->RemoveWeapon((unsigned int)weapon);
}

CAPI void alt_IPlayer_RemoveAllWeapons(struct alt_IPlayer* _instance)
{
    ((alt::IPlayer *)_instance)->RemoveAllWeapons();
}

CAPI void alt_IPlayer_AddWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component)
{
    ((alt::IPlayer *)_instance)->AddWeaponComponent((unsigned int)weapon, (unsigned int)component);
}

CAPI void alt_IPlayer_RemoveWeaponComponent(struct alt_IPlayer* _instance, unsigned int weapon, unsigned int component)
{
    ((alt::IPlayer *)_instance)->RemoveWeaponComponent((unsigned int)weapon, (unsigned int)component);
}

CAPI struct alt_Array_unsignedint* alt_IPlayer_GetCurrentWeaponComponents(struct alt_IPlayer* _instance)
{
    return (alt_Array_unsignedint*)new class alt::Array<unsigned int>(((alt::IPlayer *)_instance)->GetCurrentWeaponComponents());
}

CAPI void alt_IPlayer_SetWeaponTintIndex(struct alt_IPlayer* _instance, unsigned int weapon, unsigned char tintIndex)
{
    ((alt::IPlayer *)_instance)->SetWeaponTintIndex((unsigned int)weapon, (unsigned char)tintIndex);
}

CAPI unsigned char alt_IPlayer_GetCurrentWeaponTintIndex(struct alt_IPlayer* _instance)
{
    return (unsigned char)((alt::IPlayer *)_instance)->GetCurrentWeaponTintIndex();
}

CAPI unsigned int alt_IPlayer_GetCurrentWeapon(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IPlayer *)_instance)->GetCurrentWeapon();
}

CAPI void alt_IPlayer_SetCurrentWeapon(struct alt_IPlayer* _instance, unsigned int weapon)
{
    ((alt::IPlayer *)_instance)->SetCurrentWeapon((unsigned int)weapon);
}

CAPI _Bool alt_IPlayer_IsDead(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsDead();
}

CAPI _Bool alt_IPlayer_IsJumping(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsJumping();
}

CAPI _Bool alt_IPlayer_IsInRagdoll(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsInRagdoll();
}

CAPI _Bool alt_IPlayer_IsAiming(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsAiming();
}

CAPI _Bool alt_IPlayer_IsShooting(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsShooting();
}

CAPI _Bool alt_IPlayer_IsReloading(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsReloading();
}

CAPI unsigned short alt_IPlayer_GetArmour(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetArmour();
}

CAPI void alt_IPlayer_SetArmour(struct alt_IPlayer* _instance, unsigned short armor)
{
    ((alt::IPlayer *)_instance)->SetArmour((unsigned short)armor);
}

CAPI unsigned short alt_IPlayer_GetMaxArmour(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetMaxArmour();
}

CAPI void alt_IPlayer_SetMaxArmour(struct alt_IPlayer* _instance, unsigned short armor)
{
    ((alt::IPlayer *)_instance)->SetMaxArmour((unsigned short)armor);
}

CAPI float alt_IPlayer_GetMoveSpeed(struct alt_IPlayer* _instance)
{
    return (float)((alt::IPlayer *)_instance)->GetMoveSpeed();
}

CAPI unsigned int alt_IPlayer_GetWeapon(struct alt_IPlayer* _instance)
{
    return (unsigned int)((alt::IPlayer *)_instance)->GetWeapon();
}

CAPI unsigned short alt_IPlayer_GetAmmo(struct alt_IPlayer* _instance)
{
    return (unsigned short)((alt::IPlayer *)_instance)->GetAmmo();
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetAimPos(struct alt_IPlayer* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IPlayer *)_instance)->GetAimPos());
}

CAPI struct alt_Vector_float_3_RotationLayout* alt_IPlayer_GetHeadRotation(struct alt_IPlayer* _instance)
{
    return (alt_Vector_float_3_RotationLayout*)new class alt::Vector<float, 3, class alt::RotationLayout>(((alt::IPlayer *)_instance)->GetHeadRotation());
}

CAPI _Bool alt_IPlayer_IsInVehicle(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsInVehicle();
}

CAPI struct alt_IVehicle* alt_IPlayer_GetVehicle(struct alt_IPlayer* _instance)
{
    return (alt_IVehicle*)((alt::IPlayer *)_instance)->GetVehicle();
}

CAPI unsigned char alt_IPlayer_GetSeat(struct alt_IPlayer* _instance)
{
    return (unsigned char)((alt::IPlayer *)_instance)->GetSeat();
}

CAPI struct alt_IEntity* alt_IPlayer_GetEntityAimingAt(struct alt_IPlayer* _instance)
{
    return (alt_IEntity*)((alt::IPlayer *)_instance)->GetEntityAimingAt();
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IPlayer_GetEntityAimOffset(struct alt_IPlayer* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(((alt::IPlayer *)_instance)->GetEntityAimOffset());
}

CAPI _Bool alt_IPlayer_IsFlashlightActive(struct alt_IPlayer* _instance)
{
    return (_Bool)((alt::IPlayer *)_instance)->IsFlashlightActive();
}

CAPI void alt_IPlayer_Kick(struct alt_IPlayer* _instance, struct alt_StringView* reason)
{
    ((alt::IPlayer *)_instance)->Kick(*(class alt::StringView*)reason);
}

CAPI void alt_IPlayer_SetModel(struct alt_IPlayer* _instance, unsigned int model)
{
    ((alt::IPlayer *)_instance)->SetModel((unsigned int)model);
}

CAPI void alt_IPlayer_Assign_constIPlayerRef(struct alt_IPlayer* _instance, struct alt_IPlayer* _p0)
{
    ((alt::IPlayer *)_instance)->operator=((const class alt::IPlayer &)_p0);
}

CAPI alt_IBaseObject_Type alt_IVehicle_GetType(struct alt_IVehicle* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IVehicle *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IVehicle_GetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IVehicle *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IVehicle_SetMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IVehicle *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IVehicle_Assign_constIBaseObjectRef(struct alt_IVehicle* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IVehicle *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IVehicle_GetPosition(struct alt_IVehicle* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(static_cast<alt::IWorldObject *>((alt::IVehicle *)_instance)->GetPosition());
}

CAPI short alt_IVehicle_GetDimension(struct alt_IVehicle* _instance)
{
    return (short)static_cast<alt::IWorldObject *>((alt::IVehicle *)_instance)->GetDimension();
}

CAPI void alt_IVehicle_SetPosition(struct alt_IVehicle* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    static_cast<alt::IWorldObject *>((alt::IVehicle *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_IVehicle_SetDimension(struct alt_IVehicle* _instance, short dimension)
{
    static_cast<alt::IWorldObject *>((alt::IVehicle *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_IVehicle_Assign_constIWorldObjectRef(struct alt_IVehicle* _instance, struct alt_IWorldObject* _p0)
{
    static_cast<alt::IWorldObject *>((alt::IVehicle *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI unsigned short alt_IVehicle_GetID(struct alt_IVehicle* _instance)
{
    return (unsigned short)static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->GetID();
}

CAPI unsigned int alt_IVehicle_GetModel(struct alt_IVehicle* _instance)
{
    return (unsigned int)static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->GetModel();
}

CAPI struct alt_Vector_float_3_RotationLayout* alt_IVehicle_GetRotation(struct alt_IVehicle* _instance)
{
    return (alt_Vector_float_3_RotationLayout*)new class alt::Vector<float, 3, class alt::RotationLayout>(static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->GetRotation());
}

CAPI void alt_IVehicle_SetRotation(struct alt_IVehicle* _instance, struct alt_Vector_float_3_RotationLayout* rot)
{
    static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->SetRotation(*(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_MValue* alt_IVehicle_GetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->GetSyncedMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IVehicle_SetSyncedMetaData(struct alt_IVehicle* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->SetSyncedMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IVehicle_Assign_constIEntityRef(struct alt_IVehicle* _instance, struct alt_IEntity* _p0)
{
    static_cast<alt::IEntity *>((alt::IVehicle *)_instance)->operator=((const class alt::IEntity &)_p0);
}

CAPI struct alt_IPlayer* alt_IVehicle_GetDriver(struct alt_IVehicle* _instance)
{
    return (alt_IPlayer*)((alt::IVehicle *)_instance)->GetDriver();
}

CAPI unsigned char alt_IVehicle_GetMod(struct alt_IVehicle* _instance, unsigned char category)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetMod((unsigned char)category);
}

CAPI unsigned char alt_IVehicle_GetModsCount(struct alt_IVehicle* _instance, unsigned char category)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetModsCount((unsigned char)category);
}

CAPI _Bool alt_IVehicle_SetMod(struct alt_IVehicle* _instance, unsigned char category, unsigned char id)
{
    return (_Bool)((alt::IVehicle *)_instance)->SetMod((unsigned char)category, (unsigned char)id);
}

CAPI unsigned char alt_IVehicle_GetModKitsCount(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetModKitsCount();
}

CAPI unsigned char alt_IVehicle_GetModKit(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetModKit();
}

CAPI _Bool alt_IVehicle_SetModKit(struct alt_IVehicle* _instance, unsigned char id)
{
    return (_Bool)((alt::IVehicle *)_instance)->SetModKit((unsigned char)id);
}

CAPI _Bool alt_IVehicle_IsPrimaryColorRGB(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsPrimaryColorRGB();
}

CAPI unsigned char alt_IVehicle_GetPrimaryColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPrimaryColor();
}

CAPI struct alt_RGBA* alt_IVehicle_GetPrimaryColorRGB(struct alt_IVehicle* _instance)
{
    return (alt_RGBA*)new struct alt::RGBA(((alt::IVehicle *)_instance)->GetPrimaryColorRGB());
}

CAPI void alt_IVehicle_SetPrimaryColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetPrimaryColor((unsigned char)color);
}

CAPI void alt_IVehicle_SetPrimaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    ((alt::IVehicle *)_instance)->SetPrimaryColorRGB(*(struct alt::RGBA*)color);
}

CAPI _Bool alt_IVehicle_IsSecondaryColorRGB(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsSecondaryColorRGB();
}

CAPI unsigned char alt_IVehicle_GetSecondaryColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetSecondaryColor();
}

CAPI struct alt_RGBA* alt_IVehicle_GetSecondaryColorRGB(struct alt_IVehicle* _instance)
{
    return (alt_RGBA*)new struct alt::RGBA(((alt::IVehicle *)_instance)->GetSecondaryColorRGB());
}

CAPI void alt_IVehicle_SetSecondaryColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetSecondaryColor((unsigned char)color);
}

CAPI void alt_IVehicle_SetSecondaryColorRGB(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    ((alt::IVehicle *)_instance)->SetSecondaryColorRGB(*(struct alt::RGBA*)color);
}

CAPI unsigned char alt_IVehicle_GetPearlColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPearlColor();
}

CAPI void alt_IVehicle_SetPearlColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetPearlColor((unsigned char)color);
}

CAPI unsigned char alt_IVehicle_GetWheelColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelColor();
}

CAPI void alt_IVehicle_SetWheelColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetWheelColor((unsigned char)color);
}

CAPI unsigned char alt_IVehicle_GetInteriorColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetInteriorColor();
}

CAPI void alt_IVehicle_SetInteriorColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetInteriorColor((unsigned char)color);
}

CAPI unsigned char alt_IVehicle_GetDashboardColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetDashboardColor();
}

CAPI void alt_IVehicle_SetDashboardColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetDashboardColor((unsigned char)color);
}

CAPI _Bool alt_IVehicle_IsTireSmokeColorCustom(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsTireSmokeColorCustom();
}

CAPI struct alt_RGBA* alt_IVehicle_GetTireSmokeColor(struct alt_IVehicle* _instance)
{
    return (alt_RGBA*)new struct alt::RGBA(((alt::IVehicle *)_instance)->GetTireSmokeColor());
}

CAPI void alt_IVehicle_SetTireSmokeColor(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    ((alt::IVehicle *)_instance)->SetTireSmokeColor(*(struct alt::RGBA*)color);
}

CAPI unsigned char alt_IVehicle_GetWheelType(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelType();
}

CAPI unsigned char alt_IVehicle_GetWheelVariation(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelVariation();
}

CAPI void alt_IVehicle_SetWheels(struct alt_IVehicle* _instance, unsigned char type, unsigned char variation)
{
    ((alt::IVehicle *)_instance)->SetWheels((unsigned char)type, (unsigned char)variation);
}

CAPI _Bool alt_IVehicle_GetCustomTires(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->GetCustomTires();
}

CAPI void alt_IVehicle_SetCustomTires(struct alt_IVehicle* _instance, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetCustomTires((_Bool)state);
}

CAPI unsigned char alt_IVehicle_GetSpecialDarkness(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetSpecialDarkness();
}

CAPI void alt_IVehicle_SetSpecialDarkness(struct alt_IVehicle* _instance, unsigned char value)
{
    ((alt::IVehicle *)_instance)->SetSpecialDarkness((unsigned char)value);
}

CAPI unsigned int alt_IVehicle_GetNumberplateIndex(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetNumberplateIndex();
}

CAPI void alt_IVehicle_SetNumberplateIndex(struct alt_IVehicle* _instance, unsigned int index)
{
    ((alt::IVehicle *)_instance)->SetNumberplateIndex((unsigned int)index);
}

CAPI struct alt_StringView* alt_IVehicle_GetNumberplateText(struct alt_IVehicle* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IVehicle *)_instance)->GetNumberplateText());
}

CAPI void alt_IVehicle_SetNumberplateText(struct alt_IVehicle* _instance, struct alt_StringView* text)
{
    ((alt::IVehicle *)_instance)->SetNumberplateText(*(class alt::StringView*)text);
}

CAPI unsigned char alt_IVehicle_GetWindowTint(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWindowTint();
}

CAPI void alt_IVehicle_SetWindowTint(struct alt_IVehicle* _instance, unsigned char tint)
{
    ((alt::IVehicle *)_instance)->SetWindowTint((unsigned char)tint);
}

CAPI unsigned char alt_IVehicle_GetDirtLevel(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetDirtLevel();
}

CAPI void alt_IVehicle_SetDirtLevel(struct alt_IVehicle* _instance, unsigned char level)
{
    ((alt::IVehicle *)_instance)->SetDirtLevel((unsigned char)level);
}

CAPI _Bool alt_IVehicle_IsExtraOn(struct alt_IVehicle* _instance, unsigned char extraID)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsExtraOn((unsigned char)extraID);
}

CAPI void alt_IVehicle_ToggleExtra(struct alt_IVehicle* _instance, unsigned char extraID, _Bool state)
{
    ((alt::IVehicle *)_instance)->ToggleExtra((unsigned char)extraID, (_Bool)state);
}

CAPI _Bool alt_IVehicle_IsNeonActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsNeonActive();
}

CAPI void alt_IVehicle_GetNeonActive(struct alt_IVehicle* _instance, _Bool* left, _Bool* right, _Bool* front, _Bool* back)
{
    ((alt::IVehicle *)_instance)->GetNeonActive((_Bool *)left, (_Bool *)right, (_Bool *)front, (_Bool *)back);
}

CAPI void alt_IVehicle_SetNeonActive(struct alt_IVehicle* _instance, _Bool left, _Bool right, _Bool front, _Bool back)
{
    ((alt::IVehicle *)_instance)->SetNeonActive((_Bool)left, (_Bool)right, (_Bool)front, (_Bool)back);
}

CAPI struct alt_RGBA* alt_IVehicle_GetNeonColor(struct alt_IVehicle* _instance)
{
    return (alt_RGBA*)new struct alt::RGBA(((alt::IVehicle *)_instance)->GetNeonColor());
}

CAPI void alt_IVehicle_SetNeonColor(struct alt_IVehicle* _instance, struct alt_RGBA* color)
{
    ((alt::IVehicle *)_instance)->SetNeonColor(*(struct alt::RGBA*)color);
}

CAPI unsigned char alt_IVehicle_GetLivery(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetLivery();
}

CAPI void alt_IVehicle_SetLivery(struct alt_IVehicle* _instance, unsigned char livery)
{
    ((alt::IVehicle *)_instance)->SetLivery((unsigned char)livery);
}

CAPI unsigned char alt_IVehicle_GetRoofLivery(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetRoofLivery();
}

CAPI void alt_IVehicle_SetRoofLivery(struct alt_IVehicle* _instance, unsigned char roofLivery)
{
    ((alt::IVehicle *)_instance)->SetRoofLivery((unsigned char)roofLivery);
}

CAPI struct alt_String* alt_IVehicle_GetAppearanceDataBase64(struct alt_IVehicle* _instance)
{
    return (alt_String*)new class alt::String(((alt::IVehicle *)_instance)->GetAppearanceDataBase64());
}

CAPI void alt_IVehicle_LoadAppearanceDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    ((alt::IVehicle *)_instance)->LoadAppearanceDataFromBase64(*(class alt::StringView*)base64);
}

CAPI _Bool alt_IVehicle_IsEngineOn(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsEngineOn();
}

CAPI void alt_IVehicle_SetEngineOn(struct alt_IVehicle* _instance, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetEngineOn((_Bool)state);
}

CAPI _Bool alt_IVehicle_IsHandbrakeActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsHandbrakeActive();
}

CAPI unsigned char alt_IVehicle_GetHeadlightColor(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetHeadlightColor();
}

CAPI void alt_IVehicle_SetHeadlightColor(struct alt_IVehicle* _instance, unsigned char color)
{
    ((alt::IVehicle *)_instance)->SetHeadlightColor((unsigned char)color);
}

CAPI unsigned int alt_IVehicle_GetRadioStationIndex(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetRadioStationIndex();
}

CAPI void alt_IVehicle_SetRadioStationIndex(struct alt_IVehicle* _instance, unsigned int stationIndex)
{
    ((alt::IVehicle *)_instance)->SetRadioStationIndex((unsigned int)stationIndex);
}

CAPI _Bool alt_IVehicle_IsSirenActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsSirenActive();
}

CAPI void alt_IVehicle_SetSirenActive(struct alt_IVehicle* _instance, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetSirenActive((_Bool)state);
}

CAPI unsigned char alt_IVehicle_GetLockState(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetLockState();
}

CAPI void alt_IVehicle_SetLockState(struct alt_IVehicle* _instance, unsigned char state)
{
    ((alt::IVehicle *)_instance)->SetLockState((unsigned char)state);
}

CAPI unsigned char alt_IVehicle_GetDoorState(struct alt_IVehicle* _instance, unsigned char doorId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetDoorState((unsigned char)doorId);
}

CAPI void alt_IVehicle_SetDoorState(struct alt_IVehicle* _instance, unsigned char doorId, unsigned char state)
{
    ((alt::IVehicle *)_instance)->SetDoorState((unsigned char)doorId, (unsigned char)state);
}

CAPI _Bool alt_IVehicle_IsWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsWindowOpened((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetWindowOpened(struct alt_IVehicle* _instance, unsigned char windowId, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetWindowOpened((unsigned char)windowId, (_Bool)state);
}

CAPI _Bool alt_IVehicle_IsDaylightOn(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsDaylightOn();
}

CAPI _Bool alt_IVehicle_IsNightlightOn(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsNightlightOn();
}

CAPI _Bool alt_IVehicle_IsRoofOpened(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsRoofOpened();
}

CAPI void alt_IVehicle_SetRoofOpened(struct alt_IVehicle* _instance, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetRoofOpened((_Bool)state);
}

CAPI _Bool alt_IVehicle_IsFlamethrowerActive(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsFlamethrowerActive();
}

CAPI float alt_IVehicle_GetLightsMultiplier(struct alt_IVehicle* _instance)
{
    return (float)((alt::IVehicle *)_instance)->GetLightsMultiplier();
}

CAPI void alt_IVehicle_SetLightsMultiplier(struct alt_IVehicle* _instance, float multiplier)
{
    ((alt::IVehicle *)_instance)->SetLightsMultiplier((float)multiplier);
}

CAPI struct alt_String* alt_IVehicle_GetGameStateBase64(struct alt_IVehicle* _instance)
{
    return (alt_String*)new class alt::String(((alt::IVehicle *)_instance)->GetGameStateBase64());
}

CAPI void alt_IVehicle_LoadGameStateFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    ((alt::IVehicle *)_instance)->LoadGameStateFromBase64(*(class alt::StringView*)base64);
}

CAPI int alt_IVehicle_GetEngineHealth(struct alt_IVehicle* _instance)
{
    return (int)((alt::IVehicle *)_instance)->GetEngineHealth();
}

CAPI void alt_IVehicle_SetEngineHealth(struct alt_IVehicle* _instance, int health)
{
    ((alt::IVehicle *)_instance)->SetEngineHealth((int)health);
}

CAPI int alt_IVehicle_GetPetrolTankHealth(struct alt_IVehicle* _instance)
{
    return (int)((alt::IVehicle *)_instance)->GetPetrolTankHealth();
}

CAPI void alt_IVehicle_SetPetrolTankHealth(struct alt_IVehicle* _instance, int health)
{
    ((alt::IVehicle *)_instance)->SetPetrolTankHealth((int)health);
}

CAPI unsigned char alt_IVehicle_GetWheelsCount(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetWheelsCount();
}

CAPI _Bool alt_IVehicle_IsWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsWheelBurst((unsigned char)wheelId);
}

CAPI void alt_IVehicle_SetWheelBurst(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetWheelBurst((unsigned char)wheelId, (_Bool)state);
}

CAPI _Bool alt_IVehicle_DoesWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId)
{
    return (_Bool)((alt::IVehicle *)_instance)->DoesWheelHasTire((unsigned char)wheelId);
}

CAPI void alt_IVehicle_SetWheelHasTire(struct alt_IVehicle* _instance, unsigned char wheelId, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetWheelHasTire((unsigned char)wheelId, (_Bool)state);
}

CAPI float alt_IVehicle_GetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId)
{
    return (float)((alt::IVehicle *)_instance)->GetWheelHealth((unsigned char)wheelId);
}

CAPI void alt_IVehicle_SetWheelHealth(struct alt_IVehicle* _instance, unsigned char wheelId, float health)
{
    ((alt::IVehicle *)_instance)->SetWheelHealth((unsigned char)wheelId, (float)health);
}

CAPI unsigned char alt_IVehicle_GetRepairsCount(struct alt_IVehicle* _instance)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetRepairsCount();
}

CAPI unsigned int alt_IVehicle_GetBodyHealth(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetBodyHealth();
}

CAPI void alt_IVehicle_SetBodyHealth(struct alt_IVehicle* _instance, unsigned int health)
{
    ((alt::IVehicle *)_instance)->SetBodyHealth((unsigned int)health);
}

CAPI unsigned int alt_IVehicle_GetBodyAdditionalHealth(struct alt_IVehicle* _instance)
{
    return (unsigned int)((alt::IVehicle *)_instance)->GetBodyAdditionalHealth();
}

CAPI void alt_IVehicle_SetBodyAdditionalHealth(struct alt_IVehicle* _instance, unsigned int health)
{
    ((alt::IVehicle *)_instance)->SetBodyAdditionalHealth((unsigned int)health);
}

CAPI struct alt_String* alt_IVehicle_GetHealthDataBase64(struct alt_IVehicle* _instance)
{
    return (alt_String*)new class alt::String(((alt::IVehicle *)_instance)->GetHealthDataBase64());
}

CAPI void alt_IVehicle_LoadHealthDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    ((alt::IVehicle *)_instance)->LoadHealthDataFromBase64(*(class alt::StringView*)base64);
}

CAPI unsigned char alt_IVehicle_GetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPartDamageLevel((unsigned char)partId);
}

CAPI void alt_IVehicle_SetPartDamageLevel(struct alt_IVehicle* _instance, unsigned char partId, unsigned char damage)
{
    ((alt::IVehicle *)_instance)->SetPartDamageLevel((unsigned char)partId, (unsigned char)damage);
}

CAPI unsigned char alt_IVehicle_GetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetPartBulletHoles((unsigned char)partId);
}

CAPI void alt_IVehicle_SetPartBulletHoles(struct alt_IVehicle* _instance, unsigned char partId, unsigned char shootsCount)
{
    ((alt::IVehicle *)_instance)->SetPartBulletHoles((unsigned char)partId, (unsigned char)shootsCount);
}

CAPI _Bool alt_IVehicle_IsLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsLightDamaged((unsigned char)lightId);
}

CAPI void alt_IVehicle_SetLightDamaged(struct alt_IVehicle* _instance, unsigned char lightId, _Bool isDamaged)
{
    ((alt::IVehicle *)_instance)->SetLightDamaged((unsigned char)lightId, (_Bool)isDamaged);
}

CAPI _Bool alt_IVehicle_IsWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsWindowDamaged((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetWindowDamaged(struct alt_IVehicle* _instance, unsigned char windowId, _Bool isDamaged)
{
    ((alt::IVehicle *)_instance)->SetWindowDamaged((unsigned char)windowId, (_Bool)isDamaged);
}

CAPI _Bool alt_IVehicle_IsSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsSpecialLightDamaged((unsigned char)specialLightId);
}

CAPI void alt_IVehicle_SetSpecialLightDamaged(struct alt_IVehicle* _instance, unsigned char specialLightId, _Bool isDamaged)
{
    ((alt::IVehicle *)_instance)->SetSpecialLightDamaged((unsigned char)specialLightId, (_Bool)isDamaged);
}

CAPI _Bool alt_IVehicle_HasArmoredWindows(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->HasArmoredWindows();
}

CAPI float alt_IVehicle_GetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (float)((alt::IVehicle *)_instance)->GetArmoredWindowHealth((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetArmoredWindowHealth(struct alt_IVehicle* _instance, unsigned char windowId, float health)
{
    ((alt::IVehicle *)_instance)->SetArmoredWindowHealth((unsigned char)windowId, (float)health);
}

CAPI unsigned char alt_IVehicle_GetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetArmoredWindowShootCount((unsigned char)windowId);
}

CAPI void alt_IVehicle_SetArmoredWindowShootCount(struct alt_IVehicle* _instance, unsigned char windowId, unsigned char count)
{
    ((alt::IVehicle *)_instance)->SetArmoredWindowShootCount((unsigned char)windowId, (unsigned char)count);
}

CAPI unsigned char alt_IVehicle_GetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId)
{
    return (unsigned char)((alt::IVehicle *)_instance)->GetBumperDamageLevel((unsigned char)bumperId);
}

CAPI void alt_IVehicle_SetBumperDamageLevel(struct alt_IVehicle* _instance, unsigned char bumperId, unsigned char damageLevel)
{
    ((alt::IVehicle *)_instance)->SetBumperDamageLevel((unsigned char)bumperId, (unsigned char)damageLevel);
}

CAPI struct alt_String* alt_IVehicle_GetDamageDataBase64(struct alt_IVehicle* _instance)
{
    return (alt_String*)new class alt::String(((alt::IVehicle *)_instance)->GetDamageDataBase64());
}

CAPI void alt_IVehicle_LoadDamageDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    ((alt::IVehicle *)_instance)->LoadDamageDataFromBase64(*(class alt::StringView*)base64);
}

CAPI void alt_IVehicle_SetManualEngineControl(struct alt_IVehicle* _instance, _Bool state)
{
    ((alt::IVehicle *)_instance)->SetManualEngineControl((_Bool)state);
}

CAPI _Bool alt_IVehicle_IsManualEngineControl(struct alt_IVehicle* _instance)
{
    return (_Bool)((alt::IVehicle *)_instance)->IsManualEngineControl();
}

CAPI struct alt_String* alt_IVehicle_GetScriptDataBase64(struct alt_IVehicle* _instance)
{
    return (alt_String*)new class alt::String(((alt::IVehicle *)_instance)->GetScriptDataBase64());
}

CAPI void alt_IVehicle_LoadScriptDataFromBase64(struct alt_IVehicle* _instance, struct alt_StringView* base64)
{
    ((alt::IVehicle *)_instance)->LoadScriptDataFromBase64(*(class alt::StringView*)base64);
}

CAPI void alt_IVehicle_Assign_constIVehicleRef(struct alt_IVehicle* _instance, struct alt_IVehicle* _p0)
{
    ((alt::IVehicle *)_instance)->operator=((const class alt::IVehicle &)_p0);
}

CAPI alt_IBaseObject_Type alt_ICheckpoint_GetType(struct alt_ICheckpoint* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::ICheckpoint *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_ICheckpoint_GetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::ICheckpoint *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_ICheckpoint_SetMetaData(struct alt_ICheckpoint* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::ICheckpoint *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_ICheckpoint_Assign_constIBaseObjectRef(struct alt_ICheckpoint* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::ICheckpoint *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_ICheckpoint_GetPosition(struct alt_ICheckpoint* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(static_cast<alt::IWorldObject *>((alt::ICheckpoint *)_instance)->GetPosition());
}

CAPI short alt_ICheckpoint_GetDimension(struct alt_ICheckpoint* _instance)
{
    return (short)static_cast<alt::IWorldObject *>((alt::ICheckpoint *)_instance)->GetDimension();
}

CAPI void alt_ICheckpoint_SetPosition(struct alt_ICheckpoint* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    static_cast<alt::IWorldObject *>((alt::ICheckpoint *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_ICheckpoint_SetDimension(struct alt_ICheckpoint* _instance, short dimension)
{
    static_cast<alt::IWorldObject *>((alt::ICheckpoint *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_ICheckpoint_Assign_constIWorldObjectRef(struct alt_ICheckpoint* _instance, struct alt_IWorldObject* _p0)
{
    static_cast<alt::IWorldObject *>((alt::ICheckpoint *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI _Bool alt_ICheckpoint_IsGlobal(struct alt_ICheckpoint* _instance)
{
    return (_Bool)((alt::ICheckpoint *)_instance)->IsGlobal();
}

CAPI struct alt_IPlayer* alt_ICheckpoint_GetTarget(struct alt_ICheckpoint* _instance)
{
    return (alt_IPlayer*)((alt::ICheckpoint *)_instance)->GetTarget();
}

CAPI unsigned char alt_ICheckpoint_GetCheckpointType(struct alt_ICheckpoint* _instance)
{
    return (unsigned char)((alt::ICheckpoint *)_instance)->GetCheckpointType();
}

CAPI float alt_ICheckpoint_GetHeight(struct alt_ICheckpoint* _instance)
{
    return (float)((alt::ICheckpoint *)_instance)->GetHeight();
}

CAPI float alt_ICheckpoint_GetRadius(struct alt_ICheckpoint* _instance)
{
    return (float)((alt::ICheckpoint *)_instance)->GetRadius();
}

CAPI struct alt_RGBA* alt_ICheckpoint_GetColor(struct alt_ICheckpoint* _instance)
{
    return (alt_RGBA*)new struct alt::RGBA(((alt::ICheckpoint *)_instance)->GetColor());
}

CAPI _Bool alt_ICheckpoint_IsEntityIn(struct alt_ICheckpoint* _instance, struct alt_IEntity* ent)
{
    return (_Bool)((alt::ICheckpoint *)_instance)->IsEntityIn((class alt::IEntity *)ent);
}

CAPI void alt_ICheckpoint_Assign_constICheckpointRef(struct alt_ICheckpoint* _instance, struct alt_ICheckpoint* _p0)
{
    ((alt::ICheckpoint *)_instance)->operator=((const class alt::ICheckpoint &)_p0);
}

CAPI alt_IBaseObject_Type alt_IBlip_GetType(struct alt_IBlip* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IBlip *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IBlip_GetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IBlip *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IBlip_SetMetaData(struct alt_IBlip* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IBlip *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IBlip_Assign_constIBaseObjectRef(struct alt_IBlip* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IBlip *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IBlip_GetPosition(struct alt_IBlip* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(static_cast<alt::IWorldObject *>((alt::IBlip *)_instance)->GetPosition());
}

CAPI short alt_IBlip_GetDimension(struct alt_IBlip* _instance)
{
    return (short)static_cast<alt::IWorldObject *>((alt::IBlip *)_instance)->GetDimension();
}

CAPI void alt_IBlip_SetPosition(struct alt_IBlip* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    static_cast<alt::IWorldObject *>((alt::IBlip *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_IBlip_SetDimension(struct alt_IBlip* _instance, short dimension)
{
    static_cast<alt::IWorldObject *>((alt::IBlip *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_IBlip_Assign_constIWorldObjectRef(struct alt_IBlip* _instance, struct alt_IWorldObject* _p0)
{
    static_cast<alt::IWorldObject *>((alt::IBlip *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI _Bool alt_IBlip_IsGlobal(struct alt_IBlip* _instance)
{
    return (_Bool)((alt::IBlip *)_instance)->IsGlobal();
}

CAPI struct alt_IPlayer* alt_IBlip_GetTarget(struct alt_IBlip* _instance)
{
    return (alt_IPlayer*)((alt::IBlip *)_instance)->GetTarget();
}

CAPI _Bool alt_IBlip_IsAttached(struct alt_IBlip* _instance)
{
    return (_Bool)((alt::IBlip *)_instance)->IsAttached();
}

CAPI struct alt_IEntity* alt_IBlip_AttachedTo(struct alt_IBlip* _instance)
{
    return (alt_IEntity*)((alt::IBlip *)_instance)->AttachedTo();
}

CAPI alt_IBlip_Type alt_IBlip_GetBlipType(struct alt_IBlip* _instance)
{
    return (alt_IBlip_Type)((alt::IBlip *)_instance)->GetBlipType();
}

CAPI void alt_IBlip_SetSprite(struct alt_IBlip* _instance, unsigned short sprite)
{
    ((alt::IBlip *)_instance)->SetSprite((unsigned short)sprite);
}

CAPI void alt_IBlip_SetColor(struct alt_IBlip* _instance, unsigned char color)
{
    ((alt::IBlip *)_instance)->SetColor((unsigned char)color);
}

CAPI void alt_IBlip_SetRoute(struct alt_IBlip* _instance, _Bool state)
{
    ((alt::IBlip *)_instance)->SetRoute((_Bool)state);
}

CAPI void alt_IBlip_SetRouteColor(struct alt_IBlip* _instance, unsigned char color)
{
    ((alt::IBlip *)_instance)->SetRouteColor((unsigned char)color);
}

CAPI void alt_IBlip_Assign_constIBlipRef(struct alt_IBlip* _instance, struct alt_IBlip* _p0)
{
    ((alt::IBlip *)_instance)->operator=((const class alt::IBlip &)_p0);
}

CAPI alt_IBaseObject_Type alt_IVoiceChannel_GetType(struct alt_IVoiceChannel* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IVoiceChannel *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IVoiceChannel_GetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IVoiceChannel *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IVoiceChannel_SetMetaData(struct alt_IVoiceChannel* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IVoiceChannel *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IVoiceChannel_Assign_constIBaseObjectRef(struct alt_IVoiceChannel* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IVoiceChannel *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI void alt_IVoiceChannel_AddPlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    ((alt::IVoiceChannel *)_instance)->AddPlayer((class alt::IPlayer *)player);
}

CAPI void alt_IVoiceChannel_RemovePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    ((alt::IVoiceChannel *)_instance)->RemovePlayer((class alt::IPlayer *)player);
}

CAPI void alt_IVoiceChannel_MutePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    ((alt::IVoiceChannel *)_instance)->MutePlayer((class alt::IPlayer *)player);
}

CAPI void alt_IVoiceChannel_UnmutePlayer(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    ((alt::IVoiceChannel *)_instance)->UnmutePlayer((class alt::IPlayer *)player);
}

CAPI _Bool alt_IVoiceChannel_IsPlayerConnected(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (_Bool)((alt::IVoiceChannel *)_instance)->IsPlayerConnected((class alt::IPlayer *)player);
}

CAPI _Bool alt_IVoiceChannel_IsPlayerMuted(struct alt_IVoiceChannel* _instance, struct alt_IPlayer* player)
{
    return (_Bool)((alt::IVoiceChannel *)_instance)->IsPlayerMuted((class alt::IPlayer *)player);
}

CAPI _Bool alt_IVoiceChannel_IsSpatial(struct alt_IVoiceChannel* _instance)
{
    return (_Bool)((alt::IVoiceChannel *)_instance)->IsSpatial();
}

CAPI float alt_IVoiceChannel_GetMaxDistance(struct alt_IVoiceChannel* _instance)
{
    return (float)((alt::IVoiceChannel *)_instance)->GetMaxDistance();
}

CAPI void alt_IVoiceChannel_Assign_constIVoiceChannelRef(struct alt_IVoiceChannel* _instance, struct alt_IVoiceChannel* _p0)
{
    ((alt::IVoiceChannel *)_instance)->operator=((const class alt::IVoiceChannel &)_p0);
}

CAPI void alt_CEvent_free(struct alt_CEvent* ptr)
{
    delete (class alt::CEvent *)ptr;
}

CAPI struct alt_CEvent* alt_CEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CEvent_GetType(struct alt_CEvent* _instance)
{
    return (alt_CEvent_Type)((alt::CEvent *)_instance)->GetType();
}

CAPI _Bool alt_CEvent_WasCancelled(struct alt_CEvent* _instance)
{
    return (_Bool)((alt::CEvent *)_instance)->WasCancelled();
}

CAPI void alt_CEvent_Cancel(struct alt_CEvent* _instance)
{
    ((alt::CEvent *)_instance)->Cancel();
}

CAPI struct alt_CEvent* alt_CEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CEvent_Assign_constCEventRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0)
{
    ((alt::CEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CEvent* alt_CEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CEvent_Assign_CEventRefRef(struct alt_CEvent* _instance, struct alt_CEvent* _p0)
{
    ((alt::CEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI void alt_CServerScriptEvent_free(struct alt_CServerScriptEvent* ptr)
{
    delete (class alt::CServerScriptEvent *)ptr;
}

CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CServerScriptEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CServerScriptEvent_GetType(struct alt_CServerScriptEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CServerScriptEvent *)_instance)->GetType();
}

CAPI _Bool alt_CServerScriptEvent_WasCancelled(struct alt_CServerScriptEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CServerScriptEvent *)_instance)->WasCancelled();
}

CAPI void alt_CServerScriptEvent_Cancel(struct alt_CServerScriptEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CServerScriptEvent *)_instance)->Cancel();
}

CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CServerScriptEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CServerScriptEvent_Assign_constCEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CServerScriptEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CServerScriptEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CServerScriptEvent_Assign_CEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CServerScriptEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_3(struct alt_StringView* _name, struct alt_MValueList* _args)
{
    return (struct alt_CServerScriptEvent*)new alt::CServerScriptEvent(*(class alt::StringView*)_name, *(class alt::MValueList*)_args);
}

CAPI struct alt_StringView* alt_CServerScriptEvent_GetName(struct alt_CServerScriptEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CServerScriptEvent *)_instance)->GetName());
}

CAPI struct alt_MValueList* alt_CServerScriptEvent_GetArgs(struct alt_CServerScriptEvent* _instance)
{
    return (alt_MValueList*)new class alt::MValueList(((alt::CServerScriptEvent *)_instance)->GetArgs());
}

CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_4(struct alt_CServerScriptEvent* _p0)
{
    return (struct alt_CServerScriptEvent*)new alt::CServerScriptEvent((const class alt::CServerScriptEvent &)_p0);
}

CAPI struct alt_CServerScriptEvent* alt_CServerScriptEvent_Create_5(struct alt_CServerScriptEvent* _p0)
{
    return (struct alt_CServerScriptEvent*)new alt::CServerScriptEvent((class alt::CServerScriptEvent &&)_p0);
}

CAPI void alt_CServerScriptEvent_Assign_constCServerScriptEventRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0)
{
    ((alt::CServerScriptEvent *)_instance)->operator=((const class alt::CServerScriptEvent &)_p0);
}

CAPI void alt_CServerScriptEvent_Assign_CServerScriptEventRefRef(struct alt_CServerScriptEvent* _instance, struct alt_CServerScriptEvent* _p0)
{
    ((alt::CServerScriptEvent *)_instance)->operator=((class alt::CServerScriptEvent &&)_p0);
}

CAPI void alt_CClientScriptEvent_free(struct alt_CClientScriptEvent* ptr)
{
    delete (class alt::CClientScriptEvent *)ptr;
}

CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CClientScriptEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CClientScriptEvent_GetType(struct alt_CClientScriptEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CClientScriptEvent *)_instance)->GetType();
}

CAPI _Bool alt_CClientScriptEvent_WasCancelled(struct alt_CClientScriptEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CClientScriptEvent *)_instance)->WasCancelled();
}

CAPI void alt_CClientScriptEvent_Cancel(struct alt_CClientScriptEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CClientScriptEvent *)_instance)->Cancel();
}

CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CClientScriptEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CClientScriptEvent_Assign_constCEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CClientScriptEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CClientScriptEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CClientScriptEvent_Assign_CEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CClientScriptEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_3(struct alt_IPlayer* _target, struct alt_StringView* _name, struct alt_MValueList* _args)
{
    return (struct alt_CClientScriptEvent*)new alt::CClientScriptEvent((class alt::IPlayer *)_target, *(class alt::StringView*)_name, *(class alt::MValueList*)_args);
}

CAPI struct alt_IPlayer* alt_CClientScriptEvent_GetTarget(struct alt_CClientScriptEvent* _instance)
{
    return (alt_IPlayer*)((alt::CClientScriptEvent *)_instance)->GetTarget();
}

CAPI struct alt_StringView* alt_CClientScriptEvent_GetName(struct alt_CClientScriptEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CClientScriptEvent *)_instance)->GetName());
}

CAPI struct alt_MValueList* alt_CClientScriptEvent_GetArgs(struct alt_CClientScriptEvent* _instance)
{
    return (alt_MValueList*)new class alt::MValueList(((alt::CClientScriptEvent *)_instance)->GetArgs());
}

CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_4(struct alt_CClientScriptEvent* _p0)
{
    return (struct alt_CClientScriptEvent*)new alt::CClientScriptEvent((const class alt::CClientScriptEvent &)_p0);
}

CAPI struct alt_CClientScriptEvent* alt_CClientScriptEvent_Create_5(struct alt_CClientScriptEvent* _p0)
{
    return (struct alt_CClientScriptEvent*)new alt::CClientScriptEvent((class alt::CClientScriptEvent &&)_p0);
}

CAPI void alt_CClientScriptEvent_Assign_constCClientScriptEventRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0)
{
    ((alt::CClientScriptEvent *)_instance)->operator=((const class alt::CClientScriptEvent &)_p0);
}

CAPI void alt_CClientScriptEvent_Assign_CClientScriptEventRefRef(struct alt_CClientScriptEvent* _instance, struct alt_CClientScriptEvent* _p0)
{
    ((alt::CClientScriptEvent *)_instance)->operator=((class alt::CClientScriptEvent &&)_p0);
}

CAPI void alt_CPlayerConnectEvent_free(struct alt_CPlayerConnectEvent* ptr)
{
    delete (class alt::CPlayerConnectEvent *)ptr;
}

CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerConnectEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerConnectEvent_GetType(struct alt_CPlayerConnectEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerConnectEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerConnectEvent_WasCancelled(struct alt_CPlayerConnectEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerConnectEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerConnectEvent_Cancel(struct alt_CPlayerConnectEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerConnectEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerConnectEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerConnectEvent_Assign_constCEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerConnectEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerConnectEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerConnectEvent_Assign_CEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerConnectEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_3(struct alt_IPlayer* _target)
{
    return (struct alt_CPlayerConnectEvent*)new alt::CPlayerConnectEvent((class alt::IPlayer *)_target);
}

CAPI struct alt_IPlayer* alt_CPlayerConnectEvent_GetTarget(struct alt_CPlayerConnectEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerConnectEvent *)_instance)->GetTarget();
}

CAPI struct alt_StringView* alt_CPlayerConnectEvent_GetReason(struct alt_CPlayerConnectEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CPlayerConnectEvent *)_instance)->GetReason());
}

CAPI void alt_CPlayerConnectEvent_Cancel_1(struct alt_CPlayerConnectEvent* _instance, struct alt_StringView* _reason)
{
    ((alt::CPlayerConnectEvent *)_instance)->Cancel(*(class alt::StringView*)_reason);
}

CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_4(struct alt_CPlayerConnectEvent* _p0)
{
    return (struct alt_CPlayerConnectEvent*)new alt::CPlayerConnectEvent((const class alt::CPlayerConnectEvent &)_p0);
}

CAPI struct alt_CPlayerConnectEvent* alt_CPlayerConnectEvent_Create_5(struct alt_CPlayerConnectEvent* _p0)
{
    return (struct alt_CPlayerConnectEvent*)new alt::CPlayerConnectEvent((class alt::CPlayerConnectEvent &&)_p0);
}

CAPI void alt_CPlayerConnectEvent_Assign_constCPlayerConnectEventRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0)
{
    ((alt::CPlayerConnectEvent *)_instance)->operator=((const class alt::CPlayerConnectEvent &)_p0);
}

CAPI void alt_CPlayerConnectEvent_Assign_CPlayerConnectEventRefRef(struct alt_CPlayerConnectEvent* _instance, struct alt_CPlayerConnectEvent* _p0)
{
    ((alt::CPlayerConnectEvent *)_instance)->operator=((class alt::CPlayerConnectEvent &&)_p0);
}

CAPI void alt_CPlayerDisconnectEvent_free(struct alt_CPlayerDisconnectEvent* ptr)
{
    delete (class alt::CPlayerDisconnectEvent *)ptr;
}

CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerDisconnectEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerDisconnectEvent_GetType(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerDisconnectEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerDisconnectEvent_WasCancelled(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerDisconnectEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerDisconnectEvent_Cancel(struct alt_CPlayerDisconnectEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerDisconnectEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerDisconnectEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerDisconnectEvent_Assign_constCEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerDisconnectEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerDisconnectEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerDisconnectEvent_Assign_CEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerDisconnectEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_3(struct alt_IPlayer* _target, struct alt_StringView* _reason)
{
    return (struct alt_CPlayerDisconnectEvent*)new alt::CPlayerDisconnectEvent((class alt::IPlayer *)_target, *(class alt::StringView*)_reason);
}

CAPI struct alt_IPlayer* alt_CPlayerDisconnectEvent_GetTarget(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerDisconnectEvent *)_instance)->GetTarget();
}

CAPI struct alt_StringView* alt_CPlayerDisconnectEvent_GetReason(struct alt_CPlayerDisconnectEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CPlayerDisconnectEvent *)_instance)->GetReason());
}

CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_4(struct alt_CPlayerDisconnectEvent* _p0)
{
    return (struct alt_CPlayerDisconnectEvent*)new alt::CPlayerDisconnectEvent((const class alt::CPlayerDisconnectEvent &)_p0);
}

CAPI struct alt_CPlayerDisconnectEvent* alt_CPlayerDisconnectEvent_Create_5(struct alt_CPlayerDisconnectEvent* _p0)
{
    return (struct alt_CPlayerDisconnectEvent*)new alt::CPlayerDisconnectEvent((class alt::CPlayerDisconnectEvent &&)_p0);
}

CAPI void alt_CPlayerDisconnectEvent_Assign_constCPlayerDisconnectEventRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0)
{
    ((alt::CPlayerDisconnectEvent *)_instance)->operator=((const class alt::CPlayerDisconnectEvent &)_p0);
}

CAPI void alt_CPlayerDisconnectEvent_Assign_CPlayerDisconnectEventRefRef(struct alt_CPlayerDisconnectEvent* _instance, struct alt_CPlayerDisconnectEvent* _p0)
{
    ((alt::CPlayerDisconnectEvent *)_instance)->operator=((class alt::CPlayerDisconnectEvent &&)_p0);
}

CAPI void alt_CPlayerDamageEvent_free(struct alt_CPlayerDamageEvent* ptr)
{
    delete (class alt::CPlayerDamageEvent *)ptr;
}

CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerDamageEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerDamageEvent_GetType(struct alt_CPlayerDamageEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerDamageEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerDamageEvent_WasCancelled(struct alt_CPlayerDamageEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerDamageEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerDamageEvent_Cancel(struct alt_CPlayerDamageEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerDamageEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerDamageEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerDamageEvent_Assign_constCEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerDamageEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerDamageEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerDamageEvent_Assign_CEventRefRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerDamageEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_3(struct alt_IPlayer* _target, struct alt_IEntity* _attacker, unsigned short _damage, unsigned int _weapon)
{
    return (struct alt_CPlayerDamageEvent*)new alt::CPlayerDamageEvent((class alt::IPlayer *)_target, (class alt::IEntity *)_attacker, (unsigned short)_damage, (unsigned int)_weapon);
}

CAPI struct alt_IPlayer* alt_CPlayerDamageEvent_GetTarget(struct alt_CPlayerDamageEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerDamageEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CPlayerDamageEvent_GetAttacker(struct alt_CPlayerDamageEvent* _instance)
{
    return (alt_IEntity*)((alt::CPlayerDamageEvent *)_instance)->GetAttacker();
}

CAPI unsigned short alt_CPlayerDamageEvent_GetDamage(struct alt_CPlayerDamageEvent* _instance)
{
    return (unsigned short)((alt::CPlayerDamageEvent *)_instance)->GetDamage();
}

CAPI unsigned int alt_CPlayerDamageEvent_GetWeapon(struct alt_CPlayerDamageEvent* _instance)
{
    return (unsigned int)((alt::CPlayerDamageEvent *)_instance)->GetWeapon();
}

CAPI struct alt_CPlayerDamageEvent* alt_CPlayerDamageEvent_Create_4(struct alt_CPlayerDamageEvent* _p0)
{
    return (struct alt_CPlayerDamageEvent*)new alt::CPlayerDamageEvent((const class alt::CPlayerDamageEvent &)_p0);
}

CAPI void alt_CPlayerDamageEvent_Assign_constCPlayerDamageEventRef(struct alt_CPlayerDamageEvent* _instance, struct alt_CPlayerDamageEvent* _p0)
{
    ((alt::CPlayerDamageEvent *)_instance)->operator=((const class alt::CPlayerDamageEvent &)_p0);
}

CAPI void alt_CPlayerDeathEvent_free(struct alt_CPlayerDeathEvent* ptr)
{
    delete (class alt::CPlayerDeathEvent *)ptr;
}

CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerDeathEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerDeathEvent_GetType(struct alt_CPlayerDeathEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerDeathEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerDeathEvent_WasCancelled(struct alt_CPlayerDeathEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerDeathEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerDeathEvent_Cancel(struct alt_CPlayerDeathEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerDeathEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerDeathEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerDeathEvent_Assign_constCEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerDeathEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerDeathEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerDeathEvent_Assign_CEventRefRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerDeathEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_3(struct alt_IPlayer* _target, struct alt_IEntity* _killer, unsigned int _weapon)
{
    return (struct alt_CPlayerDeathEvent*)new alt::CPlayerDeathEvent((class alt::IPlayer *)_target, (class alt::IEntity *)_killer, (unsigned int)_weapon);
}

CAPI struct alt_IPlayer* alt_CPlayerDeathEvent_GetTarget(struct alt_CPlayerDeathEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerDeathEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CPlayerDeathEvent_GetKiller(struct alt_CPlayerDeathEvent* _instance)
{
    return (alt_IEntity*)((alt::CPlayerDeathEvent *)_instance)->GetKiller();
}

CAPI unsigned int alt_CPlayerDeathEvent_GetWeapon(struct alt_CPlayerDeathEvent* _instance)
{
    return (unsigned int)((alt::CPlayerDeathEvent *)_instance)->GetWeapon();
}

CAPI struct alt_CPlayerDeathEvent* alt_CPlayerDeathEvent_Create_4(struct alt_CPlayerDeathEvent* _p0)
{
    return (struct alt_CPlayerDeathEvent*)new alt::CPlayerDeathEvent((const class alt::CPlayerDeathEvent &)_p0);
}

CAPI void alt_CPlayerDeathEvent_Assign_constCPlayerDeathEventRef(struct alt_CPlayerDeathEvent* _instance, struct alt_CPlayerDeathEvent* _p0)
{
    ((alt::CPlayerDeathEvent *)_instance)->operator=((const class alt::CPlayerDeathEvent &)_p0);
}

CAPI void alt_CCheckpointEvent_free(struct alt_CCheckpointEvent* ptr)
{
    delete (class alt::CCheckpointEvent *)ptr;
}

CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CCheckpointEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CCheckpointEvent_GetType(struct alt_CCheckpointEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CCheckpointEvent *)_instance)->GetType();
}

CAPI _Bool alt_CCheckpointEvent_WasCancelled(struct alt_CCheckpointEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CCheckpointEvent *)_instance)->WasCancelled();
}

CAPI void alt_CCheckpointEvent_Cancel(struct alt_CCheckpointEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CCheckpointEvent *)_instance)->Cancel();
}

CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CCheckpointEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CCheckpointEvent_Assign_constCEventRef(struct alt_CCheckpointEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CCheckpointEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CCheckpointEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CCheckpointEvent_Assign_CEventRefRef(struct alt_CCheckpointEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CCheckpointEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_3(struct alt_ICheckpoint* _target, struct alt_IEntity* _entity, _Bool _state)
{
    return (struct alt_CCheckpointEvent*)new alt::CCheckpointEvent((class alt::ICheckpoint *)_target, (class alt::IEntity *)_entity, (_Bool)_state);
}

CAPI struct alt_ICheckpoint* alt_CCheckpointEvent_GetTarget(struct alt_CCheckpointEvent* _instance)
{
    return (alt_ICheckpoint*)((alt::CCheckpointEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CCheckpointEvent_GetEntity(struct alt_CCheckpointEvent* _instance)
{
    return (alt_IEntity*)((alt::CCheckpointEvent *)_instance)->GetEntity();
}

CAPI _Bool alt_CCheckpointEvent_GetState(struct alt_CCheckpointEvent* _instance)
{
    return (_Bool)((alt::CCheckpointEvent *)_instance)->GetState();
}

CAPI struct alt_CCheckpointEvent* alt_CCheckpointEvent_Create_4(struct alt_CCheckpointEvent* _p0)
{
    return (struct alt_CCheckpointEvent*)new alt::CCheckpointEvent((const class alt::CCheckpointEvent &)_p0);
}

CAPI void alt_CCheckpointEvent_Assign_constCCheckpointEventRef(struct alt_CCheckpointEvent* _instance, struct alt_CCheckpointEvent* _p0)
{
    ((alt::CCheckpointEvent *)_instance)->operator=((const class alt::CCheckpointEvent &)_p0);
}

CAPI void alt_CColShapeEvent_free(struct alt_CColShapeEvent* ptr)
{
    delete (class alt::CColShapeEvent *)ptr;
}

CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CColShapeEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CColShapeEvent_GetType(struct alt_CColShapeEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CColShapeEvent *)_instance)->GetType();
}

CAPI _Bool alt_CColShapeEvent_WasCancelled(struct alt_CColShapeEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CColShapeEvent *)_instance)->WasCancelled();
}

CAPI void alt_CColShapeEvent_Cancel(struct alt_CColShapeEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CColShapeEvent *)_instance)->Cancel();
}

CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CColShapeEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CColShapeEvent_Assign_constCEventRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CColShapeEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CColShapeEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CColShapeEvent_Assign_CEventRefRef(struct alt_CColShapeEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CColShapeEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_3(struct alt_IColShape* _target, struct alt_IEntity* _entity, _Bool _state)
{
    return (struct alt_CColShapeEvent*)new alt::CColShapeEvent((class alt::IColShape *)_target, (class alt::IEntity *)_entity, (_Bool)_state);
}

CAPI struct alt_IColShape* alt_CColShapeEvent_GetTarget(struct alt_CColShapeEvent* _instance)
{
    return (alt_IColShape*)((alt::CColShapeEvent *)_instance)->GetTarget();
}

CAPI struct alt_IEntity* alt_CColShapeEvent_GetEntity(struct alt_CColShapeEvent* _instance)
{
    return (alt_IEntity*)((alt::CColShapeEvent *)_instance)->GetEntity();
}

CAPI _Bool alt_CColShapeEvent_GetState(struct alt_CColShapeEvent* _instance)
{
    return (_Bool)((alt::CColShapeEvent *)_instance)->GetState();
}

CAPI struct alt_CColShapeEvent* alt_CColShapeEvent_Create_4(struct alt_CColShapeEvent* _p0)
{
    return (struct alt_CColShapeEvent*)new alt::CColShapeEvent((const class alt::CColShapeEvent &)_p0);
}

CAPI void alt_CColShapeEvent_Assign_constCColShapeEventRef(struct alt_CColShapeEvent* _instance, struct alt_CColShapeEvent* _p0)
{
    ((alt::CColShapeEvent *)_instance)->operator=((const class alt::CColShapeEvent &)_p0);
}

CAPI void alt_CPlayerEnterVehicleEvent_free(struct alt_CPlayerEnterVehicleEvent* ptr)
{
    delete (class alt::CPlayerEnterVehicleEvent *)ptr;
}

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerEnterVehicleEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerEnterVehicleEvent_GetType(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerEnterVehicleEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerEnterVehicleEvent_WasCancelled(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerEnterVehicleEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerEnterVehicleEvent_Cancel(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerEnterVehicleEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerEnterVehicleEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerEnterVehicleEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerEnterVehicleEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerEnterVehicleEvent_Assign_CEventRefRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerEnterVehicleEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_3(struct alt_IVehicle* _target, struct alt_IPlayer* _player, unsigned char _seat)
{
    return (struct alt_CPlayerEnterVehicleEvent*)new alt::CPlayerEnterVehicleEvent((class alt::IVehicle *)_target, (class alt::IPlayer *)_player, (unsigned char)_seat);
}

CAPI struct alt_IVehicle* alt_CPlayerEnterVehicleEvent_GetTarget(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (alt_IVehicle*)((alt::CPlayerEnterVehicleEvent *)_instance)->GetTarget();
}

CAPI struct alt_IPlayer* alt_CPlayerEnterVehicleEvent_GetPlayer(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerEnterVehicleEvent *)_instance)->GetPlayer();
}

CAPI unsigned char alt_CPlayerEnterVehicleEvent_GetSeat(struct alt_CPlayerEnterVehicleEvent* _instance)
{
    return (unsigned char)((alt::CPlayerEnterVehicleEvent *)_instance)->GetSeat();
}

CAPI struct alt_CPlayerEnterVehicleEvent* alt_CPlayerEnterVehicleEvent_Create_4(struct alt_CPlayerEnterVehicleEvent* _p0)
{
    return (struct alt_CPlayerEnterVehicleEvent*)new alt::CPlayerEnterVehicleEvent((const class alt::CPlayerEnterVehicleEvent &)_p0);
}

CAPI void alt_CPlayerEnterVehicleEvent_Assign_constCPlayerEnterVehicleEventRef(struct alt_CPlayerEnterVehicleEvent* _instance, struct alt_CPlayerEnterVehicleEvent* _p0)
{
    ((alt::CPlayerEnterVehicleEvent *)_instance)->operator=((const class alt::CPlayerEnterVehicleEvent &)_p0);
}

CAPI void alt_CPlayerLeaveVehicleEvent_free(struct alt_CPlayerLeaveVehicleEvent* ptr)
{
    delete (class alt::CPlayerLeaveVehicleEvent *)ptr;
}

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerLeaveVehicleEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerLeaveVehicleEvent_GetType(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerLeaveVehicleEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerLeaveVehicleEvent_WasCancelled(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerLeaveVehicleEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerLeaveVehicleEvent_Cancel(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerLeaveVehicleEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerLeaveVehicleEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerLeaveVehicleEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerLeaveVehicleEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_CEventRefRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerLeaveVehicleEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_3(struct alt_IVehicle* _target, struct alt_IPlayer* _player, unsigned char _seat)
{
    return (struct alt_CPlayerLeaveVehicleEvent*)new alt::CPlayerLeaveVehicleEvent((class alt::IVehicle *)_target, (class alt::IPlayer *)_player, (unsigned char)_seat);
}

CAPI struct alt_IVehicle* alt_CPlayerLeaveVehicleEvent_GetTarget(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (alt_IVehicle*)((alt::CPlayerLeaveVehicleEvent *)_instance)->GetTarget();
}

CAPI struct alt_IPlayer* alt_CPlayerLeaveVehicleEvent_GetPlayer(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerLeaveVehicleEvent *)_instance)->GetPlayer();
}

CAPI unsigned char alt_CPlayerLeaveVehicleEvent_GetSeat(struct alt_CPlayerLeaveVehicleEvent* _instance)
{
    return (unsigned char)((alt::CPlayerLeaveVehicleEvent *)_instance)->GetSeat();
}

CAPI struct alt_CPlayerLeaveVehicleEvent* alt_CPlayerLeaveVehicleEvent_Create_4(struct alt_CPlayerLeaveVehicleEvent* _p0)
{
    return (struct alt_CPlayerLeaveVehicleEvent*)new alt::CPlayerLeaveVehicleEvent((const class alt::CPlayerLeaveVehicleEvent &)_p0);
}

CAPI void alt_CPlayerLeaveVehicleEvent_Assign_constCPlayerLeaveVehicleEventRef(struct alt_CPlayerLeaveVehicleEvent* _instance, struct alt_CPlayerLeaveVehicleEvent* _p0)
{
    ((alt::CPlayerLeaveVehicleEvent *)_instance)->operator=((const class alt::CPlayerLeaveVehicleEvent &)_p0);
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_free(struct alt_CPlayerChangeVehicleSeatEvent* ptr)
{
    delete (class alt::CPlayerChangeVehicleSeatEvent *)ptr;
}

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CPlayerChangeVehicleSeatEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CPlayerChangeVehicleSeatEvent_GetType(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetType();
}

CAPI _Bool alt_CPlayerChangeVehicleSeatEvent_WasCancelled(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CPlayerChangeVehicleSeatEvent *)_instance)->WasCancelled();
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_Cancel(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CPlayerChangeVehicleSeatEvent *)_instance)->Cancel();
}

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerChangeVehicleSeatEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerChangeVehicleSeatEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CPlayerChangeVehicleSeatEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_CEventRefRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CPlayerChangeVehicleSeatEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_3(struct alt_IVehicle* _target, struct alt_IPlayer* _player, unsigned char _oldSeat, unsigned char _newSeat)
{
    return (struct alt_CPlayerChangeVehicleSeatEvent*)new alt::CPlayerChangeVehicleSeatEvent((class alt::IVehicle *)_target, (class alt::IPlayer *)_player, (unsigned char)_oldSeat, (unsigned char)_newSeat);
}

CAPI struct alt_IVehicle* alt_CPlayerChangeVehicleSeatEvent_GetTarget(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (alt_IVehicle*)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetTarget();
}

CAPI struct alt_IPlayer* alt_CPlayerChangeVehicleSeatEvent_GetPlayer(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (alt_IPlayer*)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetPlayer();
}

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetOldSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (unsigned char)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetOldSeat();
}

CAPI unsigned char alt_CPlayerChangeVehicleSeatEvent_GetNewSeat(struct alt_CPlayerChangeVehicleSeatEvent* _instance)
{
    return (unsigned char)((alt::CPlayerChangeVehicleSeatEvent *)_instance)->GetNewSeat();
}

CAPI struct alt_CPlayerChangeVehicleSeatEvent* alt_CPlayerChangeVehicleSeatEvent_Create_4(struct alt_CPlayerChangeVehicleSeatEvent* _p0)
{
    return (struct alt_CPlayerChangeVehicleSeatEvent*)new alt::CPlayerChangeVehicleSeatEvent((const class alt::CPlayerChangeVehicleSeatEvent &)_p0);
}

CAPI void alt_CPlayerChangeVehicleSeatEvent_Assign_constCPlayerChangeVehicleSeatEventRef(struct alt_CPlayerChangeVehicleSeatEvent* _instance, struct alt_CPlayerChangeVehicleSeatEvent* _p0)
{
    ((alt::CPlayerChangeVehicleSeatEvent *)_instance)->operator=((const class alt::CPlayerChangeVehicleSeatEvent &)_p0);
}

CAPI void alt_CDataNodeReceivedEvent_free(struct alt_CDataNodeReceivedEvent* ptr)
{
    delete (class alt::CDataNodeReceivedEvent *)ptr;
}

CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CDataNodeReceivedEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CDataNodeReceivedEvent_GetType(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CDataNodeReceivedEvent *)_instance)->GetType();
}

CAPI _Bool alt_CDataNodeReceivedEvent_WasCancelled(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CDataNodeReceivedEvent *)_instance)->WasCancelled();
}

CAPI void alt_CDataNodeReceivedEvent_Cancel(struct alt_CDataNodeReceivedEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CDataNodeReceivedEvent *)_instance)->Cancel();
}

CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CDataNodeReceivedEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CDataNodeReceivedEvent_Assign_constCEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CDataNodeReceivedEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CDataNodeReceivedEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CDataNodeReceivedEvent_Assign_CEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CDataNodeReceivedEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_3(struct alt_StringView* _name, struct alt_StringView* _logJson)
{
    return (struct alt_CDataNodeReceivedEvent*)new alt::CDataNodeReceivedEvent(*(class alt::StringView*)_name, *(class alt::StringView*)_logJson);
}

CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetName(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CDataNodeReceivedEvent *)_instance)->GetName());
}

CAPI struct alt_StringView* alt_CDataNodeReceivedEvent_GetJson(struct alt_CDataNodeReceivedEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CDataNodeReceivedEvent *)_instance)->GetJson());
}

CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_4(struct alt_CDataNodeReceivedEvent* _p0)
{
    return (struct alt_CDataNodeReceivedEvent*)new alt::CDataNodeReceivedEvent((const class alt::CDataNodeReceivedEvent &)_p0);
}

CAPI struct alt_CDataNodeReceivedEvent* alt_CDataNodeReceivedEvent_Create_5(struct alt_CDataNodeReceivedEvent* _p0)
{
    return (struct alt_CDataNodeReceivedEvent*)new alt::CDataNodeReceivedEvent((class alt::CDataNodeReceivedEvent &&)_p0);
}

CAPI void alt_CDataNodeReceivedEvent_Assign_constCDataNodeReceivedEventRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0)
{
    ((alt::CDataNodeReceivedEvent *)_instance)->operator=((const class alt::CDataNodeReceivedEvent &)_p0);
}

CAPI void alt_CDataNodeReceivedEvent_Assign_CDataNodeReceivedEventRefRef(struct alt_CDataNodeReceivedEvent* _instance, struct alt_CDataNodeReceivedEvent* _p0)
{
    ((alt::CDataNodeReceivedEvent *)_instance)->operator=((class alt::CDataNodeReceivedEvent &&)_p0);
}

CAPI void alt_CRemoveEntityEvent_free(struct alt_CRemoveEntityEvent* ptr)
{
    delete (class alt::CRemoveEntityEvent *)ptr;
}

CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CRemoveEntityEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CRemoveEntityEvent_GetType(struct alt_CRemoveEntityEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CRemoveEntityEvent *)_instance)->GetType();
}

CAPI _Bool alt_CRemoveEntityEvent_WasCancelled(struct alt_CRemoveEntityEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CRemoveEntityEvent *)_instance)->WasCancelled();
}

CAPI void alt_CRemoveEntityEvent_Cancel(struct alt_CRemoveEntityEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CRemoveEntityEvent *)_instance)->Cancel();
}

CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CRemoveEntityEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CRemoveEntityEvent_Assign_constCEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CRemoveEntityEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CRemoveEntityEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CRemoveEntityEvent_Assign_CEventRefRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CRemoveEntityEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_3(struct alt_IEntity* _target)
{
    return (struct alt_CRemoveEntityEvent*)new alt::CRemoveEntityEvent((class alt::IEntity *)_target);
}

CAPI struct alt_IEntity* alt_CRemoveEntityEvent_GetEntity(struct alt_CRemoveEntityEvent* _instance)
{
    return (alt_IEntity*)((alt::CRemoveEntityEvent *)_instance)->GetEntity();
}

CAPI struct alt_CRemoveEntityEvent* alt_CRemoveEntityEvent_Create_4(struct alt_CRemoveEntityEvent* _p0)
{
    return (struct alt_CRemoveEntityEvent*)new alt::CRemoveEntityEvent((const class alt::CRemoveEntityEvent &)_p0);
}

CAPI void alt_CRemoveEntityEvent_Assign_constCRemoveEntityEventRef(struct alt_CRemoveEntityEvent* _instance, struct alt_CRemoveEntityEvent* _p0)
{
    ((alt::CRemoveEntityEvent *)_instance)->operator=((const class alt::CRemoveEntityEvent &)_p0);
}

CAPI void alt_CConsoleCommandEvent_free(struct alt_CConsoleCommandEvent* ptr)
{
    delete (class alt::CConsoleCommandEvent *)ptr;
}

CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create(alt_CEvent_Type _type)
{
    return (struct alt_CConsoleCommandEvent*)new alt::CEvent((enum alt::CEvent::Type)_type);
}

CAPI alt_CEvent_Type alt_CConsoleCommandEvent_GetType(struct alt_CConsoleCommandEvent* _instance)
{
    return (alt_CEvent_Type)static_cast<alt::CEvent *>((alt::CConsoleCommandEvent *)_instance)->GetType();
}

CAPI _Bool alt_CConsoleCommandEvent_WasCancelled(struct alt_CConsoleCommandEvent* _instance)
{
    return (_Bool)static_cast<alt::CEvent *>((alt::CConsoleCommandEvent *)_instance)->WasCancelled();
}

CAPI void alt_CConsoleCommandEvent_Cancel(struct alt_CConsoleCommandEvent* _instance)
{
    static_cast<alt::CEvent *>((alt::CConsoleCommandEvent *)_instance)->Cancel();
}

CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_1(struct alt_CEvent* _p0)
{
    return (struct alt_CConsoleCommandEvent*)new alt::CEvent((const class alt::CEvent &)_p0);
}

CAPI void alt_CConsoleCommandEvent_Assign_constCEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CConsoleCommandEvent *)_instance)->operator=((const class alt::CEvent &)_p0);
}

CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_2(struct alt_CEvent* _p0)
{
    return (struct alt_CConsoleCommandEvent*)new alt::CEvent((class alt::CEvent &&)_p0);
}

CAPI void alt_CConsoleCommandEvent_Assign_CEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CEvent* _p0)
{
    static_cast<alt::CEvent *>((alt::CConsoleCommandEvent *)_instance)->operator=((class alt::CEvent &&)_p0);
}

CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_3(struct alt_StringView* _name, struct alt_Array_StringView* _args)
{
    return (struct alt_CConsoleCommandEvent*)new alt::CConsoleCommandEvent(*(class alt::StringView*)_name, *(class alt::Array<class alt::StringView>*)_args);
}

CAPI struct alt_StringView* alt_CConsoleCommandEvent_GetName(struct alt_CConsoleCommandEvent* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::CConsoleCommandEvent *)_instance)->GetName());
}

CAPI struct alt_Array_StringView* alt_CConsoleCommandEvent_GetArgs(struct alt_CConsoleCommandEvent* _instance)
{
    return (alt_Array_StringView*)&((alt::CConsoleCommandEvent *)_instance)->GetArgs();
}

CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_4(struct alt_CConsoleCommandEvent* _p0)
{
    return (struct alt_CConsoleCommandEvent*)new alt::CConsoleCommandEvent((const class alt::CConsoleCommandEvent &)_p0);
}

CAPI struct alt_CConsoleCommandEvent* alt_CConsoleCommandEvent_Create_5(struct alt_CConsoleCommandEvent* _p0)
{
    return (struct alt_CConsoleCommandEvent*)new alt::CConsoleCommandEvent((class alt::CConsoleCommandEvent &&)_p0);
}

CAPI void alt_CConsoleCommandEvent_Assign_constCConsoleCommandEventRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0)
{
    ((alt::CConsoleCommandEvent *)_instance)->operator=((const class alt::CConsoleCommandEvent &)_p0);
}

CAPI void alt_CConsoleCommandEvent_Assign_CConsoleCommandEventRefRef(struct alt_CConsoleCommandEvent* _instance, struct alt_CConsoleCommandEvent* _p0)
{
    ((alt::CConsoleCommandEvent *)_instance)->operator=((class alt::CConsoleCommandEvent &&)_p0);
}

CAPI alt_IPackage_Mode alt_IPackage_GetMode(struct alt_IPackage* _instance)
{
    return (alt_IPackage_Mode)((alt::IPackage *)_instance)->GetMode();
}

CAPI _Bool alt_IPackage_FileExists(struct alt_IPackage* _instance, struct alt_StringView* path)
{
    return (_Bool)((alt::IPackage *)_instance)->FileExists(*(class alt::StringView*)path);
}

CAPI struct alt_IPackage_File* alt_IPackage_OpenFile(struct alt_IPackage* _instance, struct alt_StringView* path)
{
    return (alt_IPackage_File*)((alt::IPackage *)_instance)->OpenFile(*(class alt::StringView*)path);
}

CAPI void alt_IPackage_CloseFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file)
{
    ((alt::IPackage *)_instance)->CloseFile((class alt::IPackage::File *)file);
}

CAPI unsigned long long alt_IPackage_GetFileSize(struct alt_IPackage* _instance, struct alt_IPackage_File* file)
{
    return (unsigned long long)((alt::IPackage *)_instance)->GetFileSize((class alt::IPackage::File *)file);
}

CAPI void alt_IPackage_SeekFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, unsigned long long offset, alt_IPackage_SeekOrigin origin)
{
    ((alt::IPackage *)_instance)->SeekFile((class alt::IPackage::File *)file, (unsigned long long)offset, (enum alt::IPackage::SeekOrigin)origin);
}

CAPI unsigned long long alt_IPackage_TellFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file)
{
    return (unsigned long long)((alt::IPackage *)_instance)->TellFile((class alt::IPackage::File *)file);
}

CAPI unsigned long long alt_IPackage_ReadFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size)
{
    return (unsigned long long)((alt::IPackage *)_instance)->ReadFile((class alt::IPackage::File *)file, (void *)buffer, (unsigned long long)size);
}

CAPI unsigned long long alt_IPackage_WriteFile(struct alt_IPackage* _instance, struct alt_IPackage_File* file, void* buffer, unsigned long long size)
{
    return (unsigned long long)((alt::IPackage *)_instance)->WriteFile((class alt::IPackage::File *)file, (void *)buffer, (unsigned long long)size);
}

CAPI void alt_IPackage_File_Assign_constIPackage_FileRef(struct alt_IPackage_File* _instance, struct alt_IPackage_File* _p0)
{
    ((alt::IPackage::File *)_instance)->operator=((const class alt::IPackage::File &)_p0);
}

CAPI struct alt_IResource* alt_IScriptRuntime_CreateResource(struct alt_IScriptRuntime* _instance, struct alt_IResource_CreationInfo* info)
{
    return (alt_IResource*)((alt::IScriptRuntime *)_instance)->CreateResource((struct alt::IResource::CreationInfo *)info);
}

CAPI void alt_IScriptRuntime_RemoveResource(struct alt_IScriptRuntime* _instance, struct alt_IResource* resource)
{
    ((alt::IScriptRuntime *)_instance)->RemoveResource((class alt::IResource *)resource);
}

CAPI void alt_IScriptRuntime_OnTick(struct alt_IScriptRuntime* _instance)
{
    ((alt::IScriptRuntime *)_instance)->OnTick();
}

CAPI void alt_IScriptRuntime_Assign_constIScriptRuntimeRef(struct alt_IScriptRuntime* _instance, struct alt_IScriptRuntime* _p0)
{
    ((alt::IScriptRuntime *)_instance)->operator=((const class alt::IScriptRuntime &)_p0);
}

CAPI alt_IBaseObject_Type alt_IColShape_GetType(struct alt_IColShape* _instance)
{
    return (alt_IBaseObject_Type)static_cast<alt::IBaseObject *>((alt::IColShape *)_instance)->GetType();
}

CAPI struct alt_MValue* alt_IColShape_GetMetaData(struct alt_IColShape* _instance, struct alt_StringView* key)
{
    return (alt_MValue*)new class alt::MValue(static_cast<alt::IBaseObject *>((alt::IColShape *)_instance)->GetMetaData(*(class alt::StringView*)key));
}

CAPI void alt_IColShape_SetMetaData(struct alt_IColShape* _instance, struct alt_StringView* key, struct alt_MValue* val)
{
    static_cast<alt::IBaseObject *>((alt::IColShape *)_instance)->SetMetaData(*(class alt::StringView*)key, *(class alt::MValue*)val);
}

CAPI void alt_IColShape_Assign_constIBaseObjectRef(struct alt_IColShape* _instance, struct alt_IBaseObject* _p0)
{
    static_cast<alt::IBaseObject *>((alt::IColShape *)_instance)->operator=((const class alt::IBaseObject &)_p0);
}

CAPI struct alt_Vector_float_3_PointLayout* alt_IColShape_GetPosition(struct alt_IColShape* _instance)
{
    return (alt_Vector_float_3_PointLayout*)new class alt::Vector<float, 3, class alt::PointLayout>(static_cast<alt::IWorldObject *>((alt::IColShape *)_instance)->GetPosition());
}

CAPI short alt_IColShape_GetDimension(struct alt_IColShape* _instance)
{
    return (short)static_cast<alt::IWorldObject *>((alt::IColShape *)_instance)->GetDimension();
}

CAPI void alt_IColShape_SetPosition(struct alt_IColShape* _instance, struct alt_Vector_float_3_PointLayout* pos)
{
    static_cast<alt::IWorldObject *>((alt::IColShape *)_instance)->SetPosition(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI void alt_IColShape_SetDimension(struct alt_IColShape* _instance, short dimension)
{
    static_cast<alt::IWorldObject *>((alt::IColShape *)_instance)->SetDimension((short)dimension);
}

CAPI void alt_IColShape_Assign_constIWorldObjectRef(struct alt_IColShape* _instance, struct alt_IWorldObject* _p0)
{
    static_cast<alt::IWorldObject *>((alt::IColShape *)_instance)->operator=((const class alt::IWorldObject &)_p0);
}

CAPI alt_ColShapeType alt_IColShape_GetColshapeType(struct alt_IColShape* _instance)
{
    return (alt_ColShapeType)((alt::IColShape *)_instance)->GetColshapeType();
}

CAPI _Bool alt_IColShape_IsEntityIn(struct alt_IColShape* _instance, struct alt_IEntity* ent)
{
    return (_Bool)((alt::IColShape *)_instance)->IsEntityIn((class alt::IEntity *)ent);
}

CAPI void alt_IColShape_Assign_constIColShapeRef(struct alt_IColShape* _instance, struct alt_IColShape* _p0)
{
    ((alt::IColShape *)_instance)->operator=((const class alt::IColShape &)_p0);
}

CAPI struct alt_StringView* alt_IServer_GetRootDirectory(struct alt_IServer* _instance)
{
    return (alt_StringView*)new class alt::StringView(((alt::IServer *)_instance)->GetRootDirectory());
}

CAPI struct alt_IResource* alt_IServer_GetResource(struct alt_IServer* _instance, struct alt_StringView* name)
{
    return (alt_IResource*)((alt::IServer *)_instance)->GetResource(*(class alt::StringView*)name);
}

CAPI _Bool alt_IServer_RequireResource(struct alt_IServer* _instance, struct alt_IResource* referrer, struct alt_IResource* resource)
{
    return (_Bool)((alt::IServer *)_instance)->RequireResource((class alt::IResource *)referrer, (class alt::IResource *)resource);
}

CAPI void alt_IServer_LogInfo(struct alt_IServer* _instance, struct alt_StringView* str)
{
    ((alt::IServer *)_instance)->LogInfo(*(class alt::StringView*)str);
}

CAPI void alt_IServer_LogDebug(struct alt_IServer* _instance, struct alt_StringView* str)
{
    ((alt::IServer *)_instance)->LogDebug(*(class alt::StringView*)str);
}

CAPI void alt_IServer_LogWarning(struct alt_IServer* _instance, struct alt_StringView* str)
{
    ((alt::IServer *)_instance)->LogWarning(*(class alt::StringView*)str);
}

CAPI void alt_IServer_LogError(struct alt_IServer* _instance, struct alt_StringView* str)
{
    ((alt::IServer *)_instance)->LogError(*(class alt::StringView*)str);
}

CAPI void alt_IServer_LogColored(struct alt_IServer* _instance, struct alt_StringView* str)
{
    ((alt::IServer *)_instance)->LogColored(*(class alt::StringView*)str);
}

CAPI unsigned int alt_IServer_Hash(struct alt_IServer* _instance, struct alt_StringView* str)
{
    return (unsigned int)((alt::IServer *)_instance)->Hash(*(class alt::StringView*)str);
}

CAPI _Bool alt_IServer_RegisterScriptRuntime(struct alt_IServer* _instance, struct alt_StringView* resourceType, struct alt_IScriptRuntime* runtime)
{
    return (_Bool)((alt::IServer *)_instance)->RegisterScriptRuntime(*(class alt::StringView*)resourceType, (class alt::IScriptRuntime *)runtime);
}

CAPI void alt_IServer_SubscribeTick(struct alt_IServer* _instance, void(*cb)())
{
    ((alt::IServer *)_instance)->SubscribeTick((void (*)(void))cb);
}

CAPI void alt_IServer_TriggerServerEvent(struct alt_IServer* _instance, struct alt_StringView* ev, struct alt_MValueList* args)
{
    ((alt::IServer *)_instance)->TriggerServerEvent(*(class alt::StringView*)ev, *(class alt::MValueList*)args);
}

CAPI void alt_IServer_TriggerClientEvent(struct alt_IServer* _instance, struct alt_IPlayer* target, struct alt_StringView* ev, struct alt_MValueList* args)
{
    ((alt::IServer *)_instance)->TriggerClientEvent((class alt::IPlayer *)target, *(class alt::StringView*)ev, *(class alt::MValueList*)args);
}

CAPI struct alt_IVehicle* alt_IServer_CreateVehicle(struct alt_IServer* _instance, unsigned int model, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_RotationLayout* rot)
{
    return (alt_IVehicle*)((alt::IServer *)_instance)->CreateVehicle((unsigned int)model, *(class alt::Vector<float, 3, class alt::PointLayout>*)pos, *(class alt::Vector<float, 3, class alt::RotationLayout>*)rot);
}

CAPI struct alt_ICheckpoint* alt_IServer_CreateCheckpoint(struct alt_IServer* _instance, struct alt_IPlayer* target, unsigned char type, struct alt_Vector_float_3_PointLayout* pos, float radius, float height, struct alt_RGBA* color)
{
    return (alt_ICheckpoint*)((alt::IServer *)_instance)->CreateCheckpoint((class alt::IPlayer *)target, (unsigned char)type, *(class alt::Vector<float, 3, class alt::PointLayout>*)pos, (float)radius, (float)height, *(struct alt::RGBA*)color);
}

CAPI struct alt_IBlip* alt_IServer_CreateBlip(struct alt_IServer* _instance, struct alt_IPlayer* target, alt_IBlip_Type type, struct alt_Vector_float_3_PointLayout* pos)
{
    return (alt_IBlip*)((alt::IServer *)_instance)->CreateBlip((class alt::IPlayer *)target, (enum alt::IBlip::Type)type, *(class alt::Vector<float, 3, class alt::PointLayout>*)pos);
}

CAPI struct alt_IBlip* alt_IServer_CreateBlip_1(struct alt_IServer* _instance, struct alt_IPlayer* target, alt_IBlip_Type type, struct alt_IEntity* attachTo)
{
    return (alt_IBlip*)((alt::IServer *)_instance)->CreateBlip((class alt::IPlayer *)target, (enum alt::IBlip::Type)type, (class alt::IEntity *)attachTo);
}

CAPI struct alt_IVoiceChannel* alt_IServer_CreateVoiceChannel(struct alt_IServer* _instance, _Bool spatial, float maxDistance)
{
    return (alt_IVoiceChannel*)((alt::IServer *)_instance)->CreateVoiceChannel((_Bool)spatial, (float)maxDistance);
}

CAPI struct alt_IColShape* alt_IServer_CreateColShapeCylinder(struct alt_IServer* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius, float height)
{
    return (alt_IColShape*)((alt::IServer *)_instance)->CreateColShapeCylinder(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, (float)radius, (float)height);
}

CAPI struct alt_IColShape* alt_IServer_CreateColShapeSphere(struct alt_IServer* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius)
{
    return (alt_IColShape*)((alt::IServer *)_instance)->CreateColShapeSphere(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, (float)radius);
}

CAPI struct alt_IColShape* alt_IServer_CreateColShapeCircle(struct alt_IServer* _instance, struct alt_Vector_float_3_PointLayout* pos, float radius)
{
    return (alt_IColShape*)((alt::IServer *)_instance)->CreateColShapeCircle(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, (float)radius);
}

CAPI struct alt_IColShape* alt_IServer_CreateColShapeCube(struct alt_IServer* _instance, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_PointLayout* pos2)
{
    return (alt_IColShape*)((alt::IServer *)_instance)->CreateColShapeCube(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, *(class alt::Vector<float, 3, class alt::PointLayout>*)pos2);
}

CAPI struct alt_IColShape* alt_IServer_CreateColShapeRectangle(struct alt_IServer* _instance, struct alt_Vector_float_3_PointLayout* pos, struct alt_Vector_float_3_PointLayout* pos2)
{
    return (alt_IColShape*)((alt::IServer *)_instance)->CreateColShapeRectangle(*(class alt::Vector<float, 3, class alt::PointLayout>*)pos, *(class alt::Vector<float, 3, class alt::PointLayout>*)pos2);
}

CAPI struct alt_IEntity* alt_IServer_GetEntityByID(struct alt_IServer* _instance, unsigned short id)
{
    return (alt_IEntity*)((alt::IServer *)_instance)->GetEntityByID((unsigned short)id);
}

CAPI void alt_IServer_DestroyBaseObject(struct alt_IServer* _instance, struct alt_IBaseObject* handle)
{
    ((alt::IServer *)_instance)->DestroyBaseObject((class alt::IBaseObject *)handle);
}

CAPI struct alt_Array_IPlayer** alt_IServer_GetPlayersByName(struct alt_IServer* _instance, struct alt_StringView* name)
{
    return (alt_Array_IPlayer**)new class alt::Array<class alt::IPlayer *>(((alt::IServer *)_instance)->GetPlayersByName(*(class alt::StringView*)name));
}

CAPI struct alt_Array_IEntity** alt_IServer_GetEntities(struct alt_IServer* _instance)
{
    return (alt_Array_IEntity**)new class alt::Array<class alt::IEntity *>(((alt::IServer *)_instance)->GetEntities());
}

CAPI struct alt_Array_IPlayer** alt_IServer_GetPlayers(struct alt_IServer* _instance)
{
    return (alt_Array_IPlayer**)new class alt::Array<class alt::IPlayer *>(((alt::IServer *)_instance)->GetPlayers());
}

CAPI struct alt_Array_IVehicle** alt_IServer_GetVehicles(struct alt_IServer* _instance)
{
    return (alt_Array_IVehicle**)new class alt::Array<class alt::IVehicle *>(((alt::IServer *)_instance)->GetVehicles());
}

CAPI unsigned int alt_IServer_GetNetTime(struct alt_IServer* _instance)
{
    return (unsigned int)((alt::IServer *)_instance)->GetNetTime();
}

CAPI struct alt_IServer* alt_IServer_Instance()
{
    return (alt_IServer*)&alt::IServer::Instance();
}

CAPI void alt_IServer_SetInstance(struct alt_IServer* server)
{
    alt::IServer::SetInstance((class alt::IServer *)server);
}

CAPI void alt_IServer_Assign_constIServerRef(struct alt_IServer* _instance, struct alt_IServer* _p0)
{
    ((alt::IServer *)_instance)->operator=((const class alt::IServer &)_p0);
}



#include "altv-capi-extra.cpp"
