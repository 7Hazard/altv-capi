TYPEDEF CLASS alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout = alt::VectorLayout
ClassTemplateSpecializationDecl 0x2753650a638 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:16:5, line:55:5> line:17:11 class VectorLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-CXXRecordDecl 0x27536544e20 prev 0x2753650a638 <col:5, col:11> col:11 implicit class VectorLayout
|-AccessSpecDecl 0x27536544eb0 <line:19:5, col:11> col:5 public
|-TypeAliasDecl 0x27536544f18 <line:20:9, col:25> col:15 Element 'float':'float'
| `-SubstTemplateTypeParmType 0x27536544ee0 'float' sugar
|   |-TemplateTypeParmType 0x275364fb6c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x275364fb670 'T'
|   `-BuiltinType 0x275350e1e40 'float'
|-VarDecl 0x27536544f78 <line:22:9, col:42> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-SubstNonTypeTemplateParmExpr 0x27536545018 <col:42> 'unsigned long long'
|   `-IntegerLiteral 0x27536544ff0 <col:42> 'unsigned long long' 4
|-CXXConstructorDecl 0x275365450b8 <line:24:9, col:42> col:9 used VectorLayout 'void ()'
| |-CXXCtorInitializer Field 0x27536546b08 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-InitListExpr 0x27536df4060 <col:34, col:38> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-array_filler: ImplicitValueInitExpr 0x27536df40c0 <<invalid sloc>> 'alt::VectorLayout<float, 4>::Element':'float'
| |   `-ImplicitCastExpr 0x27536df40a0 <col:36> 'alt::VectorLayout<float, 4>::Element':'float' <IntegralToFloating>
| |     `-IntegerLiteral 0x27536df3f68 <col:36> 'int' 0
| `-CompoundStmt 0x27536df4008 <col:40, col:42>
|-CXXConstructorDecl 0x27536545448 <line:25:9, col:55> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element (&)[4])'
| `-ParmVarDecl 0x27536545338 <col:22, col:54> col:38 _elements 'const alt::VectorLayout<float, 4>::Element (&)[4]'
|-CXXConstructorDecl 0x27536545658 <line:26:9, col:39> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4>::Element &)'
| `-ParmVarDecl 0x27536545548 <col:22, col:37> col:37 el 'const alt::VectorLayout<float, 4>::Element &'
|-FunctionTemplateDecl 0x27536545d20 <line:28:9, line:29:41> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x27536545718 <line:28:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x27536545798 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x27536545c78 <line:29:9, col:41> col:9 VectorLayout 'void (const Args &...)'
|   `-ParmVarDecl 0x27536545b60 <col:22, col:37> col:37 args 'const Args &...' pack
|-FunctionTemplateDecl 0x27536546330 <line:31:9, line:32:44> col:9 VectorLayout
| |-TemplateTypeParmDecl 0x27536545e00 <line:31:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x27536545e78 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x27536546288 <line:32:9, col:44> col:9 VectorLayout 'void (const ULayout &)'
| | `-ParmVarDecl 0x275365461a8 <col:22, col:37> col:37 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x2753654b9e8 <col:9, col:44> col:9 VectorLayout 'void (const alt::VectorLayout<float, 4> &)'
|   |-TemplateArgument type 'alt::VectorLayout<float, 4>'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x2753654b928 <col:22, col:37> col:37 _layout 'const alt::VectorLayout<float, 4> &'
|-CXXMethodDecl 0x275365464f8 <line:37:9, col:44> col:18 operator[] 'alt::VectorLayout<float, 4>::Element &(std::size_t)'
| `-ParmVarDecl 0x27536546438 <col:29, col:41> col:41 key 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x27536546678 <line:38:9, col:52> col:24 operator[] 'const alt::VectorLayout<float, 4>::Element &(std::size_t) const'
| `-ParmVarDecl 0x275365465b0 <col:35, col:47> col:47 key 'std::size_t':'unsigned long long'
|-FriendDecl 0x275365469d0 <line:40:9, line:51:9> line:40:30
| `-FunctionDecl 0x27536546900 parent 0x275364fb390 <col:9, line:51:9> line:40:30 used operator<< 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|   |-ParmVarDecl 0x27536546730 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x275365467d8 <col:63, col:83> col:83 used layout 'const alt::VectorLayout<float, 4> &'
|   `-CompoundStmt 0x27536e2b788 <line:41:9, line:51:9>
|     |-CXXOperatorCallExpr 0x27536e2a218 <line:42:13, col:79> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | |-ImplicitCastExpr 0x27536e2a200 <col:76> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x27536e2a1e0 <col:76> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | |-CXXOperatorCallExpr 0x27536e2a190 <col:13, col:70> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | |-ImplicitCastExpr 0x27536e2a178 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(*)(unsigned long long)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x27536e2a158 <col:67> 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)' lvalue CXXMethod 0x2753651a608 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(unsigned long long)'
|     | | |-CXXOperatorCallExpr 0x27536e2a0c8 <col:13, col:62> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | |-ImplicitCastExpr 0x27536e2a0b0 <col:59> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | `-DeclRefExpr 0x27536e2a090 <col:59> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | |-CXXOperatorCallExpr 0x27536e2a040 <col:13, col:57> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | |-ImplicitCastExpr 0x27536e2a028 <col:33> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | `-DeclRefExpr 0x27536e2a008 <col:33> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | |-CXXOperatorCallExpr 0x27536e29f50 <col:13, col:23> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     | | | | | |-ImplicitCastExpr 0x27536e29f38 <col:20> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     | | | | | | `-DeclRefExpr 0x27536e29f18 <col:20> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     | | | | | |-DeclRefExpr 0x27536e29ee0 <col:13> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x27536546730 'stream' 'std::ostream &'
|     | | | | | `-ImplicitCastExpr 0x27536e29f00 <col:23> 'const char *' <ArrayToPointerDecay>
|     | | | | |   `-StringLiteral 0x27536e20028 <col:23> 'const char [8]' lvalue "Vector<"
|     | | | | `-CXXMemberCallExpr 0x27536e29fe8 <col:36, col:57> 'const char *'
|     | | | |   `-MemberExpr 0x27536e29fb8 <col:36, col:52> '<bound member function type>' .name 0x2753609bee8
|     | | | |     `-CXXTypeidExpr 0x27536e29f98 <col:36, col:50> 'const type_info' lvalue
|     | | | `-ImplicitCastExpr 0x27536e2a078 <col:62> 'const char *' <ArrayToPointerDecay>
|     | | |   `-StringLiteral 0x27536e221e0 <col:62> 'const char [3]' lvalue ", "
|     | | `-ImplicitCastExpr 0x27536e2a140 <col:70> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x27536e2a120 <col:70> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536544f78 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | `-ImplicitCastExpr 0x27536e2a1c8 <col:79> 'const char *' <ArrayToPointerDecay>
|     |   `-StringLiteral 0x27536e268a8 <col:79> 'const char [4]' lvalue ">{ "
|     |-ForStmt 0x27536e2b698 <line:44:13, line:48:13>
|     | |-DeclStmt 0x27536e2a2d0 <line:44:18, col:35>
|     | | `-VarDecl 0x27536e2a250 <col:18, col:34> col:30 used i 'std::size_t':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x27536e2a2b8 <col:34> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x27536e27a30 <col:34> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x27536e2a378 <col:37, col:41> 'bool' '<'
|     | | |-ImplicitCastExpr 0x27536e2a328 <col:37> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | | | `-DeclRefExpr 0x27536e2a2e8 <col:37> 'std::size_t':'unsigned long long' lvalue Var 0x27536e2a250 'i' 'std::size_t':'unsigned long long'
|     | | `-ImplicitCastExpr 0x27536e2a360 <col:41> 'std::size_t':'unsigned long long' <LValueToRValue>
|     | |   `-DeclRefExpr 0x27536e2a340 <col:41> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536544f78 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     | |-UnaryOperator 0x27536e2a3b8 <col:48, col:50> 'std::size_t':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x27536e2a398 <col:50> 'std::size_t':'unsigned long long' lvalue Var 0x27536e2a250 'i' 'std::size_t':'unsigned long long'
|     | `-CompoundStmt 0x27536e2b678 <line:45:13, line:48:13>
|     |   |-IfStmt 0x27536e2a4e8 <line:46:17, col:39>
|     |   | |-BinaryOperator 0x27536e2a420 <col:21, col:26> 'bool' '!='
|     |   | | |-ImplicitCastExpr 0x27536e2a3f0 <col:21> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |   | | | `-DeclRefExpr 0x27536e2a3d0 <col:21> 'std::size_t':'unsigned long long' lvalue Var 0x27536e2a250 'i' 'std::size_t':'unsigned long long'
|     |   | | `-ImplicitCastExpr 0x27536e2a408 <col:26> 'unsigned long long' <IntegralCast>
|     |   | |   `-IntegerLiteral 0x27536e27b70 <col:26> 'int' 0
|     |   | `-CXXOperatorCallExpr 0x27536e2a4b0 <col:29, col:39> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |   |   |-ImplicitCastExpr 0x27536e2a498 <col:36> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x27536e2a478 <col:36> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|     |   |   |-DeclRefExpr 0x27536e2a440 <col:29> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x27536546730 'stream' 'std::ostream &'
|     |   |   `-ImplicitCastExpr 0x27536e2a460 <col:39> 'const char *' <ArrayToPointerDecay>
|     |   |     `-StringLiteral 0x27536e27c08 <col:39> 'const char [3]' lvalue ", "
|     |   `-CXXOperatorCallExpr 0x27536e2b640 <line:47:17, col:44> 'std::basic_ostream<char, std::char_traits<char> >' lvalue
|     |     |-ImplicitCastExpr 0x27536e2b628 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(*)(float)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x27536e2b608 <col:24> 'std::basic_ostream<char, std::char_traits<char> > &(float)' lvalue CXXMethod 0x2753651a788 'operator<<' 'std::basic_ostream<char, std::char_traits<char> > &(float)'
|     |     |-DeclRefExpr 0x27536e2a500 <col:17> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x27536546730 'stream' 'std::ostream &'
|     |     `-ImplicitCastExpr 0x27536e2b5f0 <col:27, col:44> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x27536e2a5c0 <col:27, col:44> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
|     |         |-ImplicitCastExpr 0x27536e2a590 <col:27, col:34> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
|     |         | `-MemberExpr 0x27536e2a540 <col:27, col:34> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x27536546b08
|     |         |   `-DeclRefExpr 0x27536e2a520 <col:27> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x275365467d8 'layout' 'const alt::VectorLayout<float, 4> &'
|     |         `-ImplicitCastExpr 0x27536e2a5a8 <col:43> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |           `-DeclRefExpr 0x27536e2a570 <col:43> 'std::size_t':'unsigned long long' lvalue Var 0x27536e2a250 'i' 'std::size_t':'unsigned long long'
|     `-ReturnStmt 0x27536e2b778 <line:50:13, col:30>
|       `-CXXOperatorCallExpr 0x27536e2b740 <col:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue
|         |-ImplicitCastExpr 0x27536e2b728 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x27536e2b708 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x27536e2b6d0 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x27536546730 'stream' 'std::ostream &'
|         `-ImplicitCastExpr 0x27536e2b6f0 <col:30> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x27536e28e10 <col:30> 'const char [3]' lvalue " }"
|-AccessSpecDecl 0x27536546a10 <line:53:5, col:12> col:5 private
|-FieldDecl 0x27536546b08 <line:54:9, col:31> col:17 referenced elements 'alt::VectorLayout<float, 4>::Element [4]'
|-CXXDestructorDecl 0x27536548a88 <line:17:11> col:11 implicit ~VectorLayout 'void ()' inline default trivial noexcept-unevaluated 0x27536548a88
|-CXXConstructorDecl 0x2753654b130 <col:11> col:11 implicit used constexpr VectorLayout 'void (const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| |-ParmVarDecl 0x2753654b218 <col:11> col:11 used 'const alt::VectorLayout<float, 4> &'
| |-CXXCtorInitializer Field 0x27536546b08 'elements' 'alt::VectorLayout<float, 4>::Element [4]'
| | `-ArrayInitLoopExpr 0x2753654e0a8 <col:11> 'alt::VectorLayout<float, 4>::Element [4]'
| |   |-OpaqueValueExpr 0x2753654e008 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |   | `-MemberExpr 0x2753654dfc0 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x27536546b08
| |   |   `-DeclRefExpr 0x2753654dfa0 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x2753654b218 '' 'const alt::VectorLayout<float, 4> &'
| |   `-ImplicitCastExpr 0x2753654e090 <col:11> 'alt::VectorLayout<float, 4>::Element':'float' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x2753654e070 <col:11> 'const alt::VectorLayout<float, 4>::Element':'const float' lvalue
| |       |-ImplicitCastExpr 0x2753654e058 <col:11> 'const alt::VectorLayout<float, 4>::Element *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x2753654e008 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue
| |       |   `-MemberExpr 0x2753654dfc0 <col:11> 'alt::VectorLayout<float, 4>::Element const[4]' lvalue .elements 0x27536546b08
| |       |     `-DeclRefExpr 0x2753654dfa0 <col:11> 'const alt::VectorLayout<float, 4>' lvalue ParmVar 0x2753654b218 '' 'const alt::VectorLayout<float, 4> &'
| |       `-ArrayInitIndexExpr 0x2753654e020 <<invalid sloc>> 'unsigned long long'
| `-CompoundStmt 0x2753654e0f8 <col:11>
|-CXXConstructorDecl 0x2753654b2b8 <col:11> col:11 implicit constexpr VectorLayout 'void (alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x2753654b2b8
| `-ParmVarDecl 0x2753654b3c8 <col:11> col:11 'alt::VectorLayout<float, 4> &&'
|-CXXMethodDecl 0x27536e0bda8 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(const alt::VectorLayout<float, 4> &) noexcept' inline default trivial
| `-ParmVarDecl 0x27536e0beb8 <col:11> col:11 'const alt::VectorLayout<float, 4> &'
`-CXXMethodDecl 0x27536e0bf28 <col:11> col:11 implicit operator= 'alt::VectorLayout<float, 4> &(alt::VectorLayout<float, 4> &&)' inline default trivial noexcept-unevaluated 0x27536e0bf28
  `-ParmVarDecl 0x27536e0c038 <col:11> col:11 'alt::VectorLayout<float, 4> &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2f = alt::Vector
ClassTemplateSpecializationDecl 0x275365001e0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<float, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector2i = alt::Vector
ClassTemplateSpecializationDecl 0x27536508d00 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 2
`-TemplateArgument type 'alt::VectorLayout<int, 2>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3f = alt::Vector
ClassTemplateSpecializationDecl 0x27536509780 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<float, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector3i = alt::Vector
ClassTemplateSpecializationDecl 0x27536509d70 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::VectorLayout<int, 3>'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4f = alt::Vector
ClassTemplateSpecializationDecl 0x2753650a7f0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x27536546ba8 prev 0x2753650a7f0 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x27536546c38 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x27536546c78 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x27536544d80 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x275364fdb60 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x275364fdb08 '_Layout'
|   `-RecordType 0x2753650a730 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x2753650a638 'VectorLayout'
|-TypeAliasDecl 0x27536546ce8 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x275364fff80 'float' sugar
|   |-TemplateTypeParmType 0x275364fd910 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x275364fd8c0 'T'
|   `-BuiltinType 0x275350e1e40 'float'
|-VarDecl 0x27536546d48 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x27536546e78 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x27536546e48 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536544f78 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x27536546f10 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x2753654c568 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x2753654c5d0 <col:26>
|-CXXConstructorDecl 0x275365471d8 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x275365470f8 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x275365473e8 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x275365472d8 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x27536547a20 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x275365474a8 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x27536547528 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x27536547978 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x27536547890 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x27536548030 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x27536547b00 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x27536547b78 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x27536547f88 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x27536547ea8 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x2753654d9c8 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x2753654d908 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x27536548188 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x27536548258 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x27536548588 <line:91:9, col:65> col:24
| `-FunctionDecl 0x275365484b8 parent 0x275364fb390 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x27536548348 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x275365483e8 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x275365487f8 <line:99:9, col:69> col:23
| `-FunctionDecl 0x27536548728 parent 0x275364fb390 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x275365485d8 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x27536548650 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x2753654b048 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x2753654b048
|-CXXConstructorDecl 0x2753654bb08 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x2753654bbe8 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x2753654e108 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x2753654db70 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x2753654db50 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x2753654bbe8 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x2753654e178 <col:11>
|-CXXConstructorDecl 0x2753654c0a0 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x2753654c0a0
| `-ParmVarDecl 0x2753654c1b8 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x27536e0bbf8 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x27536e0bd08 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x27536e0c0a8 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x27536e0c0a8
  `-ParmVarDecl 0x27536e0c1b8 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::Vector4i = alt::Vector
ClassTemplateSpecializationDecl 0x2753650ade0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'int'
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::VectorLayout<int, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::DXMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x27536510990 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::MatrixLayout<float, 4, 4>'

--- END OF NODE ---

TYPEDEF CLASS alt::Point = alt::Vector
ClassTemplateSpecializationDecl 0x275365338e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PointPadded = alt::Vector
ClassTemplateSpecializationDecl 0x27536533c38 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Position = alt::Vector
ClassTemplateSpecializationDecl 0x275365338e8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::PositionPadded = alt::Vector
ClassTemplateSpecializationDecl 0x27536533c38 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::PointPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::Rotation = alt::Vector
ClassTemplateSpecializationDecl 0x27536544438 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::RotationPadded = alt::Vector
ClassTemplateSpecializationDecl 0x27536544788 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector
|-TemplateArgument type 'float'
|-TemplateArgument integral 3
`-TemplateArgument type 'alt::RotationPaddedLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Row = alt::Vector
ClassTemplateSpecializationDecl 0x2753650a7f0 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:57:5, line:104:5> line:58:11 class Vector definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument type 'alt::VectorLayout<float, 4>'
|-CXXRecordDecl 0x27536546ba8 prev 0x2753650a7f0 <col:5, col:11> col:11 implicit class Vector
|-AccessSpecDecl 0x27536546c38 <line:60:5, col:11> col:5 public
|-TypeAliasDecl 0x27536546c78 <line:61:9, col:24> col:15 Layout 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| `-SubstTemplateTypeParmType 0x27536544d80 'alt::VectorLayout<float, 4>' sugar
|   |-TemplateTypeParmType 0x275364fdb60 '_Layout' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x275364fdb08 '_Layout'
|   `-RecordType 0x2753650a730 'alt::VectorLayout<float, 4>'
|     `-ClassTemplateSpecialization 0x2753650a638 'VectorLayout'
|-TypeAliasDecl 0x27536546ce8 <line:62:9, col:25> col:15 referenced Element 'float':'float'
| `-SubstTemplateTypeParmType 0x275364fff80 'float' sugar
|   |-TemplateTypeParmType 0x275364fd910 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x275364fd8c0 'T'
|   `-BuiltinType 0x275350e1e40 'float'
|-VarDecl 0x27536546d48 <line:64:9, col:50> col:34 used Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x27536546e78 <col:42, col:50> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x27536546e48 <col:42, col:50> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536544f78 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-CXXConstructorDecl 0x27536546f10 <line:66:9, col:26> col:9 used Vector 'void () noexcept(false)' default
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x2753654c568 <col:9> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void ()'
| `-CompoundStmt 0x2753654c5d0 <col:26>
|-CXXConstructorDecl 0x275365471d8 <line:67:9, col:39> col:9 Vector 'void (const float (&)[4])'
| `-ParmVarDecl 0x275365470f8 <col:16, col:38> col:26 _elements 'const float (&)[4]'
|-CXXConstructorDecl 0x275365473e8 <line:68:9, col:36> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &)'
| `-ParmVarDecl 0x275365472d8 <col:16, col:30> col:30 layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Layout &'
|-FunctionTemplateDecl 0x27536547a20 <line:70:9, line:71:35> col:9 Vector
| |-TemplateTypeParmDecl 0x275365474a8 <line:70:19, col:31> col:31 typename depth 0 index 0 ... Args
| |-TemplateTypeParmDecl 0x27536547528 <col:37, col:99> col:37 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<sizeof...(Args) == Width>::type'
| `-CXXConstructorDecl 0x27536547978 <line:71:9, col:35> col:9 Vector 'void (const Args &...)'
|   `-ParmVarDecl 0x27536547890 <col:16, col:31> col:31 args 'const Args &...' pack
|-FunctionTemplateDecl 0x27536548030 <line:73:9, line:74:38> col:9 Vector
| |-TemplateTypeParmDecl 0x27536547b00 <line:73:18, col:24> col:24 class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x27536547b78 <col:33, col:94> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Width >= Width>::type'
| |-CXXConstructorDecl 0x27536547f88 <line:74:9, col:38> col:9 Vector 'void (const ULayout &)'
| | `-ParmVarDecl 0x27536547ea8 <col:16, col:31> col:31 _layout 'const ULayout &'
| `-CXXConstructorDecl 0x2753654d9c8 <col:9, col:38> col:9 Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-TemplateArgument type 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|   |-TemplateArgument type 'void'
|   `-ParmVarDecl 0x2753654d908 <col:16, col:31> col:31 _layout 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXMethodDecl 0x27536548188 <line:76:9, col:21> col:11 LengthSqr 'float ()'
|-CXXMethodDecl 0x27536548258 <line:86:9, col:18> col:11 Length 'float ()'
|-FriendDecl 0x27536548588 <line:91:9, col:65> col:24
| `-FunctionDecl 0x275365484b8 parent 0x275364fb390 <col:9, col:65> col:24 operator-= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x27536548348 <col:35, col:43> col:43 lhs 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x275365483e8 <col:48, col:62> col:62 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-FriendDecl 0x275365487f8 <line:99:9, col:69> col:23
| `-FunctionDecl 0x27536548728 parent 0x275364fb390 <col:9, col:69> col:23 operator- 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &)'
|   |-ParmVarDecl 0x275365485d8 <col:33, col:47> col:47 lhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|   `-ParmVarDecl 0x27536548650 <col:52, col:66> col:66 rhs 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
|-CXXDestructorDecl 0x2753654b048 <line:58:11> col:11 implicit ~Vector 'void ()' inline default trivial noexcept-unevaluated 0x2753654b048
|-CXXConstructorDecl 0x2753654bb08 <col:11> col:11 implicit used constexpr Vector 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| |-ParmVarDecl 0x2753654bbe8 <col:11> col:11 used 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| |-CXXCtorInitializer 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>'
| | `-CXXConstructExpr 0x2753654e108 <col:11> 'alt::VectorLayout<float, 4>':'alt::VectorLayout<float, 4>' 'void (const alt::VectorLayout<float, 4> &) noexcept'
| |   `-ImplicitCastExpr 0x2753654db70 <col:11> 'const alt::VectorLayout<float, 4>':'const alt::VectorLayout<float, 4>' lvalue <UncheckedDerivedToBase (VectorLayout)>
| |     `-DeclRefExpr 0x2753654db50 <col:11> 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x2753654bbe8 '' 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
| `-CompoundStmt 0x2753654e178 <col:11>
|-CXXConstructorDecl 0x2753654c0a0 <col:11> col:11 implicit constexpr Vector 'void (alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x2753654c0a0
| `-ParmVarDecl 0x2753654c1b8 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'
|-CXXMethodDecl 0x27536e0bbf8 <col:11> col:11 implicit referenced operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' inline default trivial
| `-ParmVarDecl 0x27536e0bd08 <col:11> col:11 'const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &'
`-CXXMethodDecl 0x27536e0c0a8 <col:11> col:11 implicit operator= 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &(alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&)' inline default trivial noexcept-unevaluated 0x27536e0c0a8
  `-ParmVarDecl 0x27536e0c1b8 <col:11> col:11 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > &&'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrixLayout::Transposed = alt::ViewMatrixLayout
CXXRecordDecl 0x27536544a50 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:318:5, line:360:5> line:318:11 referenced class ViewMatrixLayout definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x27536544b68 <col:5, col:11> col:11 implicit referenced class ViewMatrixLayout
|-AccessSpecDecl 0x27536544bf8 <line:320:5, col:11> col:5 public
|-TypeAliasDecl 0x27536544c60 <line:321:9, col:21> col:15 referenced Row 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| `-TypedefType 0x27536544c30 'alt::Vector4f' sugar
|   |-TypeAlias 0x2753650aa68 'Vector4f'
|   `-TemplateSpecializationType 0x2753650a9c0 'Vector4<float>' sugar alias Vector4
|     |-TemplateArgument type 'float'
|     |-TemplateSpecializationType 0x2753650a920 'Vector<float, 4>' sugar Vector
|     | |-TemplateArgument type 'float':'float'
|     | |-TemplateArgument expr
|     | | `-ConstantExpr 0x2753650a5a0 <line:114:49> 'std::size_t':'unsigned long long' 4
|     | |   `-ImplicitCastExpr 0x2753650a588 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x2753650a0f0 <col:49> 'int' 4
|     | `-RecordType 0x2753650a900 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|     |   `-ClassTemplateSpecialization 0x2753650a7f0 'Vector'
|     `-TemplateSpecializationType 0x2753650a920 'Vector<float, 4>' sugar Vector
|       |-TemplateArgument type 'float':'float'
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x2753650a5a0 <col:49> 'std::size_t':'unsigned long long' 4
|       |   `-ImplicitCastExpr 0x2753650a588 <col:49> 'std::size_t':'unsigned long long' <IntegralCast>
|       |     `-IntegerLiteral 0x2753650a0f0 <col:49> 'int' 4
|       `-RecordType 0x2753650a900 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|         `-ClassTemplateSpecialization 0x2753650a7f0 'Vector'
|-TypeAliasDecl 0x27536548c00 <line:322:9, col:39> col:15 referenced Element 'typename Row::Element':'float'
| `-ElaboratedType 0x27536548b90 'typename Row::Element' sugar
|   `-TypedefType 0x27536548b70 'alt::Vector<float, 4, alt::VectorLayout<float, 4> >::Element' sugar
|     |-TypeAlias 0x27536546ce8 'Element'
|     `-SubstTemplateTypeParmType 0x275364fff80 'float' sugar
|       |-TemplateTypeParmType 0x275364fd910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x275364fd8c0 'T'
|       `-BuiltinType 0x275350e1e40 'float'
|-TypeAliasDecl 0x27536548c70 <line:323:9, col:28> col:15 Transposed 'alt::ViewMatrixLayout'
| `-RecordType 0x27536544ae0 'alt::ViewMatrixLayout'
|   `-CXXRecord 0x27536544a50 'ViewMatrixLayout'
|-VarDecl 0x27536548d20 <line:325:9, col:47> col:34 referenced Width 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x27536548e20 <col:42, col:47> 'std::size_t':'unsigned long long' <LValueToRValue>
|   `-DeclRefExpr 0x27536548df0 <col:42, col:47> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536546d48 'Width' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|-VarDecl 0x27536548ed0 <line:326:9, col:43> col:34 used Height 'const std::size_t':'const unsigned long long' static cinit
| `-ImplicitCastExpr 0x27536548f60 <col:43> 'const std::size_t':'const unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x27536548f38 <col:43> 'int' 4
|-CXXConstructorDecl 0x27536549020 <line:328:9, col:36> col:9 ViewMatrixLayout 'void ()' default noexcept-unevaluated 0x27536549020
|-CXXConstructorDecl 0x275365494e8 <line:329:9, col:98> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row (&)[4])'
| |-ParmVarDecl 0x275365493f8 <col:26, col:51> col:38 used _rows 'const alt::ViewMatrixLayout::Row (&)[4]'
| |-CXXCtorInitializer Field 0x2753654ac70 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654c5e0 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654acd8 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654c7a8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654ad40 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654c978 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654ada8 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654cb48 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x2753654d3a0 <col:54, col:98>
|   `-CallExpr 0x2753654d350 <col:56, col:95> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x2753654d338 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2753654d2a0 <col:56, col:61> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x2753654d178 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, const alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x275357c2df8 'copy')
|     |-ImplicitCastExpr 0x2753654d388 <col:66> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x2753654cc28 <col:66> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x275365493f8 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |-UnaryOperator 0x2753654cd58 <col:73, col:86> 'const alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x2753654cd38 <col:74, col:86> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ImplicitCastExpr 0x2753654cce8 <col:74> 'const alt::ViewMatrixLayout::Row *' <ArrayToPointerDecay>
|     |   | `-DeclRefExpr 0x2753654cc48 <col:74> 'const alt::ViewMatrixLayout::Row [4]':'const alt::ViewMatrixLayout::Row [4]' lvalue ParmVar 0x275365493f8 '_rows' 'const alt::ViewMatrixLayout::Row (&)[4]'
|     |   `-ImplicitCastExpr 0x2753654cd20 <col:80> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x2753654cd00 <col:80> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536548ed0 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x2753654ce08 <col:89, col:90> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x2753654cd80 <col:90> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x2753654ac70
|         `-CXXThisExpr 0x2753654cd70 <col:90> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x275365496c8 <line:331:9, col:59> col:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Row &)'
| |-ParmVarDecl 0x275365495d8 <col:26, col:37> col:37 used row 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x2753654ac70 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654e188 <col:44, col:55> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2753654d3b8 <col:51> 'const alt::ViewMatrixLayout::Row':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x275365495d8 'row' 'const alt::ViewMatrixLayout::Row &'
| |-CXXCtorInitializer Field 0x2753654acd8 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654e358 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654ad40 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654e528 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654ada8 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654e6f8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x2753654e768 <col:57, col:59>
|-CXXConstructorDecl 0x27536549ab8 <line:333:9, line:336:9> line:333:9 ViewMatrixLayout 'void (const alt::ViewMatrixLayout::Element (&)[16])'
| |-ParmVarDecl 0x275365499c8 <col:26, col:66> col:42 used elements 'const alt::ViewMatrixLayout::Element (&)[16]'
| |-CXXCtorInitializer Field 0x2753654ac70 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654e8f8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654acd8 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654eac8 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654ad40 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654ec98 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| |-CXXCtorInitializer Field 0x2753654ada8 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654ee68 <col:9> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void () noexcept(false)'
| `-CompoundStmt 0x2753654f6a8 <line:334:9, line:336:9>
|   `-CallExpr 0x2753654f670 <line:335:13, col:72> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *':'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *'
|     |-ImplicitCastExpr 0x2753654f658 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(*)(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x2753654f5c0 <col:13, col:18> 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' lvalue Function 0x2753654f498 'copy' 'alt::Vector<float, 4, alt::VectorLayout<float, 4> > *(alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *, alt::Vector<float, 4, alt::VectorLayout<float, 4> > *)' (FunctionTemplate 0x275357c2df8 'copy')
|     |-CStyleCastExpr 0x2753654eff0 <col:23, col:29> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     | `-ImplicitCastExpr 0x2753654efd8 <col:29> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   `-DeclRefExpr 0x2753654ef48 <col:29> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x275365499c8 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |-UnaryOperator 0x2753654f120 <col:39, col:63> 'alt::ViewMatrixLayout::Row *' prefix '&' cannot overflow
|     | `-ArraySubscriptExpr 0x2753654f100 <col:40, col:63> 'alt::ViewMatrixLayout::Row':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|     |   |-ParenExpr 0x2753654f088 <col:40, col:55> 'alt::ViewMatrixLayout::Row *'
|     |   | `-CStyleCastExpr 0x2753654f060 <col:41, col:47> 'alt::ViewMatrixLayout::Row *' <BitCast>
|     |   |   `-ImplicitCastExpr 0x2753654f048 <col:47> 'const alt::ViewMatrixLayout::Element *' <ArrayToPointerDecay> part_of_explicit_cast
|     |   |     `-DeclRefExpr 0x2753654f018 <col:47> 'const alt::ViewMatrixLayout::Element [16]':'const alt::ViewMatrixLayout::Element [16]' lvalue ParmVar 0x275365499c8 'elements' 'const alt::ViewMatrixLayout::Element (&)[16]'
|     |   `-ImplicitCastExpr 0x2753654f0e8 <col:57> 'std::size_t':'unsigned long long' <LValueToRValue>
|     |     `-DeclRefExpr 0x2753654f0c8 <col:57> 'const std::size_t':'const unsigned long long' lvalue Var 0x27536548ed0 'Height' 'const std::size_t':'const unsigned long long' non_odr_use_constant
|     `-UnaryOperator 0x2753654f178 <col:66, col:67> 'alt::Vector4f *' prefix '&' cannot overflow
|       `-MemberExpr 0x2753654f148 <col:67> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x2753654ac70
|         `-CXXThisExpr 0x2753654f138 <col:67> 'alt::ViewMatrixLayout *' implicit this
|-CXXConstructorDecl 0x27536549e58 <line:338:9, col:184> col:9 ViewMatrixLayout 'void (const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &, const alt::Vector4f &)'
| |-ParmVarDecl 0x27536549ba8 <col:26, col:42> col:42 used _right 'const alt::Vector4f &'
| |-ParmVarDecl 0x27536549c20 <col:50, col:66> col:66 used _up 'const alt::Vector4f &'
| |-ParmVarDecl 0x27536549c98 <col:71, col:87> col:87 used _forward 'const alt::Vector4f &'
| |-ParmVarDecl 0x27536549d10 <col:97, col:113> col:113 used _pos 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x2753654ac70 'right' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x2753654fb40 <col:121, col:135> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2753654f6c0 <col:128> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x27536549ba8 '_right' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x2753654acd8 'up' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x27536550010 <col:138, col:146> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x2753654fb98 <col:142> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x27536549c20 '_up' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x2753654ad40 'forward' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x275365504e0 <col:149, col:167> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x27536550068 <col:158> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x27536549c98 '_forward' 'const alt::Vector4f &'
| |-CXXCtorInitializer Field 0x2753654ada8 'pos' 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
| | `-CXXConstructExpr 0x275365509b0 <col:170, col:180> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' 'void (const alt::Vector<float, 4, alt::VectorLayout<float, 4> > &) noexcept' list
| |   `-DeclRefExpr 0x27536550538 <col:175> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ParmVar 0x27536549d10 '_pos' 'const alt::Vector4f &'
| `-CompoundStmt 0x27536550a28 <col:182, col:184>
|-FunctionTemplateDecl 0x2753654a470 <line:340:9, line:341:48> col:9 ViewMatrixLayout
| |-TemplateTypeParmDecl 0x27536549f20 <line:340:18, col:24> col:24 referenced class depth 0 index 0 ULayout
| |-TemplateTypeParmDecl 0x2753654a230 <col:33, col:96> col:33 typename depth 0 index 1
| | `-TemplateArgument type 'typename std::enable_if<ULayout::Height == Height>::type'
| `-CXXConstructorDecl 0x2753654a3c8 <line:341:9, col:48> col:9 ViewMatrixLayout 'void (const ULayout &)'
|   |-ParmVarDecl 0x2753654a308 <col:26, col:41> col:41 _layout 'const ULayout &'
|   `-<<<NULL>>>
|-CXXMethodDecl 0x2753654a648 <line:346:9, col:66> col:14 operator[] 'alt::ViewMatrixLayout::Row &(std::size_t)'
| |-ParmVarDecl 0x2753654a520 <col:25, col:37> col:37 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x27536550b18 <col:42, col:66>
|   `-ReturnStmt 0x27536550b08 <col:44, col:63>
|     `-ArraySubscriptExpr 0x27536550ae8 <col:51, col:63> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x27536550a90 <col:51, col:58> 'alt::Vector4f *'
|       | `-UnaryOperator 0x27536550a78 <col:52, col:53> 'alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x27536550a48 <col:53> 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x2753654ac70
|       |     `-CXXThisExpr 0x27536550a38 <col:53> 'alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x27536550ad0 <col:60> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x27536550ab0 <col:60> 'std::size_t':'unsigned long long' lvalue ParmVar 0x2753654a520 'key' 'std::size_t':'unsigned long long'
|-CXXMethodDecl 0x2753654a868 <line:347:9, col:78> col:20 operator[] 'const alt::ViewMatrixLayout::Row &(std::size_t) const'
| |-ParmVarDecl 0x2753654a740 <col:31, col:43> col:43 used key 'std::size_t':'unsigned long long'
| `-CompoundStmt 0x27536550c38 <col:54, col:78>
|   `-ReturnStmt 0x27536550c28 <col:56, col:75>
|     `-ArraySubscriptExpr 0x27536550c08 <col:63, col:75> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue
|       |-ParenExpr 0x27536550bb0 <col:63, col:70> 'const alt::Vector4f *'
|       | `-UnaryOperator 0x27536550b98 <col:64, col:65> 'const alt::Vector4f *' prefix '&' cannot overflow
|       |   `-MemberExpr 0x27536550b40 <col:65> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue ->right 0x2753654ac70
|       |     `-CXXThisExpr 0x27536550b30 <col:65> 'const alt::ViewMatrixLayout *' implicit this
|       `-ImplicitCastExpr 0x27536550bf0 <col:72> 'std::size_t':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x27536550bd0 <col:72> 'std::size_t':'unsigned long long' lvalue ParmVar 0x2753654a740 'key' 'std::size_t':'unsigned long long'
|-FriendDecl 0x2753654ac20 <line:349:9, line:357:9> line:349:30
| `-FunctionDecl 0x2753654ab60 parent 0x275364fb390 <col:9, line:357:9> line:349:30 operator<< 'std::ostream &(std::ostream &, const alt::ViewMatrixLayout &)'
|   |-ParmVarDecl 0x2753654a998 <col:41, col:55> col:55 used stream 'std::ostream &'
|   |-ParmVarDecl 0x2753654aa38 <col:63, col:87> col:87 used layout 'const alt::ViewMatrixLayout &'
|   `-CompoundStmt 0x27536580cf8 <line:350:9, line:357:9>
|     `-ReturnStmt 0x27536580ce8 <line:351:13, line:356:20>
|       `-CXXOperatorCallExpr 0x27536580cb0 <line:351:20, line:356:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x27536580c98 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x27536580c78 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-CXXOperatorCallExpr 0x2753655d588 <line:351:20, line:355:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | |-ImplicitCastExpr 0x2753655d570 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x2753655d550 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x27536546900 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | |-CXXOperatorCallExpr 0x2753655c590 <line:351:20, line:355:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | |-ImplicitCastExpr 0x2753655c578 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x2753655c558 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | |-CXXOperatorCallExpr 0x2753655b528 <line:351:20, line:354:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | |-ImplicitCastExpr 0x2753655b510 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | `-DeclRefExpr 0x2753655b4f0 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x27536546900 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | |-CXXOperatorCallExpr 0x2753655a530 <line:351:20, line:354:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | |-ImplicitCastExpr 0x2753655a518 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | `-DeclRefExpr 0x2753655a4f8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | |-CXXOperatorCallExpr 0x275365594c8 <line:351:20, line:353:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | |-ImplicitCastExpr 0x275365594b0 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | `-DeclRefExpr 0x27536559490 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x27536546900 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | |-CXXOperatorCallExpr 0x275365584d0 <line:351:20, line:353:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | |-ImplicitCastExpr 0x275365584b8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | `-DeclRefExpr 0x27536558498 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | |-CXXOperatorCallExpr 0x27536557460 <line:351:20, line:352:46> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | |-ImplicitCastExpr 0x27536557448 <col:36> 'std::ostream &(*)(std::ostream &, const alt::VectorLayout<float, 4> &)' <FunctionToPointerDecay>
|         | | | | | | | | `-DeclRefExpr 0x275365573d0 <col:36> 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)' lvalue Function 0x27536546900 'operator<<' 'std::ostream &(std::ostream &, const alt::VectorLayout<float, 4> &)'
|         | | | | | | | |-CXXOperatorCallExpr 0x27536553d30 <line:351:20, line:352:20> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | |-ImplicitCastExpr 0x27536553d18 <col:17> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | `-DeclRefExpr 0x27536553cf8 <col:17> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | |-CXXOperatorCallExpr 0x27536552cc0 <line:351:20, col:30> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         | | | | | | | | | |-ImplicitCastExpr 0x27536552ca8 <col:27> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | | | | | | | | | | `-DeclRefExpr 0x27536552c88 <col:27> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         | | | | | | | | | |-DeclRefExpr 0x27536550c50 <col:20> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x2753654a998 'stream' 'std::ostream &'
|         | | | | | | | | | `-ImplicitCastExpr 0x27536552c70 <col:30> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | | |   `-StringLiteral 0x27536550c70 <col:30> 'const char [13]' lvalue "\nViewMatrix{"
|         | | | | | | | | `-ImplicitCastExpr 0x27536553ce0 <line:352:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | | | |   `-StringLiteral 0x27536552cf8 <col:20> 'const char [13]' lvalue "\n  right:   "
|         | | | | | | | `-ImplicitCastExpr 0x275365573b0 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | | | |   `-MemberExpr 0x27536553d88 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .right 0x2753654ac70
|         | | | | | | |     `-DeclRefExpr 0x27536553d68 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x2753654aa38 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | | | `-ImplicitCastExpr 0x27536558480 <line:353:20> 'const char *' <ArrayToPointerDecay>
|         | | | | | |   `-StringLiteral 0x27536557498 <col:20> 'const char [13]' lvalue "\n  up:      "
|         | | | | | `-ImplicitCastExpr 0x27536559470 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | | | |   `-MemberExpr 0x27536558528 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .up 0x2753654acd8
|         | | | | |     `-DeclRefExpr 0x27536558508 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x2753654aa38 'layout' 'const alt::ViewMatrixLayout &'
|         | | | | `-ImplicitCastExpr 0x2753655a4e0 <line:354:20> 'const char *' <ArrayToPointerDecay>
|         | | | |   `-StringLiteral 0x27536559500 <col:20> 'const char [13]' lvalue "\n  forward: "
|         | | | `-ImplicitCastExpr 0x2753655b4d0 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         | | |   `-MemberExpr 0x2753655a588 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .forward 0x2753654ad40
|         | | |     `-DeclRefExpr 0x2753655a568 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x2753654aa38 'layout' 'const alt::ViewMatrixLayout &'
|         | | `-ImplicitCastExpr 0x2753655c540 <line:355:20> 'const char *' <ArrayToPointerDecay>
|         | |   `-StringLiteral 0x2753655b560 <col:20> 'const char [13]' lvalue "\n  pos:     "
|         | `-ImplicitCastExpr 0x2753655d530 <col:39, col:46> 'const alt::VectorLayout<float, 4>' lvalue <DerivedToBase (VectorLayout)>
|         |   `-MemberExpr 0x2753655c5e8 <col:39, col:46> 'const alt::Vector4f':'const alt::Vector<float, 4, alt::VectorLayout<float, 4> >' lvalue .pos 0x2753654ada8
|         |     `-DeclRefExpr 0x2753655c5c8 <col:39> 'const alt::ViewMatrixLayout' lvalue ParmVar 0x2753654aa38 'layout' 'const alt::ViewMatrixLayout &'
|         `-ImplicitCastExpr 0x27536580c60 <line:356:20> 'const char *' <ArrayToPointerDecay>
|           `-StringLiteral 0x2753655d5c0 <col:20> 'const char [4]' lvalue "\n}\n"
|-FieldDecl 0x2753654ac70 <line:359:9, col:18> col:18 referenced right 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x2753654acd8 <col:9, col:25> col:25 referenced up 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
|-FieldDecl 0x2753654ad40 <col:9, col:29> col:29 referenced forward 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'
`-FieldDecl 0x2753654ada8 <col:9, col:38> col:38 referenced pos 'alt::Vector4f':'alt::Vector<float, 4, alt::VectorLayout<float, 4> >'

--- END OF NODE ---

TYPEDEF CLASS alt::ViewMatrix = alt::Matrix
ClassTemplateSpecializationDecl 0x27536580df8 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/entities/../deps/alt-math/alt-math.h:173:5, line:208:5> line:174:11 class Matrix
|-TemplateArgument type 'float'
|-TemplateArgument integral 4
|-TemplateArgument integral 4
`-TemplateArgument type 'alt::ViewMatrixLayout'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::String = alt::String
CXXRecordDecl 0x275367cd768 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/String.h:13:2, line:142:2> line:13:8 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x275367cd888 <col:2, col:8> col:8 implicit referenced class String
|-AccessSpecDecl 0x275367cd918 <line:15:2, col:8> col:2 public
|-CXXConstructorDecl 0x275367cdb08 <line:16:3, line:22:3> line:16:3 used String 'void (alt::Size, char)'
| |-ParmVarDecl 0x275367cd980 <col:10, col:15> col:15 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x275367cd9f8 <col:22, col:34> col:27 used fill 'char' cinit
| | `-CharacterLiteral 0x275367d1148 <col:34> 'char' 0
| |-CXXCtorInitializer Field 0x275367d0bf0 'size' 'alt::Size':'unsigned long long'
| | `-ImplicitCastExpr 0x275367d11a0 <line:17:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   `-DeclRefExpr 0x275367d1160 <col:9> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367cd980 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275367d1650 <line:18:3, line:22:3>
|   |-BinaryOperator 0x275367d1358 <line:19:4, col:28> 'char *' lvalue '='
|   | |-MemberExpr 0x275367d11f8 <col:4> 'char *' lvalue ->data 0x275367d0b88
|   | | `-CXXThisExpr 0x275367d11e8 <col:4> 'alt::String *' implicit this
|   | `-CXXNewExpr 0x275367d1318 <col:11, col:28> 'char *' array Function 0x275353d5008 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|   |   `-BinaryOperator 0x275367d12c0 <col:20, col:27> 'unsigned long long' '+'
|   |     |-ImplicitCastExpr 0x275367d1290 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |     | `-MemberExpr 0x275367d1238 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|   |     |   `-CXXThisExpr 0x275367d1228 <col:20> 'alt::String *' implicit this
|   |     `-ImplicitCastExpr 0x275367d12a8 <col:27> 'unsigned long long' <IntegralCast>
|   |       `-IntegerLiteral 0x275367d1268 <col:27> 'int' 1
|   |-CallExpr 0x275367d1498 <line:20:4, col:27> 'void *'
|   | |-ImplicitCastExpr 0x275367d1480 <col:4> 'void *(*)(void *, int, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x275367d1460 <col:4> 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)' lvalue Function 0x275354a3ff8 'memset' 'void *(void *, int, size_t) __attribute__((cdecl))':'void *(void *, int, size_t)'
|   | |-ImplicitCastExpr 0x275367d14e8 <col:11> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x275367d14d0 <col:11> 'char *' <LValueToRValue>
|   | |   `-MemberExpr 0x275367d13d0 <col:11> 'char *' lvalue ->data 0x275367d0b88
|   | |     `-CXXThisExpr 0x275367d13c0 <col:11> 'alt::String *' implicit this
|   | |-ImplicitCastExpr 0x275367d1518 <col:17> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x275367d1500 <col:17> 'char' <LValueToRValue>
|   | |   `-DeclRefExpr 0x275367d1400 <col:17> 'char' lvalue ParmVar 0x275367cd9f8 'fill' 'char'
|   | `-ImplicitCastExpr 0x275367d1530 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x275367d1430 <col:23> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|   |     `-CXXThisExpr 0x275367d1420 <col:23> 'alt::String *' implicit this
|   `-BinaryOperator 0x275367d1630 <line:21:4, col:17> 'char' lvalue '='
|     |-ArraySubscriptExpr 0x275367d15f8 <col:4, col:13> 'char' lvalue
|     | |-ImplicitCastExpr 0x275367d15c8 <col:4> 'char *' <LValueToRValue>
|     | | `-MemberExpr 0x275367d1558 <col:4> 'char *' lvalue ->data 0x275367d0b88
|     | |   `-CXXThisExpr 0x275367d1548 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x275367d15e0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-MemberExpr 0x275367d1598 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|     |     `-CXXThisExpr 0x275367d1588 <col:9> 'alt::String *' implicit this
|     `-CharacterLiteral 0x275367d1618 <col:17> 'char' 0
|-FunctionTemplateDecl 0x275367cde50 <line:24:3, line:35:3> line:25:3 String
| |-TemplateTypeParmDecl 0x275367cdbc0 <line:24:12, col:18> col:18 referenced class depth 0 index 0 Iter
| |-CXXConstructorDecl 0x275367cdda8 <line:25:3, line:35:3> line:25:3 String 'void (Iter, Iter)'
| | |-ParmVarDecl 0x275367cdc60 <col:10, col:15> col:15 referenced first 'Iter'
| | |-ParmVarDecl 0x275367cdcd8 <col:22, col:27> col:27 referenced last 'Iter'
| | `-CompoundStmt 0x27536ee23d0 <line:26:3, line:35:3>
| |   |-BinaryOperator 0x27536ee1e38 <line:27:4, col:36> '<dependent type>' '='
| |   | |-MemberExpr 0x27536ee1d30 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
| |   | | `-CXXThisExpr 0x27536ee1d20 <col:4> 'alt::String *' implicit this
| |   | `-CallExpr 0x27536ee1e08 <col:11, col:36> '<dependent type>'
| |   |   |-UnresolvedLookupExpr 0x27536ee1d80 <col:11, col:16> '<overloaded function type>' lvalue (no ADL) = 'distance' 0x27535dd5b88
| |   |   |-DeclRefExpr 0x27536ee1dc8 <col:25> 'Iter' lvalue ParmVar 0x275367cdc60 'first' 'Iter'
| |   |   `-DeclRefExpr 0x27536ee1de8 <col:32> 'Iter' lvalue ParmVar 0x275367cdcd8 'last' 'Iter'
| |   |-BinaryOperator 0x27536ee1fa0 <line:29:4, col:28> 'char *' lvalue '='
| |   | |-MemberExpr 0x27536ee1e68 <col:4> 'char *' lvalue ->data 0x275367d0b88
| |   | | `-CXXThisExpr 0x27536ee1e58 <col:4> 'alt::String *' implicit this
| |   | `-CXXNewExpr 0x27536ee1f60 <col:11, col:28> 'char *' array Function 0x275353d5008 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
| |   |   `-BinaryOperator 0x27536ee1f30 <col:20, col:27> 'unsigned long long' '+'
| |   |     |-ImplicitCastExpr 0x27536ee1f00 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |     | `-MemberExpr 0x27536ee1ea8 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
| |   |     |   `-CXXThisExpr 0x27536ee1e98 <col:20> 'alt::String *' implicit this
| |   |     `-ImplicitCastExpr 0x27536ee1f18 <col:27> 'unsigned long long' <IntegralCast>
| |   |       `-IntegerLiteral 0x27536ee1ed8 <col:27> 'int' 1
| |   |-ForStmt 0x27536ee2290 <line:31:4, line:32:24>
| |   | |-DeclStmt 0x27536ee2078 <line:31:9, col:19>
| |   | | `-VarDecl 0x27536ee1fd0 <col:9, col:18> col:14 referenced i 'alt::Size':'unsigned long long' cinit
| |   | |   `-ImplicitCastExpr 0x27536ee2060 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
| |   | |     `-IntegerLiteral 0x27536ee2038 <col:18> 'int' 0
| |   | |-<<<NULL>>>
| |   | |-BinaryOperator 0x27536ee20d0 <col:21, col:30> '<dependent type>' '!='
| |   | | |-DeclRefExpr 0x27536ee2090 <col:21> 'Iter' lvalue ParmVar 0x275367cdc60 'first' 'Iter'
| |   | | `-DeclRefExpr 0x27536ee20b0 <col:30> 'Iter' lvalue ParmVar 0x275367cdcd8 'last' 'Iter'
| |   | |-UnaryOperator 0x27536ee2110 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
| |   | | `-DeclRefExpr 0x27536ee20f0 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x27536ee1fd0 'i' 'alt::Size':'unsigned long long'
| |   | `-BinaryOperator 0x27536ee2270 <line:32:5, col:24> '<dependent type>' '='
| |   |   |-ArraySubscriptExpr 0x27536ee21b8 <col:5, col:11> 'char' lvalue
| |   |   | |-ImplicitCastExpr 0x27536ee2188 <col:5> 'char *' <LValueToRValue>
| |   |   | | `-MemberExpr 0x27536ee2138 <col:5> 'char *' lvalue ->data 0x275367d0b88
| |   |   | |   `-CXXThisExpr 0x27536ee2128 <col:5> 'alt::String *' implicit this
| |   |   | `-ImplicitCastExpr 0x27536ee21a0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
| |   |   |   `-DeclRefExpr 0x27536ee2168 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x27536ee1fd0 'i' 'alt::Size':'unsigned long long'
| |   |   `-UnaryOperator 0x27536ee2258 <col:15, col:24> '<dependent type>' prefix '*' cannot overflow
| |   |     `-ParenExpr 0x27536ee2238 <col:16, col:24> '<dependent type>'
| |   |       `-UnaryOperator 0x27536ee2220 <col:17, col:22> '<dependent type>' postfix '++' cannot overflow
| |   |         `-DeclRefExpr 0x27536ee21d8 <col:17> 'Iter' lvalue ParmVar 0x275367cdc60 'first' 'Iter'
| |   `-BinaryOperator 0x27536ee23b0 <line:34:4, col:17> 'char' lvalue '='
| |     |-ArraySubscriptExpr 0x27536ee2378 <col:4, col:13> 'char' lvalue
| |     | |-ImplicitCastExpr 0x27536ee2348 <col:4> 'char *' <LValueToRValue>
| |     | | `-MemberExpr 0x27536ee22d8 <col:4> 'char *' lvalue ->data 0x275367d0b88
| |     | |   `-CXXThisExpr 0x27536ee22c8 <col:4> 'alt::String *' implicit this
| |     | `-ImplicitCastExpr 0x27536ee2360 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     |   `-MemberExpr 0x27536ee2318 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
| |     |     `-CXXThisExpr 0x27536ee2308 <col:9> 'alt::String *' implicit this
| |     `-CharacterLiteral 0x27536ee2398 <col:17> 'char' 0
| `-CXXConstructorDecl 0x275367d19e8 <line:25:3, line:35:3> line:25:3 used String 'void (const char *, const char *)'
|   |-TemplateArgument type 'const char *'
|   |-ParmVarDecl 0x275367d1858 <col:10, col:15> col:15 used first 'const char *':'const char *'
|   |-ParmVarDecl 0x275367d18d0 <col:22, col:27> col:27 used last 'const char *':'const char *'
|   `-CompoundStmt 0x27536eeed48 <line:26:3, line:35:3>
|     |-BinaryOperator 0x27536eee958 <line:27:4, col:36> 'alt::Size':'unsigned long long' lvalue '='
|     | |-MemberExpr 0x27536ee1d30 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|     | | `-CXXThisExpr 0x27536ee1d20 <col:4> 'alt::String *' implicit this
|     | `-ImplicitCastExpr 0x27536eee940 <col:11, col:36> 'alt::Size':'unsigned long long' <IntegralCast>
|     |   `-CallExpr 0x27536eee8e0 <col:11, col:36> '_Iter_diff_t<const char *>':'long long'
|     |     |-ImplicitCastExpr 0x27536eee8c8 <col:11, col:16> '_Iter_diff_t<const char *> (*)(const char *, const char *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x27536eed700 <col:11, col:16> '_Iter_diff_t<const char *> (const char *, const char *)' lvalue Function 0x27536eed5b8 'distance' '_Iter_diff_t<const char *> (const char *, const char *)' (FunctionTemplate 0x27535dd5b88 'distance')
|     |     |-ImplicitCastExpr 0x27536eee910 <col:25> 'const char *':'const char *' <LValueToRValue>
|     |     | `-DeclRefExpr 0x27536ee2448 <col:25> 'const char *':'const char *' lvalue ParmVar 0x275367d1858 'first' 'const char *':'const char *'
|     |     `-ImplicitCastExpr 0x27536eee928 <col:32> 'const char *':'const char *' <LValueToRValue>
|     |       `-DeclRefExpr 0x27536ee2468 <col:32> 'const char *':'const char *' lvalue ParmVar 0x275367d18d0 'last' 'const char *':'const char *'
|     |-BinaryOperator 0x27536eeea08 <line:29:4, col:11> 'char *' lvalue '='
|     | |-MemberExpr 0x27536ee1e68 <col:4> 'char *' lvalue ->data 0x275367d0b88
|     | | `-CXXThisExpr 0x27536ee1e58 <col:4> 'alt::String *' implicit this
|     | `-CXXNewExpr 0x27536eee9c8 <col:11> 'char *' array Function 0x275353d5008 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
|     |   `-BinaryOperator 0x27536eee9a8 <col:20, col:27> 'unsigned long long' '+'
|     |     |-ImplicitCastExpr 0x27536eee978 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |     | `-MemberExpr 0x27536ee1ea8 <col:20> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|     |     |   `-CXXThisExpr 0x27536ee1e98 <col:20> 'alt::String *' implicit this
|     |     `-ImplicitCastExpr 0x27536eee990 <col:27> 'unsigned long long' <IntegralCast>
|     |       `-IntegerLiteral 0x27536ee1ed8 <col:27> 'int' 1
|     |-ForStmt 0x27536eeeca0 <line:31:4, line:32:24>
|     | |-DeclStmt 0x27536eeeaa8 <line:31:9, col:19>
|     | | `-VarDecl 0x27536eeea28 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|     | |   `-ImplicitCastExpr 0x27536eeea90 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|     | |     `-IntegerLiteral 0x27536ee2038 <col:18> 'int' 0
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x27536eeeb30 <col:21, col:30> 'bool' '!='
|     | | |-ImplicitCastExpr 0x27536eeeb00 <col:21> 'const char *':'const char *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x27536eeeac0 <col:21> 'const char *':'const char *' lvalue ParmVar 0x275367d1858 'first' 'const char *':'const char *'
|     | | `-ImplicitCastExpr 0x27536eeeb18 <col:30> 'const char *':'const char *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x27536eeeae0 <col:30> 'const char *':'const char *' lvalue ParmVar 0x275367d18d0 'last' 'const char *':'const char *'
|     | |-UnaryOperator 0x27536eeeb70 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     | | `-DeclRefExpr 0x27536eeeb50 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x27536eeea28 'i' 'alt::Size':'unsigned long long'
|     | `-BinaryOperator 0x27536eeec80 <line:32:5, col:24> 'char' lvalue '='
|     |   |-ArraySubscriptExpr 0x27536eeebd8 <col:5, col:11> 'char' lvalue
|     |   | |-ImplicitCastExpr 0x27536eeeba8 <col:5> 'char *' <LValueToRValue>
|     |   | | `-MemberExpr 0x27536ee2138 <col:5> 'char *' lvalue ->data 0x275367d0b88
|     |   | |   `-CXXThisExpr 0x27536ee2128 <col:5> 'alt::String *' implicit this
|     |   | `-ImplicitCastExpr 0x27536eeebc0 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x27536eeeb88 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x27536eeea28 'i' 'alt::Size':'unsigned long long'
|     |   `-ImplicitCastExpr 0x27536eeec68 <col:15, col:24> 'char' <LValueToRValue>
|     |     `-UnaryOperator 0x27536eeec50 <col:15, col:24> 'const char' lvalue prefix '*' cannot overflow
|     |       `-ParenExpr 0x27536eeec30 <col:16, col:24> 'const char *':'const char *'
|     |         `-UnaryOperator 0x27536eeec18 <col:17, col:22> 'const char *':'const char *' postfix '++'
|     |           `-DeclRefExpr 0x27536eeebf8 <col:17> 'const char *':'const char *' lvalue ParmVar 0x275367d1858 'first' 'const char *':'const char *'
|     `-BinaryOperator 0x27536eeed28 <line:34:4, col:17> 'char' lvalue '='
|       |-ArraySubscriptExpr 0x27536eeed08 <col:4, col:13> 'char' lvalue
|       | |-ImplicitCastExpr 0x27536eeecd8 <col:4> 'char *' <LValueToRValue>
|       | | `-MemberExpr 0x27536ee22d8 <col:4> 'char *' lvalue ->data 0x275367d0b88
|       | |   `-CXXThisExpr 0x27536ee22c8 <col:4> 'alt::String *' implicit this
|       | `-ImplicitCastExpr 0x27536eeecf0 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x27536ee2318 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|       |     `-CXXThisExpr 0x27536ee2308 <col:9> 'alt::String *' implicit this
|       `-CharacterLiteral 0x27536ee2398 <col:17> 'char' 0
|-CXXConstructorDecl 0x275367ce018 <line:37:3, line:41:3> line:37:3 used String 'void (const char *, alt::Size)'
| |-ParmVarDecl 0x275367cded0 <col:10, col:22> col:22 used _data 'const char *'
| |-ParmVarDecl 0x275367cdf48 <col:29, col:34> col:34 used size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x275367d1b10 <line:38:4, col:30> 'alt::String' 'void (const char *, const char *)'
| |   |-ImplicitCastExpr 0x275367d1af8 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x275367d1678 <col:11> 'const char *' lvalue ParmVar 0x275367cded0 '_data' 'const char *'
| |   `-BinaryOperator 0x275367d1708 <col:18, col:26> 'const char *' '+'
| |     |-ImplicitCastExpr 0x275367d16d8 <col:18> 'const char *' <LValueToRValue>
| |     | `-DeclRefExpr 0x275367d1698 <col:18> 'const char *' lvalue ParmVar 0x275367cded0 '_data' 'const char *'
| |     `-ImplicitCastExpr 0x275367d16f0 <col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x275367d16b8 <col:26> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367cdf48 'size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275367d1b78 <line:39:3, line:41:3>
|-CXXConstructorDecl 0x275367ce0f0 <line:43:3, line:47:3> line:43:3 used String 'void ()'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x275367d1c60 <line:44:4, col:21> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x275367d1c30 <col:11> 'const char *' <NullToPointer>
| |   | `-CXXNullPtrLiteralExpr 0x275367d1b88 <col:11> 'nullptr_t'
| |   `-ImplicitCastExpr 0x275367d1c48 <col:20> 'alt::Size':'unsigned long long' <IntegralCast>
| |     `-IntegerLiteral 0x275367d1b98 <col:20> 'int' 0
| `-CompoundStmt 0x275367d1cc8 <line:45:3, line:47:3>
|-CXXConstructorDecl 0x275367ce240 <line:49:3, line:53:3> line:49:3 used String 'void (const char *)'
| |-ParmVarDecl 0x275367ce1b0 <col:10, col:22> col:22 used _str 'const char *'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x275367d1e60 <line:50:4, col:29> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x275367d1e48 <col:11> 'const char *' <LValueToRValue>
| |   | `-DeclRefExpr 0x275367d1cd8 <col:11> 'const char *' lvalue ParmVar 0x275367ce1b0 '_str' 'const char *'
| |   `-CallExpr 0x275367d1d98 <col:17, col:28> 'size_t':'unsigned long long'
| |     |-ImplicitCastExpr 0x275367d1d80 <col:17> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x275367d1d60 <col:17> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2753552f650 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
| |     `-ImplicitCastExpr 0x275367d1dc0 <col:24> 'const char *' <LValueToRValue>
| |       `-DeclRefExpr 0x275367d1d40 <col:24> 'const char *' lvalue ParmVar 0x275367ce1b0 '_str' 'const char *'
| `-CompoundStmt 0x275367d1ec8 <line:51:3, line:53:3>
|-FunctionTemplateDecl 0x275367ce600 <line:55:3, line:56:34> col:3 String
| |-NonTypeTemplateParmDecl 0x275367ce300 <line:55:12, col:17> col:17 referenced 'alt::Size':'unsigned long long' depth 0 index 0 Size
| |-CXXConstructorDecl 0x275367ce558 <line:56:3, col:34> col:3 String 'void (const char (&)[Size])'
| | |-ParmVarDecl 0x275367ce468 <col:10, col:33> col:22 _data 'const char (&)[Size]'
| | `-<<<NULL>>>
| `-CXXConstructorDecl 0x27536a739e8 <col:3, col:34> col:3 String 'void (const char (&)[9])'
|   |-TemplateArgument integral 9
|   `-ParmVarDecl 0x27536a738f8 <col:10, col:33> col:22 _data 'const char (&)[9]'
|-CXXConstructorDecl 0x275367ce7f8 <line:62:3, line:66:3> line:62:3 used String 'void (const std::string &)'
| |-ParmVarDecl 0x275367ce730 <col:10, col:29> col:29 used _str 'const std::string &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x275367d2088 <line:63:4, col:35> 'alt::String' 'void (const char *, alt::Size)'
| |   |-CXXMemberCallExpr 0x275367d1f88 <col:11, col:21> 'const char *'
| |   | `-MemberExpr 0x275367d1f58 <col:11, col:16> '<bound member function type>' .data 0x275360818b8
| |   |   `-DeclRefExpr 0x275367d1ed8 <col:11> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x275367ce730 '_str' 'const std::string &'
| |   `-CXXMemberCallExpr 0x275367d1ff8 <col:24, col:34> 'std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type':'unsigned long long'
| |     `-MemberExpr 0x275367d1fc8 <col:24, col:29> '<bound member function type>' .size 0x27536081c28
| |       `-DeclRefExpr 0x275367d1fa8 <col:24> 'const std::string':'const std::basic_string<char, std::char_traits<char>, std::allocator<char> >' lvalue ParmVar 0x275367ce730 '_str' 'const std::string &'
| `-CompoundStmt 0x275367d20f0 <line:64:3, line:66:3>
|-CXXConstructorDecl 0x275367ce9a8 <line:68:3, line:72:3> line:68:3 used String 'void (const alt::String &)'
| |-ParmVarDecl 0x275367ce8e8 <col:10, col:24> col:24 used that 'const alt::String &'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x275367d2258 <line:69:4, col:31> 'alt::String' 'void (const char *, alt::Size)'
| |   |-ImplicitCastExpr 0x275367d2228 <col:11, col:16> 'const char *' <NoOp>
| |   | `-ImplicitCastExpr 0x275367d2210 <col:11, col:16> 'char *' <LValueToRValue>
| |   |   `-MemberExpr 0x275367d2120 <col:11, col:16> 'char *const' lvalue .data 0x275367d0b88
| |   |     `-DeclRefExpr 0x275367d2100 <col:11> 'const alt::String' lvalue ParmVar 0x275367ce8e8 'that' 'const alt::String &'
| |   `-ImplicitCastExpr 0x275367d2240 <col:22, col:27> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x275367d2170 <col:22, col:27> 'const alt::Size':'const unsigned long long' lvalue .size 0x275367d0bf0
| |       `-DeclRefExpr 0x275367d2150 <col:22> 'const alt::String' lvalue ParmVar 0x275367ce8e8 'that' 'const alt::String &'
| `-CompoundStmt 0x275367d22c0 <line:70:3, line:72:3>
|-CXXConstructorDecl 0x275367ceb58 <line:74:3, line:80:3> line:74:3 used String 'void (alt::String &&)'
| |-ParmVarDecl 0x275367cea98 <col:10, col:19> col:19 used that 'alt::String &&'
| |-CXXCtorInitializer 'alt::String'
| | `-CXXConstructExpr 0x275367d22f8 <line:75:4, col:11> 'alt::String' 'void ()'
| `-CompoundStmt 0x275367d2528 <line:76:3, line:80:3>
|   |-DeclStmt 0x275367d23f0 <line:77:4, col:14>
|   | `-VarDecl 0x275367d2360 <col:4, col:11> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x275367d23c8 <col:11> 'alt::String' 'void ()'
|   |-CXXMemberCallExpr 0x275367d2478 <line:78:4, col:17> 'void'
|   | |-MemberExpr 0x275367d2428 <col:4, col:8> '<bound member function type>' .Swap 0x275367d0d18
|   | | `-DeclRefExpr 0x275367d2408 <col:4> 'alt::String' lvalue Var 0x275367d2360 'tmp' 'alt::String'
|   | `-DeclRefExpr 0x275367d2458 <col:13> 'alt::String' lvalue ParmVar 0x275367cea98 'that' 'alt::String &&'
|   `-CXXMemberCallExpr 0x275367d2500 <line:79:4, col:12> 'void'
|     |-MemberExpr 0x275367d24b0 <col:4> '<bound member function type>' ->Swap 0x275367d0d18
|     | `-CXXThisExpr 0x275367d24a0 <col:4> 'alt::String *' implicit this
|     `-DeclRefExpr 0x275367d24e0 <col:9> 'alt::String' lvalue Var 0x275367d2360 'tmp' 'alt::String'
|-CXXDestructorDecl 0x275367cec50 <line:82:3, col:30> col:3 used ~String 'void () noexcept'
| `-CompoundStmt 0x275367d25c8 <col:13, col:30>
|   `-CXXDeleteExpr 0x275367d25a8 <col:15, col:24> 'void' array Function 0x275353d5918 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x275367d2590 <col:24> 'char *' <LValueToRValue>
|       `-MemberExpr 0x275367d2560 <col:24> 'char *' lvalue ->data 0x275367d0b88
|         `-CXXThisExpr 0x275367d2550 <col:24> 'alt::String *' implicit this
|-CXXMethodDecl 0x275367cee10 <line:84:3, col:50> col:9 used operator[] 'char &(alt::Size)'
| |-ParmVarDecl 0x275367ced40 <col:20, col:25> col:25 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275367d26a0 <col:30, col:50>
|   `-ReturnStmt 0x275367d2690 <col:32, col:47>
|     `-ArraySubscriptExpr 0x275367d2670 <col:39, col:47> 'char' lvalue
|       |-ImplicitCastExpr 0x275367d2640 <col:39> 'char *' <LValueToRValue>
|       | `-MemberExpr 0x275367d25f0 <col:39> 'char *' lvalue ->data 0x275367d0b88
|       |   `-CXXThisExpr 0x275367d25e0 <col:39> 'alt::String *' implicit this
|       `-ImplicitCastExpr 0x275367d2658 <col:44> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x275367d2620 <col:44> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367ced40 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x275367cefe8 <line:85:3, col:55> col:8 used operator[] 'char (alt::Size) const'
| |-ParmVarDecl 0x275367ceec8 <col:19, col:24> col:24 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275367d2790 <col:35, col:55>
|   `-ReturnStmt 0x275367d2780 <col:37, col:52>
|     `-ImplicitCastExpr 0x275367d2768 <col:44, col:52> 'char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x275367d2748 <col:44, col:52> 'char' lvalue
|         |-ImplicitCastExpr 0x275367d2718 <col:44> 'char *' <LValueToRValue>
|         | `-MemberExpr 0x275367d26c8 <col:44> 'char *const' lvalue ->data 0x275367d0b88
|         |   `-CXXThisExpr 0x275367d26b8 <col:44> 'const alt::String *' implicit this
|         `-ImplicitCastExpr 0x275367d2730 <col:49> 'alt::Size':'unsigned long long' <LValueToRValue>
|           `-DeclRefExpr 0x275367d26f8 <col:49> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367ceec8 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x275367cf198 <line:87:3, line:92:3> line:87:11 used operator= 'alt::String &(const alt::String &)'
| |-ParmVarDecl 0x275367cf0a0 <col:21, col:35> col:35 used that 'const alt::String &'
| `-CompoundStmt 0x275367d2998 <line:88:3, line:92:3>
|   |-DeclStmt 0x275367d28c0 <line:89:4, col:20>
|   | `-VarDecl 0x275367d27d8 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x275367d2890 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-DeclRefExpr 0x275367d27a8 <col:15> 'const alt::String' lvalue ParmVar 0x275367cf0a0 'that' 'const alt::String &'
|   |-CXXMemberCallExpr 0x275367d2938 <line:90:4, col:12> 'void'
|   | |-MemberExpr 0x275367d28e8 <col:4> '<bound member function type>' ->Swap 0x275367d0d18
|   | | `-CXXThisExpr 0x275367d28d8 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x275367d2918 <col:9> 'alt::String' lvalue Var 0x275367d27d8 'tmp' 'alt::String'
|   `-ReturnStmt 0x275367d2988 <line:91:4, col:12>
|     `-UnaryOperator 0x275367d2970 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x275367d2960 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x275367cf318 <line:94:3, line:99:3> line:94:11 used operator= 'alt::String &(alt::String &&)'
| |-ParmVarDecl 0x275367cf250 <col:21, col:30> col:30 used that 'alt::String &&'
| `-CompoundStmt 0x275367d2bc8 <line:95:3, line:99:3>
|   |-DeclStmt 0x275367d2af0 <line:96:4, col:20>
|   | `-VarDecl 0x275367d29f0 <col:4, col:19> col:11 used tmp 'alt::String' callinit
|   |   `-CXXConstructExpr 0x275367d2ac0 <col:11, col:19> 'alt::String' 'void (const alt::String &)'
|   |     `-ImplicitCastExpr 0x275367d2aa8 <col:15> 'const alt::String' lvalue <NoOp>
|   |       `-DeclRefExpr 0x275367d29c0 <col:15> 'alt::String' lvalue ParmVar 0x275367cf250 'that' 'alt::String &&'
|   |-CXXMemberCallExpr 0x275367d2b68 <line:97:4, col:12> 'void'
|   | |-MemberExpr 0x275367d2b18 <col:4> '<bound member function type>' ->Swap 0x275367d0d18
|   | | `-CXXThisExpr 0x275367d2b08 <col:4> 'alt::String *' implicit this
|   | `-DeclRefExpr 0x275367d2b48 <col:9> 'alt::String' lvalue Var 0x275367d29f0 'tmp' 'alt::String'
|   `-ReturnStmt 0x275367d2bb8 <line:98:4, col:12>
|     `-UnaryOperator 0x275367d2ba0 <col:11, col:12> 'alt::String' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x275367d2b90 <col:12> 'alt::String *' this
|-CXXMethodDecl 0x275367cf3e0 <line:101:3, col:44> col:8 IsEmpty 'bool () const'
| `-CompoundStmt 0x275367d2cb8 <col:24, col:44>
|   `-ReturnStmt 0x275367d2ca8 <col:26, col:41>
|     `-BinaryOperator 0x275367d2c88 <col:33, col:41> 'bool' '=='
|       |-ImplicitCastExpr 0x275367d2c58 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | `-MemberExpr 0x275367d2c00 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x275367d0bf0
|       |   `-CXXThisExpr 0x275367d2bf0 <col:33> 'const alt::String *' implicit this
|       `-ImplicitCastExpr 0x275367d2c70 <col:41> 'unsigned long long' <IntegralCast>
|         `-IntegerLiteral 0x275367d2c30 <col:41> 'int' 0
|-CXXMethodDecl 0x275367cf4a8 <line:103:3, col:46> col:15 used GetData 'const char *() const'
| `-CompoundStmt 0x275367d2d50 <col:31, col:46>
|   `-ReturnStmt 0x275367d2d40 <col:33, col:40>
|     `-ImplicitCastExpr 0x275367d2d28 <col:40> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x275367d2d10 <col:40> 'char *' <LValueToRValue>
|         `-MemberExpr 0x275367d2ce0 <col:40> 'char *const' lvalue ->data 0x275367d0b88
|           `-CXXThisExpr 0x275367d2cd0 <col:40> 'const alt::String *' implicit this
|-CXXMethodDecl 0x275367cf570 <line:104:3, col:34> col:9 GetData 'char *()'
| `-CompoundStmt 0x275367d2dd0 <col:19, col:34>
|   `-ReturnStmt 0x275367d2dc0 <col:21, col:28>
|     `-ImplicitCastExpr 0x275367d2da8 <col:28> 'char *' <LValueToRValue>
|       `-MemberExpr 0x275367d2d78 <col:28> 'char *' lvalue ->data 0x275367d0b88
|         `-CXXThisExpr 0x275367d2d68 <col:28> 'alt::String *' implicit this
|-CXXMethodDecl 0x275367cf688 <line:105:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x275367d2e50 <col:24, col:39>
|   `-ReturnStmt 0x275367d2e40 <col:26, col:33>
|     `-ImplicitCastExpr 0x275367d2e28 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x275367d2df8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x275367d0bf0
|         `-CXXThisExpr 0x275367d2de8 <col:33> 'const alt::String *' implicit this
|-CXXMethodDecl 0x275367cf7f8 <line:107:3, col:104> col:8 used operator== 'bool (alt::String) const'
| |-ParmVarDecl 0x275367cf738 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x275367d32e8 <col:38, col:104>
|   `-ReturnStmt 0x275367d32d8 <col:40, col:101>
|     `-BinaryOperator 0x275367d31e8 <col:47, col:101> 'bool' '&&'
|       |-BinaryOperator 0x275367d2f28 <col:47, col:60> 'bool' '=='
|       | |-ImplicitCastExpr 0x275367d2ef8 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
|       | | `-MemberExpr 0x275367d2e78 <col:47> 'const alt::Size':'const unsigned long long' lvalue ->size 0x275367d0bf0
|       | |   `-CXXThisExpr 0x275367d2e68 <col:47> 'const alt::String *' implicit this
|       | `-ImplicitCastExpr 0x275367d2f10 <col:55, col:60> 'alt::Size':'unsigned long long' <LValueToRValue>
|       |   `-MemberExpr 0x275367d2ec8 <col:55, col:60> 'alt::Size':'unsigned long long' lvalue .size 0x275367d0bf0
|       |     `-DeclRefExpr 0x275367d2ea8 <col:55> 'alt::String' lvalue ParmVar 0x275367cf738 'that' 'alt::String'
|       `-BinaryOperator 0x275367d31c8 <col:68, col:101> 'bool' '=='
|         |-CallExpr 0x275367d30f0 <col:68, col:96> 'int'
|         | |-ImplicitCastExpr 0x275367d30d8 <col:68> 'int (*)(const void *, const void *, size_t) __attribute__((cdecl))' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x275367d3060 <col:68> 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)' lvalue Function 0x275354a36f8 'memcmp' 'int (const void *, const void *, size_t) __attribute__((cdecl))':'int (const void *, const void *, size_t)'
|         | |-ImplicitCastExpr 0x275367d3140 <col:75> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x275367d3128 <col:75> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x275367d2fa0 <col:75> 'char *const' lvalue ->data 0x275367d0b88
|         | |     `-CXXThisExpr 0x275367d2f90 <col:75> 'const alt::String *' implicit this
|         | |-ImplicitCastExpr 0x275367d3170 <col:81, col:86> 'const void *' <BitCast>
|         | | `-ImplicitCastExpr 0x275367d3158 <col:81, col:86> 'char *' <LValueToRValue>
|         | |   `-MemberExpr 0x275367d2ff0 <col:81, col:86> 'char *' lvalue .data 0x275367d0b88
|         | |     `-DeclRefExpr 0x275367d2fd0 <col:81> 'alt::String' lvalue ParmVar 0x275367cf738 'that' 'alt::String'
|         | `-ImplicitCastExpr 0x275367d3188 <col:92> 'alt::Size':'unsigned long long' <LValueToRValue>
|         |   `-MemberExpr 0x275367d3030 <col:92> 'const alt::Size':'const unsigned long long' lvalue ->size 0x275367d0bf0
|         |     `-CXXThisExpr 0x275367d3020 <col:92> 'const alt::String *' implicit this
|         `-IntegerLiteral 0x275367d31a0 <col:101> 'int' 0
|-CXXMethodDecl 0x275367cf940 <line:108:3, col:65> col:8 operator!= 'bool (alt::String) const'
| |-ParmVarDecl 0x275367cf8b0 <col:19, col:26> col:26 used that 'alt::String'
| `-CompoundStmt 0x275367d34e8 <col:38, col:65>
|   `-ReturnStmt 0x275367d34d8 <col:40, col:62>
|     `-ExprWithCleanups 0x275367d34c0 <col:47, col:62> 'bool'
|       `-UnaryOperator 0x275367d34a8 <col:47, col:62> 'bool' prefix '!' cannot overflow
|         `-ParenExpr 0x275367d3488 <col:48, col:62> 'bool'
|           `-CXXOperatorCallExpr 0x275367d3450 <col:49, col:58> 'bool'
|             |-ImplicitCastExpr 0x275367d3438 <col:55> 'bool (*)(alt::String) const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275367d33e8 <col:55> 'bool (alt::String) const' lvalue CXXMethod 0x275367cf7f8 'operator==' 'bool (alt::String) const'
|             |-UnaryOperator 0x275367d3310 <col:49, col:50> 'const alt::String' lvalue prefix '*' cannot overflow
|             | `-CXXThisExpr 0x275367d3300 <col:50> 'const alt::String *' this
|             `-CXXBindTemporaryExpr 0x275367d33c8 <col:58> 'alt::String' (CXXTemporary 0x275367d33c0)
|               `-CXXConstructExpr 0x275367d3390 <col:58> 'alt::String' 'void (const alt::String &)'
|                 `-ImplicitCastExpr 0x275367d3378 <col:58> 'const alt::String' lvalue <NoOp>
|                   `-DeclRefExpr 0x275367d3328 <col:58> 'alt::String' lvalue ParmVar 0x275367cf8b0 'that' 'alt::String'
|-CXXMethodDecl 0x275367cfa78 <line:110:3, col:66> col:15 ToString 'std::string () const'
| `-CompoundStmt 0x275367d8748 <col:32, col:66>
|   `-ReturnStmt 0x275367d8738 <col:34, col:63>
|     `-ExprWithCleanups 0x275367d8720 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >'
|       `-CXXBindTemporaryExpr 0x275367d8700 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' (CXXTemporary 0x275367d86f8)
|         `-CXXTemporaryObjectExpr 0x275367d86b8 <col:41, col:63> 'std::string':'std::basic_string<char, std::char_traits<char>, std::allocator<char> >' 'void (const char *const, const std::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type)'
|           |-ImplicitCastExpr 0x275367d8688 <col:53> 'const char *' <NoOp>
|           | `-ImplicitCastExpr 0x275367d8670 <col:53> 'char *' <LValueToRValue>
|           |   `-MemberExpr 0x275367d3558 <col:53> 'char *const' lvalue ->data 0x275367d0b88
|           |     `-CXXThisExpr 0x275367d3548 <col:53> 'const alt::String *' implicit this
|           `-ImplicitCastExpr 0x275367d86a0 <col:59> 'alt::Size':'unsigned long long' <LValueToRValue>
|             `-MemberExpr 0x275367d3598 <col:59> 'const alt::Size':'const unsigned long long' lvalue ->size 0x275367d0bf0
|               `-CXXThisExpr 0x275367d3588 <col:59> 'const alt::String *' implicit this
|-CXXMethodDecl 0x275367cfb40 <line:111:3, col:43> col:15 used CStr 'const char *() const'
| `-CompoundStmt 0x275367d87e0 <col:28, col:43>
|   `-ReturnStmt 0x275367d87d0 <col:30, col:37>
|     `-ImplicitCastExpr 0x275367d87b8 <col:37> 'const char *' <NoOp>
|       `-ImplicitCastExpr 0x275367d87a0 <col:37> 'char *' <LValueToRValue>
|         `-MemberExpr 0x275367d8770 <col:37> 'char *const' lvalue ->data 0x275367d0b88
|           `-CXXThisExpr 0x275367d8760 <col:37> 'const alt::String *' implicit this
|-FriendDecl 0x275367cfdf8 <line:113:3, col:139> col:17
| `-FunctionDecl 0x275367cfd38 parent 0x275367cd6f8 <col:3, col:139> col:17 operator+ 'alt::String (const alt::String &, const alt::String &)'
|   |-ParmVarDecl 0x275367cfbf0 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x275367cfc68 <col:46, col:60> col:60 used rhs 'const alt::String &'
|   `-CompoundStmt 0x275367d8b40 <col:65, col:139>
|     `-ReturnStmt 0x275367d8b30 <col:67, col:136>
|       `-ExprWithCleanups 0x275367d8b18 <col:74, col:136> 'alt::String'
|         `-CXXBindTemporaryExpr 0x275367d8af8 <col:74, col:136> 'alt::String' (CXXTemporary 0x275367d8af0)
|           `-CallExpr 0x275367d8ab0 <col:74, col:136> 'alt::String'
|             |-ImplicitCastExpr 0x275367d8a98 <col:74> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275367d87f8 <col:74> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x275367d1088 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x275367d8868 <col:81, col:90> 'const char *'
|             | `-MemberExpr 0x275367d8838 <col:81, col:85> '<bound member function type>' .CStr 0x275367cfb40
|             |   `-DeclRefExpr 0x275367d8818 <col:81> 'const alt::String' lvalue ParmVar 0x275367cfbf0 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x275367d88d8 <col:93, col:105> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x275367d88a8 <col:93, col:97> '<bound member function type>' .GetSize 0x275367cf688
|             |   `-DeclRefExpr 0x275367d8888 <col:93> 'const alt::String' lvalue ParmVar 0x275367cfbf0 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x275367d89a8 <col:108, col:120> 'const char *'
|             | `-MemberExpr 0x275367d8978 <col:108, col:112> '<bound member function type>' .GetData 0x275367cf4a8
|             |   `-DeclRefExpr 0x275367d88f8 <col:108> 'const alt::String' lvalue ParmVar 0x275367cfc68 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x275367d8a18 <col:123, col:135> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x275367d89e8 <col:123, col:127> '<bound member function type>' .GetSize 0x275367cf688
|                 `-DeclRefExpr 0x275367d89c8 <col:123> 'const alt::String' lvalue ParmVar 0x275367cfc68 'rhs' 'const alt::String &'
|-FriendDecl 0x275367d0058 <line:115:3, col:125> col:17
| `-FunctionDecl 0x275367cff98 parent 0x275367cd6f8 <col:3, col:125> col:17 operator+ 'alt::String (const alt::String &, const char *)'
|   |-ParmVarDecl 0x275367cfe48 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x275367cfec8 <col:46, col:58> col:58 used rhs 'const char *'
|   `-CompoundStmt 0x275367d8e18 <col:63, col:125>
|     `-ReturnStmt 0x275367d8e08 <col:65, col:122>
|       `-ExprWithCleanups 0x275367d8df0 <col:72, col:122> 'alt::String'
|         `-CXXBindTemporaryExpr 0x275367d8dd0 <col:72, col:122> 'alt::String' (CXXTemporary 0x275367d8dc8)
|           `-CallExpr 0x275367d8d70 <col:72, col:122> 'alt::String'
|             |-ImplicitCastExpr 0x275367d8d58 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275367d8b58 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x275367d1088 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x275367d8bc8 <col:79, col:88> 'const char *'
|             | `-MemberExpr 0x275367d8b98 <col:79, col:83> '<bound member function type>' .CStr 0x275367cfb40
|             |   `-DeclRefExpr 0x275367d8b78 <col:79> 'const alt::String' lvalue ParmVar 0x275367cfe48 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x275367d8c38 <col:91, col:103> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x275367d8c08 <col:91, col:95> '<bound member function type>' .GetSize 0x275367cf688
|             |   `-DeclRefExpr 0x275367d8be8 <col:91> 'const alt::String' lvalue ParmVar 0x275367cfe48 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x275367d8db0 <col:106> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x275367d8c58 <col:106> 'const char *' lvalue ParmVar 0x275367cfec8 'rhs' 'const char *'
|             `-CallExpr 0x275367d8d18 <col:111, col:121> 'size_t':'unsigned long long'
|               |-ImplicitCastExpr 0x275367d8d00 <col:111> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x275367d8ce0 <col:111> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2753552f650 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|               `-ImplicitCastExpr 0x275367d8d40 <col:118> 'const char *' <LValueToRValue>
|                 `-DeclRefExpr 0x275367d8cc0 <col:118> 'const char *' lvalue ParmVar 0x275367cfec8 'rhs' 'const char *'
|-FriendDecl 0x275367d02b8 <line:116:3, col:128> col:17
| `-FunctionDecl 0x275367d01f8 parent 0x275367cd6f8 <col:3, col:128> col:17 operator+ 'alt::String (const char *, const alt::String &)'
|   |-ParmVarDecl 0x275367d00b0 <col:27, col:39> col:39 used lhs 'const char *'
|   |-ParmVarDecl 0x275367d0128 <col:44, col:58> col:58 used rhs 'const alt::String &'
|   `-CompoundStmt 0x275367d9150 <col:63, col:128>
|     `-ReturnStmt 0x275367d9140 <col:65, col:125>
|       `-ExprWithCleanups 0x275367d9128 <col:72, col:125> 'alt::String'
|         `-CXXBindTemporaryExpr 0x275367d9108 <col:72, col:125> 'alt::String' (CXXTemporary 0x275367d9100)
|           `-CallExpr 0x275367d90a8 <col:72, col:125> 'alt::String'
|             |-ImplicitCastExpr 0x275367d9090 <col:72> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275367d8e30 <col:72> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x275367d1088 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x275367d90e8 <col:79> 'const char *' <LValueToRValue>
|             | `-DeclRefExpr 0x275367d8e50 <col:79> 'const char *' lvalue ParmVar 0x275367d00b0 'lhs' 'const char *'
|             |-CallExpr 0x275367d8f10 <col:84, col:94> 'size_t':'unsigned long long'
|             | |-ImplicitCastExpr 0x275367d8ef8 <col:84> 'size_t (*)(const char *) __attribute__((cdecl))' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x275367d8ed8 <col:84> 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)' lvalue Function 0x2753552f650 'strlen' 'size_t (const char *) __attribute__((cdecl))':'size_t (const char *)'
|             | `-ImplicitCastExpr 0x275367d8f38 <col:91> 'const char *' <LValueToRValue>
|             |   `-DeclRefExpr 0x275367d8eb8 <col:91> 'const char *' lvalue ParmVar 0x275367d00b0 'lhs' 'const char *'
|             |-CXXMemberCallExpr 0x275367d9000 <col:97, col:109> 'const char *'
|             | `-MemberExpr 0x275367d8fd0 <col:97, col:101> '<bound member function type>' .GetData 0x275367cf4a8
|             |   `-DeclRefExpr 0x275367d8f50 <col:97> 'const alt::String' lvalue ParmVar 0x275367d0128 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x275367d9070 <col:112, col:124> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x275367d9040 <col:112, col:116> '<bound member function type>' .GetSize 0x275367cf688
|                 `-DeclRefExpr 0x275367d9020 <col:112> 'const alt::String' lvalue ParmVar 0x275367d0128 'rhs' 'const alt::String &'
|-FriendDecl 0x275367d0518 <line:118:3, col:109> col:17
| `-FunctionDecl 0x275367d0458 parent 0x275367cd6f8 <col:3, col:109> col:17 operator+ 'alt::String (const alt::String &, char)'
|   |-ParmVarDecl 0x275367d0308 <col:27, col:41> col:41 used lhs 'const alt::String &'
|   |-ParmVarDecl 0x275367d0380 <col:46, col:51> col:51 used rhs 'char'
|   `-CompoundStmt 0x275367d93a0 <col:56, col:109>
|     `-ReturnStmt 0x275367d9390 <col:58, col:106>
|       `-ExprWithCleanups 0x275367d9378 <col:65, col:106> 'alt::String'
|         `-CXXBindTemporaryExpr 0x275367d9358 <col:65, col:106> 'alt::String' (CXXTemporary 0x275367d9350)
|           `-CallExpr 0x275367d92e0 <col:65, col:106> 'alt::String'
|             |-ImplicitCastExpr 0x275367d92c8 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275367d9168 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x275367d1088 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-CXXMemberCallExpr 0x275367d91d8 <col:72, col:81> 'const char *'
|             | `-MemberExpr 0x275367d91a8 <col:72, col:76> '<bound member function type>' .CStr 0x275367cfb40
|             |   `-DeclRefExpr 0x275367d9188 <col:72> 'const alt::String' lvalue ParmVar 0x275367d0308 'lhs' 'const alt::String &'
|             |-CXXMemberCallExpr 0x275367d9248 <col:84, col:96> 'alt::Size':'unsigned long long'
|             | `-MemberExpr 0x275367d9218 <col:84, col:88> '<bound member function type>' .GetSize 0x275367cf688
|             |   `-DeclRefExpr 0x275367d91f8 <col:84> 'const alt::String' lvalue ParmVar 0x275367d0308 'lhs' 'const alt::String &'
|             |-ImplicitCastExpr 0x275367d9320 <col:99, col:100> 'const char *' <NoOp>
|             | `-UnaryOperator 0x275367d9288 <col:99, col:100> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x275367d9268 <col:100> 'char' lvalue ParmVar 0x275367d0380 'rhs' 'char'
|             `-ImplicitCastExpr 0x275367d9338 <col:105> 'alt::Size':'unsigned long long' <IntegralCast>
|               `-IntegerLiteral 0x275367d92a0 <col:105> 'int' 1
|-FriendDecl 0x275367d0778 <line:119:3, col:112> col:17
| `-FunctionDecl 0x275367d06b8 parent 0x275367cd6f8 <col:3, col:112> col:17 operator+ 'alt::String (char, const alt::String &)'
|   |-ParmVarDecl 0x275367d0568 <col:27, col:32> col:32 used lhs 'char'
|   |-ParmVarDecl 0x275367d05e0 <col:37, col:51> col:51 used rhs 'const alt::String &'
|   `-CompoundStmt 0x275367d9650 <col:56, col:112>
|     `-ReturnStmt 0x275367d9640 <col:58, col:109>
|       `-ExprWithCleanups 0x275367d9628 <col:65, col:109> 'alt::String'
|         `-CXXBindTemporaryExpr 0x275367d9608 <col:65, col:109> 'alt::String' (CXXTemporary 0x275367d9600)
|           `-CallExpr 0x275367d9590 <col:65, col:109> 'alt::String'
|             |-ImplicitCastExpr 0x275367d9578 <col:65> 'alt::String (*)(const char *, alt::Size, const char *, alt::Size)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275367d93b8 <col:65> 'alt::String (const char *, alt::Size, const char *, alt::Size)' lvalue CXXMethod 0x275367d1088 'Concat' 'alt::String (const char *, alt::Size, const char *, alt::Size)'
|             |-ImplicitCastExpr 0x275367d95d0 <col:72, col:73> 'const char *' <NoOp>
|             | `-UnaryOperator 0x275367d93f8 <col:72, col:73> 'char *' prefix '&' cannot overflow
|             |   `-DeclRefExpr 0x275367d93d8 <col:73> 'char' lvalue ParmVar 0x275367d0568 'lhs' 'char'
|             |-ImplicitCastExpr 0x275367d95e8 <col:78> 'alt::Size':'unsigned long long' <IntegralCast>
|             | `-IntegerLiteral 0x275367d9410 <col:78> 'int' 1
|             |-CXXMemberCallExpr 0x275367d94e8 <col:81, col:93> 'const char *'
|             | `-MemberExpr 0x275367d94b8 <col:81, col:85> '<bound member function type>' .GetData 0x275367cf4a8
|             |   `-DeclRefExpr 0x275367d9438 <col:81> 'const alt::String' lvalue ParmVar 0x275367d05e0 'rhs' 'const alt::String &'
|             `-CXXMemberCallExpr 0x275367d9558 <col:96, col:108> 'alt::Size':'unsigned long long'
|               `-MemberExpr 0x275367d9528 <col:96, col:100> '<bound member function type>' .GetSize 0x275367cf688
|                 `-DeclRefExpr 0x275367d9508 <col:96> 'const alt::String' lvalue ParmVar 0x275367d05e0 'rhs' 'const alt::String &'
|-FriendDecl 0x275367d0b00 <line:121:3, col:100> col:24
| `-FunctionDecl 0x275367d0a40 parent 0x275367cd6f8 <col:3, col:100> col:24 operator<< 'std::ostream &(std::ostream &, alt::String)'
|   |-ParmVarDecl 0x275367d08a0 <col:35, col:49> col:49 used stream 'std::ostream &'
|   |-ParmVarDecl 0x275367d0918 <col:57, col:64> col:64 used str 'alt::String'
|   `-CompoundStmt 0x275367db7a0 <col:69, col:100>
|     `-ReturnStmt 0x275367db790 <col:71, col:97>
|       `-CXXOperatorCallExpr 0x275367db758 <col:78, col:97> 'basic_ostream<char, std::char_traits<char> >':'std::basic_ostream<char, std::char_traits<char> >' lvalue adl
|         |-ImplicitCastExpr 0x275367db740 <col:85> 'basic_ostream<char, std::char_traits<char> > &(*)(basic_ostream<char, std::char_traits<char> > &, const char *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x275367db720 <col:85> 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)' lvalue Function 0x2753651da38 'operator<<' 'basic_ostream<char, std::char_traits<char> > &(basic_ostream<char, std::char_traits<char> > &, const char *)'
|         |-DeclRefExpr 0x275367d9668 <col:78> 'std::ostream':'std::basic_ostream<char, std::char_traits<char> >' lvalue ParmVar 0x275367d08a0 'stream' 'std::ostream &'
|         `-CXXMemberCallExpr 0x275367d96d8 <col:88, col:97> 'const char *'
|           `-MemberExpr 0x275367d96a8 <col:88, col:92> '<bound member function type>' .CStr 0x275367cfb40
|             `-ImplicitCastExpr 0x275367d96f8 <col:88> 'const alt::String' lvalue <NoOp>
|               `-DeclRefExpr 0x275367d9688 <col:88> 'alt::String' lvalue ParmVar 0x275367d0918 'str' 'alt::String'
|-AccessSpecDecl 0x275367d0b40 <line:123:2, col:9> col:2 private
|-FieldDecl 0x275367d0b88 <line:124:3, col:9> col:9 referenced data 'char *'
|-FieldDecl 0x275367d0bf0 <line:125:3, col:8> col:8 referenced size 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x275367d0d18 <line:127:3, line:131:3> line:127:8 used Swap 'void (alt::String &)'
| |-ParmVarDecl 0x275367d0c58 <col:13, col:21> col:21 used that 'alt::String &'
| `-CompoundStmt 0x275367e02c0 <line:128:3, line:131:3>
|   |-CallExpr 0x275367ddd10 <line:129:4, col:29> 'void'
|   | |-ImplicitCastExpr 0x275367ddcf8 <col:4, col:9> 'void (*)(char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x275367ddc60 <col:4, col:9> 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' lvalue Function 0x275367dce18 'swap' 'void (char *&, char *&) noexcept(is_nothrow_move_constructible_v<char *> && is_nothrow_move_assignable_v<char *>)' (FunctionTemplate 0x27535cee458 'swap')
|   | |-MemberExpr 0x275367db870 <col:14> 'char *' lvalue ->data 0x275367d0b88
|   | | `-CXXThisExpr 0x275367db860 <col:14> 'alt::String *' implicit this
|   | `-MemberExpr 0x275367db8c0 <col:20, col:25> 'char *' lvalue .data 0x275367d0b88
|   |   `-DeclRefExpr 0x275367db8a0 <col:20> 'alt::String' lvalue ParmVar 0x275367d0c58 'that' 'alt::String &'
|   `-CallExpr 0x275367e0290 <line:130:4, col:29> 'void'
|     |-ImplicitCastExpr 0x275367e0278 <col:4, col:9> 'void (*)(unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x275367e01e0 <col:4, col:9> 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' lvalue Function 0x275367df398 'swap' 'void (unsigned long long &, unsigned long long &) noexcept(is_nothrow_move_constructible_v<unsigned long long> && is_nothrow_move_assignable_v<unsigned long long>)' (FunctionTemplate 0x27535cee458 'swap')
|     |-MemberExpr 0x275367dddf8 <col:14> 'alt::Size':'unsigned long long' lvalue ->size 0x275367d0bf0
|     | `-CXXThisExpr 0x275367ddde8 <col:14> 'alt::String *' implicit this
|     `-MemberExpr 0x275367dde48 <col:20, col:25> 'alt::Size':'unsigned long long' lvalue .size 0x275367d0bf0
|       `-DeclRefExpr 0x275367dde28 <col:20> 'alt::String' lvalue ParmVar 0x275367d0c58 'that' 'alt::String &'
`-CXXMethodDecl 0x275367d1088 <line:133:3, line:141:3> line:133:17 used Concat 'alt::String (const char *, alt::Size, const char *, alt::Size)' static
  |-ParmVarDecl 0x275367d0dd8 <col:24, col:36> col:36 used lData 'const char *'
  |-ParmVarDecl 0x275367d0e50 <col:43, col:48> col:48 used lSize 'alt::Size':'unsigned long long'
  |-ParmVarDecl 0x275367d0ed0 <col:55, col:67> col:67 used rData 'const char *'
  |-ParmVarDecl 0x275367d0f48 <col:74, col:79> col:79 used rSize 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x275367e0b40 <line:134:3, line:141:3>
    |-DeclStmt 0x275367e04f0 <line:135:4, col:29>
    | `-VarDecl 0x275367e0310 <col:4, col:28> col:11 used res 'alt::String' nrvo callinit
    |   `-CXXConstructExpr 0x275367e04b8 <col:11, col:28> 'alt::String' 'void (alt::Size, char)'
    |     |-BinaryOperator 0x275367e03c8 <col:15, col:23> 'unsigned long long' '+'
    |     | |-ImplicitCastExpr 0x275367e0398 <col:15> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | | `-DeclRefExpr 0x275367e02e0 <col:15> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367d0e50 'lSize' 'alt::Size':'unsigned long long'
    |     | `-ImplicitCastExpr 0x275367e03b0 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     |   `-DeclRefExpr 0x275367e0378 <col:23> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367d0f48 'rSize' 'alt::Size':'unsigned long long'
    |     `-CXXDefaultArgExpr 0x275367e0498 <<invalid sloc>> 'char'
    |-ForStmt 0x275367e0a58 <line:137:4, line:138:52>
    | |-DeclStmt 0x275367e05c0 <line:137:9, col:19>
    | | `-VarDecl 0x275367e0518 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x275367e05a8 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x275367e0580 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x275367e06a0 <col:21, col:33> 'bool' '<'
    | | |-ImplicitCastExpr 0x275367e0688 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x275367e05d8 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x275367e0518 'i' 'alt::Size':'unsigned long long'
    | | `-BinaryOperator 0x275367e0668 <col:25, col:33> 'unsigned long long' '+'
    | |   |-ImplicitCastExpr 0x275367e0638 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   | `-DeclRefExpr 0x275367e05f8 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367d0e50 'lSize' 'alt::Size':'unsigned long long'
    | |   `-ImplicitCastExpr 0x275367e0650 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |     `-DeclRefExpr 0x275367e0618 <col:33> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367d0f48 'rSize' 'alt::Size':'unsigned long long'
    | |-UnaryOperator 0x275367e06e0 <col:40, col:42> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x275367e06c0 <col:42> 'alt::Size':'unsigned long long' lvalue Var 0x275367e0518 'i' 'alt::Size':'unsigned long long'
    | `-BinaryOperator 0x275367e0a38 <line:138:5, col:52> 'char' lvalue '='
    |   |-CXXOperatorCallExpr 0x275367e07b0 <col:5, col:10> 'char' lvalue
    |   | |-ImplicitCastExpr 0x275367e0798 <col:8, col:10> 'char &(*)(alt::Size)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x275367e0750 <col:8, col:10> 'char &(alt::Size)' lvalue CXXMethod 0x275367cee10 'operator[]' 'char &(alt::Size)'
    |   | |-DeclRefExpr 0x275367e06f8 <col:5> 'alt::String' lvalue Var 0x275367e0310 'res' 'alt::String'
    |   | `-ImplicitCastExpr 0x275367e0738 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x275367e0718 <col:9> 'alt::Size':'unsigned long long' lvalue Var 0x275367e0518 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x275367e0a20 <col:14, col:52> 'char' <LValueToRValue>
    |     `-ConditionalOperator 0x275367e09f0 <col:14, col:52> 'const char' lvalue
    |       |-BinaryOperator 0x275367e0858 <col:14, col:18> 'bool' '<'
    |       | |-ImplicitCastExpr 0x275367e0828 <col:14> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       | | `-DeclRefExpr 0x275367e07e8 <col:14> 'alt::Size':'unsigned long long' lvalue Var 0x275367e0518 'i' 'alt::Size':'unsigned long long'
    |       | `-ImplicitCastExpr 0x275367e0840 <col:18> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x275367e0808 <col:18> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367d0e50 'lSize' 'alt::Size':'unsigned long long'
    |       |-ArraySubscriptExpr 0x275367e08e8 <col:26, col:33> 'const char' lvalue
    |       | |-ImplicitCastExpr 0x275367e08b8 <col:26> 'const char *' <LValueToRValue>
    |       | | `-DeclRefExpr 0x275367e0878 <col:26> 'const char *' lvalue ParmVar 0x275367d0dd8 'lData' 'const char *'
    |       | `-ImplicitCastExpr 0x275367e08d0 <col:32> 'alt::Size':'unsigned long long' <LValueToRValue>
    |       |   `-DeclRefExpr 0x275367e0898 <col:32> 'alt::Size':'unsigned long long' lvalue Var 0x275367e0518 'i' 'alt::Size':'unsigned long long'
    |       `-ArraySubscriptExpr 0x275367e09d0 <col:37, col:52> 'const char' lvalue
    |         |-ImplicitCastExpr 0x275367e09b8 <col:37> 'const char *' <LValueToRValue>
    |         | `-DeclRefExpr 0x275367e0908 <col:37> 'const char *' lvalue ParmVar 0x275367d0ed0 'rData' 'const char *'
    |         `-BinaryOperator 0x275367e0998 <col:43, col:47> 'unsigned long long' '-'
    |           |-ImplicitCastExpr 0x275367e0968 <col:43> 'alt::Size':'unsigned long long' <LValueToRValue>
    |           | `-DeclRefExpr 0x275367e0928 <col:43> 'alt::Size':'unsigned long long' lvalue Var 0x275367e0518 'i' 'alt::Size':'unsigned long long'
    |           `-ImplicitCastExpr 0x275367e0980 <col:47> 'alt::Size':'unsigned long long' <LValueToRValue>
    |             `-DeclRefExpr 0x275367e0948 <col:47> 'alt::Size':'unsigned long long' lvalue ParmVar 0x275367d0e50 'lSize' 'alt::Size':'unsigned long long'
    `-ReturnStmt 0x275367e0b28 <line:140:4, col:11>
      `-CXXConstructExpr 0x275367e0af8 <col:11> 'alt::String' 'void (alt::String &&)' elidable
        `-ImplicitCastExpr 0x275367e0ae0 <col:11> 'alt::String' xvalue <NoOp>
          `-DeclRefExpr 0x275367e0a90 <col:11> 'alt::String' lvalue Var 0x275367e0310 'res' 'alt::String'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::List = alt::Array
ClassTemplateSpecializationDecl 0x27536a04f38 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/Array.h:9:2, line:128:2> line:10:8 class Array definition
|-DefinitionData standard_layout has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'alt::MValue'
|-CXXRecordDecl 0x27536a751f0 prev 0x27536a04f38 <col:2, col:8> col:8 implicit class Array
|-AccessSpecDecl 0x27536a75280 <line:12:2, col:8> col:2 public
|-CXXConstructorDecl 0x27536a752e8 <line:13:3, col:19> col:3 used constexpr Array 'void () noexcept' default
| |-CXXCtorInitializer Field 0x27536a76f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x27536a77260 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x27536a76f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x27536a772a8 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x27536a76fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x27536a772f0 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x27536a77350 <col:19>
|-FunctionTemplateDecl 0x27536a75650 <line:15:3, line:16:25> col:3 Array
| |-TemplateTypeParmDecl 0x27536a753a0 <line:15:12, col:18> col:18 class depth 0 index 0 It
| |-CXXConstructorDecl 0x27536a755a8 <line:16:3, col:25> col:3 Array 'void (It, It)'
| | |-ParmVarDecl 0x27536a75440 <col:9, col:12> col:12 begin 'It'
| | `-ParmVarDecl 0x27536a754b8 <col:19, col:22> col:22 end 'It'
| `-CXXConstructorDecl 0x275370a4cd8 <col:3, line:29:3> line:16:3 used Array 'void (const alt::MValue *, const alt::MValue *)'
|   |-TemplateArgument type 'const alt::MValue *'
|   |-ParmVarDecl 0x275370a4b48 <col:9, col:12> col:12 used begin 'const alt::MValue *':'const alt::MValue *'
|   |-ParmVarDecl 0x275370a4bc0 <col:19, col:22> col:22 used end 'const alt::MValue *':'const alt::MValue *'
|   |-CXXCtorInitializer Field 0x27536a76f08 'data' 'alt::MValue *'
|   | `-CXXDefaultInitExpr 0x275370a54d0 <col:3> 'alt::MValue *'
|   |-CXXCtorInitializer Field 0x27536a76f60 'size' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x275370a5518 <col:3> 'alt::Size':'unsigned long long'
|   |-CXXCtorInitializer Field 0x27536a76fb8 'capacity' 'alt::Size':'unsigned long long'
|   | `-CXXDefaultInitExpr 0x275370a5560 <col:3> 'alt::Size':'unsigned long long'
|   `-CompoundStmt 0x275370ab4f0 <line:17:3, line:29:3>
|     |-DeclStmt 0x275370aae58 <line:18:4, col:42>
|     | `-VarDecl 0x275370a55c0 <col:4, col:41> col:9 used _size 'alt::Size':'unsigned long long' cinit
|     |   `-ImplicitCastExpr 0x275370aae40 <col:17, col:41> 'alt::Size':'unsigned long long' <IntegralCast>
|     |     `-CallExpr 0x275370aade0 <col:17, col:41> '_Iter_diff_t<const alt::MValue *>':'long long'
|     |       |-ImplicitCastExpr 0x275370aadc8 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (*)(const alt::MValue *, const alt::MValue *)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x275370a9d20 <col:17, col:22> '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' lvalue Function 0x275370a9bd8 'distance' '_Iter_diff_t<const alt::MValue *> (const alt::MValue *, const alt::MValue *)' (FunctionTemplate 0x27535dd5b88 'distance')
|     |       |-ImplicitCastExpr 0x275370aae10 <col:31> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       | `-DeclRefExpr 0x275370a5670 <col:31> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x275370a4b48 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |       `-ImplicitCastExpr 0x275370aae28 <col:38> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |         `-DeclRefExpr 0x275370a5690 <col:38> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x275370a4bc0 'end' 'const alt::MValue *':'const alt::MValue *'
|     |-CXXMemberCallExpr 0x275370aaed0 <line:20:4, col:17> 'void'
|     | |-MemberExpr 0x275370aae80 <col:4> '<bound member function type>' ->Realloc 0x27536a770a0
|     | | `-CXXThisExpr 0x275370aae70 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     | `-ImplicitCastExpr 0x275370aaef8 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|     |   `-DeclRefExpr 0x275370aaeb0 <col:12> 'alt::Size':'unsigned long long' lvalue Var 0x275370a55c0 '_size' 'alt::Size':'unsigned long long'
|     |-DeclStmt 0x275370ab058 <line:22:4, col:21>
|     | `-VarDecl 0x275370aaf10 <col:4, col:16> col:9 used from 'const alt::MValue *':'const alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x275370ab040 <col:16> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |     `-DeclRefExpr 0x275370aaf78 <col:16> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x275370a4b48 'begin' 'const alt::MValue *':'const alt::MValue *'
|     |-DeclStmt 0x275370ab1d8 <line:23:4, col:18>
|     | `-VarDecl 0x275370ab070 <col:4, col:14> col:9 used to 'alt::MValue *':'alt::MValue *' cinit
|     |   `-ImplicitCastExpr 0x275370ab1c0 <col:14> 'alt::MValue *' <LValueToRValue>
|     |     `-MemberExpr 0x275370ab0e8 <col:14> 'alt::MValue *' lvalue ->data 0x27536a76f08
|     |       `-CXXThisExpr 0x275370ab0d8 <col:14> 'alt::Array<alt::MValue> *' implicit this
|     |-ForStmt 0x275370ab420 <line:25:4, line:26:12>
|     | |-<<<NULL>>>
|     | |-<<<NULL>>>
|     | |-BinaryOperator 0x275370ab260 <line:25:11, col:19> 'bool' '!='
|     | | |-ImplicitCastExpr 0x275370ab230 <col:11> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x275370ab1f0 <col:11> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x275370aaf10 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-ImplicitCastExpr 0x275370ab248 <col:19> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x275370ab210 <col:19> 'const alt::MValue *':'const alt::MValue *' lvalue ParmVar 0x275370a4bc0 'end' 'const alt::MValue *':'const alt::MValue *'
|     | |-BinaryOperator 0x275370ab2f0 <col:24, col:34> 'alt::MValue *':'alt::MValue *' lvalue ','
|     | | |-UnaryOperator 0x275370ab2a0 <col:24, col:26> 'const alt::MValue *':'const alt::MValue *' lvalue prefix '++'
|     | | | `-DeclRefExpr 0x275370ab280 <col:26> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x275370aaf10 'from' 'const alt::MValue *':'const alt::MValue *'
|     | | `-UnaryOperator 0x275370ab2d8 <col:32, col:34> 'alt::MValue *':'alt::MValue *' lvalue prefix '++'
|     | |   `-DeclRefExpr 0x275370ab2b8 <col:34> 'alt::MValue *':'alt::MValue *' lvalue Var 0x275370ab070 'to' 'alt::MValue *':'alt::MValue *'
|     | `-CXXOperatorCallExpr 0x275370ab3e8 <line:26:5, col:12> 'alt::MValue' lvalue
|     |   |-ImplicitCastExpr 0x275370ab3d0 <col:9> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x275370ab3b0 <col:9> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x27536a0cc98 'operator=' 'alt::MValue &(const alt::MValue &)'
|     |   |-UnaryOperator 0x275370ab348 <col:5, col:6> 'alt::MValue' lvalue prefix '*' cannot overflow
|     |   | `-ImplicitCastExpr 0x275370ab330 <col:6> 'alt::MValue *':'alt::MValue *' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x275370ab310 <col:6> 'alt::MValue *':'alt::MValue *' lvalue Var 0x275370ab070 'to' 'alt::MValue *':'alt::MValue *'
|     |   `-UnaryOperator 0x275370ab398 <col:11, col:12> 'const alt::MValue' lvalue prefix '*' cannot overflow
|     |     `-ImplicitCastExpr 0x275370ab380 <col:12> 'const alt::MValue *':'const alt::MValue *' <LValueToRValue>
|     |       `-DeclRefExpr 0x275370ab360 <col:12> 'const alt::MValue *':'const alt::MValue *' lvalue Var 0x275370aaf10 'from' 'const alt::MValue *':'const alt::MValue *'
|     `-BinaryOperator 0x275370ab4d0 <line:28:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|       |-MemberExpr 0x275370ab468 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
|       | `-CXXThisExpr 0x275370ab458 <col:4> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x275370ab4b8 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x275370ab498 <col:11> 'alt::Size':'unsigned long long' lvalue Var 0x275370a55c0 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x27536a75948 <line:31:3, line:35:3> line:31:3 used Array 'void (const alt::MValue *, alt::Size)'
| |-ParmVarDecl 0x27536a757a8 <col:9, col:18> col:18 used _data 'const alt::MValue *'
| |-ParmVarDecl 0x27536a75810 <col:25, col:30> col:30 used _size 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x275370a4e00 <line:32:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, const alt::MValue *)'
| |   |-ImplicitCastExpr 0x275370a4de8 <col:10> 'const alt::MValue *' <LValueToRValue>
| |   | `-DeclRefExpr 0x275370a49e8 <col:10> 'const alt::MValue *' lvalue ParmVar 0x27536a757a8 '_data' 'const alt::MValue *'
| |   `-BinaryOperator 0x275370a4a78 <col:17, col:25> 'const alt::MValue *' '+'
| |     |-ImplicitCastExpr 0x275370a4a48 <col:17> 'const alt::MValue *' <LValueToRValue>
| |     | `-DeclRefExpr 0x275370a4a08 <col:17> 'const alt::MValue *' lvalue ParmVar 0x27536a757a8 '_data' 'const alt::MValue *'
| |     `-ImplicitCastExpr 0x275370a4a60 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
| |       `-DeclRefExpr 0x275370a4a28 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a75810 '_size' 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275370a49d8 <line:33:3, line:35:3>
|-CXXConstructorDecl 0x27536a75be8 <line:37:3, line:45:3> line:37:3 used Array 'void (alt::Size, const alt::MValue &)'
| |-ParmVarDecl 0x27536a75a10 <col:9, col:14> col:14 used _size 'alt::Size':'unsigned long long'
| |-ParmVarDecl 0x27536a75ab8 <col:21, col:39> col:30 used fill 'const alt::MValue &' cinit
| | `-ExprWithCleanups 0x27536b42e98 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |   `-MaterializeTemporaryExpr 0x27536b42e80 <col:37, col:39> 'const alt::MValue':'const alt::MValue' lvalue
| |     `-ImplicitCastExpr 0x27536b42e68 <col:37, col:39> 'const alt::MValue':'const alt::MValue' <NoOp>
| |       `-CXXBindTemporaryExpr 0x27536b42e48 <col:37, col:39> 'alt::MValue':'alt::MValue' (CXXTemporary 0x27536b42e40)
| |         `-CXXTemporaryObjectExpr 0x27536b42e10 <col:37, col:39> 'alt::MValue':'alt::MValue' 'void ()'
| |-CXXCtorInitializer Field 0x27536a76f08 'data' 'alt::MValue *'
| | `-CXXDefaultInitExpr 0x275370a39f8 <col:3> 'alt::MValue *'
| |-CXXCtorInitializer Field 0x27536a76f60 'size' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x275370a3a40 <col:3> 'alt::Size':'unsigned long long'
| |-CXXCtorInitializer Field 0x27536a76fb8 'capacity' 'alt::Size':'unsigned long long'
| | `-CXXDefaultInitExpr 0x275370a3a88 <col:3> 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275370a3ef8 <line:38:3, line:45:3>
|   |-CXXMemberCallExpr 0x275370a3b48 <line:39:4, col:17> 'void'
|   | |-MemberExpr 0x275370a3af8 <col:4> '<bound member function type>' ->Realloc 0x27536a770a0
|   | | `-CXXThisExpr 0x275370a3ae8 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x275370a3b70 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-DeclRefExpr 0x275370a3b28 <col:12> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a75a10 '_size' 'alt::Size':'unsigned long long'
|   |-ForStmt 0x275370a3e28 <line:41:4, line:42:15>
|   | |-DeclStmt 0x275370a3c08 <line:41:9, col:19>
|   | | `-VarDecl 0x275370a3b88 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x275370a3bf0 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x275370a3738 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x275370a3c90 <col:21, col:25> 'bool' '<'
|   | | |-ImplicitCastExpr 0x275370a3c60 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x275370a3c20 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x275370a3b88 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x275370a3c78 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-DeclRefExpr 0x275370a3c40 <col:25> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a75a10 '_size' 'alt::Size':'unsigned long long'
|   | |-UnaryOperator 0x275370a3cd0 <col:32, col:34> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x275370a3cb0 <col:34> 'alt::Size':'unsigned long long' lvalue Var 0x275370a3b88 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x275370a3df0 <line:42:5, col:15> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x275370a3dd8 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x275370a3db8 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x27536a0cc98 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x275370a3d78 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x275370a3d48 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x275370a3cf8 <col:5> 'alt::MValue *' lvalue ->data 0x27536a76f08
|   |   | |   `-CXXThisExpr 0x275370a3ce8 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x275370a3d60 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x275370a3d28 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x275370a3b88 'i' 'alt::Size':'unsigned long long'
|   |   `-DeclRefExpr 0x275370a3d98 <col:15> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x27536a75ab8 'fill' 'const alt::MValue &'
|   `-BinaryOperator 0x275370a3ed8 <line:44:4, col:11> 'alt::Size':'unsigned long long' lvalue '='
|     |-MemberExpr 0x275370a3e70 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
|     | `-CXXThisExpr 0x275370a3e60 <col:4> 'alt::Array<alt::MValue> *' implicit this
|     `-ImplicitCastExpr 0x275370a3ec0 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-DeclRefExpr 0x275370a3ea0 <col:11> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a75a10 '_size' 'alt::Size':'unsigned long long'
|-CXXConstructorDecl 0x27536a75d70 <line:47:3, line:51:3> line:47:3 used Array 'void (const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x27536a75cc0 <col:9, col:22> col:22 used that 'const alt::Array<alt::MValue> &'
| |-CXXCtorInitializer 'alt::Array<alt::MValue>'
| | `-CXXConstructExpr 0x275370a4888 <line:48:4, col:30> 'alt::Array<alt::MValue>' 'void (const alt::MValue *, alt::Size)'
| |   |-ImplicitCastExpr 0x275370a4858 <col:10, col:15> 'const alt::MValue *' <NoOp>
| |   | `-ImplicitCastExpr 0x275370a4840 <col:10, col:15> 'alt::MValue *' <LValueToRValue>
| |   |   `-MemberExpr 0x275370a4750 <col:10, col:15> 'alt::MValue *const' lvalue .data 0x27536a76f08
| |   |     `-DeclRefExpr 0x275370a4730 <col:10> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x27536a75cc0 'that' 'const alt::Array<alt::MValue> &'
| |   `-ImplicitCastExpr 0x275370a4870 <col:21, col:26> 'alt::Size':'unsigned long long' <LValueToRValue>
| |     `-MemberExpr 0x275370a47a0 <col:21, col:26> 'const alt::Size':'const unsigned long long' lvalue .size 0x27536a76f60
| |       `-DeclRefExpr 0x275370a4780 <col:21> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x27536a75cc0 'that' 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x275370a4720 <line:49:3, line:51:3>
|-CXXConstructorDecl 0x27536a75f48 <line:53:3, col:21> col:3 Array 'void (alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x27536a75e68 <col:9, col:17> col:17 that 'alt::Array<alt::MValue> &&'
|-CXXDestructorDecl 0x27536a76030 <line:60:3, col:29> col:3 used ~Array 'void () noexcept'
| `-CompoundStmt 0x275370a3620 <col:12, col:29>
|   `-CXXDeleteExpr 0x275370a3600 <col:14, col:23> 'void' array Function 0x275353d5918 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
|     `-ImplicitCastExpr 0x275370a35e8 <col:23> 'alt::MValue *' <LValueToRValue>
|       `-MemberExpr 0x275370a35b8 <col:23> 'alt::MValue *' lvalue ->data 0x27536a76f08
|         `-CXXThisExpr 0x275370a35a8 <col:23> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x27536a76218 <line:62:3, line:71:3> line:62:10 used operator= 'alt::Array<alt::MValue> &(const alt::Array<alt::MValue> &)'
| |-ParmVarDecl 0x27536a76158 <col:20, col:33> col:33 used that 'const alt::Array<alt::MValue> &'
| `-CompoundStmt 0x27536f0d008 <line:63:3, line:71:3>
|   |-CXXMemberCallExpr 0x27536f0cb08 <line:64:4, col:21> 'void'
|   | |-MemberExpr 0x27536f0ca88 <col:4> '<bound member function type>' ->Realloc 0x27536a770a0
|   | | `-CXXThisExpr 0x27536f0ca78 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x27536f0cb30 <col:12, col:17> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x27536f0cad8 <col:12, col:17> 'const alt::Size':'const unsigned long long' lvalue .size 0x27536a76f60
|   |     `-DeclRefExpr 0x27536f0cab8 <col:12> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x27536a76158 'that' 'const alt::Array<alt::MValue> &'
|   |-ForStmt 0x27536f0ced0 <line:66:4, line:67:26>
|   | |-DeclStmt 0x27536f0cbc8 <line:66:9, col:19>
|   | | `-VarDecl 0x27536f0cb48 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
|   | |   `-ImplicitCastExpr 0x27536f0cbb0 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
|   | |     `-IntegerLiteral 0x27536f0c690 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x27536f0cc80 <col:21, col:30> 'bool' '<'
|   | | |-ImplicitCastExpr 0x27536f0cc50 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | | | `-DeclRefExpr 0x27536f0cbe0 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0cb48 'i' 'alt::Size':'unsigned long long'
|   | | `-ImplicitCastExpr 0x27536f0cc68 <col:25, col:30> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x27536f0cc20 <col:25, col:30> 'const alt::Size':'const unsigned long long' lvalue .size 0x27536a76f60
|   | |     `-DeclRefExpr 0x27536f0cc00 <col:25> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x27536a76158 'that' 'const alt::Array<alt::MValue> &'
|   | |-UnaryOperator 0x27536f0ccc0 <col:36, col:38> 'alt::Size':'unsigned long long' lvalue prefix '++'
|   | | `-DeclRefExpr 0x27536f0cca0 <col:38> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0cb48 'i' 'alt::Size':'unsigned long long'
|   | `-CXXOperatorCallExpr 0x27536f0ce98 <line:67:5, col:26> 'alt::MValue' lvalue
|   |   |-ImplicitCastExpr 0x27536f0ce80 <col:13> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x27536f0ce60 <col:13> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x27536a0cc98 'operator=' 'alt::MValue &(const alt::MValue &)'
|   |   |-ArraySubscriptExpr 0x27536f0cd68 <col:5, col:11> 'alt::MValue':'alt::MValue' lvalue
|   |   | |-ImplicitCastExpr 0x27536f0cd38 <col:5> 'alt::MValue *' <LValueToRValue>
|   |   | | `-MemberExpr 0x27536f0cce8 <col:5> 'alt::MValue *' lvalue ->data 0x27536a76f08
|   |   | |   `-CXXThisExpr 0x27536f0ccd8 <col:5> 'alt::Array<alt::MValue> *' implicit this
|   |   | `-ImplicitCastExpr 0x27536f0cd50 <col:10> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x27536f0cd18 <col:10> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0cb48 'i' 'alt::Size':'unsigned long long'
|   |   `-ImplicitCastExpr 0x27536f0ce48 <col:15, col:26> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
|   |     `-ArraySubscriptExpr 0x27536f0ce28 <col:15, col:26> 'alt::MValue':'alt::MValue' lvalue
|   |       |-ImplicitCastExpr 0x27536f0cdf8 <col:15, col:20> 'alt::MValue *' <LValueToRValue>
|   |       | `-MemberExpr 0x27536f0cda8 <col:15, col:20> 'alt::MValue *const' lvalue .data 0x27536a76f08
|   |       |   `-DeclRefExpr 0x27536f0cd88 <col:15> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x27536a76158 'that' 'const alt::Array<alt::MValue> &'
|   |       `-ImplicitCastExpr 0x27536f0ce10 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |         `-DeclRefExpr 0x27536f0cdd8 <col:25> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0cb48 'i' 'alt::Size':'unsigned long long'
|   |-BinaryOperator 0x27536f0cfb0 <line:69:4, col:16> 'alt::Size':'unsigned long long' lvalue '='
|   | |-MemberExpr 0x27536f0cf18 <col:4> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
|   | | `-CXXThisExpr 0x27536f0cf08 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-ImplicitCastExpr 0x27536f0cf98 <col:11, col:16> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   `-MemberExpr 0x27536f0cf68 <col:11, col:16> 'const alt::Size':'const unsigned long long' lvalue .size 0x27536a76f60
|   |     `-DeclRefExpr 0x27536f0cf48 <col:11> 'const alt::Array<alt::MValue>' lvalue ParmVar 0x27536a76158 'that' 'const alt::Array<alt::MValue> &'
|   `-ReturnStmt 0x27536f0cff8 <line:70:4, col:12>
|     `-UnaryOperator 0x27536f0cfe0 <col:11, col:12> 'alt::Array<alt::MValue>' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x27536f0cfd0 <col:12> 'alt::Array<alt::MValue> *' this
|-CXXMethodDecl 0x27536a763a8 <line:73:3, col:32> col:10 operator= 'alt::Array<alt::MValue> &(alt::Array<alt::MValue> &&)'
| `-ParmVarDecl 0x27536a762e0 <col:20, col:28> col:28 that 'alt::Array<alt::MValue> &&'
|-CXXMethodDecl 0x27536a76538 <line:86:3, line:91:3> line:86:8 used Push 'void (const alt::MValue &)'
| |-ParmVarDecl 0x27536a76470 <col:13, col:22> col:22 used el 'const alt::MValue &'
| `-CompoundStmt 0x275370aba30 <line:87:3, line:91:3>
|   |-CXXMemberCallExpr 0x275370ab850 <line:88:4, col:20> 'void'
|   | |-MemberExpr 0x275370ab790 <col:4> '<bound member function type>' ->Realloc 0x27536a770a0
|   | | `-CXXThisExpr 0x275370ab780 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | `-BinaryOperator 0x275370ab830 <col:12, col:19> 'unsigned long long' '+'
|   |   |-ImplicitCastExpr 0x275370ab800 <col:12> 'alt::Size':'unsigned long long' <LValueToRValue>
|   |   | `-MemberExpr 0x275370ab7d0 <col:12> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
|   |   |   `-CXXThisExpr 0x275370ab7c0 <col:12> 'alt::Array<alt::MValue> *' implicit this
|   |   `-ImplicitCastExpr 0x275370ab818 <col:19> 'unsigned long long' <IntegralCast>
|   |     `-IntegerLiteral 0x275370ab5b0 <col:19> 'int' 1
|   |-CXXOperatorCallExpr 0x275370ab9a0 <line:89:4, col:17> 'alt::MValue' lvalue
|   | |-ImplicitCastExpr 0x275370ab988 <col:15> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x275370ab968 <col:15> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x27536a0cc98 'operator=' 'alt::MValue &(const alt::MValue &)'
|   | |-ArraySubscriptExpr 0x275370ab928 <col:4, col:13> 'alt::MValue':'alt::MValue' lvalue
|   | | |-ImplicitCastExpr 0x275370ab8f8 <col:4> 'alt::MValue *' <LValueToRValue>
|   | | | `-MemberExpr 0x275370ab888 <col:4> 'alt::MValue *' lvalue ->data 0x27536a76f08
|   | | |   `-CXXThisExpr 0x275370ab878 <col:4> 'alt::Array<alt::MValue> *' implicit this
|   | | `-ImplicitCastExpr 0x275370ab910 <col:9> 'alt::Size':'unsigned long long' <LValueToRValue>
|   | |   `-MemberExpr 0x275370ab8c8 <col:9> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
|   | |     `-CXXThisExpr 0x275370ab8b8 <col:9> 'alt::Array<alt::MValue> *' implicit this
|   | `-DeclRefExpr 0x275370ab948 <col:17> 'const alt::MValue':'const alt::MValue' lvalue ParmVar 0x27536a76470 'el' 'const alt::MValue &'
|   `-UnaryOperator 0x275370aba18 <line:90:4, col:6> 'alt::Size':'unsigned long long' lvalue prefix '++'
|     `-MemberExpr 0x275370ab9e8 <col:6> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
|       `-CXXThisExpr 0x275370ab9d8 <col:6> 'alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x27536a765f0 <line:93:3, col:39> col:8 used GetSize 'alt::Size () const'
| `-CompoundStmt 0x275370a4450 <col:24, col:39>
|   `-ReturnStmt 0x275370a4440 <col:26, col:33>
|     `-ImplicitCastExpr 0x275370a4428 <col:33> 'alt::Size':'unsigned long long' <LValueToRValue>
|       `-MemberExpr 0x275370a43f8 <col:33> 'const alt::Size':'const unsigned long long' lvalue ->size 0x27536a76f60
|         `-CXXThisExpr 0x275370a43e8 <col:33> 'const alt::Array<alt::MValue> *' implicit this
|-CXXMethodDecl 0x27536a766a0 <line:94:3, col:22> col:8 GetCapacity 'alt::Size () const'
|-CXXMethodDecl 0x27536a76838 <line:96:3, col:47> col:6 used operator[] 'alt::MValue &(alt::Size)'
| |-ParmVarDecl 0x27536a76778 <col:17, col:22> col:22 used key 'alt::Size':'unsigned long long'
| `-CompoundStmt 0x275370a45d0 <col:27, col:47>
|   `-ReturnStmt 0x275370a45c0 <col:29, col:44>
|     `-ArraySubscriptExpr 0x275370a45a0 <col:36, col:44> 'alt::MValue':'alt::MValue' lvalue
|       |-ImplicitCastExpr 0x275370a4570 <col:36> 'alt::MValue *' <LValueToRValue>
|       | `-MemberExpr 0x275370a4520 <col:36> 'alt::MValue *' lvalue ->data 0x27536a76f08
|       |   `-CXXThisExpr 0x275370a4510 <col:36> 'alt::Array<alt::MValue> *' implicit this
|       `-ImplicitCastExpr 0x275370a4588 <col:41> 'alt::Size':'unsigned long long' <LValueToRValue>
|         `-DeclRefExpr 0x275370a4550 <col:41> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a76778 'key' 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x27536a769e8 <line:97:3, col:33> col:12 operator[] 'const alt::MValue &(alt::Size) const'
| `-ParmVarDecl 0x27536a768f0 <col:23, col:28> col:28 key 'alt::Size':'unsigned long long'
|-CXXMethodDecl 0x27536a76b48 <line:99:3, col:12> col:6 begin 'alt::MValue *()'
|-CXXMethodDecl 0x27536a76c78 <line:100:3, col:20> col:12 begin 'const alt::MValue *() const'
|-CXXMethodDecl 0x27536a76d48 <line:101:3, col:10> col:6 end 'alt::MValue *()'
|-CXXMethodDecl 0x27536a76e18 <line:102:3, col:18> col:12 end 'const alt::MValue *() const'
|-AccessSpecDecl 0x27536a76ec8 <line:104:2, col:9> col:2 private
|-FieldDecl 0x27536a76f08 <line:105:3, col:13> col:6 referenced data 'alt::MValue *'
| `-ImplicitCastExpr 0x27536a771b8 <col:13> 'alt::MValue *' <NullToPointer>
|   `-CXXNullPtrLiteralExpr 0x275367fc720 <col:13> 'nullptr_t'
|-FieldDecl 0x27536a76f60 <line:106:3, col:15> col:8 referenced size 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x27536a771f0 <col:15> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x275367fc730 <col:15> 'int' 0
|-FieldDecl 0x27536a76fb8 <line:107:3, col:19> col:8 referenced capacity 'alt::Size':'unsigned long long'
| `-ImplicitCastExpr 0x27536a77228 <col:19> 'alt::Size':'unsigned long long' <IntegralCast>
|   `-IntegerLiteral 0x275367fc770 <col:19> 'int' 0
`-CXXMethodDecl 0x27536a770a0 <line:109:3, line:127:3> line:109:8 used Realloc 'void (alt::Size)'
  |-ParmVarDecl 0x27536a77010 <col:16, col:21> col:21 used least 'alt::Size':'unsigned long long'
  `-CompoundStmt 0x27536f0e1e0 <line:110:3, line:127:3>
    |-IfStmt 0x27536f0d900 <line:111:4, line:112:5>
    | |-BinaryOperator 0x27536f0d8d0 <line:111:8, col:20> 'bool' '>='
    | | |-ImplicitCastExpr 0x27536f0d8a0 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x27536f0d850 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x27536a76fb8
    | | |   `-CXXThisExpr 0x27536f0d840 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x27536f0d8b8 <col:20> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x27536f0d880 <col:20> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a77010 'least' 'alt::Size':'unsigned long long'
    | `-ReturnStmt 0x27536f0d8f0 <line:112:5>
    |-IfStmt 0x27536f0da20 <line:114:4, line:115:16>
    | |-BinaryOperator 0x27536f0d988 <line:114:8, col:20> 'bool' '=='
    | | |-ImplicitCastExpr 0x27536f0d958 <col:8> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x27536f0d928 <col:8> 'alt::Size':'unsigned long long' lvalue ->capacity 0x27536a76fb8
    | | |   `-CXXThisExpr 0x27536f0d918 <col:8> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x27536f0d970 <col:20> 'unsigned long long' <IntegralCast>
    | |   `-IntegerLiteral 0x27536f0d120 <col:20> 'int' 0
    | `-BinaryOperator 0x27536f0da00 <line:115:5, col:16> 'alt::Size':'unsigned long long' lvalue '='
    |   |-MemberExpr 0x27536f0d9b8 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x27536a76fb8
    |   | `-CXXThisExpr 0x27536f0d9a8 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-ImplicitCastExpr 0x27536f0d9e8 <col:16> 'alt::Size':'unsigned long long' <IntegralCast>
    |     `-IntegerLiteral 0x27536f0d1a8 <col:16> 'int' 1
    |-WhileStmt 0x27536f0db70 <line:117:4, line:118:18>
    | |-BinaryOperator 0x27536f0dac8 <line:117:11, col:22> 'bool' '<'
    | | |-ImplicitCastExpr 0x27536f0da98 <col:11> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-MemberExpr 0x27536f0da48 <col:11> 'alt::Size':'unsigned long long' lvalue ->capacity 0x27536a76fb8
    | | |   `-CXXThisExpr 0x27536f0da38 <col:11> 'alt::Array<alt::MValue> *' implicit this
    | | `-ImplicitCastExpr 0x27536f0dab0 <col:22> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-DeclRefExpr 0x27536f0da78 <col:22> 'alt::Size':'unsigned long long' lvalue ParmVar 0x27536a77010 'least' 'alt::Size':'unsigned long long'
    | `-CompoundAssignOperator 0x27536f0db40 <line:118:5, col:18> 'alt::Size':'unsigned long long' lvalue '<<=' ComputeLHSTy='alt::Size':'unsigned long long' ComputeResultTy='alt::Size':'unsigned long long'
    |   |-MemberExpr 0x27536f0daf8 <col:5> 'alt::Size':'unsigned long long' lvalue ->capacity 0x27536a76fb8
    |   | `-CXXThisExpr 0x27536f0dae8 <col:5> 'alt::Array<alt::MValue> *' implicit this
    |   `-IntegerLiteral 0x27536f0d2c8 <col:18> 'int' 1
    |-DeclStmt 0x27536f0dd38 <line:120:4, col:32>
    | `-VarDecl 0x27536f0db98 <col:4, col:17> col:7 used newData 'alt::MValue *' cinit
    |   `-CXXNewExpr 0x27536f0dcf0 <col:17> 'alt::MValue *' array Function 0x275353d5008 'operator new[]' 'void *(size_t) __attribute__((cdecl))':'void *(size_t)'
    |     |-ImplicitCastExpr 0x27536f0dc50 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |     | `-MemberExpr 0x27536f0dc20 <col:23> 'alt::Size':'unsigned long long' lvalue ->capacity 0x27536a76fb8
    |     |   `-CXXThisExpr 0x27536f0dc10 <col:23> 'alt::Array<alt::MValue> *' implicit this
    |     `-CXXConstructExpr 0x27536f0dcc8 <col:21> 'alt::MValue []' 'void ()'
    |-ForStmt 0x27536f0e098 <line:122:4, line:123:24>
    | |-DeclStmt 0x27536f0ddd0 <line:122:9, col:19>
    | | `-VarDecl 0x27536f0dd50 <col:9, col:18> col:14 used i 'alt::Size':'unsigned long long' cinit
    | |   `-ImplicitCastExpr 0x27536f0ddb8 <col:18> 'alt::Size':'unsigned long long' <IntegralCast>
    | |     `-IntegerLiteral 0x27536f0d4d0 <col:18> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x27536f0de78 <col:21, col:25> 'bool' '<'
    | | |-ImplicitCastExpr 0x27536f0de48 <col:21> 'alt::Size':'unsigned long long' <LValueToRValue>
    | | | `-DeclRefExpr 0x27536f0dde8 <col:21> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0dd50 'i' 'alt::Size':'unsigned long long'
    | | `-ImplicitCastExpr 0x27536f0de60 <col:25> 'alt::Size':'unsigned long long' <LValueToRValue>
    | |   `-MemberExpr 0x27536f0de18 <col:25> 'alt::Size':'unsigned long long' lvalue ->size 0x27536a76f60
    | |     `-CXXThisExpr 0x27536f0de08 <col:25> 'alt::Array<alt::MValue> *' implicit this
    | |-UnaryOperator 0x27536f0deb8 <col:31, col:33> 'alt::Size':'unsigned long long' lvalue prefix '++'
    | | `-DeclRefExpr 0x27536f0de98 <col:33> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0dd50 'i' 'alt::Size':'unsigned long long'
    | `-CXXOperatorCallExpr 0x27536f0e060 <line:123:5, col:24> 'alt::MValue' lvalue
    |   |-ImplicitCastExpr 0x27536f0e048 <col:16> 'alt::MValue &(*)(const alt::MValue &)' <FunctionToPointerDecay>
    |   | `-DeclRefExpr 0x27536f0e028 <col:16> 'alt::MValue &(const alt::MValue &)' lvalue CXXMethod 0x27536a0cc98 'operator=' 'alt::MValue &(const alt::MValue &)'
    |   |-ArraySubscriptExpr 0x27536f0df40 <col:5, col:14> 'alt::MValue':'alt::MValue' lvalue
    |   | |-ImplicitCastExpr 0x27536f0df10 <col:5> 'alt::MValue *' <LValueToRValue>
    |   | | `-DeclRefExpr 0x27536f0ded0 <col:5> 'alt::MValue *' lvalue Var 0x27536f0db98 'newData' 'alt::MValue *'
    |   | `-ImplicitCastExpr 0x27536f0df28 <col:13> 'alt::Size':'unsigned long long' <LValueToRValue>
    |   |   `-DeclRefExpr 0x27536f0def0 <col:13> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0dd50 'i' 'alt::Size':'unsigned long long'
    |   `-ImplicitCastExpr 0x27536f0e010 <col:18, col:24> 'const alt::MValue':'const alt::MValue' lvalue <NoOp>
    |     `-ArraySubscriptExpr 0x27536f0dff0 <col:18, col:24> 'alt::MValue':'alt::MValue' lvalue
    |       |-ImplicitCastExpr 0x27536f0dfc0 <col:18> 'alt::MValue *' <LValueToRValue>
    |       | `-MemberExpr 0x27536f0df70 <col:18> 'alt::MValue *' lvalue ->data 0x27536a76f08
    |       |   `-CXXThisExpr 0x27536f0df60 <col:18> 'alt::Array<alt::MValue> *' implicit this
    |       `-ImplicitCastExpr 0x27536f0dfd8 <col:23> 'alt::Size':'unsigned long long' <LValueToRValue>
    |         `-DeclRefExpr 0x27536f0dfa0 <col:23> 'alt::Size':'unsigned long long' lvalue Var 0x27536f0dd50 'i' 'alt::Size':'unsigned long long'
    |-CXXDeleteExpr 0x27536f0e128 <line:125:4, col:13> 'void' array Function 0x275353d5918 'operator delete[]' 'void (void *) noexcept __attribute__((cdecl))':'void (void *) noexcept'
    | `-ImplicitCastExpr 0x27536f0e110 <col:13> 'alt::MValue *' <LValueToRValue>
    |   `-MemberExpr 0x27536f0e0e0 <col:13> 'alt::MValue *' lvalue ->data 0x27536a76f08
    |     `-CXXThisExpr 0x27536f0e0d0 <col:13> 'alt::Array<alt::MValue> *' implicit this
    `-BinaryOperator 0x27536f0e1c0 <line:126:4, col:11> 'alt::MValue *' lvalue '='
      |-MemberExpr 0x27536f0e158 <col:4> 'alt::MValue *' lvalue ->data 0x27536a76f08
      | `-CXXThisExpr 0x27536f0e148 <col:4> 'alt::Array<alt::MValue> *' implicit this
      `-ImplicitCastExpr 0x27536f0e1a8 <col:11> 'alt::MValue *' <LValueToRValue>
        `-DeclRefExpr 0x27536f0e188 <col:11> 'alt::MValue *' lvalue Var 0x27536f0db98 'newData' 'alt::MValue *'

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::Dict = std::unordered_map
ClassTemplateSpecializationDecl 0x27536a057c0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:89:1, line:511:2> line:94:8 class unordered_map definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial
|-public '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|-TemplateArgument type 'alt::String'
|-TemplateArgument type 'alt::MValue'
|-TemplateArgument type 'std::hash<alt::String>'
|-TemplateArgument type 'std::equal_to<alt::String>'
|-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|-MaxFieldAlignmentAttr 0x27536a77418 <<invalid sloc>> Implicit 64
|-CXXRecordDecl 0x27536b35ac0 prev 0x27536a057c0 <col:2, col:8> col:8 implicit class unordered_map
|-AccessSpecDecl 0x27536b35b50 <line:98:1, col:7> col:1 public
|-StaticAssertDecl 0x27536b35e70 <line:99:2, line:100:110> line:99:2
| |-BinaryOperator 0x27536b35e38 <col:16, col:109> 'bool' '||'
| | |-UnaryOperator 0x27536b35b98 <col:16, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:207:23> 'bool' prefix '!' cannot overflow
| | | `-ImplicitCastExpr 0x27536b35b80 <col:23> 'bool' <IntegralToBoolean>
| | |   `-IntegerLiteral 0x27536955d10 <col:23> 'int' 1
| | `-ImplicitCastExpr 0x27536b35e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:99:49, col:109> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x27536b35d90 <col:49, col:109> 'const bool' lvalue VarTemplateSpecialization 0x27536aefbd0 'is_same_v' 'const bool' non_odr_use_constant
| `-StringLiteral 0x275369560b8 <line:100:33, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:428:2> 'const char [291]' lvalue "unordered_map<Key, Value, Hasher, Eq, Allocator> requires that Allocator's value_type match pair<const Key, Value> (See N4659 26.2.1 [container.requirements.general]/16 allocator_type) Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this diagnostic."
|-TypeAliasDecl 0x27536b35fb0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:102:2, col:56> col:8 _Mytraits '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TemplateSpecializationType 0x27536b35ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|   |-TemplateArgument type 'alt::String':'alt::String'
|   |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|   |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|   `-RecordType 0x27536a77680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|     `-ClassTemplateSpecialization 0x27536a77568 '_Uhash_compare'
|-TypeAliasDecl 0x27536b36230 <line:103:2, col:73> col:8 _Mybase '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| `-TemplateSpecializationType 0x27536b361c0 '_Hash<_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' sugar _Hash
|   |-TemplateArgument type '_Umap_traits<alt::String, alt::MValue, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits, std::allocator<std::pair<const alt::String, alt::MValue> >, false>':'std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false>'
|   `-RecordType 0x27536a77b40 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
|     `-ClassTemplateSpecialization 0x27536a77a60 '_Hash'
|-TypeAliasDecl 0x27536b362a0 <line:104:2, col:17> col:8 hasher 'std::hash<alt::String>':'std::hash<alt::String>'
| `-SubstTemplateTypeParmType 0x27536a774f0 'std::hash<alt::String>' sugar
|   |-TemplateTypeParmType 0x27536954f00 '_Hasher' dependent depth 0 index 2
|   | `-TemplateTypeParm 0x27536954eb0 '_Hasher'
|   `-RecordType 0x275367e1200 'std::hash<alt::String>'
|     `-ClassTemplateSpecialization 0x275367e1118 'hash'
|-TypeAliasDecl 0x27536b36310 <line:105:2, col:19> col:8 key_type 'alt::String':'alt::String'
| `-SubstTemplateTypeParmType 0x27536a05220 'alt::String' sugar
|   |-TemplateTypeParmType 0x27536954d50 '_Kty' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x27536954d00 '_Kty'
|   `-RecordType 0x275367cd800 'alt::String'
|     `-CXXRecord 0x275367cd768 'String'
|-TypeAliasDecl 0x27536b36380 <line:106:2, col:22> col:8 mapped_type 'alt::MValue':'alt::MValue'
| `-SubstTemplateTypeParmType 0x27536a05460 'alt::MValue' sugar
|   |-TemplateTypeParmType 0x27536954dd0 '_Ty' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x27536954d78 '_Ty'
|   `-RecordType 0x27536a04620 'alt::MValue'
|     `-CXXRecord 0x27536a04590 'MValue'
|-TypeAliasDecl 0x27536b363f0 <line:107:2, col:20> col:8 key_equal 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| `-SubstTemplateTypeParmType 0x27536a77530 'std::equal_to<alt::String>' sugar
|   |-TemplateTypeParmType 0x27536955030 '_Keyeq' dependent depth 0 index 3
|   | `-TemplateTypeParm 0x27536954fe0 '_Keyeq'
|   `-RecordType 0x27536a053c0 'std::equal_to<alt::String>'
|     `-ClassTemplateSpecialization 0x27536a052e0 'equal_to'
|-TypeAliasDecl 0x27536b36460 <line:108:2, col:22> col:8 key_compare 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
| `-TypedefType 0x27536b36030 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mytraits' sugar
|   |-TypeAlias 0x27536b35fb0 '_Mytraits'
|   `-TemplateSpecializationType 0x27536b35ee0 '_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' sugar _Uhash_compare
|     |-TemplateArgument type 'alt::String':'alt::String'
|     |-TemplateArgument type 'std::hash<alt::String>':'std::hash<alt::String>'
|     |-TemplateArgument type 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
|     `-RecordType 0x27536a77680 'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >'
|       `-ClassTemplateSpecialization 0x27536a77568 '_Uhash_compare'
|-TypeAliasDecl 0x27536b36570 <line:110:2, col:39> col:8 value_type 'typename _Mybase::value_type':'std::pair<const alt::String, alt::MValue>'
| `-ElaboratedType 0x27536b36520 'typename _Mybase::value_type' sugar
|   `-TypedefType 0x27536b00db0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|     |-TypeAlias 0x27536b008e0 'value_type'
|     `-ElaboratedType 0x27536b00890 'typename _Mylist::value_type' sugar
|       `-TypedefType 0x27536af0ee0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|         |-TypeAlias 0x27536af0a70 'value_type'
|         `-ElaboratedType 0x27536af0a20 'typename _Mybase::value_type' sugar
|           `-TypedefType 0x27536ac4060 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|             |-TypeAlias 0x27536ac3c40 'value_type'
|             `-ElaboratedType 0x27536ac3bf0 'typename _Val_types::value_type' sugar
|               `-TypedefType 0x27536ac37e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                 |-TypeAlias 0x27536ac36b8 'value_type'
|                 `-SubstTemplateTypeParmType 0x27536ac3680 'std::pair<const alt::String, alt::MValue>' sugar
|                   |-TemplateTypeParmType 0x27535ebb910 '_Value_type' dependent depth 0 index 0
|                   | `-TemplateTypeParm 0x27535ebb8b8 '_Value_type'
|                   `-RecordType 0x27536a05590 'std::pair<const alt::String, alt::MValue>'
|                     `-ClassTemplateSpecialization 0x27536a05498 'pair'
|-TypeAliasDecl 0x27536b36640 <line:111:2, col:43> col:8 allocator_type 'typename _Mybase::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >'
| `-ElaboratedType 0x27536b365f0 'typename _Mybase::allocator_type' sugar
|   `-TypedefType 0x27536b03ae0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type' sugar
|     |-TypeAlias 0x27536b009b0 'allocator_type'
|     `-ElaboratedType 0x27536b00960 'typename _Mylist::allocator_type' sugar
|       `-TypedefType 0x27536af87f0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type' sugar
|         |-TypeAlias 0x27536af0ae0 'allocator_type'
|         `-SubstTemplateTypeParmType 0x27536a96b80 'std::allocator<std::pair<const alt::String, alt::MValue> >' sugar
|           |-TemplateTypeParmType 0x27536832360 '_Alloc' dependent depth 0 index 1
|           | `-TemplateTypeParm 0x27536832310 '_Alloc'
|           `-RecordType 0x27536a05730 'std::allocator<std::pair<const alt::String, alt::MValue> >'
|             `-ClassTemplateSpecialization 0x27536a05650 'allocator'
|-TypeAliasDecl 0x27536b36710 <line:112:2, col:38> col:8 size_type 'typename _Mybase::size_type':'unsigned long long'
| `-ElaboratedType 0x27536b366c0 'typename _Mybase::size_type' sugar
|   `-TypedefType 0x27536b06e70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::size_type' sugar
|     |-TypeAlias 0x27536b00a80 'size_type'
|     `-ElaboratedType 0x27536b00a30 'typename _Mylist::size_type' sugar
|       `-TypedefType 0x27536af1b80 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type' sugar
|         |-TypeAlias 0x27536af0bb0 'size_type'
|         `-ElaboratedType 0x27536af0b60 'typename _Mybase::size_type' sugar
|           `-TypedefType 0x27536ac7000 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::size_type' sugar
|             |-TypeAlias 0x27536ac3d30 'size_type'
|             `-ElaboratedType 0x27536ac3ce0 'typename _Val_types::size_type' sugar
|               `-TypedefType 0x27536ac3cc0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::size_type' sugar
|                 |-TypeAlias 0x27536ac3718 'size_type'
|                 `-TypedefType 0x27535351010 'size_t' sugar
|                   |-Typedef 0x27535350d58 'size_t'
|                   `-BuiltinType 0x275350e1e20 'unsigned long long'
|-TypeAliasDecl 0x27536b36800 <line:113:2, col:44> col:8 difference_type 'typename _Mybase::difference_type':'long long'
| `-ElaboratedType 0x27536b367b0 'typename _Mybase::difference_type' sugar
|   `-TypedefType 0x27536b36790 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::difference_type' sugar
|     |-TypeAlias 0x27536b00b70 'difference_type'
|     `-ElaboratedType 0x27536b00b20 'typename _Mylist::difference_type' sugar
|       `-TypedefType 0x27536b00b00 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::difference_type' sugar
|         |-TypeAlias 0x27536af0ca0 'difference_type'
|         `-ElaboratedType 0x27536af0c50 'typename _Mybase::difference_type' sugar
|           `-TypedefType 0x27536af0c30 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::difference_type' sugar
|             |-TypeAlias 0x27536ac3e20 'difference_type'
|             `-ElaboratedType 0x27536ac3dd0 'typename _Val_types::difference_type' sugar
|               `-TypedefType 0x27536ac3db0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::difference_type' sugar
|                 |-TypeAlias 0x27536ac3778 'difference_type'
|                 `-TypedefType 0x27535d9d700 'ptrdiff_t' sugar
|                   |-Typedef 0x27535350df0 'ptrdiff_t'
|                   `-BuiltinType 0x275350e1d80 'long long'
|-TypeAliasDecl 0x27536b368f0 <line:114:2, col:36> col:8 pointer 'typename _Mybase::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x27536b368a0 'typename _Mybase::pointer' sugar
|   `-TypedefType 0x27536b36880 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::pointer' sugar
|     |-TypeAlias 0x27536b00c60 'pointer'
|     `-ElaboratedType 0x27536b00c10 'typename _Mylist::pointer' sugar
|       `-TypedefType 0x27536b00bf0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::pointer' sugar
|         |-TypeAlias 0x27536af0d90 'pointer'
|         `-ElaboratedType 0x27536af0d40 'typename _Mybase::pointer' sugar
|           `-TypedefType 0x27536af0d20 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::pointer' sugar
|             |-TypeAlias 0x27536ac3f10 'pointer'
|             `-ElaboratedType 0x27536ac3ec0 'typename _Val_types::pointer' sugar
|               `-TypedefType 0x27536ac3ea0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::pointer' sugar
|                 |-TypeAlias 0x27536ac3838 'pointer'
|                 `-PointerType 0x27536ac3800 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-TypedefType 0x27536ac37e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x27536ac36b8 'value_type'
|                     `-SubstTemplateTypeParmType 0x27536ac3680 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x27535ebb910 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x27535ebb8b8 '_Value_type'
|                       `-RecordType 0x27536a05590 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x27536a05498 'pair'
|-TypeAliasDecl 0x27536b369e0 <line:115:2, col:42> col:8 const_pointer 'typename _Mybase::const_pointer':'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
| `-ElaboratedType 0x27536b36990 'typename _Mybase::const_pointer' sugar
|   `-TypedefType 0x27536b36970 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_pointer' sugar
|     |-TypeAlias 0x27536b00d50 'const_pointer'
|     `-ElaboratedType 0x27536b00d00 'typename _Mylist::const_pointer' sugar
|       `-TypedefType 0x27536b00ce0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_pointer' sugar
|         |-TypeAlias 0x27536af0e80 'const_pointer'
|         `-ElaboratedType 0x27536af0e30 'typename _Mybase::const_pointer' sugar
|           `-TypedefType 0x27536af0e10 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_pointer' sugar
|             |-TypeAlias 0x27536ac4000 'const_pointer'
|             `-ElaboratedType 0x27536ac3fb0 'typename _Val_types::const_pointer' sugar
|               `-TypedefType 0x27536ac3f90 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::const_pointer' sugar
|                 |-TypeAlias 0x27536ac38d8 'const_pointer'
|                 `-PointerType 0x27536ac38a0 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|                   `-QualType 0x27536ac37e1 'const std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' const
|                     `-TypedefType 0x27536ac37e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x27536ac36b8 'value_type'
|                       `-SubstTemplateTypeParmType 0x27536ac3680 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x27535ebb910 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x27535ebb8b8 '_Value_type'
|                         `-RecordType 0x27536a05590 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x27536a05498 'pair'
|-TypeAliasDecl 0x27536b36a98 <line:116:2, col:30> col:8 reference 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x27536b36a60 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-TypedefType 0x27536b36a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|     |-TypeAlias 0x27536b36570 'value_type'
|     `-ElaboratedType 0x27536b36520 'typename _Mybase::value_type' sugar
|       `-TypedefType 0x27536b00db0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|         |-TypeAlias 0x27536b008e0 'value_type'
|         `-ElaboratedType 0x27536b00890 'typename _Mylist::value_type' sugar
|           `-TypedefType 0x27536af0ee0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|             |-TypeAlias 0x27536af0a70 'value_type'
|             `-ElaboratedType 0x27536af0a20 'typename _Mybase::value_type' sugar
|               `-TypedefType 0x27536ac4060 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                 |-TypeAlias 0x27536ac3c40 'value_type'
|                 `-ElaboratedType 0x27536ac3bf0 'typename _Val_types::value_type' sugar
|                   `-TypedefType 0x27536ac37e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                     |-TypeAlias 0x27536ac36b8 'value_type'
|                     `-SubstTemplateTypeParmType 0x27536ac3680 'std::pair<const alt::String, alt::MValue>' sugar
|                       |-TemplateTypeParmType 0x27535ebb910 '_Value_type' dependent depth 0 index 0
|                       | `-TemplateTypeParm 0x27535ebb8b8 '_Value_type'
|                       `-RecordType 0x27536a05590 'std::pair<const alt::String, alt::MValue>'
|                         `-ClassTemplateSpecialization 0x27536a05498 'pair'
|-TypeAliasDecl 0x27536b36b38 <line:117:2, col:42> col:8 const_reference 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
| `-LValueReferenceType 0x27536b36b00 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type &'
|   `-QualType 0x27536b36a41 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' const
|     `-TypedefType 0x27536b36a40 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|       |-TypeAlias 0x27536b36570 'value_type'
|       `-ElaboratedType 0x27536b36520 'typename _Mybase::value_type' sugar
|         `-TypedefType 0x27536b00db0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type' sugar
|           |-TypeAlias 0x27536b008e0 'value_type'
|           `-ElaboratedType 0x27536b00890 'typename _Mylist::value_type' sugar
|             `-TypedefType 0x27536af0ee0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type' sugar
|               |-TypeAlias 0x27536af0a70 'value_type'
|               `-ElaboratedType 0x27536af0a20 'typename _Mybase::value_type' sugar
|                 `-TypedefType 0x27536ac4060 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::value_type' sugar
|                   |-TypeAlias 0x27536ac3c40 'value_type'
|                   `-ElaboratedType 0x27536ac3bf0 'typename _Val_types::value_type' sugar
|                     `-TypedefType 0x27536ac37e0 'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type' sugar
|                       |-TypeAlias 0x27536ac36b8 'value_type'
|                       `-SubstTemplateTypeParmType 0x27536ac3680 'std::pair<const alt::String, alt::MValue>' sugar
|                         |-TemplateTypeParmType 0x27535ebb910 '_Value_type' dependent depth 0 index 0
|                         | `-TemplateTypeParm 0x27535ebb8b8 '_Value_type'
|                         `-RecordType 0x27536a05590 'std::pair<const alt::String, alt::MValue>'
|                           `-ClassTemplateSpecialization 0x27536a05498 'pair'
|-TypeAliasDecl 0x27536b36c10 <line:118:2, col:37> col:8 iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x27536b36bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x27536b03350 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x27536b01fa8 'iterator'
|     `-TemplateSpecializationType 0x27536b01ed0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x27536b01878 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x27536b01860 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x27536b016f0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x27536b00f50 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x27536b01e80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x27536b01e60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x27536b01de8 'type'
|       |   `-SubstTemplateTypeParmType 0x27536b01db0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x27535393f20 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x27535393e98 '_Ty2'
|       |     `-RecordType 0x27536ac4420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x27536ac4340 '_List_iterator'
|       `-ElaboratedType 0x27536b01e80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x27536b01e60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x27536b01de8 'type'
|           `-SubstTemplateTypeParmType 0x27536b01db0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x27535393f20 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x27535393e98 '_Ty2'
|             `-RecordType 0x27536ac4420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x27536ac4340 '_List_iterator'
|-TypeAliasDecl 0x27536b36ce0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:119:2, col:43> col:8 const_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x27536b36c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x27536b037e0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x27536b02048 'const_iterator'
|     `-ElaboratedType 0x27536b017a0 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x27536af1640 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x27536af11c0 'const_iterator'
|         `-ElaboratedType 0x27536af1170 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x27536af1150 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x27536ac4700 'const_iterator'
|             `-TemplateSpecializationType 0x27536ac4690 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x27536ac4670 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x27536ac4590 '_List_const_iterator'
|-TypeAliasDecl 0x27536b36d80 <line:121:2, col:43> col:8 local_iterator 'typename _Mybase::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x27536b36bc0 'typename _Mybase::iterator' sugar
|   `-TypedefType 0x27536b03350 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator' sugar
|     |-TypeAlias 0x27536b01fa8 'iterator'
|     `-TemplateSpecializationType 0x27536b01ed0 'conditional_t<is_same_v<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_type, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>, typename _Mylist::const_iterator, typename _Mylist::iterator>' sugar alias conditional_t
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x27536b01878 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xhash:180:33, col:63> 'bool' false
|       |   `-ImplicitCastExpr 0x27536b01860 <col:33, col:63> 'bool' <LValueToRValue>
|       |     `-DeclRefExpr 0x27536b016f0 <col:33, col:63> 'const bool' lvalue VarTemplateSpecialization 0x27536b00f50 'is_same_v' 'const bool' non_odr_use_constant
|       |-TemplateArgument type 'typename _Mylist::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'typename _Mylist::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-ElaboratedType 0x27536b01e80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|       | `-TypedefType 0x27536b01e60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|       |   |-TypeAlias 0x27536b01de8 'type'
|       |   `-SubstTemplateTypeParmType 0x27536b01db0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|       |     |-TemplateTypeParmType 0x27535393f20 '_Ty2' dependent depth 0 index 2
|       |     | `-TemplateTypeParm 0x27535393e98 '_Ty2'
|       |     `-RecordType 0x27536ac4420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |       `-ClassTemplateSpecialization 0x27536ac4340 '_List_iterator'
|       `-ElaboratedType 0x27536b01e80 'typename conditional<false, _List_const_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > >, _List_iterator<_List_val<_List_simple_types<pair<const String, MValue> > > > >::type' sugar
|         `-TypedefType 0x27536b01e60 'std::conditional<false, std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > >::type' sugar
|           |-TypeAlias 0x27536b01de8 'type'
|           `-SubstTemplateTypeParmType 0x27536b01db0 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' sugar
|             |-TemplateTypeParmType 0x27535393f20 '_Ty2' dependent depth 0 index 2
|             | `-TemplateTypeParm 0x27535393e98 '_Ty2'
|             `-RecordType 0x27536ac4420 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-ClassTemplateSpecialization 0x27536ac4340 '_List_iterator'
|-TypeAliasDecl 0x27536b36e20 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:122:2, col:49> col:8 const_local_iterator 'typename _Mybase::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
| `-ElaboratedType 0x27536b36c90 'typename _Mybase::const_iterator' sugar
|   `-TypedefType 0x27536b037e0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator' sugar
|     |-TypeAlias 0x27536b02048 'const_iterator'
|     `-ElaboratedType 0x27536b017a0 'typename _Mylist::const_iterator' sugar
|       `-TypedefType 0x27536af1640 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator' sugar
|         |-TypeAlias 0x27536af11c0 'const_iterator'
|         `-ElaboratedType 0x27536af1170 'typename _Mybase::const_iterator' sugar
|           `-TypedefType 0x27536af1150 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::const_iterator' sugar
|             |-TypeAlias 0x27536ac4700 'const_iterator'
|             `-TemplateSpecializationType 0x27536ac4690 '_List_const_iterator<_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types> >' sugar _List_const_iterator
|               |-TemplateArgument type '_List_val<std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Val_types>':'std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > >'
|               `-RecordType 0x27536ac4670 'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|                 `-ClassTemplateSpecialization 0x27536ac4590 '_List_const_iterator'
|-TypeAliasDecl 0x27536b36ef0 <line:124:2, col:36> col:8 _Alnode 'typename _Mybase::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
| `-ElaboratedType 0x27536b36ea0 'typename _Mybase::_Alnode' sugar
|   `-TypedefType 0x27536b02b20 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode' sugar
|     |-TypeAlias 0x27536b00720 '_Alnode'
|     `-ElaboratedType 0x27536b006d0 'typename _Mylist::_Alnode' sugar
|       `-TypedefType 0x27536b006b0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|         |-TypeAlias 0x27536af08b0 '_Alnode'
|         `-ElaboratedType 0x27536af0860 'typename _Mybase::_Alnode' sugar
|           `-TypedefType 0x27536ac2a60 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode' sugar
|             |-TypeAlias 0x27536ac2930 '_Alnode'
|             `-ElaboratedType 0x27536ac28e0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode' sugar
|               `-TypedefType 0x27536a982a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode' sugar
|                 |-TypeAlias 0x27536a98238 '_Alnode'
|                 `-TemplateSpecializationType 0x27536a98190 '_Rebind_alloc_t<std::allocator<std::pair<const alt::String, alt::MValue> >, std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node>' sugar alias _Rebind_alloc_t
|                   |-TemplateArgument type 'std::allocator<std::pair<const alt::String, alt::MValue> >':'std::allocator<std::pair<const alt::String, alt::MValue> >'
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Node':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |-ElaboratedType 0x27536a98120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                   | `-TemplateSpecializationType 0x27536a980d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                   |   |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   |-TemplateSpecializationType 0x27536a98060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |   | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |   | `-RecordType 0x27536a98040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |   |   `-ClassTemplateSpecialization 0x27536a97f58 'allocator'
|                   |   `-TemplateSpecializationType 0x27536a98060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                   |     |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                   |     `-RecordType 0x27536a98040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   |       `-ClassTemplateSpecialization 0x27536a97f58 'allocator'
|                   `-ElaboratedType 0x27536a98120 'typename allocator_traits<allocator<pair<const String, MValue> > >::rebind_alloc<_List_node<pair<const String, MValue>, void *> >' sugar
|                     `-TemplateSpecializationType 0x27536a980d0 'rebind_alloc<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar alias rebind_alloc
|                       |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       |-TemplateSpecializationType 0x27536a98060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                       | |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                       | `-RecordType 0x27536a98040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                       |   `-ClassTemplateSpecialization 0x27536a97f58 'allocator'
|                       `-TemplateSpecializationType 0x27536a98060 'allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >' sugar allocator
|                         |-TemplateArgument type 'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>':'std::_List_node<std::pair<const alt::String, alt::MValue>, void *>'
|                         `-RecordType 0x27536a98040 'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                           `-ClassTemplateSpecialization 0x27536a97f58 'allocator'
|-TypeAliasDecl 0x27536b36fe0 <line:125:2, col:43> col:8 _Alnode_traits 'typename _Mybase::_Alnode_traits':'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
| `-ElaboratedType 0x27536b36f90 'typename _Mybase::_Alnode_traits' sugar
|   `-TypedefType 0x27536b36f70 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Alnode_traits' sugar
|     |-TypeAlias 0x27536b00810 '_Alnode_traits'
|     `-ElaboratedType 0x27536b007c0 'typename _Mylist::_Alnode_traits' sugar
|       `-TypedefType 0x27536b007a0 'std::list<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|         |-TypeAlias 0x27536af09a0 '_Alnode_traits'
|         `-ElaboratedType 0x27536af0950 'typename _Mybase::_Alnode_traits' sugar
|           `-TypedefType 0x27536af0930 'std::_List_alloc<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > > >::_Alnode_traits' sugar
|             |-TypeAlias 0x27536ac2a00 '_Alnode_traits'
|             `-ElaboratedType 0x27536ac29b0 'typename _List_base_types<pair<const String, MValue>, allocator<pair<const String, MValue> > >::_Alnode_traits' sugar
|               `-TypedefType 0x27536a984a0 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode_traits' sugar
|                 |-TypeAlias 0x27536a98440 '_Alnode_traits'
|                 `-TemplateSpecializationType 0x27536a983d0 'allocator_traits<std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode>' sugar allocator_traits
|                   |-TemplateArgument type 'std::_List_base_types<std::pair<const alt::String, alt::MValue>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Alnode':'std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> >'
|                   `-RecordType 0x27536a983b0 'std::allocator_traits<std::allocator<std::_List_node<std::pair<const alt::String, alt::MValue>, void *> > >'
|                     `-ClassTemplateSpecialization 0x27536a982d0 'allocator_traits'
|-TypeAliasDecl 0x27536b370b0 <line:126:2, col:36> col:8 _Pairib 'typename _Mybase::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
| `-ElaboratedType 0x27536b37060 'typename _Mybase::_Pairib' sugar
|   `-TypedefType 0x27536b057c0 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib' sugar
|     |-TypeAlias 0x27536b03540 '_Pairib'
|     `-TemplateSpecializationType 0x27536b034a0 'pair<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator, bool>' sugar pair
|       |-TemplateArgument type 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |-TemplateArgument type 'bool'
|       `-RecordType 0x27536b03480 'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-ClassTemplateSpecialization 0x27536b03380 'pair'
|-TypeAliasDecl 0x27536b37370 <line:129:2, col:86> col:8 insert_return_type '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>':'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
| `-TemplateSpecializationType 0x27536b372d0 '_Insert_return_type<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator, typename _Mybase::node_type>' sugar _Insert_return_type
|   |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-TemplateArgument type 'typename _Mybase::node_type':'std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue>'
|   `-RecordType 0x27536b372b0 'std::_Insert_return_type<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_Node_handle<std::_List_node<std::pair<const alt::String, alt::MValue>, void *>, std::allocator<std::pair<const alt::String, alt::MValue> >, _Node_handle_map_base, alt::String, alt::MValue> >'
|     `-ClassTemplateSpecialization 0x27536b371b0 '_Insert_return_type'
|-CXXConstructorDecl 0x27536b37408 <line:132:2, line:135:3> line:132:2 used unordered_map 'void ()'
| |-CXXCtorInitializer 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| | `-ExprWithCleanups 0x275370abf70 <line:133:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >'
| |   `-CXXConstructExpr 0x275370abf38 <col:5, col:44> '_Hash<_Umap_traits<alt::String, alt::MValue, _Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >':'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' 'void (const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::key_compare &, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::allocator_type &)'
| |     |-MaterializeTemporaryExpr 0x275370abef0 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' lvalue
| |     | `-ImplicitCastExpr 0x275370abed8 <col:13, col:25> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'const std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' <NoOp>
| |     |   `-CXXTemporaryObjectExpr 0x275370abe10 <col:13, col:25> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_compare':'std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >' 'void (std::hash<alt::String>, std::equal_to<alt::String>)'
| |     |     |-CXXDefaultArgExpr 0x275370abcb0 <<invalid sloc>> 'std::hash<alt::String>':'std::hash<alt::String>'
| |     |     `-CXXDefaultArgExpr 0x275370abdf0 <<invalid sloc>> 'std::equal_to<alt::String>':'std::equal_to<alt::String>'
| |     `-MaterializeTemporaryExpr 0x275370abf20 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' lvalue
| |       `-ImplicitCastExpr 0x275370abf08 <col:28, col:43> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'const std::allocator<std::pair<const alt::String, alt::MValue> >' <NoOp>
| |         `-CXXTemporaryObjectExpr 0x275370abe60 <col:28, col:43> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type':'std::allocator<std::pair<const alt::String, alt::MValue> >' 'void () noexcept'
| `-CompoundStmt 0x275370abb48 <line:134:3, line:135:3>
|-CXXConstructorDecl 0x27536b375f8 <line:137:2, col:50> col:11 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| `-ParmVarDecl 0x27536b37518 <col:25, col:47> col:47 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b37778 <line:142:2, col:43> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| `-ParmVarDecl 0x27536b376c8 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-CXXConstructorDecl 0x27536b379f8 <line:147:2, col:70> col:2 unordered_map 'void (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b37848 <col:16, col:37> col:37 _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-ParmVarDecl 0x27536b378c0 <col:45, col:67> col:67 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b37bd8 <line:152:2, col:43> col:11 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| `-ParmVarDecl 0x27536b37af0 <col:25, col:35> col:35 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x27536b37e18 <line:158:2, col:61> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b37ca8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x27536b37d20 <col:36, col:58> col:58 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b380e8 <line:164:2, col:58> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x27536b37ef0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x27536b37fb8 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x27536b383f8 <line:170:2, line:171:28> line:170:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b381c0 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x27536b38238 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x27536b382b0 <line:171:3, col:25> col:25 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b38738 <line:177:2, line:178:26> line:177:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x27536b384d8 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x27536b38550 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x27536b385f8 <line:178:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x27536b38ae8 <line:184:2, line:185:53> line:184:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b38818 <col:16, col:26> col:26 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x27536b38890 <col:36, col:50> col:50 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x27536b38908 <line:185:3, col:17> col:17 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x27536b38980 <col:28, col:50> col:50 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x27536b38e70 <line:191:2, line:192:42> col:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b38bc0 <line:191:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b38dc8 <line:192:3, col:42> col:3 unordered_map 'void (_Iter, _Iter)'
|   |-ParmVarDecl 0x27536b38c60 <col:17, col:23> col:23 _First '_Iter'
|   `-ParmVarDecl 0x27536b38cd8 <col:31, col:37> col:37 _Last '_Iter'
|-FunctionTemplateDecl 0x27536b392a0 <line:198:2, line:199:69> col:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b38f58 <line:198:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b391f8 <line:199:3, col:69> col:3 unordered_map 'void (_Iter, _Iter, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x27536b39000 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b39078 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x27536b390f0 <col:44, col:66> col:66 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x27536b39710 <line:205:2, line:207:22> line:206:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b39390 <line:205:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b39668 <line:206:3, line:207:22> line:206:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
|   |-ParmVarDecl 0x27536b39430 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b394a8 <col:31, col:37> col:37 _Last '_Iter'
|   `-ParmVarDecl 0x27536b39520 <line:207:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-FunctionTemplateDecl 0x27536b39c10 <line:214:2, line:216:49> line:215:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b39800 <line:214:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b39b68 <line:215:3, line:216:49> line:215:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x27536b398a0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b39918 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x27536b39990 <line:216:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x27536b39a08 <col:24, col:46> col:46 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x27536b3a120 <line:223:2, line:225:46> line:224:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b39d08 <line:223:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b3a078 <line:224:3, line:225:46> line:224:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
|   |-ParmVarDecl 0x27536b39db0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b39e28 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x27536b39ea0 <line:225:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   `-ParmVarDecl 0x27536b39f18 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-FunctionTemplateDecl 0x27536b3a6c0 <line:232:2, line:235:29> line:233:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b3a218 <line:232:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b3a618 <line:233:3, line:235:29> line:233:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x27536b3a2c0 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b3a338 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x27536b3a3b0 <line:234:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x27536b3a428 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x27536b3a4a0 <line:235:4, col:26> col:26 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-FunctionTemplateDecl 0x27536b3ac60 <line:242:2, line:245:27> line:243:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b3a7c0 <line:242:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b3abb8 <line:243:3, line:245:27> line:243:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
|   |-ParmVarDecl 0x27536b3a860 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b3a8d8 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x27536b3a950 <line:244:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x27536b3a9c8 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   `-ParmVarDecl 0x27536b3aa40 <line:245:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-FunctionTemplateDecl 0x27536b3b290 <line:252:2, line:255:54> line:253:3 unordered_map
| |-TemplateTypeParmDecl 0x27536b3ad60 <line:252:11, col:17> col:17 class depth 0 index 0 _Iter
| `-CXXConstructorDecl 0x27536b3b1e8 <line:253:3, line:255:54> line:253:3 unordered_map 'void (_Iter, _Iter, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
|   |-ParmVarDecl 0x27536b3ae00 <col:17, col:23> col:23 _First '_Iter'
|   |-ParmVarDecl 0x27536b3ae78 <col:31, col:37> col:37 _Last '_Iter'
|   |-ParmVarDecl 0x27536b3aef0 <line:254:4, col:14> col:14 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|   |-ParmVarDecl 0x27536b3af68 <col:24, col:38> col:38 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|   |-ParmVarDecl 0x27536b3afe0 <line:255:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|   `-ParmVarDecl 0x27536b3b058 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x27536b3b498 <line:262:2, line:266:3> line:262:17 used operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)'
| |-ParmVarDecl 0x27536b3b3d8 <col:27, col:48> col:48 used _Right 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
| `-CompoundStmt 0x27536f14c20 <line:263:3, line:266:3>
|   |-CXXMemberCallExpr 0x27536f14b38 <line:264:3, col:28> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue
|   | |-MemberExpr 0x27536f14af0 <col:3, col:20> '<bound member function type>' ->operator= 0x27536b05fa8
|   | | `-ImplicitCastExpr 0x27536f14b88 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|   | |   `-CXXThisExpr 0x27536f14ae0 <col:3> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|   | `-ImplicitCastExpr 0x27536f14ba8 <col:22> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >' lvalue <DerivedToBase (_Hash)>
|   |   `-DeclRefExpr 0x27536f14ac0 <col:22> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue ParmVar 0x27536b3b3d8 '_Right' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|   `-ReturnStmt 0x27536f14c10 <line:265:3, col:16>
|     `-ParenExpr 0x27536f14bf0 <col:10, col:16> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue
|       `-UnaryOperator 0x27536f14bd8 <col:11, col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x27536f14bc8 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' this
|-CXXConstructorDecl 0x27536b3b668 <line:268:2, col:38> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)'
| `-ParmVarDecl 0x27536b3b588 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXConstructorDecl 0x27536b3b8e8 <line:273:2, col:65> col:2 unordered_map 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b3b738 <col:16, col:32> col:32 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
| `-ParmVarDecl 0x27536b3b7b0 <col:40, col:62> col:62 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x27536b3ba98 <line:278:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:278:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&)' noexcept-uninstantiated 0x2753695bd60
| `-ParmVarDecl 0x27536b3b9c0 <col:27, col:43> col:43 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &&'
|-CXXMethodDecl 0x27536b3bd58 <line:287:2, col:44> col:15 operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&)'
| `-ParmVarDecl 0x27536b3bc68 <col:26, col:37> col:37 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|-CXXMethodDecl 0x27536b3bef8 <line:292:2, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:306:50> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:292:7 swap 'void (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &)' noexcept-uninstantiated 0x2753695c160
| `-ParmVarDecl 0x27536b3be20 <col:12, col:27> col:27 _Right 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &'
|-UsingDecl 0x27536b3c040 <line:298:2, col:17> col:17 _Mybase::insert
|-UsingShadowDecl 0x27536b3c098 <col:17> col:17 implicit FunctionTemplate 0x27536b09398 'insert'
|-UsingShadowDecl 0x27536b3c0e8 <col:17> col:17 implicit FunctionTemplate 0x27536b09a58 'insert'
|-UsingShadowDecl 0x27536b3c138 <col:17> col:17 implicit FunctionTemplate 0x27536b0a0c8 'insert'
|-UsingShadowDecl 0x27536b3c188 <col:17> col:17 implicit FunctionTemplate 0x27536b0a6e8 'insert'
|-UsingShadowDecl 0x27536b3c1d8 <col:17> col:17 implicit CXXMethod 0x27536b0a928 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &)'
|-UsingShadowDecl 0x27536b3c228 <col:17> col:17 implicit CXXMethod 0x27536b0ab48 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type &&)'
|-UsingShadowDecl 0x27536b3c278 <col:17> col:17 implicit FunctionTemplate 0x27536b0ae98 'insert'
|-UsingShadowDecl 0x27536b3c2c8 <col:17> col:17 implicit CXXMethod 0x27536b0b0c8 'insert' 'void (initializer_list<std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::value_type>)'
|-UsingShadowDecl 0x27536b3c318 <col:17> col:17 implicit CXXMethod 0x27536b0e2c8 'insert' 'auto (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-UsingShadowDecl 0x27536b3c368 <col:17> col:17 implicit CXXMethod 0x27536b0e518 'insert' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator (std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::const_iterator, std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::node_type &&)'
|-FunctionTemplateDecl 0x27536b3ca98 <line:300:2, line:302:31> col:11 insert
| |-TemplateTypeParmDecl 0x27536b3c3b8 <line:300:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x27536b3c438 <line:301:3, <scratch space>:333:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:301:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x27536b3c9f8 <line:302:3, col:31> col:11 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Valty &&)'
|   `-ParmVarDecl 0x27536b3c908 <col:18, col:27> col:27 _Val '_Valty &&'
|-FunctionTemplateDecl 0x27536b3d2b0 <line:307:2, line:309:55> col:12 insert
| |-TemplateTypeParmDecl 0x27536b3cb78 <line:307:11, col:17> col:17 class depth 0 index 0 _Valty
| |-TemplateTypeParmDecl 0x27536b3cbf8 <line:308:3, <scratch space>:335:1> C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:308:3 class depth 0 index 1
| | `-TemplateArgument type 'enable_if_t<is_constructible_v<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type, _Valty> >':'typename enable_if<is_constructible_v<value_type, _Valty>, void>::type'
| `-CXXMethodDecl 0x27536b3d1b8 <line:309:3, col:55> col:12 insert 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, _Valty &&)'
|   |-ParmVarDecl 0x27536b3d000 <col:19, col:34> col:34 _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   `-ParmVarDecl 0x27536b3d0a8 <col:42, col:51> col:51 _Val '_Valty &&'
|-FunctionTemplateDecl 0x27536b3d798 <line:314:2, line:317:26> line:316:11 _Try_emplace
| |-TemplateTypeParmDecl 0x27536b3d398 <line:314:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x27536b3d418 <line:315:3, col:12> col:12 class depth 0 index 1 ... _Mappedty
| |-CXXMethodDecl 0x27536b3d6f8 <line:316:3, line:317:26> line:316:11 _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&...)'
| | |-ParmVarDecl 0x27536b3d4f8 <col:24, col:33> col:33 _Keyval '_Keyty &&'
| | `-ParmVarDecl 0x27536b3d5e0 <line:317:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x275370c1e58 <line:316:3, line:327:3> line:316:11 used _Try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const alt::String &)'
|   |-TemplateArgument type 'const alt::String &'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x275370c1d98 <col:24, col:33> col:33 used _Keyval 'const alt::String &'
|   `-CompoundStmt 0x27537110b30 <line:318:3, line:327:3>
|     |-DeclStmt 0x275370c2be8 <line:319:3, col:43>
|     | `-VarDecl 0x275370c2a20 <col:3, col:42> col:12 used _Where 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' cinit
|     |   `-CXXMemberCallExpr 0x275370c2ba0 <col:21, col:42> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|     |     |-MemberExpr 0x275370c2b58 <col:21, col:30> '<bound member function type>' ->find 0x27536b0c018
|     |     | `-ImplicitCastExpr 0x275370c2bc8 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|     |     |   `-CXXThisExpr 0x275370c2b48 <col:21> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|     |     `-DeclRefExpr 0x275370c2b28 <col:35> 'const alt::String' lvalue ParmVar 0x275370c1d98 '_Keyval' 'const alt::String &'
|     `-IfStmt 0x27537110b08 <line:320:3, line:326:34> has_else
|       |-ExprWithCleanups 0x275370c4180 <line:320:7, col:30> 'bool'
|       | `-CXXOperatorCallExpr 0x275370c4148 <col:7, col:30> 'bool'
|       |   |-ImplicitCastExpr 0x275370c4130 <col:14> 'bool (*)(const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x275370c4110 <col:14> 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const' lvalue CXXMethod 0x27536f56158 'operator==' 'bool (const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &) const'
|       |   |-ImplicitCastExpr 0x275370c40f0 <col:7> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <UncheckedDerivedToBase (_List_const_iterator)>
|       |   | `-DeclRefExpr 0x275370c2d40 <col:7> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x275370c2a20 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |   `-ImplicitCastExpr 0x275370c40d0 <col:17, col:30> 'const std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue <DerivedToBase (_List_const_iterator)>
|       |     `-MaterializeTemporaryExpr 0x275370c40b8 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue
|       |       `-ImplicitCastExpr 0x275370c40a0 <col:17, col:30> 'const std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' <NoOp>
|       |         `-CXXMemberCallExpr 0x275370c2e68 <col:17, col:30> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|       |           `-MemberExpr 0x275370c2e20 <col:17, col:26> '<bound member function type>' ->end 0x27536b06338
|       |             `-ImplicitCastExpr 0x275370c2e88 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |               `-CXXThisExpr 0x275370c2e10 <col:17> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |-ReturnStmt 0x27537106dd0 <line:321:4, line:324:64>
|       | `-ExprWithCleanups 0x27537106db8 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |   `-ParenExpr 0x27537106d98 <line:321:11, line:324:64> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |     `-CXXMemberCallExpr 0x27537106d10 <line:321:12, line:324:63> 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|       |       |-MemberExpr 0x27537106cc8 <line:321:12, col:21> '<bound member function type>' ->emplace 0x27537106ba8
|       |       | `-ImplicitCastExpr 0x27537106d48 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Mybase *' <UncheckedDerivedToBase (_Hash)>
|       |       |   `-CXXThisExpr 0x27537106cb8 <col:12> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|       |       |-DeclRefExpr 0x275370c24e0 <line:322:5> 'const std::piecewise_construct_t' lvalue Var 0x27535cef230 'piecewise_construct' 'const std::piecewise_construct_t'
|       |       |-MaterializeTemporaryExpr 0x27537106d68 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>' xvalue
|       |       | `-CallExpr 0x27537106320 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:56> 'tuple<const alt::String &>':'std::tuple<const alt::String &>'
|       |       |   |-ImplicitCastExpr 0x27537106308 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (*)(const alt::String &) noexcept' <FunctionToPointerDecay>
|       |       |   | `-DeclRefExpr 0x275370c5960 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:10> 'tuple<const alt::String &> (const alt::String &) noexcept' lvalue Function 0x275370c5820 'forward_as_tuple' 'tuple<const alt::String &> (const alt::String &) noexcept' (FunctionTemplate 0x2753661cd80 'forward_as_tuple')
|       |       |   `-CallExpr 0x275370c5410 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:55> 'const alt::String' lvalue
|       |       |     |-ImplicitCastExpr 0x275370c53f8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(*)(remove_reference_t<const alt::String &> &) noexcept' <FunctionToPointerDecay>
|       |       |     | `-DeclRefExpr 0x275370c5278 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:323:46> 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' lvalue Function 0x275370c4df0 'forward' 'const alt::String &(remove_reference_t<const alt::String &> &) noexcept' (FunctionTemplate 0x27535af3ef0 'forward')
|       |       |     `-DeclRefExpr 0x275370c4348 <col:48> 'const alt::String' lvalue ParmVar 0x275370c1d98 '_Keyval' 'const alt::String &'
|       |       `-MaterializeTemporaryExpr 0x27537106d80 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>' xvalue
|       |         `-CallExpr 0x27537106740 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:62> 'tuple<>':'std::tuple<>'
|       |           `-ImplicitCastExpr 0x27537106728 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> (*)() noexcept' <FunctionToPointerDecay>
|       |             `-DeclRefExpr 0x275371065c0 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:800:14, C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:324:10> 'tuple<> () noexcept' lvalue Function 0x27537106488 'forward_as_tuple' 'tuple<> () noexcept' (FunctionTemplate 0x2753661cd80 'forward_as_tuple')
|       `-ReturnStmt 0x27537110af8 <line:326:4, col:34>
|         `-ExprWithCleanups 0x27537110ae0 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           `-ParenExpr 0x27537110ac0 <col:11, col:34> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|             `-CXXTemporaryObjectExpr 0x27537110a80 <col:12, col:33> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' 'void (std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &, bool &&) noexcept(is_nothrow_constructible_v<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > > &> && is_nothrow_constructible_v<bool, bool>)'
|               |-DeclRefExpr 0x27537106df0 <col:20> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' lvalue Var 0x275370c2a20 '_Where' 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|               `-MaterializeTemporaryExpr 0x2753710e938 <col:28> 'bool' xvalue
|                 `-CXXBoolLiteralExpr 0x275370c2958 <col:28> 'bool' false
|-FunctionTemplateDecl 0x27536b3dbe8 <line:329:2, line:331:26> line:330:11 try_emplace
| |-TemplateTypeParmDecl 0x27536b3d880 <line:329:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| |-CXXMethodDecl 0x27536b3db48 <line:330:3, line:331:26> line:330:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
| | |-ParmVarDecl 0x27536b3d948 <col:23, col:39> col:39 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| | `-ParmVarDecl 0x27536b3da30 <line:331:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
| `-CXXMethodDecl 0x275370c16b8 <line:330:3, line:334:3> line:330:11 used try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
|   |-TemplateArgument pack
|   |-ParmVarDecl 0x275370c15c8 <col:23, col:39> col:39 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-CompoundStmt 0x275370c2020 <line:332:3, line:334:3>
|     `-ReturnStmt 0x275370c2010 <line:333:3, col:69>
|       `-ParenExpr 0x275370c1ff0 <col:10, col:69> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|         `-CXXMemberCallExpr 0x275370c1fc8 <col:11, col:68> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|           |-MemberExpr 0x275370c1f80 <col:11> '<bound member function type>' ->_Try_emplace 0x275370c1e58
|           | `-CXXThisExpr 0x275370c1f70 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|           `-DeclRefExpr 0x275370c1cb8 <col:24> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x275370c15c8 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-FunctionTemplateDecl 0x27536b3e098 <line:336:2, line:338:26> line:337:12 try_emplace
| |-TemplateTypeParmDecl 0x27536b3dcd0 <line:336:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x27536b3dff8 <line:337:3, line:338:26> line:337:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&...)'
|   |-ParmVarDecl 0x27536b3dd70 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x27536b3dde8 <col:40, col:56> col:56 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x27536b3ded0 <line:338:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x27536b3e4d8 <line:344:2, line:346:26> line:345:11 try_emplace
| |-TemplateTypeParmDecl 0x27536b3e188 <line:344:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x27536b3e438 <line:345:3, line:346:26> line:345:11 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x27536b3e230 <col:23, col:34> col:34 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x27536b3e320 <line:346:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x27536b3e988 <line:352:2, line:354:26> line:353:12 try_emplace
| |-TemplateTypeParmDecl 0x27536b3e5c0 <line:352:11, col:20> col:20 class depth 0 index 0 ... _Mappedty
| `-CXXMethodDecl 0x27536b3e8e8 <line:353:3, line:354:26> line:353:12 try_emplace 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&...)'
|   |-ParmVarDecl 0x27536b3e660 <col:24> col:38 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x27536b3e6d8 <col:40, col:51> col:51 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x27536b3e7c0 <line:354:4, col:19> col:19 _Mapval '_Mappedty &&...' pack
|-FunctionTemplateDecl 0x27536b3ee28 <line:360:2, line:363:23> line:362:11 _Insert_or_assign
| |-TemplateTypeParmDecl 0x27536b3ea78 <line:360:11, col:17> col:17 class depth 0 index 0 _Keyty
| |-TemplateTypeParmDecl 0x27536b3eaf8 <line:361:3, col:9> col:9 class depth 0 index 1 _Mappedty
| `-CXXMethodDecl 0x27536b3ed88 <line:362:3, line:363:23> line:362:11 _Insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (_Keyty &&, _Mappedty &&)'
|   |-ParmVarDecl 0x27536b3ebd8 <col:29, col:38> col:38 _Keyval '_Keyty &&'
|   `-ParmVarDecl 0x27536b3ec78 <line:363:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x27536b3f208 <line:377:2, line:379:23> line:378:11 insert_or_assign
| |-TemplateTypeParmDecl 0x27536b3ef10 <line:377:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x27536b3f168 <line:378:3, line:379:23> line:378:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x27536b3efb0 <col:28, col:44> col:44 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x27536b3f058 <line:379:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x27536b3f668 <line:385:2, line:387:23> line:386:12 insert_or_assign
| |-TemplateTypeParmDecl 0x27536b3f2f0 <line:385:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x27536b3f5c8 <line:386:3, line:387:23> line:386:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &, _Mappedty &&)'
|   |-ParmVarDecl 0x27536b3f390 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x27536b3f408 <col:45, col:61> col:61 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|   `-ParmVarDecl 0x27536b3f4a8 <line:387:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x27536b3fa58 <line:393:2, line:395:23> line:394:11 insert_or_assign
| |-TemplateTypeParmDecl 0x27536b3f758 <line:393:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x27536b3f9b8 <line:394:3, line:395:23> line:394:11 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x27536b3f800 <col:28, col:39> col:39 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x27536b3f8a8 <line:395:4, col:16> col:16 _Mapval '_Mappedty &&'
|-FunctionTemplateDecl 0x27536b3feb8 <line:401:2, line:403:23> line:402:12 insert_or_assign
| |-TemplateTypeParmDecl 0x27536b3fb40 <line:401:11, col:17> col:17 class depth 0 index 0 _Mappedty
| `-CXXMethodDecl 0x27536b3fe18 <line:402:3, line:403:23> line:402:12 insert_or_assign 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::iterator (std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&, _Mappedty &&)'
|   |-ParmVarDecl 0x27536b3fbe0 <col:29> col:43 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::const_iterator':'std::_List_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >'
|   |-ParmVarDecl 0x27536b3fc58 <col:45, col:56> col:56 _Keyval 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &&'
|   `-ParmVarDecl 0x27536b3fcf8 <line:403:4, col:16> col:16 _Mapval '_Mappedty &&'
|-CXXConstructorDecl 0x27536b40118 <line:409:2, col:51> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x27536b40030 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXConstructorDecl 0x27536b403c8 <line:415:2, col:78> col:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b40260 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x27536b402d8 <col:53, col:75> col:75 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b406b8 <line:421:2, line:422:21> line:421:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type)'
| |-ParmVarDecl 0x27536b40510 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| `-ParmVarDecl 0x27536b40588 <line:422:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
|-CXXConstructorDecl 0x27536b40a38 <line:429:2, line:430:48> line:429:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b40800 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x27536b40878 <line:430:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x27536b408f0 <col:23, col:45> col:45 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b40dc8 <line:437:2, line:438:45> line:437:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &)'
| |-ParmVarDecl 0x27536b40b90 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x27536b40c08 <line:438:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| `-ParmVarDecl 0x27536b40c80 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
|-CXXConstructorDecl 0x27536b411e8 <line:445:2, line:446:72> line:445:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b40f20 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x27536b40f98 <line:446:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x27536b41010 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x27536b41088 <col:47, col:69> col:69 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXConstructorDecl 0x27536b41608 <line:453:2, line:455:27> line:453:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &)'
| |-ParmVarDecl 0x27536b41340 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x27536b413b8 <line:454:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x27536b41430 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| `-ParmVarDecl 0x27536b414a8 <line:455:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
|-CXXConstructorDecl 0x27536b41ab8 <line:462:2, line:464:54> line:462:2 unordered_map 'void (initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &, const std::equal_to<alt::String> &, const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &)'
| |-ParmVarDecl 0x27536b41760 <col:16, col:45> col:45 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
| |-ParmVarDecl 0x27536b417d8 <line:463:3, col:13> col:13 _Buckets 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::size_type':'unsigned long long'
| |-ParmVarDecl 0x27536b41850 <col:23, col:37> col:37 _Hasharg 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher &'
| |-ParmVarDecl 0x27536b418c8 <line:464:4, col:18> col:18 _Keyeqarg 'const std::equal_to<alt::String> &'
| `-ParmVarDecl 0x27536b41940 <col:29, col:51> col:51 _Al 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::allocator_type &'
|-CXXMethodDecl 0x27536b41d18 <line:471:2, col:62> col:17 operator= 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > &(initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>)'
| `-ParmVarDecl 0x27536b41c20 <col:27, col:56> col:56 _Ilist 'initializer_list<std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::value_type>':'std::initializer_list<std::pair<const alt::String, alt::MValue> >'
|-CXXMethodDecl 0x27536b41e48 <line:478:13, col:36> col:20 hash_function 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::hasher () const'
| `-WarnUnusedResultAttr 0x27536b41f28 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x27536b42008 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:483:13, col:32> col:23 key_eq 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_equal () const'
| `-WarnUnusedResultAttr 0x27536b420b8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x27536b421f8 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:488:2, line:491:3> line:488:15 used operator[] 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x27536b42108 <col:26, col:42> col:42 used _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-CompoundStmt 0x275370c19d8 <line:489:3, line:491:3>
|   `-ReturnStmt 0x275370c19c8 <line:490:3, col:45>
|     `-ExprWithCleanups 0x275370c19b0 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|       `-ParenExpr 0x275370c1990 <col:10, col:45> 'alt::MValue':'alt::MValue' lvalue
|         `-MemberExpr 0x275370c1960 <col:11, col:39> 'alt::MValue':'alt::MValue' lvalue ->second 0x27536f2ede8
|           `-CXXOperatorCallExpr 0x275370c1930 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer':'std::_Simple_types<std::pair<const alt::String, alt::MValue> >::value_type *'
|             |-ImplicitCastExpr 0x275370c1918 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer (*)() const' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x275370c1898 <col:37> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const' lvalue CXXMethod 0x27536f62d68 'operator->' 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >::pointer () const'
|             `-ImplicitCastExpr 0x275370c1880 <col:11, col:32> 'const std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue <NoOp>
|               `-MemberExpr 0x275370c1850 <col:11, col:32> 'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >':'std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >' xvalue .first 0x2753701ac00
|                 `-MaterializeTemporaryExpr 0x275370c1838 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>' xvalue
|                   `-CXXMemberCallExpr 0x275370c1810 <col:11, col:30> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::_Pairib':'std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<std::pair<const alt::String, alt::MValue> > > >, bool>'
|                     |-MemberExpr 0x275370c17c8 <col:11> '<bound member function type>' ->try_emplace 0x275370c16b8
|                     | `-CXXThisExpr 0x275370c17b8 <col:11> 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > > *' implicit this
|                     `-DeclRefExpr 0x275370c1580 <col:23> 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type':'const alt::String' lvalue ParmVar 0x27536b42108 '_Keyval' 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
|-CXXMethodDecl 0x27536b42350 <line:493:13, col:52> col:26 at 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &)'
| |-ParmVarDecl 0x27536b422c0 <col:29, col:45> col:45 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x27536b42408 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-CXXMethodDecl 0x27536b42578 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:501:13, col:60> col:32 at 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::mapped_type &(const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &) const'
| |-ParmVarDecl 0x27536b42488 <col:35, col:51> col:51 _Keyval 'const std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >::key_type &'
| `-WarnUnusedResultAttr 0x27536b42630 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\yvals_core.h:436:23> nodiscard
|-UsingDecl 0x27536b42690 <C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\unordered_map:509:2, col:17> col:17 _Mybase::_Unchecked_begin
|-UsingShadowDecl 0x27536b426e8 <col:17> col:17 implicit CXXMethod 0x27536b06588 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x27536b42738 <col:17> col:17 implicit CXXMethod 0x27536b066a8 '_Unchecked_begin' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
|-UsingDecl 0x27536b427a8 <line:510:2, col:17> col:17 _Mybase::_Unchecked_end
|-UsingShadowDecl 0x27536b42800 <col:17> col:17 implicit CXXMethod 0x27536b06778 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_iterator ()'
|-UsingShadowDecl 0x27536b42850 <col:17> col:17 implicit CXXMethod 0x27536b06848 '_Unchecked_end' 'std::_Hash<std::_Umap_traits<alt::String, alt::MValue, std::_Uhash_compare<alt::String, std::hash<alt::String>, std::equal_to<alt::String> >, std::allocator<std::pair<const alt::String, alt::MValue> >, false> >::_Unchecked_const_iterator () const'
`-CXXDestructorDecl 0x27536b45448 <line:94:8> col:8 implicit used ~unordered_map 'void () noexcept' inline default
  `-CompoundStmt 0x27536b45540 <col:8>

--- END OF NODE ---

TYPEDEF CLASS alt::MValue::TypeTag = alt::MValue::_TypeTag
ClassTemplateSpecializationDecl 0x27536a09b80 <D:\src\llvm-project\clang-tools-extra\altv-capi\cpp-sdk/events/../types/MValue.h:52:3, line:72:3> line:53:10 struct _TypeTag definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument pack
| |-TemplateArgument type 'void'
| |-TemplateArgument type 'bool'
| |-TemplateArgument type 'long long'
| |-TemplateArgument type 'unsigned long long'
| |-TemplateArgument type 'double'
| |-TemplateArgument type 'alt::String'
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| |-TemplateArgument type 'alt::IBaseObject *'
| `-TemplateArgument type 'alt::MValue::Function'
|-CXXRecordDecl 0x27536a0d368 prev 0x27536a09b80 <col:3, col:10> col:10 implicit struct _TypeTag
|-ClassTemplateDecl 0x27536a0d610 <line:55:4, line:56:11> col:11 _Type
| |-NonTypeTemplateParmDecl 0x27536a0d3f8 <line:55:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x27536a0d458 <col:27, col:33> col:33 class depth 0 index 1 _T
| |-TemplateTypeParmDecl 0x27536a0d4d8 <col:37, col:46> col:46 class depth 0 index 2 ... _Args
| `-CXXRecordDecl 0x27536a0d580 <line:56:4, col:11> col:11 struct _Type
|-TypeAliasTemplateDecl 0x27536a0e800 <line:61:4, line:62:58> col:4 Type
| |-NonTypeTemplateParmDecl 0x27536a0df20 <line:61:13, col:26> col:26 referenced 'MValue::Type':'alt::MValue::Type' depth 0 index 0 type
| `-TypeAliasDecl 0x27536a0e7a0 <line:62:4, col:58> col:10 Type 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type'
|   `-DependentNameType 0x27536a0e750 'typename _Type<(uint64_t)type, void, bool, long long, unsigned long long, double, String, Array<MValue>, unordered_map<String, MValue, hash<alt::String>, equal_to<String>, allocator<pair<const String, MValue> > >, IBaseObject *, Function>::Type' dependent
|-ClassTemplateDecl 0x27536a0eb08 <line:64:4, line:65:11> col:11 _TypeId
| |-NonTypeTemplateParmDecl 0x27536a0e868 <line:64:13, col:22> col:22 'uint64_t':'unsigned long long' depth 0 index 0 idx
| |-TemplateTypeParmDecl 0x27536a0e8c8 <col:27, col:33> col:33 class depth 0 index 1 U
| |-TemplateTypeParmDecl 0x27536a0e948 <col:36, col:42> col:42 class depth 0 index 2 _T
| |-TemplateTypeParmDecl 0x27536a0e9c8 <col:46, col:55> col:55 class depth 0 index 3 ... _Args
| |-CXXRecordDecl 0x27536a0ea78 <line:65:4, col:11> col:11 struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536ef6d88 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, bool, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536ef81b0 prev 0x27536ef6d88 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536ef7608 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536ef8060 prev 0x27536ef7608 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536ef80f0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536ef82d0 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536ef82b0 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536ef8288 <col:91> 'unsigned long long' 1
| |-ClassTemplateSpecializationDecl 0x27536ef9d58 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536efb530 prev 0x27536ef9d58 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536efa428 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536efb458 prev 0x27536efa428 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536efaa48 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536efb308 prev 0x27536efaa48 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536efb398 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536efb650 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536efb630 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536efb608 <col:91> 'unsigned long long' 2
| |-ClassTemplateSpecializationDecl 0x27536efcdf8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, unsigned long long, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536efeb60 prev 0x27536efcdf8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536efd4c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, unsigned long long, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536efea88 prev 0x27536efd4c8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536efdae8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, unsigned long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536efe9b0 prev 0x27536efdae8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536efe0b0 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536efe860 prev 0x27536efe0b0 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536efe8f0 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536efec80 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536efec60 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536efec38 <col:91> 'unsigned long long' 3
| |-ClassTemplateSpecializationDecl 0x27536f00428 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, double, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f02730 prev 0x27536f00428 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f00af8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, double, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f02658 prev 0x27536f00af8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f01118 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, double, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f02580 prev 0x27536f01118 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f016e0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, double, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f024a8 prev 0x27536f016e0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f01c58 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'double'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536f02358 prev 0x27536f01c58 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536f023e8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536f02850 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536f02830 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536f02808 <col:91> 'unsigned long long' 4
| |-ClassTemplateSpecializationDecl 0x27536f03ff8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::String, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f06860 prev 0x27536f03ff8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f046c8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::String, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f06788 prev 0x27536f046c8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f04ce8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::String, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f066b0 prev 0x27536f04ce8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f052b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::String, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f065d8 prev 0x27536f052b0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f05828 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::String, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f06500 prev 0x27536f05828 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f05d40 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536f063b0 prev 0x27536f05d40 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536f06440 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536f06980 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536f06960 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536f06938 <col:91> 'unsigned long long' 5
| |-ClassTemplateSpecializationDecl 0x27536f08218 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::Array<alt::MValue>, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f0afc8 prev 0x27536f08218 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f088e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::Array<alt::MValue>, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f0aef0 prev 0x27536f088e8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f08f08 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::Array<alt::MValue>, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f0ae18 prev 0x27536f08f08 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f094d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::Array<alt::MValue>, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f0ad40 prev 0x27536f094d0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f09a48 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::Array<alt::MValue>, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f0ac68 prev 0x27536f09a48 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f09f60 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::Array<alt::MValue>, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f0ab48 prev 0x27536f09f60 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f0a428 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536f0a9f8 prev 0x27536f0a428 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536f0aa88 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536f0b0e8 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536f0b0c8 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536f0b0a0 <col:91> 'unsigned long long' 6
| |-ClassTemplateSpecializationDecl 0x27536f0e6f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f11910 prev 0x27536f0e6f8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f0edc8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f11838 prev 0x27536f0edc8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f0f3e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f11760 prev 0x27536f0f3e8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f0f9b0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f11688 prev 0x27536f0f9b0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f0ff28 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f115b0 prev 0x27536f0ff28 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f10440 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f114d8 prev 0x27536f10440 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f10908 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x27536f11400 prev 0x27536f10908 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27536f10d70 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x27536f112b0 prev 0x27536f10d70 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x27536f11340 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x27536f11a30 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x27536f11a10 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x27536f119e8 <col:91> 'unsigned long long' 7
| |-ClassTemplateSpecializationDecl 0x275370976e8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::IBaseObject *, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709ad50 prev 0x275370976e8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27537097db8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::IBaseObject *, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709ac78 prev 0x27537097db8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x275370983d8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::IBaseObject *, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709aba0 prev 0x275370983d8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x275370989a0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::IBaseObject *, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709aac8 prev 0x275370989a0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27537098f18 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::IBaseObject *, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709a9f0 prev 0x27537098f18 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27537099430 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::IBaseObject *, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709a918 prev 0x27537099430 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x275370998f8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::IBaseObject *, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709a840 prev 0x275370998f8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x27537099d60 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::IBaseObject *, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709a768 prev 0x27537099d60 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709a178 <line:67:4, line:68:96> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | |-CXXRecordDecl 0x2753709a618 prev 0x2753709a178 <col:4, col:11> col:11 implicit struct _TypeId
| | `-VarDecl 0x2753709a6a8 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |   `-CStyleCastExpr 0x2753709ae70 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
| |     `-SubstNonTypeTemplateParmExpr 0x2753709ae50 <col:91> 'unsigned long long'
| |       `-IntegerLiteral 0x2753709ae28 <col:91> 'unsigned long long' 8
| |-ClassTemplateSpecializationDecl 0x2753709c618 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<0ULL + 1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<1, alt::MValue::Function, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 0
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'void'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'bool'
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x275370a00e0 prev 0x2753709c618 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709cce8 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<1ULL + 1, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<2, alt::MValue::Function, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 1
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'bool'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'long long'
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x275370a0008 prev 0x2753709cce8 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709d308 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<2ULL + 1, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<3, alt::MValue::Function, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 2
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'unsigned long long'
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709ff30 prev 0x2753709d308 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709d8d0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<3ULL + 1, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<4, alt::MValue::Function, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 3
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'unsigned long long'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'double'
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709fe58 prev 0x2753709d8d0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709de48 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<4ULL + 1, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<5, alt::MValue::Function, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 4
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'double'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::String'
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709fd80 prev 0x2753709de48 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709e3c0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<5ULL + 1, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<6, alt::MValue::Function, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 5
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::String'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709fca8 prev 0x2753709e3c0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709e888 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<6ULL + 1, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<7, alt::MValue::Function, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 6
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709fbd0 prev 0x2753709e888 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709ecf0 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<7ULL + 1, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<8, alt::MValue::Function, alt::IBaseObject *, alt::MValue::Function>'
| | |-TemplateArgument integral 7
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | |-TemplateArgument pack
| | | |-TemplateArgument type 'alt::IBaseObject *'
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709faf8 prev 0x2753709ecf0 <col:4, col:11> col:11 implicit struct _TypeId
| |-ClassTemplateSpecializationDecl 0x2753709f108 <line:64:4, line:65:11> col:11 struct _TypeId definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public '_TypeId<8ULL + 1, alt::MValue::Function, alt::MValue::Function>':'alt::MValue::_TypeTag<void, bool, long long, unsigned long long, double, alt::String, alt::Array<alt::MValue>, std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >, alt::IBaseObject *, alt::MValue::Function>::_TypeId<9, alt::MValue::Function, alt::MValue::Function>'
| | |-TemplateArgument integral 8
| | |-TemplateArgument type 'alt::MValue::Function'
| | |-TemplateArgument type 'alt::IBaseObject *'
| | |-TemplateArgument pack
| | | `-TemplateArgument type 'alt::MValue::Function'
| | `-CXXRecordDecl 0x2753709fa20 prev 0x2753709f108 <col:4, col:11> col:11 implicit struct _TypeId
| `-ClassTemplateSpecializationDecl 0x2753709f4c0 <line:67:4, line:68:96> col:11 struct _TypeId definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-TemplateArgument integral 9
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument type 'alt::MValue::Function'
|   |-TemplateArgument pack
|   |-CXXRecordDecl 0x2753709f8d0 prev 0x2753709f4c0 <col:4, col:11> col:11 implicit struct _TypeId
|   `-VarDecl 0x2753709f960 <col:42, col:91> col:72 referenced Id 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|     `-CStyleCastExpr 0x275370a0200 <col:77, col:91> 'MValue::Type':'alt::MValue::Type' <IntegralCast>
|       `-SubstNonTypeTemplateParmExpr 0x275370a01e0 <col:91> 'unsigned long long'
|         `-IntegerLiteral 0x275370a01b8 <col:91> 'unsigned long long' 9
|-VarTemplateDecl 0x27536a0f638 <line:70:4, line:71:34> col:34 TypeId
| |-TemplateTypeParmDecl 0x27536a0f538 <line:70:13, col:19> col:19 class depth 0 index 0 U
| |-VarDecl 0x27536a0f5d0 <line:71:4, col:34> col:34 TypeId 'const MValue::Type':'const alt::MValue::Type' static constexpr
| |-VarTemplateSpecializationDecl 0x27536ef68c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'bool'
| | `-ImplicitCastExpr 0x27536ef8370 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536ef8340 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536ef80f0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27536ef9898 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'long long'
| | `-ImplicitCastExpr 0x27536efb6f0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536efb6c0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536efb398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27536efc938 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'unsigned long long'
| | `-ImplicitCastExpr 0x27536efed20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536efecf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536efe8f0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27536efff68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'double'
| | `-ImplicitCastExpr 0x27536f028f0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536f028c0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f023e8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27536f03b38 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::String'
| | `-ImplicitCastExpr 0x27536f06a20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536f069f0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f06440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27536f07d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::Array<alt::MValue>'
| | `-ImplicitCastExpr 0x27536f0b188 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536f0b158 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f0aa88 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27536f0e238 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| | `-ImplicitCastExpr 0x27536f11ad0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x27536f11aa0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f11340 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| |-VarTemplateSpecializationDecl 0x27537097228 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| | |-TemplateArgument type 'alt::IBaseObject *'
| | `-ImplicitCastExpr 0x2753709af10 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
| |   `-DeclRefExpr 0x2753709aee0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x2753709a6a8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
| `-VarTemplateSpecializationDecl 0x2753709c158 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
|   |-TemplateArgument type 'alt::MValue::Function'
|   `-ImplicitCastExpr 0x275370a02a0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|     `-DeclRefExpr 0x275370a0270 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x2753709f960 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536ef68c8 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'bool'
| `-ImplicitCastExpr 0x27536ef8370 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536ef8340 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536ef80f0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536ef9898 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'long long'
| `-ImplicitCastExpr 0x27536efb6f0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536efb6c0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536efb398 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536efc938 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'unsigned long long'
| `-ImplicitCastExpr 0x27536efed20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536efecf0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536efe8f0 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536efff68 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'double'
| `-ImplicitCastExpr 0x27536f028f0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536f028c0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f023e8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536f03b38 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::String'
| `-ImplicitCastExpr 0x27536f06a20 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536f069f0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f06440 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536f07d58 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::Array<alt::MValue>'
| `-ImplicitCastExpr 0x27536f0b188 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536f0b158 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f0aa88 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27536f0e238 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'std::unordered_map<alt::String, alt::MValue, std::hash<alt::String>, std::equal_to<alt::String>, std::allocator<std::pair<const alt::String, alt::MValue> > >'
| `-ImplicitCastExpr 0x27536f11ad0 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x27536f11aa0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x27536f11340 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
|-VarTemplateSpecializationDecl 0x27537097228 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
| |-TemplateArgument type 'alt::IBaseObject *'
| `-ImplicitCastExpr 0x2753709af10 <col:43, col:67> 'MValue::Type':'alt::MValue::Type' <LValueToRValue>
|   `-DeclRefExpr 0x2753709aee0 <col:43, col:67> 'const MValue::Type':'const alt::MValue::Type' lvalue Var 0x2753709a6a8 'Id' 'const MValue::Type':'const alt::MValue::Type' non_odr_use_constant
`-VarTemplateSpecializationDecl 0x2753709c158 <col:4, col:67> col:34 referenced TypeId 'const MValue::Type':'const alt::MValue::Type' static inline constexpr cinit
  |-TemplateArgument type 'alt::MValue::Function'
  `-ImplicitCastExpr 0x275370a02a0 <col:43, col